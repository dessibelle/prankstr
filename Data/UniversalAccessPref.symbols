UniversalAccessPref:
(__TEXT,__text) section
00000000000023e0	pushq	%rbp
00000000000023e1	movq	%rsp, %rbp
00000000000023e4	movq	0x330f5(%rip), %rdi     ## Objc class ref: AddRemoveBarCell
00000000000023eb	movq	0x31cce(%rip), %rsi     ## Objc selector ref: class
00000000000023f2	popq	%rbp
00000000000023f3	jmpq	*0x27007(%rip)          ## Objc message: +[AddRemoveBarCell class]
00000000000023f9	pushq	%rbp
00000000000023fa	movq	%rsp, %rbp
00000000000023fd	pushq	%r14
00000000000023ff	pushq	%rbx
0000000000002400	movl	%edx, %r14d
0000000000002403	movq	%rdi, %rbx
0000000000002406	movq	0x31cbb(%rip), %rsi     ## Objc selector ref: segmentCount
000000000000240d	callq	*0x26fed(%rip)          ## Objc message: -[%rdi segmentCount]
0000000000002413	testq	%rax, %rax
0000000000002416	js	0x2432
0000000000002418	movq	0x31cb1(%rip), %rsi     ## Objc selector ref: setEnabled:forSegment:
000000000000241f	movsbl	%r14b, %edx
0000000000002423	xorl	%ecx, %ecx
0000000000002425	movq	%rbx, %rdi
0000000000002428	popq	%rbx
0000000000002429	popq	%r14
000000000000242b	popq	%rbp
000000000000242c	jmpq	*0x26fce(%rip)          ## Objc message: -[%rdi setEnabled:forSegment:]
0000000000002432	popq	%rbx
0000000000002433	popq	%r14
0000000000002435	popq	%rbp
0000000000002436	retq
0000000000002437	pushq	%rbp
0000000000002438	movq	%rsp, %rbp
000000000000243b	pushq	%r14
000000000000243d	pushq	%rbx
000000000000243e	movl	%edx, %r14d
0000000000002441	movq	%rdi, %rbx
0000000000002444	movq	0x31c7d(%rip), %rsi     ## Objc selector ref: segmentCount
000000000000244b	callq	*0x26faf(%rip)          ## Objc message: -[%rdi segmentCount]
0000000000002451	testq	%rax, %rax
0000000000002454	jle	0x2473
0000000000002456	movq	0x31c73(%rip), %rsi     ## Objc selector ref: setEnabled:forSegment:
000000000000245d	movsbl	%r14b, %edx
0000000000002461	movl	$0x1, %ecx
0000000000002466	movq	%rbx, %rdi
0000000000002469	popq	%rbx
000000000000246a	popq	%r14
000000000000246c	popq	%rbp
000000000000246d	jmpq	*0x26f8d(%rip)          ## Objc message: -[%rdi setEnabled:forSegment:]
0000000000002473	popq	%rbx
0000000000002474	popq	%r14
0000000000002476	popq	%rbp
0000000000002477	retq
0000000000002478	pushq	%rbp
0000000000002479	movq	%rsp, %rbp
000000000000247c	pushq	%r14
000000000000247e	pushq	%rbx
000000000000247f	movl	%edx, %r14d
0000000000002482	movq	%rdi, %rbx
0000000000002485	movq	0x31c3c(%rip), %rsi     ## Objc selector ref: segmentCount
000000000000248c	callq	*0x26f6e(%rip)          ## Objc message: -[%rdi segmentCount]
0000000000002492	cmpq	$0x2, %rax
0000000000002496	jl	0x24b5
0000000000002498	movq	0x31c31(%rip), %rsi     ## Objc selector ref: setEnabled:forSegment:
000000000000249f	movsbl	%r14b, %edx
00000000000024a3	movl	$0x2, %ecx
00000000000024a8	movq	%rbx, %rdi
00000000000024ab	popq	%rbx
00000000000024ac	popq	%r14
00000000000024ae	popq	%rbp
00000000000024af	jmpq	*0x26f4b(%rip)          ## Objc message: -[%rdi setEnabled:forSegment:]
00000000000024b5	popq	%rbx
00000000000024b6	popq	%r14
00000000000024b8	popq	%rbp
00000000000024b9	retq
00000000000024ba	pushq	%rbp
00000000000024bb	movq	%rsp, %rbp
00000000000024be	movq	0x31c13(%rip), %rsi     ## Objc selector ref: isEnabledForSegment:
00000000000024c5	xorl	%edx, %edx
00000000000024c7	popq	%rbp
00000000000024c8	jmpq	*0x26f32(%rip)          ## Objc message: -[%rdi isEnabledForSegment:]
00000000000024ce	pushq	%rbp
00000000000024cf	movq	%rsp, %rbp
00000000000024d2	movq	0x31bff(%rip), %rsi     ## Objc selector ref: isEnabledForSegment:
00000000000024d9	movl	$0x1, %edx
00000000000024de	popq	%rbp
00000000000024df	jmpq	*0x26f1b(%rip)          ## Objc message: -[%rdi isEnabledForSegment:]
00000000000024e5	pushq	%rbp
00000000000024e6	movq	%rsp, %rbp
00000000000024e9	movq	0x31be8(%rip), %rsi     ## Objc selector ref: isEnabledForSegment:
00000000000024f0	movl	$0x2, %edx
00000000000024f5	popq	%rbp
00000000000024f6	jmpq	*0x26f04(%rip)          ## Objc message: -[%rdi isEnabledForSegment:]
00000000000024fc	pushq	%rbp
00000000000024fd	movq	%rsp, %rbp
0000000000002500	movq	0x31bd9(%rip), %rsi     ## Objc selector ref: selectedSegment
0000000000002507	callq	*0x26ef3(%rip)          ## Objc message: -[%rdi selectedSegment]
000000000000250d	testq	%rax, %rax
0000000000002510	sete	%al
0000000000002513	movzbl	%al, %eax
0000000000002516	popq	%rbp
0000000000002517	retq
0000000000002518	pushq	%rbp
0000000000002519	movq	%rsp, %rbp
000000000000251c	movq	0x31bbd(%rip), %rsi     ## Objc selector ref: selectedSegment
0000000000002523	callq	*0x26ed7(%rip)          ## Objc message: -[%rdi selectedSegment]
0000000000002529	cmpq	$0x1, %rax
000000000000252d	sete	%al
0000000000002530	movzbl	%al, %eax
0000000000002533	popq	%rbp
0000000000002534	retq
0000000000002535	pushq	%rbp
0000000000002536	movq	%rsp, %rbp
0000000000002539	movq	0x31ba0(%rip), %rsi     ## Objc selector ref: selectedSegment
0000000000002540	callq	*0x26eba(%rip)          ## Objc message: -[%rdi selectedSegment]
0000000000002546	cmpq	$0x2, %rax
000000000000254a	sete	%al
000000000000254d	movzbl	%al, %eax
0000000000002550	popq	%rbp
0000000000002551	retq
0000000000002552	pushq	%rbp
0000000000002553	movq	%rsp, %rbp
0000000000002556	pushq	%r15
0000000000002558	pushq	%r14
000000000000255a	pushq	%r13
000000000000255c	pushq	%r12
000000000000255e	pushq	%rbx
000000000000255f	subq	$0xf8, %rsp
0000000000002566	movq	%rdx, %rbx
0000000000002569	movq	0x26de8(%rip), %r14     ## literal pool symbol address: ___stack_chk_guard
0000000000002570	movq	(%r14), %rax
0000000000002573	movq	%rax, -0x30(%rbp)
0000000000002577	movq	%rdi, -0xc0(%rbp)
000000000000257e	movq	0x3318b(%rip), %rax     ## Objc class ref: AddRemoveBarCell
0000000000002585	movq	%rax, -0xb8(%rbp)
000000000000258c	movq	0x31b55(%rip), %rsi     ## Objc selector ref: accessibilityAttributeValue:
0000000000002593	leaq	-0xc0(%rbp), %rdi
000000000000259a	callq	0x1e88c                 ## Objc message: -[[%rdi super] accessibilityAttributeValue:]
000000000000259f	movq	%rax, %r15
00000000000025a2	movq	0x31b47(%rip), %rsi     ## Objc selector ref: isEqualToString:
00000000000025a9	leaq	0x27a80(%rip), %rdx     ## Objc cfstring ref: @"AXChildren"
00000000000025b0	movq	%rbx, %rdi
00000000000025b3	callq	*0x26e47(%rip)          ## Objc message: -[%rdi isEqualToString:]
00000000000025b9	testb	%al, %al
00000000000025bb	je	0x27d7
00000000000025c1	movq	0x32f20(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_NSArray
00000000000025c8	movq	0x31af1(%rip), %rsi     ## Objc selector ref: class
00000000000025cf	movq	0x26e2a(%rip), %r12     ## Objc message: +[NSArray class]
00000000000025d6	callq	*%r12
00000000000025d9	movq	0x31b18(%rip), %rsi     ## Objc selector ref: isKindOfClass:
00000000000025e0	movq	%r15, %rdi
00000000000025e3	movq	%rax, %rdx
00000000000025e6	callq	*%r12
00000000000025e9	testb	%al, %al
00000000000025eb	je	0x27d7
00000000000025f1	movq	0x31b08(%rip), %rsi     ## Objc selector ref: mutableCopyWithZone:
00000000000025f8	xorl	%edx, %edx
00000000000025fa	movq	%r15, %rdi
00000000000025fd	callq	*%r12
0000000000002600	movq	0x31b01(%rip), %rsi     ## Objc selector ref: autorelease
0000000000002607	movq	%rax, %rdi
000000000000260a	callq	*%r12
000000000000260d	movq	%rax, %rbx
0000000000002610	xorps	%xmm0, %xmm0
0000000000002613	movaps	%xmm0, -0xd0(%rbp)
000000000000261a	movaps	%xmm0, -0xe0(%rbp)
0000000000002621	movaps	%xmm0, -0xf0(%rbp)
0000000000002628	movaps	%xmm0, -0x100(%rbp)
000000000000262f	movq	0x31ada(%rip), %rsi     ## Objc selector ref: countByEnumeratingWithState:objects:count:
0000000000002636	leaq	-0x100(%rbp), %rdx
000000000000263d	leaq	-0xb0(%rbp), %rcx
0000000000002644	movl	$0x10, %r8d
000000000000264a	movq	%r15, %rdi
000000000000264d	movq	%r15, -0x118(%rbp)
0000000000002654	callq	*%r12
0000000000002657	movq	%rax, -0x108(%rbp)
000000000000265e	testq	%rax, %rax
0000000000002661	je	0x27dc
0000000000002667	movq	%rbx, -0x120(%rbp)
000000000000266e	movq	-0xf0(%rbp), %rax
0000000000002675	movq	(%rax), %rax
0000000000002678	movq	%rax, -0x110(%rbp)
000000000000267f	leaq	0x279ca(%rip), %rbx     ## Objc cfstring ref: @"AXTitle"
0000000000002686	xorl	%r14d, %r14d
0000000000002689	movq	-0xf0(%rbp), %rax
0000000000002690	movq	-0x110(%rbp), %rcx
0000000000002697	cmpq	%rcx, (%rax)
000000000000269a	je	0x26a8
000000000000269c	movq	-0x118(%rbp), %rdi
00000000000026a3	callq	0x1e886                 ## symbol stub for: _objc_enumerationMutation
00000000000026a8	movq	-0xf8(%rbp), %rax
00000000000026af	movq	(%rax,%r14,8), %r13
00000000000026b3	movq	%r13, %rdi
00000000000026b6	movq	0x31a5b(%rip), %rsi     ## Objc selector ref: accessibilityAttributeNames
00000000000026bd	callq	*%r12
00000000000026c0	movq	%rax, %r15
00000000000026c3	movq	%r15, %rdi
00000000000026c6	movq	0x31a53(%rip), %rsi     ## Objc selector ref: containsObject:
00000000000026cd	movq	%rbx, %rdx
00000000000026d0	callq	*%r12
00000000000026d3	testb	%al, %al
00000000000026d5	movq	%rbx, %rdx
00000000000026d8	movl	$0x0, %r12d
00000000000026de	je	0x26f3
00000000000026e0	movq	%r13, %rdi
00000000000026e3	movq	0x319fe(%rip), %rsi     ## Objc selector ref: accessibilityAttributeValue:
00000000000026ea	callq	*0x26d10(%rip)          ## Objc message: -[%rdi accessibilityAttributeValue:]
00000000000026f0	movq	%rax, %r12
00000000000026f3	movq	%r15, %rdi
00000000000026f6	movq	0x31a23(%rip), %rsi     ## Objc selector ref: containsObject:
00000000000026fd	leaq	0x2796c(%rip), %rbx     ## Objc cfstring ref: @"AXDescription"
0000000000002704	movq	%rbx, %rdx
0000000000002707	callq	*0x26cf3(%rip)          ## Objc message: -[%rdi containsObject:]
000000000000270d	testb	%al, %al
000000000000270f	movl	$0x0, %r15d
0000000000002715	je	0x272d
0000000000002717	movq	%r13, %rdi
000000000000271a	movq	0x319c7(%rip), %rsi     ## Objc selector ref: accessibilityAttributeValue:
0000000000002721	movq	%rbx, %rdx
0000000000002724	callq	*0x26cd6(%rip)          ## Objc message: -[%rdi accessibilityAttributeValue:]
000000000000272a	movq	%rax, %r15
000000000000272d	movq	%r12, %rdi
0000000000002730	movq	0x319f1(%rip), %rsi     ## Objc selector ref: length
0000000000002737	callq	*0x26cc3(%rip)          ## Objc message: -[%rdi length]
000000000000273d	testq	%rax, %rax
0000000000002740	jne	0x276e
0000000000002742	movq	%r15, %rdi
0000000000002745	movq	0x319dc(%rip), %rsi     ## Objc selector ref: length
000000000000274c	callq	*0x26cae(%rip)          ## Objc message: -[%rdi length]
0000000000002752	testq	%rax, %rax
0000000000002755	jne	0x276e
0000000000002757	movq	-0x120(%rbp), %rdi
000000000000275e	movq	0x319cb(%rip), %rsi     ## Objc selector ref: removeObject:
0000000000002765	movq	%r13, %rdx
0000000000002768	callq	*0x26c92(%rip)          ## Objc message: -[%rdi removeObject:]
000000000000276e	incq	%r14
0000000000002771	cmpq	-0x108(%rbp), %r14
0000000000002778	movq	0x26c81(%rip), %rbx     ## Objc message: -[%rdi removeObject:]
000000000000277f	movq	%rbx, %r12
0000000000002782	leaq	0x278c7(%rip), %rbx     ## Objc cfstring ref: @"AXTitle"
0000000000002789	jb	0x2689
000000000000278f	movl	$0x10, %r8d
0000000000002795	movq	-0x118(%rbp), %rdi
000000000000279c	movq	0x3196d(%rip), %rsi     ## Objc selector ref: countByEnumeratingWithState:objects:count:
00000000000027a3	leaq	-0x100(%rbp), %rdx
00000000000027aa	leaq	-0xb0(%rbp), %rcx
00000000000027b1	callq	*0x26c49(%rip)          ## Objc message: -[%rdi countByEnumeratingWithState:objects:count:]
00000000000027b7	movq	%rax, -0x108(%rbp)
00000000000027be	testq	%rax, %rax
00000000000027c1	jne	0x2686
00000000000027c7	movq	-0x120(%rbp), %rax
00000000000027ce	movq	0x26b83(%rip), %r14     ## literal pool symbol address: ___stack_chk_guard
00000000000027d5	jmp	0x27df
00000000000027d7	movq	%r15, %rax
00000000000027da	jmp	0x27df
00000000000027dc	movq	%rbx, %rax
00000000000027df	movq	(%r14), %rcx
00000000000027e2	cmpq	-0x30(%rbp), %rcx
00000000000027e6	jne	0x27fa
00000000000027e8	addq	$0xf8, %rsp
00000000000027ef	popq	%rbx
00000000000027f0	popq	%r12
00000000000027f2	popq	%r13
00000000000027f4	popq	%r14
00000000000027f6	popq	%r15
00000000000027f8	popq	%rbp
00000000000027f9	retq
00000000000027fa	callq	0x1e8b6                 ## symbol stub for: ___stack_chk_fail
__SystemHasTrackpad:
00000000000027ff	pushq	%rbp
0000000000002800	movq	%rsp, %rbp
0000000000002803	pushq	%r15
0000000000002805	pushq	%r14
0000000000002807	pushq	%r13
0000000000002809	pushq	%r12
000000000000280b	pushq	%rbx
000000000000280c	pushq	%rax
000000000000280d	movq	0x26bdc(%rip), %rax     ## literal pool symbol address: _kIOMasterPortDefault
0000000000002814	movl	(%rax), %ebx
0000000000002816	leaq	0x2437e(%rip), %rdi     ## literal pool for: "IOHIPointing"
000000000000281d	callq	0x1e4fc                 ## symbol stub for: _IOServiceMatching
0000000000002822	leaq	-0x2c(%rbp), %rdx
0000000000002826	movl	%ebx, %edi
0000000000002828	movq	%rax, %rsi
000000000000282b	callq	0x1e4f6                 ## symbol stub for: _IOServiceGetMatchingServices
0000000000002830	testl	%eax, %eax
0000000000002832	je	0x2838
0000000000002834	xorl	%ebx, %ebx
0000000000002836	jmp	0x28b6
0000000000002838	movl	-0x2c(%rbp), %edi
000000000000283b	callq	0x1e4e4                 ## symbol stub for: _IOIteratorNext
0000000000002840	movl	%eax, %r12d
0000000000002843	testl	%r12d, %r12d
0000000000002846	je	0x28a0
0000000000002848	leaq	0x27841(%rip), %r14     ## Objc cfstring ref: @"HIDPointerAccelerationType"
000000000000284f	leaq	0x2785a(%rip), %r15     ## Objc cfstring ref: @"HIDTrackpadAcceleration"
0000000000002856	xorl	%edx, %edx
0000000000002858	xorl	%ecx, %ecx
000000000000285a	movl	%r12d, %edi
000000000000285d	movq	%r14, %rsi
0000000000002860	callq	0x1e4f0                 ## symbol stub for: _IORegistryEntryCreateCFProperty
0000000000002865	movq	%rax, %rbx
0000000000002868	testq	%rbx, %rbx
000000000000286b	je	0x2888
000000000000286d	movq	%rbx, %rdi
0000000000002870	movq	%r15, %rsi
0000000000002873	callq	0x1e520                 ## symbol stub for: _CFEqual
0000000000002878	movb	%al, %r13b
000000000000287b	movq	%rbx, %rdi
000000000000287e	callq	0x1e562                 ## symbol stub for: _CFRelease
0000000000002883	testb	%r13b, %r13b
0000000000002886	jne	0x28a4
0000000000002888	movl	%r12d, %edi
000000000000288b	callq	0x1e4ea                 ## symbol stub for: _IOObjectRelease
0000000000002890	movl	-0x2c(%rbp), %edi
0000000000002893	callq	0x1e4e4                 ## symbol stub for: _IOIteratorNext
0000000000002898	movl	%eax, %r12d
000000000000289b	testl	%r12d, %r12d
000000000000289e	jne	0x2856
00000000000028a0	xorl	%ebx, %ebx
00000000000028a2	jmp	0x28ae
00000000000028a4	movl	%r12d, %edi
00000000000028a7	callq	0x1e4ea                 ## symbol stub for: _IOObjectRelease
00000000000028ac	movb	$0x1, %bl
00000000000028ae	movl	-0x2c(%rbp), %edi
00000000000028b1	callq	0x1e4ea                 ## symbol stub for: _IOObjectRelease
00000000000028b6	movzbl	%bl, %eax
00000000000028b9	addq	$0x8, %rsp
00000000000028bd	popq	%rbx
00000000000028be	popq	%r12
00000000000028c0	popq	%r13
00000000000028c2	popq	%r14
00000000000028c4	popq	%r15
00000000000028c6	popq	%rbp
00000000000028c7	retq
__SystemHasTouchMouse:
00000000000028c8	pushq	%rbp
00000000000028c9	movq	%rsp, %rbp
00000000000028cc	pushq	%rbx
00000000000028cd	pushq	%rax
00000000000028ce	movq	0x26b1b(%rip), %rax     ## literal pool symbol address: _kIOMasterPortDefault
00000000000028d5	movl	(%rax), %ebx
00000000000028d7	leaq	0x242fd(%rip), %rdi     ## literal pool for: "BNBMouseDevice"
00000000000028de	callq	0x1e4fc                 ## symbol stub for: _IOServiceMatching
00000000000028e3	leaq	-0xc(%rbp), %rdx
00000000000028e7	movl	%ebx, %edi
00000000000028e9	movq	%rax, %rsi
00000000000028ec	callq	0x1e4f6                 ## symbol stub for: _IOServiceGetMatchingServices
00000000000028f1	xorl	%ecx, %ecx
00000000000028f3	testl	%eax, %eax
00000000000028f5	jne	0x2905
00000000000028f7	movl	-0xc(%rbp), %edi
00000000000028fa	testl	%edi, %edi
00000000000028fc	je	0x2905
00000000000028fe	callq	0x1e4ea                 ## symbol stub for: _IOObjectRelease
0000000000002903	movb	$0x1, %cl
0000000000002905	movzbl	%cl, %eax
0000000000002908	addq	$0x8, %rsp
000000000000290c	popq	%rbx
000000000000290d	popq	%rbp
000000000000290e	retq
__GetPID:
000000000000290f	pushq	%rbp
0000000000002910	movq	%rsp, %rbp
0000000000002913	pushq	%r15
0000000000002915	pushq	%r14
0000000000002917	pushq	%r12
0000000000002919	pushq	%rbx
000000000000291a	movq	%rdi, %r14
000000000000291d	testq	%r14, %r14
0000000000002920	je	0x2983
0000000000002922	movq	0x2689f(%rip), %rax     ## literal pool symbol address: _UAPIDKey
0000000000002929	movq	(%rax), %rdi
000000000000292c	movq	0x268a5(%rip), %rax     ## literal pool symbol address: _UAPreferencesDomain
0000000000002933	movq	(%rax), %rsi
0000000000002936	movq	0x26a83(%rip), %rax     ## literal pool symbol address: _kCFPreferencesCurrentUser
000000000000293d	movq	(%rax), %rdx
0000000000002940	movq	0x26a71(%rip), %rax     ## literal pool symbol address: _kCFPreferencesCurrentHost
0000000000002947	movq	(%rax), %rcx
000000000000294a	callq	0x1e550                 ## symbol stub for: _CFPreferencesCopyValue
000000000000294f	movq	%rax, %r12
0000000000002952	testq	%r12, %r12
0000000000002955	je	0x2983
0000000000002957	movq	%r12, %rdi
000000000000295a	callq	0x1e526                 ## symbol stub for: _CFGetTypeID
000000000000295f	movq	%rax, %r15
0000000000002962	callq	0x1e53e                 ## symbol stub for: _CFNumberGetTypeID
0000000000002967	cmpq	%rax, %r15
000000000000296a	jne	0x2987
000000000000296c	movl	$0xe, %esi
0000000000002971	movq	%r12, %rdi
0000000000002974	movq	%r14, %rdx
0000000000002977	callq	0x1e544                 ## symbol stub for: _CFNumberGetValue
000000000000297c	testb	%al, %al
000000000000297e	setne	%bl
0000000000002981	jmp	0x2989
0000000000002983	xorl	%ebx, %ebx
0000000000002985	jmp	0x2991
0000000000002987	xorl	%ebx, %ebx
0000000000002989	movq	%r12, %rdi
000000000000298c	callq	0x1e562                 ## symbol stub for: _CFRelease
0000000000002991	movzbl	%bl, %eax
0000000000002994	popq	%rbx
0000000000002995	popq	%r12
0000000000002997	popq	%r14
0000000000002999	popq	%r15
000000000000299b	popq	%rbp
000000000000299c	retq
__RemovePID:
000000000000299d	pushq	%rbp
000000000000299e	movq	%rsp, %rbp
00000000000029a1	pushq	%r15
00000000000029a3	pushq	%r14
00000000000029a5	pushq	%rbx
00000000000029a6	pushq	%rax
00000000000029a7	movq	0x2681a(%rip), %rax     ## literal pool symbol address: _UAPIDKey
00000000000029ae	movq	(%rax), %rdi
00000000000029b1	movq	0x26820(%rip), %rax     ## literal pool symbol address: _UAPreferencesDomain
00000000000029b8	movq	(%rax), %r14
00000000000029bb	movq	0x269fe(%rip), %rax     ## literal pool symbol address: _kCFPreferencesCurrentUser
00000000000029c2	movq	(%rax), %r15
00000000000029c5	movq	0x269ec(%rip), %rax     ## literal pool symbol address: _kCFPreferencesCurrentHost
00000000000029cc	movq	(%rax), %rbx
00000000000029cf	xorl	%esi, %esi
00000000000029d1	movq	%r14, %rdx
00000000000029d4	movq	%r15, %rcx
00000000000029d7	movq	%rbx, %r8
00000000000029da	callq	0x1e556                 ## symbol stub for: _CFPreferencesSetValue
00000000000029df	movq	%r14, %rdi
00000000000029e2	movq	%r15, %rsi
00000000000029e5	movq	%rbx, %rdx
00000000000029e8	addq	$0x8, %rsp
00000000000029ec	popq	%rbx
00000000000029ed	popq	%r14
00000000000029ef	popq	%r15
00000000000029f1	popq	%rbp
00000000000029f2	jmp	0x1e55c                 ## symbol stub for: _CFPreferencesSynchronize
__SetPID:
00000000000029f7	pushq	%rbp
00000000000029f8	movq	%rsp, %rbp
00000000000029fb	pushq	%rbx
00000000000029fc	pushq	%rax
00000000000029fd	movq	%rdi, -0x10(%rbp)
0000000000002a01	testq	%rdi, %rdi
0000000000002a04	jle	0x2a5e
0000000000002a06	movq	0x26983(%rip), %rax     ## literal pool symbol address: _kCFAllocatorDefault
0000000000002a0d	movq	(%rax), %rdi
0000000000002a10	leaq	-0x10(%rbp), %rdx
0000000000002a14	movl	$0xe, %esi
0000000000002a19	callq	0x1e532                 ## symbol stub for: _CFNumberCreate
0000000000002a1e	movq	%rax, %rbx
0000000000002a21	testq	%rbx, %rbx
0000000000002a24	je	0x2a5e
0000000000002a26	movq	0x2679b(%rip), %rax     ## literal pool symbol address: _UAPIDKey
0000000000002a2d	movq	(%rax), %rdi
0000000000002a30	movq	0x267a1(%rip), %rax     ## literal pool symbol address: _UAPreferencesDomain
0000000000002a37	movq	(%rax), %rdx
0000000000002a3a	movq	0x2697f(%rip), %rax     ## literal pool symbol address: _kCFPreferencesCurrentUser
0000000000002a41	movq	(%rax), %rcx
0000000000002a44	movq	0x2696d(%rip), %rax     ## literal pool symbol address: _kCFPreferencesCurrentHost
0000000000002a4b	movq	(%rax), %r8
0000000000002a4e	movq	%rbx, %rsi
0000000000002a51	callq	0x1e556                 ## symbol stub for: _CFPreferencesSetValue
0000000000002a56	movq	%rbx, %rdi
0000000000002a59	callq	0x1e562                 ## symbol stub for: _CFRelease
0000000000002a5e	addq	$0x8, %rsp
0000000000002a62	popq	%rbx
0000000000002a63	popq	%rbp
0000000000002a64	retq
_copyPerHostValueForKey:
0000000000002a65	pushq	%rbp
0000000000002a66	movq	%rsp, %rbp
0000000000002a69	pushq	%r15
0000000000002a6b	pushq	%r14
0000000000002a6d	pushq	%rbx
0000000000002a6e	pushq	%rax
0000000000002a6f	movq	%rdi, %r14
0000000000002a72	movq	0x2692f(%rip), %rax     ## literal pool symbol address: _kCFPreferencesAnyApplication
0000000000002a79	movq	(%rax), %r15
0000000000002a7c	movq	0x2693d(%rip), %rax     ## literal pool symbol address: _kCFPreferencesCurrentUser
0000000000002a83	movq	(%rax), %rbx
0000000000002a86	movq	0x2692b(%rip), %rax     ## literal pool symbol address: _kCFPreferencesCurrentHost
0000000000002a8d	movq	(%rax), %rcx
0000000000002a90	movq	%r15, %rsi
0000000000002a93	movq	%rbx, %rdx
0000000000002a96	callq	0x1e550                 ## symbol stub for: _CFPreferencesCopyValue
0000000000002a9b	testq	%rax, %rax
0000000000002a9e	je	0x2aab
0000000000002aa0	addq	$0x8, %rsp
0000000000002aa4	popq	%rbx
0000000000002aa5	popq	%r14
0000000000002aa7	popq	%r15
0000000000002aa9	popq	%rbp
0000000000002aaa	retq
0000000000002aab	movq	0x268fe(%rip), %rax     ## literal pool symbol address: _kCFPreferencesAnyHost
0000000000002ab2	movq	(%rax), %rcx
0000000000002ab5	movq	%r14, %rdi
0000000000002ab8	movq	%r15, %rsi
0000000000002abb	movq	%rbx, %rdx
0000000000002abe	addq	$0x8, %rsp
0000000000002ac2	popq	%rbx
0000000000002ac3	popq	%r14
0000000000002ac5	popq	%r15
0000000000002ac7	popq	%rbp
0000000000002ac8	jmp	0x1e550                 ## symbol stub for: _CFPreferencesCopyValue
_perHostIntegerForKeyWithDefaultValue:
0000000000002acd	pushq	%rbp
0000000000002ace	movq	%rsp, %rbp
0000000000002ad1	pushq	%r15
0000000000002ad3	pushq	%r14
0000000000002ad5	pushq	%rbx
0000000000002ad6	pushq	%rax
0000000000002ad7	movq	%rsi, %rbx
0000000000002ada	callq	_copyPerHostValueForKey
0000000000002adf	movq	%rax, %r15
0000000000002ae2	movq	%rbx, -0x20(%rbp)
0000000000002ae6	testq	%r15, %r15
0000000000002ae9	je	0x2b97
0000000000002aef	movq	%r15, %rdi
0000000000002af2	callq	0x1e526                 ## symbol stub for: _CFGetTypeID
0000000000002af7	movq	%rax, %r14
0000000000002afa	callq	0x1e502                 ## symbol stub for: _CFBooleanGetTypeID
0000000000002aff	cmpq	%r14, %rax
0000000000002b02	jne	0x2b1a
0000000000002b04	movq	%r15, %rdi
0000000000002b07	callq	0x1e508                 ## symbol stub for: _CFBooleanGetValue
0000000000002b0c	testb	%al, %al
0000000000002b0e	setne	%al
0000000000002b11	movzbl	%al, %eax
0000000000002b14	movq	%rax, -0x20(%rbp)
0000000000002b18	jmp	0x2b8b
0000000000002b1a	callq	0x1e53e                 ## symbol stub for: _CFNumberGetTypeID
0000000000002b1f	cmpq	%r14, %rax
0000000000002b22	jne	0x2b57
0000000000002b24	leaq	-0x20(%rbp), %rdx
0000000000002b28	movl	$0x9, %esi
0000000000002b2d	movq	%r15, %rdi
0000000000002b30	callq	0x1e544                 ## symbol stub for: _CFNumberGetValue
0000000000002b35	testb	%al, %al
0000000000002b37	jne	0x2b8b
0000000000002b39	movq	%r15, %rdi
0000000000002b3c	callq	0x1e538                 ## symbol stub for: _CFNumberGetType
0000000000002b41	movq	%rax, %rcx
0000000000002b44	leaq	0x27585(%rip), %rdi     ## Objc cfstring ref: @"Lossy conversion from type %ld to kCFNumberIntType"
0000000000002b4b	xorl	%eax, %eax
0000000000002b4d	movq	%rcx, %rsi
0000000000002b50	callq	0x1e844                 ## symbol stub for: _NSLog
0000000000002b55	jmp	0x2b8b
0000000000002b57	callq	0x1e56e                 ## symbol stub for: _CFStringGetTypeID
0000000000002b5c	cmpq	%r14, %rax
0000000000002b5f	jne	0x2b77
0000000000002b61	movq	0x315d0(%rip), %rsi     ## Objc selector ref: integerValue
0000000000002b68	movq	%r15, %rdi
0000000000002b6b	callq	*0x2688f(%rip)          ## Objc message: -[%rdi integerValue]
0000000000002b71	movq	%rax, -0x20(%rbp)
0000000000002b75	jmp	0x2b8b
0000000000002b77	leaq	0x27572(%rip), %rdi     ## Objc cfstring ref: @"Value (%@) is not string or number. TypeID is %lu."
0000000000002b7e	xorl	%eax, %eax
0000000000002b80	movq	%r15, %rsi
0000000000002b83	movq	%r14, %rdx
0000000000002b86	callq	0x1e844                 ## symbol stub for: _NSLog
0000000000002b8b	movq	%r15, %rdi
0000000000002b8e	callq	0x1e562                 ## symbol stub for: _CFRelease
0000000000002b93	movq	-0x20(%rbp), %rbx
0000000000002b97	movq	%rbx, %rax
0000000000002b9a	addq	$0x8, %rsp
0000000000002b9e	popq	%rbx
0000000000002b9f	popq	%r14
0000000000002ba1	popq	%r15
0000000000002ba3	popq	%rbp
0000000000002ba4	retq
0000000000002ba5	pushq	%rbp
0000000000002ba6	movq	%rsp, %rbp
0000000000002ba9	pushq	%rbx
0000000000002baa	subq	$0x38, %rsp
0000000000002bae	movq	%rdi, -0x18(%rbp)
0000000000002bb2	movq	0x32b5f(%rip), %rax     ## Objc class ref: UAPCaptioningPreviewBottomBorderView
0000000000002bb9	movq	%rax, -0x10(%rbp)
0000000000002bbd	movq	0x3157c(%rip), %rsi     ## Objc selector ref: initWithFrame:
0000000000002bc4	movq	0x28(%rbp), %rax
0000000000002bc8	movq	%rax, 0x18(%rsp)
0000000000002bcd	movq	0x20(%rbp), %rax
0000000000002bd1	movq	%rax, 0x10(%rsp)
0000000000002bd6	movq	0x10(%rbp), %rax
0000000000002bda	movq	0x18(%rbp), %rcx
0000000000002bde	movq	%rcx, 0x8(%rsp)
0000000000002be3	movq	%rax, (%rsp)
0000000000002be7	leaq	-0x18(%rbp), %rdi
0000000000002beb	callq	0x1e88c                 ## Objc message: -[[%rdi super] initWithFrame:]
0000000000002bf0	movq	%rax, %rbx
0000000000002bf3	testq	%rbx, %rbx
0000000000002bf6	je	0x2c08
0000000000002bf8	movq	0x31549(%rip), %rsi     ## Objc selector ref: setup
0000000000002bff	movq	%rbx, %rdi
0000000000002c02	callq	*0x267f8(%rip)          ## Objc message: -[%rdi setup]
0000000000002c08	movq	%rbx, %rax
0000000000002c0b	addq	$0x38, %rsp
0000000000002c0f	popq	%rbx
0000000000002c10	popq	%rbp
0000000000002c11	retq
0000000000002c12	pushq	%rbp
0000000000002c13	movq	%rsp, %rbp
0000000000002c16	pushq	%rbx
0000000000002c17	subq	$0x18, %rsp
0000000000002c1b	movq	%rdi, %rbx
0000000000002c1e	movq	0x32ba3(%rip), %rax
0000000000002c25	movq	(%rbx,%rax), %rdi
0000000000002c29	movq	0x31520(%rip), %rsi     ## Objc selector ref: release
0000000000002c30	callq	*0x267ca(%rip)          ## Objc message: -[%rdi release]
0000000000002c36	movq	%rbx, -0x18(%rbp)
0000000000002c3a	movq	0x32ad7(%rip), %rax     ## Objc class ref: UAPCaptioningPreviewBottomBorderView
0000000000002c41	movq	%rax, -0x10(%rbp)
0000000000002c45	movq	0x3150c(%rip), %rsi     ## Objc selector ref: dealloc
0000000000002c4c	leaq	-0x18(%rbp), %rdi
0000000000002c50	callq	0x1e88c                 ## Objc message: -[[%rdi super] dealloc]
0000000000002c55	addq	$0x18, %rsp
0000000000002c59	popq	%rbx
0000000000002c5a	popq	%rbp
0000000000002c5b	retq
0000000000002c5c	pushq	%rbp
0000000000002c5d	movq	%rsp, %rbp
0000000000002c60	pushq	%r15
0000000000002c62	pushq	%r14
0000000000002c64	pushq	%r12
0000000000002c66	pushq	%rbx
0000000000002c67	movq	%rdi, %r14
0000000000002c6a	movq	0x3287f(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_NSColor
0000000000002c71	movq	0x314e8(%rip), %rsi     ## Objc selector ref: colorWithCalibratedRed:green:blue:alpha:
0000000000002c78	movq	0x26781(%rip), %r12     ## Objc message: +[NSColor colorWithCalibratedRed:green:blue:alpha:]
0000000000002c7f	movsd	0x25659(%rip), %xmm3
0000000000002c87	xorps	%xmm0, %xmm0
0000000000002c8a	xorps	%xmm1, %xmm1
0000000000002c8d	xorps	%xmm2, %xmm2
0000000000002c90	callq	*%r12
0000000000002c93	movq	%rax, %r15
0000000000002c96	movq	0x32853(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_NSColor
0000000000002c9d	movq	0x314bc(%rip), %rsi     ## Objc selector ref: colorWithCalibratedRed:green:blue:alpha:
0000000000002ca4	xorps	%xmm0, %xmm0
0000000000002ca7	xorps	%xmm1, %xmm1
0000000000002caa	xorps	%xmm2, %xmm2
0000000000002cad	xorps	%xmm3, %xmm3
0000000000002cb0	callq	*%r12
0000000000002cb3	movq	%rax, %rbx
0000000000002cb6	movq	0x3283b(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_NSGradient
0000000000002cbd	movq	0x314a4(%rip), %rsi     ## Objc selector ref: alloc
0000000000002cc4	callq	*%r12
0000000000002cc7	movq	0x314a2(%rip), %rsi     ## Objc selector ref: initWithStartingColor:endingColor:
0000000000002cce	movq	%rax, %rdi
0000000000002cd1	movq	%r15, %rdx
0000000000002cd4	movq	%rbx, %rcx
0000000000002cd7	callq	*%r12
0000000000002cda	movq	0x32ae7(%rip), %rdx
0000000000002ce1	movq	%rax, %rdi
0000000000002ce4	movq	%r14, %rsi
0000000000002ce7	popq	%rbx
0000000000002ce8	popq	%r12
0000000000002cea	popq	%r14
0000000000002cec	popq	%r15
0000000000002cee	popq	%rbp
0000000000002cef	jmp	0x1e868                 ## symbol stub for: _objc_assign_ivar
0000000000002cf4	pushq	%rbp
0000000000002cf5	movq	%rsp, %rbp
0000000000002cf8	pushq	%rbx
0000000000002cf9	subq	$0x48, %rsp
0000000000002cfd	movsd	0x10(%rbp), %xmm0
0000000000002d02	movsd	0x20(%rbp), %xmm1
0000000000002d07	movsd	%xmm0, -0x28(%rbp)
0000000000002d0c	movq	$0x0, -0x20(%rbp)
0000000000002d14	movsd	%xmm1, -0x18(%rbp)
0000000000002d19	movabsq	$0x3ff0000000000000, %rax ## imm = 0x3FF0000000000000
0000000000002d23	movq	%rax, -0x10(%rbp)
0000000000002d27	movq	0x3144a(%rip), %rsi     ## Objc selector ref: gradient
0000000000002d2e	movq	0x266cb(%rip), %rbx     ## Objc message: +[NSGradient gradient]
0000000000002d35	callq	*%rbx
0000000000002d37	movq	0x31442(%rip), %rsi     ## Objc selector ref: drawInRect:angle:
0000000000002d3e	movq	-0x10(%rbp), %rcx
0000000000002d42	movq	%rcx, 0x18(%rsp)
0000000000002d47	movq	-0x18(%rbp), %rcx
0000000000002d4b	movq	%rcx, 0x10(%rsp)
0000000000002d50	movq	-0x28(%rbp), %rcx
0000000000002d54	movq	-0x20(%rbp), %rdx
0000000000002d58	movq	%rdx, 0x8(%rsp)
0000000000002d5d	movq	%rcx, (%rsp)
0000000000002d61	movsd	0x2557f(%rip), %xmm0
0000000000002d69	movq	%rax, %rdi
0000000000002d6c	callq	*%rbx
0000000000002d6e	addq	$0x48, %rsp
0000000000002d72	popq	%rbx
0000000000002d73	popq	%rbp
0000000000002d74	retq
0000000000002d75	pushq	%rbp
0000000000002d76	movq	%rsp, %rbp
0000000000002d79	movq	0x32a48(%rip), %rax
0000000000002d80	movq	(%rdi,%rax), %rax
0000000000002d84	popq	%rbp
0000000000002d85	retq
0000000000002d86	pushq	%rbp
0000000000002d87	movq	%rsp, %rbp
0000000000002d8a	movq	%rdx, %rax
0000000000002d8d	movq	0x32a34(%rip), %rdx
0000000000002d94	xorl	%r8d, %r8d
0000000000002d97	xorl	%r9d, %r9d
0000000000002d9a	movq	%rax, %rcx
0000000000002d9d	popq	%rbp
0000000000002d9e	jmp	0x1e89e                 ## symbol stub for: _objc_setProperty
0000000000002da3	pushq	%rbp
0000000000002da4	movq	%rsp, %rbp
0000000000002da7	pushq	%r15
0000000000002da9	pushq	%r14
0000000000002dab	pushq	%r12
0000000000002dad	pushq	%rbx
0000000000002dae	movq	%rdx, %r14
0000000000002db1	movq	%rdi, %r15
0000000000002db4	movq	0x313cd(%rip), %rsi     ## Objc selector ref: nickname
0000000000002dbb	movq	0x2663e(%rip), %r12     ## Objc message: -[%rdi nickname]
0000000000002dc2	callq	*%r12
0000000000002dc5	movq	%rax, %rbx
0000000000002dc8	movq	0x313b9(%rip), %rsi     ## Objc selector ref: nickname
0000000000002dcf	movq	%r14, %rdi
0000000000002dd2	callq	*%r12
0000000000002dd5	movq	0x31314(%rip), %rsi     ## Objc selector ref: isEqualToString:
0000000000002ddc	movq	%rbx, %rdi
0000000000002ddf	movq	%rax, %rdx
0000000000002de2	callq	*%r12
0000000000002de5	testb	%al, %al
0000000000002de7	je	0x2e79
0000000000002ded	movq	0x3139c(%rip), %rsi     ## Objc selector ref: triggerType
0000000000002df4	movq	%r15, %rdi
0000000000002df7	callq	*%r12
0000000000002dfa	movq	%rax, %rbx
0000000000002dfd	movq	0x3138c(%rip), %rsi     ## Objc selector ref: triggerType
0000000000002e04	movq	%r14, %rdi
0000000000002e07	callq	*%r12
0000000000002e0a	movq	0x31387(%rip), %rsi     ## Objc selector ref: isEqualToNumber:
0000000000002e11	movq	%rbx, %rdi
0000000000002e14	movq	%rax, %rdx
0000000000002e17	callq	*%r12
0000000000002e1a	testb	%al, %al
0000000000002e1c	je	0x2e79
0000000000002e1e	movq	0x3137b(%rip), %rsi     ## Objc selector ref: deviceDisplayName
0000000000002e25	movq	%r15, %rdi
0000000000002e28	callq	*%r12
0000000000002e2b	movq	%rax, %rbx
0000000000002e2e	movq	0x3136b(%rip), %rsi     ## Objc selector ref: deviceDisplayName
0000000000002e35	movq	%r14, %rdi
0000000000002e38	callq	*%r12
0000000000002e3b	movq	0x312ae(%rip), %rsi     ## Objc selector ref: isEqualToString:
0000000000002e42	movq	%rbx, %rdi
0000000000002e45	movq	%rax, %rdx
0000000000002e48	callq	*%r12
0000000000002e4b	testb	%al, %al
0000000000002e4d	je	0x2e79
0000000000002e4f	movq	0x31352(%rip), %rsi     ## Objc selector ref: keyCode
0000000000002e56	movq	%r15, %rdi
0000000000002e59	callq	*%r12
0000000000002e5c	movw	%ax, %bx
0000000000002e5f	movq	0x31342(%rip), %rsi     ## Objc selector ref: keyCode
0000000000002e66	movq	%r14, %rdi
0000000000002e69	callq	*%r12
0000000000002e6c	movzwl	%bx, %ecx
0000000000002e6f	movzwl	%ax, %eax
0000000000002e72	cmpl	%eax, %ecx
0000000000002e74	sete	%al
0000000000002e77	jmp	0x2e7b
0000000000002e79	xorl	%eax, %eax
0000000000002e7b	movzbl	%al, %eax
0000000000002e7e	popq	%rbx
0000000000002e7f	popq	%r12
0000000000002e81	popq	%r14
0000000000002e83	popq	%r15
0000000000002e85	popq	%rbp
0000000000002e86	retq
0000000000002e87	pushq	%rbp
0000000000002e88	movq	%rsp, %rbp
0000000000002e8b	pushq	%r15
0000000000002e8d	pushq	%r14
0000000000002e8f	pushq	%rbx
0000000000002e90	pushq	%rax
0000000000002e91	movq	%rdi, %r14
0000000000002e94	movq	0x2642d(%rip), %rax     ## literal pool symbol address: _UASwitchNicknameKey
0000000000002e9b	movq	(%rax), %rdx
0000000000002e9e	movq	0x3130b(%rip), %rsi     ## Objc selector ref: valueForKey:
0000000000002ea5	movq	0x26554(%rip), %rbx     ## Objc message: -[%rdi valueForKey:]
0000000000002eac	callq	*%rbx
0000000000002eae	movq	%rax, %r15
0000000000002eb1	movq	0x31270(%rip), %rsi     ## Objc selector ref: length
0000000000002eb8	movq	%r15, %rdi
0000000000002ebb	callq	*%rbx
0000000000002ebd	movq	%rbx, %rcx
0000000000002ec0	testq	%rax, %rax
0000000000002ec3	jne	0x2f44
0000000000002ec5	movq	0x263f4(%rip), %rax     ## literal pool symbol address: _UASwitchNameLocalizedKeyKey
0000000000002ecc	movq	(%rax), %rdx
0000000000002ecf	movq	0x312da(%rip), %rsi     ## Objc selector ref: valueForKey:
0000000000002ed6	movq	%r14, %rdi
0000000000002ed9	movq	%rcx, %rbx
0000000000002edc	callq	*%rbx
0000000000002ede	movq	%rax, %r15
0000000000002ee1	movq	0x31240(%rip), %rsi     ## Objc selector ref: length
0000000000002ee8	movq	%r15, %rdi
0000000000002eeb	callq	*%rbx
0000000000002eed	movq	%rbx, %rcx
0000000000002ef0	testq	%rax, %rax
0000000000002ef3	je	0x2f44
0000000000002ef5	movq	0x32604(%rip), %r14     ## Objc class ref: _OBJC_CLASS_$_NSBundle
0000000000002efc	movq	0x32605(%rip), %rdi     ## Objc class ref: UniversalAccessPref
0000000000002f03	movq	0x311b6(%rip), %rsi     ## Objc selector ref: class
0000000000002f0a	movq	%rcx, %rbx
0000000000002f0d	callq	*%rbx
0000000000002f0f	movq	0x312a2(%rip), %rsi     ## Objc selector ref: bundleForClass:
0000000000002f16	movq	%r14, %rdi
0000000000002f19	movq	%rax, %rdx
0000000000002f1c	callq	*%rbx
0000000000002f1e	movq	0x3129b(%rip), %rsi     ## Objc selector ref: localizedStringForKey:value:table:
0000000000002f25	leaq	0x271e4(%rip), %rcx     ## Objc cfstring ref: @""
0000000000002f2c	xorl	%r8d, %r8d
0000000000002f2f	movq	%rax, %rdi
0000000000002f32	movq	%r15, %rdx
0000000000002f35	movq	%rbx, %rax
0000000000002f38	addq	$0x8, %rsp
0000000000002f3c	popq	%rbx
0000000000002f3d	popq	%r14
0000000000002f3f	popq	%r15
0000000000002f41	popq	%rbp
0000000000002f42	jmpq	*%rax
0000000000002f44	movq	%r15, %rax
0000000000002f47	addq	$0x8, %rsp
0000000000002f4b	popq	%rbx
0000000000002f4c	popq	%r14
0000000000002f4e	popq	%r15
0000000000002f50	popq	%rbp
0000000000002f51	retq
0000000000002f52	pushq	%rbp
0000000000002f53	movq	%rsp, %rbp
0000000000002f56	movq	0x2637b(%rip), %rax     ## literal pool symbol address: _UASwitchTriggerTypeKey
0000000000002f5d	movq	(%rax), %rdx
0000000000002f60	movq	0x31261(%rip), %rsi     ## Objc selector ref: objectForKey:
0000000000002f67	popq	%rbp
0000000000002f68	jmpq	*0x26492(%rip)          ## Objc message: +[UniversalAccessPref objectForKey:]
0000000000002f6e	pushq	%rbp
0000000000002f6f	movq	%rsp, %rbp
0000000000002f72	movq	0x2636f(%rip), %rax     ## literal pool symbol address: _UASwitchValueKey
0000000000002f79	movq	(%rax), %rdx
0000000000002f7c	movq	0x31245(%rip), %rsi     ## Objc selector ref: objectForKey:
0000000000002f83	popq	%rbp
0000000000002f84	jmpq	*0x26476(%rip)          ## Objc message: -[%rdi objectForKey:]
0000000000002f8a	pushq	%rbp
0000000000002f8b	movq	%rsp, %rbp
0000000000002f8e	pushq	%r15
0000000000002f90	pushq	%r14
0000000000002f92	pushq	%rbx
0000000000002f93	pushq	%rax
0000000000002f94	movq	%rdi, %rbx
0000000000002f97	movq	0x311f2(%rip), %rsi     ## Objc selector ref: triggerType
0000000000002f9e	movq	0x2645b(%rip), %r15     ## Objc message: -[%rdi triggerType]
0000000000002fa5	callq	*%r15
0000000000002fa8	movq	0x31221(%rip), %rsi     ## Objc selector ref: unsignedIntegerValue
0000000000002faf	movq	%rax, %rdi
0000000000002fb2	callq	*%r15
0000000000002fb5	movq	%rax, %r14
0000000000002fb8	movq	0x31219(%rip), %rsi     ## Objc selector ref: switchValue
0000000000002fbf	movq	%rbx, %rdi
0000000000002fc2	callq	*%r15
0000000000002fc5	cmpq	$0x2, %r14
0000000000002fc9	jne	0x2fe5
0000000000002fcb	movq	0x2631e(%rip), %rcx     ## literal pool symbol address: _UASwitchValueKeyCodeKey
0000000000002fd2	movq	(%rcx), %rdx
0000000000002fd5	movq	0x311ec(%rip), %rsi     ## Objc selector ref: objectForKey:
0000000000002fdc	movq	%rax, %rdi
0000000000002fdf	callq	*0x2641b(%rip)          ## Objc message: -[%rdi objectForKey:]
0000000000002fe5	movq	0x311f4(%rip), %rsi     ## Objc selector ref: unsignedShortValue
0000000000002fec	movq	%rax, %rdi
0000000000002fef	addq	$0x8, %rsp
0000000000002ff3	popq	%rbx
0000000000002ff4	popq	%r14
0000000000002ff6	popq	%r15
0000000000002ff8	popq	%rbp
0000000000002ff9	jmpq	*0x26401(%rip)          ## Objc message: -[%rdi unsignedShortValue]
0000000000002fff	pushq	%rbp
0000000000003000	movq	%rsp, %rbp
0000000000003003	pushq	%r14
0000000000003005	pushq	%rbx
0000000000003006	movq	%rdi, %r14
0000000000003009	movq	0x31180(%rip), %rsi     ## Objc selector ref: triggerType
0000000000003010	movq	0x263e9(%rip), %rbx     ## Objc message: -[%rdi triggerType]
0000000000003017	callq	*%rbx
0000000000003019	movq	0x311b0(%rip), %rsi     ## Objc selector ref: unsignedIntegerValue
0000000000003020	movq	%rax, %rdi
0000000000003023	callq	*%rbx
0000000000003025	movq	%rbx, %rcx
0000000000003028	cmpq	$0x2, %rax
000000000000302c	jne	0x3066
000000000000302e	movq	0x311a3(%rip), %rsi     ## Objc selector ref: switchValue
0000000000003035	movq	%r14, %rdi
0000000000003038	movq	%rcx, %rbx
000000000000303b	callq	*%rbx
000000000000303d	movq	0x262b4(%rip), %rcx     ## literal pool symbol address: _UASwitchValueModifiersKey
0000000000003044	movq	(%rcx), %rdx
0000000000003047	movq	0x3117a(%rip), %rsi     ## Objc selector ref: objectForKey:
000000000000304e	movq	%rax, %rdi
0000000000003051	callq	*%rbx
0000000000003053	movq	0x31176(%rip), %rsi     ## Objc selector ref: unsignedIntegerValue
000000000000305a	movq	%rax, %rdi
000000000000305d	movq	%rbx, %rax
0000000000003060	popq	%rbx
0000000000003061	popq	%r14
0000000000003063	popq	%rbp
0000000000003064	jmpq	*%rax
0000000000003066	xorl	%eax, %eax
0000000000003068	popq	%rbx
0000000000003069	popq	%r14
000000000000306b	popq	%rbp
000000000000306c	retq
000000000000306d	pushq	%rbp
000000000000306e	movq	%rsp, %rbp
0000000000003071	pushq	%r15
0000000000003073	pushq	%r14
0000000000003075	pushq	%r12
0000000000003077	pushq	%rbx
0000000000003078	movq	%rdi, %r15
000000000000307b	movq	0x26206(%rip), %rax     ## literal pool symbol address: _UASwitchHIDProductNameKey
0000000000003082	movq	(%rax), %rdx
0000000000003085	movq	0x3113c(%rip), %rsi     ## Objc selector ref: objectForKey:
000000000000308c	movq	0x2636d(%rip), %r12     ## Objc message: -[%rdi objectForKey:]
0000000000003093	callq	*%r12
0000000000003096	movq	%rax, %rbx
0000000000003099	movq	0x32470(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_NSCharacterSet
00000000000030a0	movq	0x31141(%rip), %rsi     ## Objc selector ref: controlCharacterSet
00000000000030a7	callq	*%r12
00000000000030aa	movq	0x3113f(%rip), %rsi     ## Objc selector ref: stringByTrimmingCharactersInSet:
00000000000030b1	movq	%rbx, %rdi
00000000000030b4	movq	%rax, %rdx
00000000000030b7	callq	*%r12
00000000000030ba	movq	%rax, %rbx
00000000000030bd	movq	0x3244c(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_NSCharacterSet
00000000000030c4	movq	0x3112d(%rip), %rsi     ## Objc selector ref: whitespaceAndNewlineCharacterSet
00000000000030cb	callq	*%r12
00000000000030ce	movq	0x3111b(%rip), %rsi     ## Objc selector ref: stringByTrimmingCharactersInSet:
00000000000030d5	movq	%rbx, %rdi
00000000000030d8	movq	%rax, %rdx
00000000000030db	callq	*%r12
00000000000030de	movq	%rax, %r14
00000000000030e1	movq	0x31040(%rip), %rsi     ## Objc selector ref: length
00000000000030e8	movq	%r14, %rdi
00000000000030eb	callq	*%r12
00000000000030ee	movq	%rax, %rcx
00000000000030f1	xorl	%eax, %eax
00000000000030f3	testq	%rcx, %rcx
00000000000030f6	je	0x3198
00000000000030fc	movq	0x26165(%rip), %rax     ## literal pool symbol address: _UASwitchHIDManufacturerKey
0000000000003103	movq	(%rax), %rdx
0000000000003106	movq	0x310bb(%rip), %rsi     ## Objc selector ref: objectForKey:
000000000000310d	movq	%r15, %rdi
0000000000003110	callq	*%r12
0000000000003113	movq	%rax, %rbx
0000000000003116	movq	0x323f3(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_NSCharacterSet
000000000000311d	movq	0x310c4(%rip), %rsi     ## Objc selector ref: controlCharacterSet
0000000000003124	callq	*%r12
0000000000003127	movq	0x310c2(%rip), %rsi     ## Objc selector ref: stringByTrimmingCharactersInSet:
000000000000312e	movq	%rbx, %rdi
0000000000003131	movq	%rax, %rdx
0000000000003134	callq	*%r12
0000000000003137	movq	%rax, %rbx
000000000000313a	movq	0x323cf(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_NSCharacterSet
0000000000003141	movq	0x310b0(%rip), %rsi     ## Objc selector ref: whitespaceAndNewlineCharacterSet
0000000000003148	callq	*%r12
000000000000314b	movq	0x3109e(%rip), %rsi     ## Objc selector ref: stringByTrimmingCharactersInSet:
0000000000003152	movq	%rbx, %rdi
0000000000003155	movq	%rax, %rdx
0000000000003158	callq	*%r12
000000000000315b	movq	%rax, %rbx
000000000000315e	movq	0x30fc3(%rip), %rsi     ## Objc selector ref: length
0000000000003165	movq	%rbx, %rdi
0000000000003168	callq	*%r12
000000000000316b	testq	%rax, %rax
000000000000316e	je	0x3195
0000000000003170	movq	0x323a1(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_NSString
0000000000003177	movq	0x31082(%rip), %rsi     ## Objc selector ref: stringWithFormat:
000000000000317e	leaq	0x26fab(%rip), %rdx     ## Objc cfstring ref: @"%@ - %@"
0000000000003185	xorl	%eax, %eax
0000000000003187	movq	%rbx, %rcx
000000000000318a	movq	%r14, %r8
000000000000318d	callq	*0x2626d(%rip)          ## Objc message: +[NSString stringWithFormat:]
0000000000003193	jmp	0x3198
0000000000003195	movq	%r14, %rax
0000000000003198	popq	%rbx
0000000000003199	popq	%r12
000000000000319b	popq	%r14
000000000000319d	popq	%r15
000000000000319f	popq	%rbp
00000000000031a0	retq
00000000000031a1	pushq	%rbp
00000000000031a2	movq	%rsp, %rbp
00000000000031a5	pushq	%r15
00000000000031a7	pushq	%r14
00000000000031a9	pushq	%r12
00000000000031ab	pushq	%rbx
00000000000031ac	movq	%rdi, %r12
00000000000031af	movq	0x30fda(%rip), %rsi     ## Objc selector ref: triggerType
00000000000031b6	movq	0x26243(%rip), %rbx     ## Objc message: -[%rdi triggerType]
00000000000031bd	callq	*%rbx
00000000000031bf	movq	0x3100a(%rip), %rsi     ## Objc selector ref: unsignedIntegerValue
00000000000031c6	movq	%rax, %rdi
00000000000031c9	callq	*%rbx
00000000000031cb	movq	%rbx, %rcx
00000000000031ce	cmpq	$0x3, %rax
00000000000031d2	je	0x3225
00000000000031d4	decq	%rax
00000000000031d7	cmpq	$0x1, %rax
00000000000031db	ja	0x3261
00000000000031e1	movq	0x32338(%rip), %r14     ## Objc class ref: UASwitchUtilities
00000000000031e8	movq	0x30fb9(%rip), %rsi     ## Objc selector ref: keyCode
00000000000031ef	movq	%r12, %rdi
00000000000031f2	movq	%rcx, %rbx
00000000000031f5	callq	*%rbx
00000000000031f7	movw	%ax, %r15w
00000000000031fb	movq	0x31006(%rip), %rsi     ## Objc selector ref: modifiers
0000000000003202	movq	%r12, %rdi
0000000000003205	callq	*%rbx
0000000000003207	movq	0x31002(%rip), %rsi     ## Objc selector ref: nameForKeyCombo:modifiers:
000000000000320e	movzwl	%r15w, %edx
0000000000003212	movq	%r14, %rdi
0000000000003215	movq	%rax, %rcx
0000000000003218	movq	%rbx, %rax
000000000000321b	popq	%rbx
000000000000321c	popq	%r12
000000000000321e	popq	%r14
0000000000003220	popq	%r15
0000000000003222	popq	%rbp
0000000000003223	jmpq	*%rax
0000000000003225	movq	0x322f4(%rip), %r14     ## Objc class ref: UASwitchUtilities
000000000000322c	movq	0x30fa5(%rip), %rsi     ## Objc selector ref: switchValue
0000000000003233	movq	%r12, %rdi
0000000000003236	movq	%rcx, %rbx
0000000000003239	callq	*%rbx
000000000000323b	movq	0x30ef6(%rip), %rsi     ## Objc selector ref: integerValue
0000000000003242	movq	%rax, %rdi
0000000000003245	callq	*%rbx
0000000000003247	movq	0x30fca(%rip), %rsi     ## Objc selector ref: nameForMouseButton:
000000000000324e	movq	%r14, %rdi
0000000000003251	movq	%rax, %rdx
0000000000003254	movq	%rbx, %rax
0000000000003257	popq	%rbx
0000000000003258	popq	%r12
000000000000325a	popq	%r14
000000000000325c	popq	%r15
000000000000325e	popq	%rbp
000000000000325f	jmpq	*%rax
0000000000003261	xorl	%eax, %eax
0000000000003263	popq	%rbx
0000000000003264	popq	%r12
0000000000003266	popq	%r14
0000000000003268	popq	%r15
000000000000326a	popq	%rbp
000000000000326b	retq
000000000000326c	pushq	%rbp
000000000000326d	movq	%rsp, %rbp
0000000000003270	movq	0x26059(%rip), %rax     ## literal pool symbol address: _UASwitchPressHoldOptionKey
0000000000003277	movq	(%rax), %rdx
000000000000327a	movq	0x30f47(%rip), %rsi     ## Objc selector ref: objectForKey:
0000000000003281	popq	%rbp
0000000000003282	jmpq	*0x26178(%rip)          ## Objc message: +[UASwitchUtilities objectForKey:]
0000000000003288	pushq	%rbp
0000000000003289	movq	%rsp, %rbp
000000000000328c	testq	%rdx, %rdx
000000000000328f	jne	0x329b
0000000000003291	movq	0x25fb0(%rip), %rax     ## literal pool symbol address: _UASwitchHIDFieldIsEmpty
0000000000003298	movq	(%rax), %rdx
000000000000329b	movq	0x25fbe(%rip), %rax     ## literal pool symbol address: _UASwitchHIDLocationIDKey
00000000000032a2	movq	(%rax), %rcx
00000000000032a5	movq	0x30f74(%rip), %rsi     ## Objc selector ref: setObject:forKey:
00000000000032ac	popq	%rbp
00000000000032ad	jmpq	*0x2614d(%rip)          ## Objc message: -[%rdi setObject:forKey:]
00000000000032b3	pushq	%rbp
00000000000032b4	movq	%rsp, %rbp
00000000000032b7	testq	%rdx, %rdx
00000000000032ba	jne	0x32c6
00000000000032bc	movq	0x25f85(%rip), %rax     ## literal pool symbol address: _UASwitchHIDFieldIsEmpty
00000000000032c3	movq	(%rax), %rdx
00000000000032c6	movq	0x25fe3(%rip), %rax     ## literal pool symbol address: _UASwitchHIDVendorIDKey
00000000000032cd	movq	(%rax), %rcx
00000000000032d0	movq	0x30f49(%rip), %rsi     ## Objc selector ref: setObject:forKey:
00000000000032d7	popq	%rbp
00000000000032d8	jmpq	*0x26122(%rip)          ## Objc message: -[%rdi setObject:forKey:]
00000000000032de	pushq	%rbp
00000000000032df	movq	%rsp, %rbp
00000000000032e2	testq	%rdx, %rdx
00000000000032e5	jne	0x32f1
00000000000032e7	movq	0x25f5a(%rip), %rax     ## literal pool symbol address: _UASwitchHIDFieldIsEmpty
00000000000032ee	movq	(%rax), %rdx
00000000000032f1	movq	0x25fc0(%rip), %rax     ## literal pool symbol address: _UASwitchHIDVendorIDSourceKey
00000000000032f8	movq	(%rax), %rcx
00000000000032fb	movq	0x30f1e(%rip), %rsi     ## Objc selector ref: setObject:forKey:
0000000000003302	popq	%rbp
0000000000003303	jmpq	*0x260f7(%rip)          ## Objc message: -[%rdi setObject:forKey:]
0000000000003309	pushq	%rbp
000000000000330a	movq	%rsp, %rbp
000000000000330d	testq	%rdx, %rdx
0000000000003310	jne	0x331c
0000000000003312	movq	0x25f2f(%rip), %rax     ## literal pool symbol address: _UASwitchHIDFieldIsEmpty
0000000000003319	movq	(%rax), %rdx
000000000000331c	movq	0x25f5d(%rip), %rax     ## literal pool symbol address: _UASwitchHIDProductIDKey
0000000000003323	movq	(%rax), %rcx
0000000000003326	movq	0x30ef3(%rip), %rsi     ## Objc selector ref: setObject:forKey:
000000000000332d	popq	%rbp
000000000000332e	jmpq	*0x260cc(%rip)          ## Objc message: -[%rdi setObject:forKey:]
0000000000003334	pushq	%rbp
0000000000003335	movq	%rsp, %rbp
0000000000003338	testq	%rdx, %rdx
000000000000333b	jne	0x3347
000000000000333d	movq	0x25f04(%rip), %rax     ## literal pool symbol address: _UASwitchHIDFieldIsEmpty
0000000000003344	movq	(%rax), %rdx
0000000000003347	movq	0x25f1a(%rip), %rax     ## literal pool symbol address: _UASwitchHIDManufacturerKey
000000000000334e	movq	(%rax), %rcx
0000000000003351	movq	0x30ec8(%rip), %rsi     ## Objc selector ref: setObject:forKey:
0000000000003358	popq	%rbp
0000000000003359	jmpq	*0x260a1(%rip)          ## Objc message: -[%rdi setObject:forKey:]
000000000000335f	pushq	%rbp
0000000000003360	movq	%rsp, %rbp
0000000000003363	testq	%rdx, %rdx
0000000000003366	jne	0x3372
0000000000003368	movq	0x25ed9(%rip), %rax     ## literal pool symbol address: _UASwitchHIDFieldIsEmpty
000000000000336f	movq	(%rax), %rdx
0000000000003372	movq	0x25f17(%rip), %rax     ## literal pool symbol address: _UASwitchHIDSerialNumberKey
0000000000003379	movq	(%rax), %rcx
000000000000337c	movq	0x30e9d(%rip), %rsi     ## Objc selector ref: setObject:forKey:
0000000000003383	popq	%rbp
0000000000003384	jmpq	*0x26076(%rip)          ## Objc message: -[%rdi setObject:forKey:]
000000000000338a	pushq	%rbp
000000000000338b	movq	%rsp, %rbp
000000000000338e	testq	%rdx, %rdx
0000000000003391	jne	0x339d
0000000000003393	movq	0x25eae(%rip), %rax     ## literal pool symbol address: _UASwitchHIDFieldIsEmpty
000000000000339a	movq	(%rax), %rdx
000000000000339d	movq	0x25ee4(%rip), %rax     ## literal pool symbol address: _UASwitchHIDProductNameKey
00000000000033a4	movq	(%rax), %rcx
00000000000033a7	movq	0x30e72(%rip), %rsi     ## Objc selector ref: setObject:forKey:
00000000000033ae	popq	%rbp
00000000000033af	jmpq	*0x2604b(%rip)          ## Objc message: -[%rdi setObject:forKey:]
00000000000033b5	pushq	%rbp
00000000000033b6	movq	%rsp, %rbp
00000000000033b9	testq	%rdx, %rdx
00000000000033bc	jne	0x33c8
00000000000033be	movq	0x25e83(%rip), %rax     ## literal pool symbol address: _UASwitchHIDFieldIsEmpty
00000000000033c5	movq	(%rax), %rdx
00000000000033c8	movq	0x25ed9(%rip), %rax     ## literal pool symbol address: _UASwitchHIDTransportKey
00000000000033cf	movq	(%rax), %rcx
00000000000033d2	movq	0x30e47(%rip), %rsi     ## Objc selector ref: setObject:forKey:
00000000000033d9	popq	%rbp
00000000000033da	jmpq	*0x26020(%rip)          ## Objc message: -[%rdi setObject:forKey:]
00000000000033e0	pushq	%rbp
00000000000033e1	movq	%rsp, %rbp
00000000000033e4	testq	%rdx, %rdx
00000000000033e7	jne	0x33f3
00000000000033e9	movq	0x25e58(%rip), %rax     ## literal pool symbol address: _UASwitchHIDFieldIsEmpty
00000000000033f0	movq	(%rax), %rdx
00000000000033f3	movq	0x25e46(%rip), %rax     ## literal pool symbol address: _UASwitchHIDBuiltInKey
00000000000033fa	movq	(%rax), %rcx
00000000000033fd	movq	0x30e1c(%rip), %rsi     ## Objc selector ref: setObject:forKey:
0000000000003404	popq	%rbp
0000000000003405	jmpq	*0x25ff5(%rip)          ## Objc message: -[%rdi setObject:forKey:]
000000000000340b	pushq	%rbp
000000000000340c	movq	%rsp, %rbp
000000000000340f	testq	%rdx, %rdx
0000000000003412	jne	0x341e
0000000000003414	movq	0x25e2d(%rip), %rax     ## literal pool symbol address: _UASwitchHIDFieldIsEmpty
000000000000341b	movq	(%rax), %rdx
000000000000341e	movq	0x25e2b(%rip), %rax     ## literal pool symbol address: _UASwitchHIDHidKindKey
0000000000003425	movq	(%rax), %rcx
0000000000003428	movq	0x30df1(%rip), %rsi     ## Objc selector ref: setObject:forKey:
000000000000342f	popq	%rbp
0000000000003430	jmpq	*0x25fca(%rip)          ## Objc message: -[%rdi setObject:forKey:]
0000000000003436	pushq	%rbp
0000000000003437	movq	%rsp, %rbp
000000000000343a	testq	%rdx, %rdx
000000000000343d	jne	0x3449
000000000000343f	movq	0x25e02(%rip), %rax     ## literal pool symbol address: _UASwitchHIDFieldIsEmpty
0000000000003446	movq	(%rax), %rdx
0000000000003449	movq	0x25e08(%rip), %rax     ## literal pool symbol address: _UASwitchHIDInterfaceIDKey
0000000000003450	movq	(%rax), %rcx
0000000000003453	movq	0x30dc6(%rip), %rsi     ## Objc selector ref: setObject:forKey:
000000000000345a	popq	%rbp
000000000000345b	jmpq	*0x25f9f(%rip)          ## Objc message: -[%rdi setObject:forKey:]
0000000000003461	pushq	%rbp
0000000000003462	movq	%rsp, %rbp
0000000000003465	testq	%rdx, %rdx
0000000000003468	jne	0x3474
000000000000346a	movq	0x25dd7(%rip), %rax     ## literal pool symbol address: _UASwitchHIDFieldIsEmpty
0000000000003471	movq	(%rax), %rdx
0000000000003474	movq	0x25e25(%rip), %rax     ## literal pool symbol address: _UASwitchHIDSubInterfaceIDKey
000000000000347b	movq	(%rax), %rcx
000000000000347e	movq	0x30d9b(%rip), %rsi     ## Objc selector ref: setObject:forKey:
0000000000003485	popq	%rbp
0000000000003486	jmpq	*0x25f74(%rip)          ## Objc message: -[%rdi setObject:forKey:]
000000000000348c	pushq	%rbp
000000000000348d	movq	%rsp, %rbp
0000000000003490	testq	%rdx, %rdx
0000000000003493	jne	0x349f
0000000000003495	movq	0x25dac(%rip), %rax     ## literal pool symbol address: _UASwitchHIDFieldIsEmpty
000000000000349c	movq	(%rax), %rdx
000000000000349f	movq	0x25df2(%rip), %rax     ## literal pool symbol address: _UASwitchHIDServiceIDKey
00000000000034a6	movq	(%rax), %rcx
00000000000034a9	movq	0x30d70(%rip), %rsi     ## Objc selector ref: setObject:forKey:
00000000000034b0	popq	%rbp
00000000000034b1	jmpq	*0x25f49(%rip)          ## Objc message: -[%rdi setObject:forKey:]
00000000000034b7	pushq	%rbp
00000000000034b8	movq	%rsp, %rbp
00000000000034bb	testq	%rdx, %rdx
00000000000034be	jne	0x34ca
00000000000034c0	movq	0x25d81(%rip), %rax     ## literal pool symbol address: _UASwitchHIDFieldIsEmpty
00000000000034c7	movq	(%rax), %rdx
00000000000034ca	movq	0x25d9f(%rip), %rax     ## literal pool symbol address: _UASwitchHIDPrimaryUsageKey
00000000000034d1	movq	(%rax), %rcx
00000000000034d4	movq	0x30d45(%rip), %rsi     ## Objc selector ref: setObject:forKey:
00000000000034db	popq	%rbp
00000000000034dc	jmpq	*0x25f1e(%rip)          ## Objc message: -[%rdi setObject:forKey:]
00000000000034e2	pushq	%rbp
00000000000034e3	movq	%rsp, %rbp
00000000000034e6	testq	%rdx, %rdx
00000000000034e9	jne	0x34f5
00000000000034eb	movq	0x25d56(%rip), %rax     ## literal pool symbol address: _UASwitchHIDFieldIsEmpty
00000000000034f2	movq	(%rax), %rdx
00000000000034f5	movq	0x25d7c(%rip), %rax     ## literal pool symbol address: _UASwitchHIDPrimaryUsagePageKey
00000000000034fc	movq	(%rax), %rcx
00000000000034ff	movq	0x30d1a(%rip), %rsi     ## Objc selector ref: setObject:forKey:
0000000000003506	popq	%rbp
0000000000003507	jmpq	*0x25ef3(%rip)          ## Objc message: -[%rdi setObject:forKey:]
000000000000350d	pushq	%rbp
000000000000350e	movq	%rsp, %rbp
0000000000003511	pushq	%r14
0000000000003513	pushq	%rbx
0000000000003514	movq	%rdi, %rbx
0000000000003517	movq	0x30d0a(%rip), %rsi     ## Objc selector ref: copy
000000000000351e	movq	0x25edb(%rip), %r14     ## Objc message: -[%rdi copy]
0000000000003525	movq	%rdx, %rdi
0000000000003528	callq	*%r14
000000000000352b	movq	0x30bd6(%rip), %rsi     ## Objc selector ref: autorelease
0000000000003532	movq	%rax, %rdi
0000000000003535	callq	*%r14
0000000000003538	movq	0x25d99(%rip), %rcx     ## literal pool symbol address: _UASwitchTriggerTypeKey
000000000000353f	movq	(%rcx), %rcx
0000000000003542	movq	0x30cd7(%rip), %rsi     ## Objc selector ref: setObject:forKey:
0000000000003549	movq	%rbx, %rdi
000000000000354c	movq	%rax, %rdx
000000000000354f	movq	%r14, %rax
0000000000003552	popq	%rbx
0000000000003553	popq	%r14
0000000000003555	popq	%rbp
0000000000003556	jmpq	*%rax
0000000000003558	pushq	%rbp
0000000000003559	movq	%rsp, %rbp
000000000000355c	pushq	%r14
000000000000355e	pushq	%rbx
000000000000355f	movq	%rdi, %rbx
0000000000003562	movq	0x30cbf(%rip), %rsi     ## Objc selector ref: copy
0000000000003569	movq	0x25e90(%rip), %r14     ## Objc message: -[%rdi copy]
0000000000003570	movq	%rdx, %rdi
0000000000003573	callq	*%r14
0000000000003576	movq	0x30b8b(%rip), %rsi     ## Objc selector ref: autorelease
000000000000357d	movq	%rax, %rdi
0000000000003580	callq	*%r14
0000000000003583	movq	0x25d5e(%rip), %rcx     ## literal pool symbol address: _UASwitchValueKey
000000000000358a	movq	(%rcx), %rcx
000000000000358d	movq	0x30c8c(%rip), %rsi     ## Objc selector ref: setObject:forKey:
0000000000003594	movq	%rbx, %rdi
0000000000003597	movq	%rax, %rdx
000000000000359a	movq	%r14, %rax
000000000000359d	popq	%rbx
000000000000359e	popq	%r14
00000000000035a0	popq	%rbp
00000000000035a1	jmpq	*%rax
00000000000035a3	pushq	%rbp
00000000000035a4	movq	%rsp, %rbp
00000000000035a7	pushq	%r14
00000000000035a9	pushq	%rbx
00000000000035aa	movq	%rdx, %rbx
00000000000035ad	movq	%rdi, %r14
00000000000035b0	movq	0x30b71(%rip), %rsi     ## Objc selector ref: length
00000000000035b7	movq	%rbx, %rdi
00000000000035ba	callq	*0x25e40(%rip)          ## Objc message: -[%rdi length]
00000000000035c0	testq	%rax, %rax
00000000000035c3	movq	0x25cfe(%rip), %rax     ## literal pool symbol address: _UASwitchNicknameKey
00000000000035ca	movq	(%rax), %rcx
00000000000035cd	je	0x35e6
00000000000035cf	movq	0x30c4a(%rip), %rsi     ## Objc selector ref: setObject:forKey:
00000000000035d6	movq	%r14, %rdi
00000000000035d9	movq	%rbx, %rdx
00000000000035dc	popq	%rbx
00000000000035dd	popq	%r14
00000000000035df	popq	%rbp
00000000000035e0	jmpq	*0x25e1a(%rip)          ## Objc message: -[%rdi setObject:forKey:]
00000000000035e6	movq	0x30c43(%rip), %rsi     ## Objc selector ref: removeObjectForKey:
00000000000035ed	movq	%r14, %rdi
00000000000035f0	movq	%rcx, %rdx
00000000000035f3	popq	%rbx
00000000000035f4	popq	%r14
00000000000035f6	popq	%rbp
00000000000035f7	jmpq	*0x25e03(%rip)          ## Objc message: -[%rdi removeObjectForKey:]
00000000000035fd	pushq	%rbp
00000000000035fe	movq	%rsp, %rbp
0000000000003601	pushq	%r14
0000000000003603	pushq	%rbx
0000000000003604	movq	%rdi, %rbx
0000000000003607	movq	0x30c1a(%rip), %rsi     ## Objc selector ref: copy
000000000000360e	movq	0x25deb(%rip), %r14     ## Objc message: -[%rdi copy]
0000000000003615	movq	%rdx, %rdi
0000000000003618	callq	*%r14
000000000000361b	movq	0x30ae6(%rip), %rsi     ## Objc selector ref: autorelease
0000000000003622	movq	%rax, %rdi
0000000000003625	callq	*%r14
0000000000003628	movq	0x25ca1(%rip), %rcx     ## literal pool symbol address: _UASwitchPressHoldOptionKey
000000000000362f	movq	(%rcx), %rcx
0000000000003632	movq	0x30be7(%rip), %rsi     ## Objc selector ref: setObject:forKey:
0000000000003639	movq	%rbx, %rdi
000000000000363c	movq	%rax, %rdx
000000000000363f	movq	%r14, %rax
0000000000003642	popq	%rbx
0000000000003643	popq	%r14
0000000000003645	popq	%rbp
0000000000003646	jmpq	*%rax
0000000000003648	pushq	%rbp
0000000000003649	movq	%rsp, %rbp
000000000000364c	subq	$0x30, %rsp
0000000000003650	movq	%rdi, -0x10(%rbp)
0000000000003654	movq	0x320c5(%rip), %rax     ## Objc class ref: UAFeatureTableRowView
000000000000365b	movq	%rax, -0x8(%rbp)
000000000000365f	movq	0x30ada(%rip), %rsi     ## Objc selector ref: initWithFrame:
0000000000003666	movq	0x28(%rbp), %rax
000000000000366a	movq	%rax, 0x18(%rsp)
000000000000366f	movq	0x20(%rbp), %rax
0000000000003673	movq	%rax, 0x10(%rsp)
0000000000003678	movq	0x10(%rbp), %rax
000000000000367c	movq	0x18(%rbp), %rcx
0000000000003680	movq	%rcx, 0x8(%rsp)
0000000000003685	movq	%rax, (%rsp)
0000000000003689	leaq	-0x10(%rbp), %rdi
000000000000368d	callq	0x1e88c                 ## Objc message: -[[%rdi super] initWithFrame:]
0000000000003692	addq	$0x30, %rsp
0000000000003696	popq	%rbp
0000000000003697	retq
0000000000003698	pushq	%rbp
0000000000003699	movq	%rsp, %rbp
000000000000369c	pushq	%rbx
000000000000369d	pushq	%rax
000000000000369e	movq	0x31e4b(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_NSColor
00000000000036a5	movq	0x30b8c(%rip), %rsi     ## Objc selector ref: whiteColor
00000000000036ac	movq	0x25d4d(%rip), %rbx     ## Objc message: +[NSColor whiteColor]
00000000000036b3	callq	*%rbx
00000000000036b5	movq	0x30b84(%rip), %rsi     ## Objc selector ref: set
00000000000036bc	movq	%rax, %rdi
00000000000036bf	callq	*%rbx
00000000000036c1	addq	$0x8, %rsp
00000000000036c5	popq	%rbx
00000000000036c6	popq	%rbp
00000000000036c7	jmp	0x1e8ec                 ## symbol stub for: _NSRectFill
00000000000036cc	nop
00000000000036cd	nop
00000000000036ce	nop
00000000000036cf	nop
00000000000036d0	pushq	%rbp
00000000000036d1	movq	%rsp, %rbp
00000000000036d4	pushq	%r15
00000000000036d6	pushq	%r14
00000000000036d8	pushq	%r13
00000000000036da	pushq	%r12
00000000000036dc	pushq	%rbx
00000000000036dd	subq	$0x178, %rsp            ## imm = 0x178
00000000000036e4	movq	%rdi, %r14
00000000000036e7	movq	0x25c6a(%rip), %rax     ## literal pool symbol address: ___stack_chk_guard
00000000000036ee	movq	(%rax), %rax
00000000000036f1	movq	%rax, -0x30(%rbp)
00000000000036f5	movq	0x31e04(%rip), %r15     ## Objc class ref: _OBJC_CLASS_$_NSBundle
00000000000036fc	movq	0x31e05(%rip), %rdi     ## Objc class ref: UniversalAccessPref
0000000000003703	movq	0x309b6(%rip), %rsi     ## Objc selector ref: class
000000000000370a	movq	0x25cef(%rip), %rbx     ## Objc message: +[UniversalAccessPref class]
0000000000003711	callq	*%rbx
0000000000003713	movq	0x30a9e(%rip), %rsi     ## Objc selector ref: bundleForClass:
000000000000371a	movq	%r15, %rdi
000000000000371d	movq	%rax, %rdx
0000000000003720	callq	*%rbx
0000000000003722	movq	%r14, -0x150(%rbp)
0000000000003729	movq	0x31ff8(%rip), %rcx     ## Objc class ref: UAPCaptioningViewController
0000000000003730	movq	%rcx, -0x148(%rbp)
0000000000003737	movq	0x30b0a(%rip), %rsi     ## Objc selector ref: initWithNibName:bundle:
000000000000373e	leaq	0x26a0b(%rip), %rdx     ## Objc cfstring ref: @"Captioning"
0000000000003745	leaq	-0x150(%rbp), %rdi
000000000000374c	movq	%rax, %rcx
000000000000374f	callq	0x1e88c                 ## Objc message: -[[%rdi super] initWithNibName:bundle:]
0000000000003754	testq	%rax, %rax
0000000000003757	movq	%rax, %r13
000000000000375a	je	0x3a2e
0000000000003760	movq	0x31dc1(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_NSColorPanel
0000000000003767	movq	0x30ae2(%rip), %rsi     ## Objc selector ref: sharedColorPanel
000000000000376e	callq	*%rbx
0000000000003770	movq	0x30ae1(%rip), %rsi     ## Objc selector ref: setShowsAlpha:
0000000000003777	movl	$0x1, %edx
000000000000377c	movq	%rax, %rdi
000000000000377f	callq	*%rbx
0000000000003781	leaq	0x269e8(%rip), %rdi     ## Objc cfstring ref: @"Helvetica"
0000000000003788	leaq	-0xc0(%rbp), %r14
000000000000378f	movq	%r14, %rsi
0000000000003792	callq	0x1e86e                 ## symbol stub for: _objc_assign_strongCast
0000000000003797	leaq	0x269f2(%rip), %rdi     ## Objc cfstring ref: @"Helvetica-Bold"
000000000000379e	leaq	-0x78(%rbp), %r15
00000000000037a2	movq	%r15, %rsi
00000000000037a5	callq	0x1e86e                 ## symbol stub for: _objc_assign_strongCast
00000000000037aa	leaq	-0xb8(%rbp), %rsi
00000000000037b1	leaq	0x269f8(%rip), %rdi     ## Objc cfstring ref: @"Courier"
00000000000037b8	callq	0x1e86e                 ## symbol stub for: _objc_assign_strongCast
00000000000037bd	leaq	-0x70(%rbp), %rsi
00000000000037c1	leaq	0x26a08(%rip), %rdi     ## Objc cfstring ref: @"Courier-Bold"
00000000000037c8	callq	0x1e86e                 ## symbol stub for: _objc_assign_strongCast
00000000000037cd	leaq	-0xb0(%rbp), %rsi
00000000000037d4	leaq	0x26a15(%rip), %rdi     ## Objc cfstring ref: @"IowanOldStyle-Regular"
00000000000037db	callq	0x1e86e                 ## symbol stub for: _objc_assign_strongCast
00000000000037e0	leaq	-0x68(%rbp), %rsi
00000000000037e4	leaq	0x26a25(%rip), %r12     ## Objc cfstring ref: @"IowanOldStyle-Bold"
00000000000037eb	movq	%r12, %rdi
00000000000037ee	callq	0x1e86e                 ## symbol stub for: _objc_assign_strongCast
00000000000037f3	leaq	-0xa8(%rbp), %rsi
00000000000037fa	leaq	0x26a2f(%rip), %rdi     ## Objc cfstring ref: @"IowanOldStyle"
0000000000003801	callq	0x1e86e                 ## symbol stub for: _objc_assign_strongCast
0000000000003806	leaq	-0x60(%rbp), %rsi
000000000000380a	movq	%r12, %rdi
000000000000380d	callq	0x1e86e                 ## symbol stub for: _objc_assign_strongCast
0000000000003812	leaq	-0xa0(%rbp), %rsi
0000000000003819	leaq	0x26a30(%rip), %rdi     ## Objc cfstring ref: @"Menlo-Regular"
0000000000003820	callq	0x1e86e                 ## symbol stub for: _objc_assign_strongCast
0000000000003825	leaq	-0x58(%rbp), %rsi
0000000000003829	leaq	0x26a40(%rip), %rdi     ## Objc cfstring ref: @"Menlo-Bold"
0000000000003830	callq	0x1e86e                 ## symbol stub for: _objc_assign_strongCast
0000000000003835	leaq	-0x98(%rbp), %rsi
000000000000383c	leaq	0x26a4d(%rip), %rdi     ## Objc cfstring ref: @"TrebuchetMS"
0000000000003843	callq	0x1e86e                 ## symbol stub for: _objc_assign_strongCast
0000000000003848	leaq	-0x50(%rbp), %rsi
000000000000384c	leaq	0x26a5d(%rip), %rdi     ## Objc cfstring ref: @"TrebuchetMS-Bold"
0000000000003853	callq	0x1e86e                 ## symbol stub for: _objc_assign_strongCast
0000000000003858	leaq	-0x90(%rbp), %rsi
000000000000385f	leaq	0x26a6a(%rip), %r12     ## Objc cfstring ref: @"Futura-Medium"
0000000000003866	movq	%r12, %rdi
0000000000003869	callq	0x1e86e                 ## symbol stub for: _objc_assign_strongCast
000000000000386e	leaq	-0x48(%rbp), %rsi
0000000000003872	movq	%r12, %rdi
0000000000003875	callq	0x1e86e                 ## symbol stub for: _objc_assign_strongCast
000000000000387a	leaq	-0x88(%rbp), %rsi
0000000000003881	leaq	0x26a68(%rip), %rdi     ## Objc cfstring ref: @"SavoyeLetPlain"
0000000000003888	callq	0x1e86e                 ## symbol stub for: _objc_assign_strongCast
000000000000388d	leaq	-0x40(%rbp), %rsi
0000000000003891	leaq	0x26a78(%rip), %rdi     ## Objc cfstring ref: @".SavoyeLetPlainCC"
0000000000003898	callq	0x1e86e                 ## symbol stub for: _objc_assign_strongCast
000000000000389d	leaq	-0x80(%rbp), %rsi
00000000000038a1	leaq	0x26a88(%rip), %rdi     ## Objc cfstring ref: @"Copperplate"
00000000000038a8	callq	0x1e86e                 ## symbol stub for: _objc_assign_strongCast
00000000000038ad	leaq	-0x38(%rbp), %rsi
00000000000038b1	leaq	0x26a98(%rip), %rdi     ## Objc cfstring ref: @"Copperplate-Bold"
00000000000038b8	callq	0x1e86e                 ## symbol stub for: _objc_assign_strongCast
00000000000038bd	movq	0x31c6c(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_NSDictionary
00000000000038c4	movq	0x30995(%rip), %rsi     ## Objc selector ref: dictionaryWithObjects:forKeys:count:
00000000000038cb	movl	$0x9, %r8d
00000000000038d1	movq	%r15, %rdx
00000000000038d4	movq	%r14, %rcx
00000000000038d7	callq	*%rbx
00000000000038d9	movq	0x30988(%rip), %rsi     ## Objc selector ref: retain
00000000000038e0	movq	%rax, %rdi
00000000000038e3	callq	*%rbx
00000000000038e5	movq	_OBJC_IVAR_$_UAPCaptioningViewController._fontFamilyPSNameToStoragePSName(%rip), %r15
00000000000038ec	movq	%rax, %rdi
00000000000038ef	movq	%r13, %r14
00000000000038f2	movq	%r14, %rsi
00000000000038f5	movq	%r15, %rdx
00000000000038f8	callq	0x1e868                 ## symbol stub for: _objc_assign_ivar
00000000000038fd	movq	0x31c34(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_NSMutableDictionary
0000000000003904	movq	0x3085d(%rip), %rsi     ## Objc selector ref: alloc
000000000000390b	callq	*%rbx
000000000000390d	movq	0x3095c(%rip), %rsi     ## Objc selector ref: init
0000000000003914	movq	%rax, %rdi
0000000000003917	callq	*%rbx
0000000000003919	movq	_OBJC_IVAR_$_UAPCaptioningViewController._storagePSNameToFontFamilyPS(%rip), %rdx
0000000000003920	movq	%rax, %rdi
0000000000003923	movq	%r14, %rsi
0000000000003926	callq	0x1e868                 ## symbol stub for: _objc_assign_ivar
000000000000392b	xorps	%xmm0, %xmm0
000000000000392e	movaps	%xmm0, -0x160(%rbp)
0000000000003935	movaps	%xmm0, -0x170(%rbp)
000000000000393c	movaps	%xmm0, -0x180(%rbp)
0000000000003943	movaps	%xmm0, -0x190(%rbp)
000000000000394a	movq	(%r14,%r15), %rdi
000000000000394e	movq	%rdi, -0x1a0(%rbp)
0000000000003955	movq	%r14, %r13
0000000000003958	movq	0x307b1(%rip), %rsi     ## Objc selector ref: countByEnumeratingWithState:objects:count:
000000000000395f	leaq	-0x190(%rbp), %rdx
0000000000003966	leaq	-0x140(%rbp), %rcx
000000000000396d	movl	$0x10, %r8d
0000000000003973	callq	*%rbx
0000000000003975	movq	%rax, %r15
0000000000003978	testq	%r15, %r15
000000000000397b	je	0x3a2e
0000000000003981	movq	-0x180(%rbp), %rax
0000000000003988	movq	(%rax), %rax
000000000000398b	movq	%rax, -0x198(%rbp)
0000000000003992	xorl	%r14d, %r14d
0000000000003995	movq	-0x180(%rbp), %rax
000000000000399c	movq	-0x198(%rbp), %rcx
00000000000039a3	cmpq	%rcx, (%rax)
00000000000039a6	je	0x39b4
00000000000039a8	movq	-0x1a0(%rbp), %rdi
00000000000039af	callq	0x1e886                 ## symbol stub for: _objc_enumerationMutation
00000000000039b4	movq	-0x188(%rbp), %rax
00000000000039bb	movq	(%rax,%r14,8), %r12
00000000000039bf	movq	_OBJC_IVAR_$_UAPCaptioningViewController._fontFamilyPSNameToStoragePSName(%rip), %rax
00000000000039c6	movq	(%r13,%rax), %rdi
00000000000039cb	movq	0x307f6(%rip), %rsi     ## Objc selector ref: objectForKey:
00000000000039d2	movq	%r12, %rdx
00000000000039d5	callq	*%rbx
00000000000039d7	movq	_OBJC_IVAR_$_UAPCaptioningViewController._storagePSNameToFontFamilyPS(%rip), %rcx
00000000000039de	movq	(%r13,%rcx), %rdi
00000000000039e3	movq	0x30836(%rip), %rsi     ## Objc selector ref: setObject:forKey:
00000000000039ea	movq	%r12, %rdx
00000000000039ed	movq	%rax, %rcx
00000000000039f0	callq	*%rbx
00000000000039f2	incq	%r14
00000000000039f5	cmpq	%r15, %r14
00000000000039f8	jb	0x3995
00000000000039fa	movl	$0x10, %r8d
0000000000003a00	movq	-0x1a0(%rbp), %rdi
0000000000003a07	movq	0x30702(%rip), %rsi     ## Objc selector ref: countByEnumeratingWithState:objects:count:
0000000000003a0e	leaq	-0x190(%rbp), %rdx
0000000000003a15	leaq	-0x140(%rbp), %rcx
0000000000003a1c	callq	*0x259de(%rip)          ## Objc message: +[NSMutableDictionary countByEnumeratingWithState:objects:count:]
0000000000003a22	movq	%rax, %r15
0000000000003a25	testq	%r15, %r15
0000000000003a28	jne	0x3992
0000000000003a2e	movq	0x25923(%rip), %rax     ## literal pool symbol address: ___stack_chk_guard
0000000000003a35	movq	(%rax), %rax
0000000000003a38	cmpq	-0x30(%rbp), %rax
0000000000003a3c	jne	0x3a53
0000000000003a3e	movq	%r13, %rax
0000000000003a41	addq	$0x178, %rsp            ## imm = 0x178
0000000000003a48	popq	%rbx
0000000000003a49	popq	%r12
0000000000003a4b	popq	%r13
0000000000003a4d	popq	%r14
0000000000003a4f	popq	%r15
0000000000003a51	popq	%rbp
0000000000003a52	retq
0000000000003a53	callq	0x1e8b6                 ## symbol stub for: ___stack_chk_fail
0000000000003a58	pushq	%rbp
0000000000003a59	movq	%rsp, %rbp
0000000000003a5c	pushq	%r15
0000000000003a5e	pushq	%r14
0000000000003a60	pushq	%r13
0000000000003a62	pushq	%r12
0000000000003a64	pushq	%rbx
0000000000003a65	subq	$0x38, %rsp
0000000000003a69	movq	%rdi, %rbx
0000000000003a6c	movq	_OBJC_IVAR_$_UAPCaptioningViewController._didAwakeFromNib(%rip), %rax
0000000000003a73	cmpb	$0x0, (%rbx,%rax)
0000000000003a77	jne	0x3c94
0000000000003a7d	movb	$0x1, (%rbx,%rax)
0000000000003a81	movq	0x307f0(%rip), %rsi     ## Objc selector ref: _loadPreferAccessibilityCaptionsCheckbox
0000000000003a88	movq	0x25971(%rip), %r12     ## Objc message: -[%rdi _loadPreferAccessibilityCaptionsCheckbox]
0000000000003a8f	movq	%rbx, %rdi
0000000000003a92	callq	*%r12
0000000000003a95	movq	0x307e4(%rip), %rsi     ## Objc selector ref: _generateOrderedProfileIDCache
0000000000003a9c	movq	%rbx, %rdi
0000000000003a9f	callq	*%r12
0000000000003aa2	movq	0x307df(%rip), %rsi     ## Objc selector ref: _populateColorPopups
0000000000003aa9	movq	%rbx, %rdi
0000000000003aac	callq	*%r12
0000000000003aaf	movq	0x307da(%rip), %rsi     ## Objc selector ref: _populateSizePopup
0000000000003ab6	movq	%rbx, %rdi
0000000000003ab9	callq	*%r12
0000000000003abc	movq	0x307d5(%rip), %rsi     ## Objc selector ref: _populateOpacityPopups
0000000000003ac3	movq	%rbx, %rdi
0000000000003ac6	callq	*%r12
0000000000003ac9	movq	0x307d0(%rip), %rsi     ## Objc selector ref: _populateFontPopus
0000000000003ad0	movq	%rbx, %rdi
0000000000003ad3	callq	*%r12
0000000000003ad6	movq	0x307cb(%rip), %rsi     ## Objc selector ref: _setupActiveProfile
0000000000003add	movq	%rbx, %rdi
0000000000003ae0	callq	*%r12
0000000000003ae3	movq	_OBJC_IVAR_$_UAPCaptioningViewController._optionsScrollView(%rip), %r13
0000000000003aea	movq	(%rbx,%r13), %rdi
0000000000003aee	movq	_OBJC_IVAR_$_UAPCaptioningViewController._optionsView(%rip), %r14
0000000000003af5	movq	(%rbx,%r14), %rdx
0000000000003af9	movq	0x307b0(%rip), %rsi     ## Objc selector ref: setDocumentView:
0000000000003b00	callq	*%r12
0000000000003b03	movq	(%rbx,%r14), %rdi
0000000000003b07	movq	0x307aa(%rip), %rsi     ## Objc selector ref: setTranslatesAutoresizingMaskIntoConstraints:
0000000000003b0e	xorl	%edx, %edx
0000000000003b10	callq	*%r12
0000000000003b13	movq	(%rbx,%r13), %rdi
0000000000003b17	movq	0x307a2(%rip), %rsi     ## Objc selector ref: contentView
0000000000003b1e	callq	*%r12
0000000000003b21	movq	%rax, -0x58(%rbp)
0000000000003b25	movq	0x31a14(%rip), %r15     ## Objc class ref: _OBJC_CLASS_$_NSLayoutConstraint
0000000000003b2c	movq	(%rbx,%r13), %rdi
0000000000003b30	movq	0x30789(%rip), %rsi     ## Objc selector ref: contentView
0000000000003b37	callq	*%r12
0000000000003b3a	movq	(%rbx,%r14), %r9
0000000000003b3e	movq	0x30783(%rip), %rsi     ## Objc selector ref: constraintWithItem:attribute:relatedBy:toItem:attribute:multiplier:constant:
0000000000003b45	movq	$0x7, (%rsp)
0000000000003b4d	movsd	0x2479b(%rip), %xmm0
0000000000003b55	movl	$0x7, %ecx
0000000000003b5a	xorl	%r8d, %r8d
0000000000003b5d	xorps	%xmm1, %xmm1
0000000000003b60	movq	%r15, %rdi
0000000000003b63	movq	%rax, %rdx
0000000000003b66	callq	*%r12
0000000000003b69	movq	0x30760(%rip), %rsi     ## Objc selector ref: addConstraint:
0000000000003b70	movq	-0x58(%rbp), %rdi
0000000000003b74	movq	%rax, %rdx
0000000000003b77	callq	*%r12
0000000000003b7a	movq	(%rbx,%r13), %r14
0000000000003b7e	movq	0x319bb(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_NSLayoutConstraint
0000000000003b85	movq	_OBJC_IVAR_$_UAPCaptioningViewController._optionsView(%rip), %rax
0000000000003b8c	movq	(%rbx,%rax), %r9
0000000000003b90	movq	0x30731(%rip), %rsi     ## Objc selector ref: constraintWithItem:attribute:relatedBy:toItem:attribute:multiplier:constant:
0000000000003b97	movq	$0x9, (%rsp)
0000000000003b9f	movl	$0x9, %ecx
0000000000003ba4	xorl	%r8d, %r8d
0000000000003ba7	xorps	%xmm1, %xmm1
0000000000003baa	movq	%r14, %rdx
0000000000003bad	movsd	0x2473b(%rip), %xmm0
0000000000003bb5	callq	*%r12
0000000000003bb8	movq	0x30711(%rip), %rsi     ## Objc selector ref: addConstraint:
0000000000003bbf	movq	%r14, %rdi
0000000000003bc2	movq	%rax, %rdx
0000000000003bc5	callq	*%r12
0000000000003bc8	movq	_OBJC_IVAR_$_UAPCaptioningViewController._optionsSheet(%rip), %rax
0000000000003bcf	movq	(%rbx,%rax), %rdi
0000000000003bd3	movq	0x306e6(%rip), %rsi     ## Objc selector ref: contentView
0000000000003bda	callq	*%r12
0000000000003bdd	movq	0x306f4(%rip), %rsi     ## Objc selector ref: setWantsLayer:
0000000000003be4	movl	$0x1, %edx
0000000000003be9	movq	%rax, %rdi
0000000000003bec	callq	*%r12
0000000000003bef	movq	(%rbx,%r13), %rdi
0000000000003bf3	movq	0x306e6(%rip), %rsi     ## Objc selector ref: documentView
0000000000003bfa	callq	*%r12
0000000000003bfd	movq	%rax, %r14
0000000000003c00	testq	%r14, %r14
0000000000003c03	je	0x3c1f
0000000000003c05	movq	0x306dc(%rip), %rdx     ## Objc selector ref: bounds
0000000000003c0c	leaq	-0x50(%rbp), %rdi
0000000000003c10	movq	%r14, %rsi
0000000000003c13	callq	0x1e892                 ## symbol stub for: _objc_msgSend_stret
0000000000003c18	movsd	-0x38(%rbp), %xmm1
0000000000003c1d	jmp	0x3c2d
0000000000003c1f	xorps	%xmm0, %xmm0
0000000000003c22	movaps	%xmm0, -0x40(%rbp)
0000000000003c26	movaps	%xmm0, -0x50(%rbp)
0000000000003c2a	xorps	%xmm1, %xmm1
0000000000003c2d	movq	0x306bc(%rip), %rsi     ## Objc selector ref: scrollPoint:
0000000000003c34	xorps	%xmm0, %xmm0
0000000000003c37	movq	%r14, %rdi
0000000000003c3a	callq	*%r12
0000000000003c3d	movq	0x306b4(%rip), %rsi     ## Objc selector ref: _updateSelectionBasedUI
0000000000003c44	movq	%rbx, %rdi
0000000000003c47	callq	*%r12
0000000000003c4a	movq	_OBJC_IVAR_$_UAPCaptioningViewController._profileTableView(%rip), %r14
0000000000003c51	movq	(%rbx,%r14), %rdi
0000000000003c55	movq	0x306a4(%rip), %rsi     ## Objc selector ref: setTarget:
0000000000003c5c	movq	%rbx, %rdx
0000000000003c5f	callq	*%r12
0000000000003c62	movq	(%rbx,%r14), %rdi
0000000000003c66	movq	0x3069b(%rip), %rdx     ## Objc selector ref: pressEditProfileButton:
0000000000003c6d	movq	0x3069c(%rip), %rsi     ## Objc selector ref: setDoubleAction:
0000000000003c74	callq	*%r12
0000000000003c77	movq	_OBJC_IVAR_$_UAPCaptioningViewController._optionsScrollViewContainer(%rip), %rax
0000000000003c7e	movq	(%rbx,%rax), %rdi
0000000000003c82	movq	0x3068f(%rip), %rsi     ## Objc selector ref: setCornerRadius:
0000000000003c89	movsd	0x24667(%rip), %xmm0
0000000000003c91	callq	*%r12
0000000000003c94	addq	$0x38, %rsp
0000000000003c98	popq	%rbx
0000000000003c99	popq	%r12
0000000000003c9b	popq	%r13
0000000000003c9d	popq	%r14
0000000000003c9f	popq	%r15
0000000000003ca1	popq	%rbp
0000000000003ca2	retq
0000000000003ca3	pushq	%rbp
0000000000003ca4	movq	%rsp, %rbp
0000000000003ca7	pushq	%rbx
0000000000003ca8	subq	$0x18, %rsp
0000000000003cac	movq	%rdi, %rbx
0000000000003caf	movq	%rbx, -0x18(%rbp)
0000000000003cb3	movq	0x31a6e(%rip), %rax     ## Objc class ref: UAPCaptioningViewController
0000000000003cba	movq	%rax, -0x10(%rbp)
0000000000003cbe	movq	0x3065b(%rip), %rsi     ## Objc selector ref: viewDidAppear
0000000000003cc5	leaq	-0x18(%rbp), %rdi
0000000000003cc9	callq	0x1e88c                 ## Objc message: -[[%rdi super] viewDidAppear]
0000000000003cce	movq	_OBJC_IVAR_$_UAPCaptioningViewController._previewView(%rip), %rax
0000000000003cd5	movq	(%rbx,%rax), %rdi
0000000000003cd9	movq	0x30648(%rip), %rsi     ## Objc selector ref: didAppear
0000000000003ce0	callq	*0x2571a(%rip)          ## Objc message: -[%rdi didAppear]
0000000000003ce6	addq	$0x18, %rsp
0000000000003cea	popq	%rbx
0000000000003ceb	popq	%rbp
0000000000003cec	retq
0000000000003ced	pushq	%rbp
0000000000003cee	movq	%rsp, %rbp
0000000000003cf1	pushq	%r14
0000000000003cf3	pushq	%rbx
0000000000003cf4	subq	$0x10, %rsp
0000000000003cf8	movq	%rdi, %rbx
0000000000003cfb	movq	_OBJC_IVAR_$_UAPCaptioningViewController._storagePSNameToFontFamilyPS(%rip), %rax
0000000000003d02	movq	(%rbx,%rax), %rdi
0000000000003d06	movq	0x30443(%rip), %rsi     ## Objc selector ref: release
0000000000003d0d	movq	0x256ec(%rip), %r14     ## Objc message: -[%rdi release]
0000000000003d14	callq	*%r14
0000000000003d17	movq	_OBJC_IVAR_$_UAPCaptioningViewController._fontFamilyPSNameToStoragePSName(%rip), %rax
0000000000003d1e	movq	(%rbx,%rax), %rdi
0000000000003d22	movq	0x30427(%rip), %rsi     ## Objc selector ref: release
0000000000003d29	callq	*%r14
0000000000003d2c	movq	_OBJC_IVAR_$_UAPCaptioningViewController._profileIDs(%rip), %rax
0000000000003d33	movq	(%rbx,%rax), %rdi
0000000000003d37	movq	0x30412(%rip), %rsi     ## Objc selector ref: release
0000000000003d3e	callq	*%r14
0000000000003d41	movq	_OBJC_IVAR_$_UAPCaptioningViewController._numberOfDefaultProfiles(%rip), %rax
0000000000003d48	movq	(%rbx,%rax), %rdi
0000000000003d4c	movq	0x303fd(%rip), %rsi     ## Objc selector ref: release
0000000000003d53	callq	*%r14
0000000000003d56	movq	_OBJC_IVAR_$_UAPCaptioningViewController._activeProfile(%rip), %rax
0000000000003d5d	movq	(%rbx,%rax), %rdi
0000000000003d61	movq	0x303e8(%rip), %rsi     ## Objc selector ref: release
0000000000003d68	callq	*%r14
0000000000003d6b	movq	_OBJC_IVAR_$_UAPCaptioningViewController._optionsTabViewInitialFrame(%rip), %rax
0000000000003d72	movq	(%rbx,%rax), %rdi
0000000000003d76	movq	0x303d3(%rip), %rsi     ## Objc selector ref: release
0000000000003d7d	callq	*%r14
0000000000003d80	movq	_OBJC_IVAR_$_UAPCaptioningViewController._selctionBeforeEditingProfile(%rip), %rax
0000000000003d87	movq	(%rbx,%rax), %rdi
0000000000003d8b	testq	%rdi, %rdi
0000000000003d8e	je	0x3d95
0000000000003d90	callq	0x1e562                 ## symbol stub for: _CFRelease
0000000000003d95	movq	_OBJC_IVAR_$_UAPCaptioningViewController._editingNewProfile(%rip), %rax
0000000000003d9c	movq	(%rbx,%rax), %rdi
0000000000003da0	testq	%rdi, %rdi
0000000000003da3	je	0x3daa
0000000000003da5	callq	0x1e562                 ## symbol stub for: _CFRelease
0000000000003daa	movq	0x31797(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_NSNotificationCenter
0000000000003db1	movq	0x30578(%rip), %rsi     ## Objc selector ref: defaultCenter
0000000000003db8	callq	*%r14
0000000000003dbb	movq	0x30576(%rip), %rsi     ## Objc selector ref: removeObserver:
0000000000003dc2	movq	%rax, %rdi
0000000000003dc5	movq	%rbx, %rdx
0000000000003dc8	callq	*%r14
0000000000003dcb	movq	%rbx, -0x20(%rbp)
0000000000003dcf	movq	0x31952(%rip), %rax     ## Objc class ref: UAPCaptioningViewController
0000000000003dd6	movq	%rax, -0x18(%rbp)
0000000000003dda	movq	0x30377(%rip), %rsi     ## Objc selector ref: dealloc
0000000000003de1	leaq	-0x20(%rbp), %rdi
0000000000003de5	callq	0x1e88c                 ## Objc message: -[[%rdi super] dealloc]
0000000000003dea	addq	$0x10, %rsp
0000000000003dee	popq	%rbx
0000000000003def	popq	%r14
0000000000003df1	popq	%rbp
0000000000003df2	retq
0000000000003df3	pushq	%rbp
0000000000003df4	movq	%rsp, %rbp
0000000000003df7	pushq	%r15
0000000000003df9	pushq	%r14
0000000000003dfb	pushq	%r13
0000000000003dfd	pushq	%r12
0000000000003dff	pushq	%rbx
0000000000003e00	subq	$0x28, %rsp
0000000000003e04	movq	%rdi, %rbx
0000000000003e07	movq	_OBJC_IVAR_$_UAPCaptioningViewController._profileIDs(%rip), %rax
0000000000003e0e	movq	(%rbx,%rax), %rdi
0000000000003e12	movq	0x30337(%rip), %rsi     ## Objc selector ref: release
0000000000003e19	callq	*0x255e1(%rip)          ## Objc message: -[%rdi release]
0000000000003e1f	callq	0x1e454                 ## symbol stub for: _MACaptionAppearancePrefCopyProfileIDs
0000000000003e24	testq	%rax, %rax
0000000000003e27	jne	0x3e3c
0000000000003e29	callq	0x1e484                 ## symbol stub for: _MACaptionAppearancePrefResetAll
0000000000003e2e	callq	0x1e454                 ## symbol stub for: _MACaptionAppearancePrefCopyProfileIDs
0000000000003e33	testq	%rax, %rax
0000000000003e36	je	0x4142
0000000000003e3c	movq	%rax, -0x48(%rbp)
0000000000003e40	movq	0x30509(%rip), %rsi     ## Objc selector ref: sortedArrayUsingComparator:
0000000000003e47	leaq	0x25d32(%rip), %rdx
0000000000003e4e	movq	%rbx, -0x38(%rbp)
0000000000003e52	movq	0x255a7(%rip), %r14     ## Objc message: -[%rdi sortedArrayUsingComparator:]
0000000000003e59	movq	%rax, %rdi
0000000000003e5c	callq	*%r14
0000000000003e5f	movq	%rax, %r13
0000000000003e62	movq	0x304ef(%rip), %rsi     ## Objc selector ref: mutableCopy
0000000000003e69	movq	%r13, %rdi
0000000000003e6c	callq	*%r14
0000000000003e6f	movq	%rax, -0x30(%rbp)
0000000000003e73	movq	0x316de(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_NSMutableArray
0000000000003e7a	movq	0x304df(%rip), %rsi     ## Objc selector ref: allocWithZone:
0000000000003e81	xorl	%edx, %edx
0000000000003e83	callq	*%r14
0000000000003e86	movq	0x303e3(%rip), %rsi     ## Objc selector ref: init
0000000000003e8d	movq	%rax, %rdi
0000000000003e90	callq	*%r14
0000000000003e93	movq	_OBJC_IVAR_$_UAPCaptioningViewController._profileIDs(%rip), %rdx
0000000000003e9a	movq	%rax, %rdi
0000000000003e9d	movq	%rbx, %rsi
0000000000003ea0	callq	0x1e868                 ## symbol stub for: _objc_assign_ivar
0000000000003ea5	movq	0x304bc(%rip), %rsi     ## Objc selector ref: count
0000000000003eac	movq	%r13, %rdi
0000000000003eaf	callq	*%r14
0000000000003eb2	testq	%rax, %rax
0000000000003eb5	je	0x3fbe
0000000000003ebb	movq	0x304ae(%rip), %r15     ## Objc selector ref: objectAtIndex:
0000000000003ec2	movq	0x3049f(%rip), %rbx     ## Objc selector ref: count
0000000000003ec9	xorl	%r12d, %r12d
0000000000003ecc	movq	%r13, %rdi
0000000000003ecf	movq	%r15, %rsi
0000000000003ed2	movq	%r12, %rdx
0000000000003ed5	callq	*0x25525(%rip)          ## Objc message: +[NSMutableArray count]
0000000000003edb	movq	%rax, %r14
0000000000003ede	movq	%r14, %rdi
0000000000003ee1	callq	0x1e478                 ## symbol stub for: _MACaptionAppearancePrefIsProfileEditable
0000000000003ee6	testb	%al, %al
0000000000003ee8	jne	0x3fa6
0000000000003eee	movq	0x3160b(%rip), %r15     ## Objc class ref: _OBJC_CLASS_$_NSBundle
0000000000003ef5	movq	0x3160c(%rip), %rdi     ## Objc class ref: UniversalAccessPref
0000000000003efc	movq	0x301bd(%rip), %rsi     ## Objc selector ref: class
0000000000003f03	movq	0x254f6(%rip), %rax     ## Objc message: +[UniversalAccessPref class]
0000000000003f0a	movq	%rax, %rbx
0000000000003f0d	callq	*%rbx
0000000000003f0f	movq	%r15, %rdi
0000000000003f12	movq	0x3029f(%rip), %rsi     ## Objc selector ref: bundleForClass:
0000000000003f19	movq	%rax, %rdx
0000000000003f1c	callq	*%rbx
0000000000003f1e	xorl	%r8d, %r8d
0000000000003f21	movq	%rax, %rdi
0000000000003f24	movq	0x30295(%rip), %rsi     ## Objc selector ref: localizedStringForKey:value:table:
0000000000003f2b	leaq	0x2643e(%rip), %rdx     ## Objc cfstring ref: @"profile.default.defaultProfileID"
0000000000003f32	leaq	0x261d7(%rip), %rcx     ## Objc cfstring ref: @""
0000000000003f39	callq	*%rbx
0000000000003f3b	movq	%r14, %rdi
0000000000003f3e	movq	0x301ab(%rip), %rsi     ## Objc selector ref: isEqualToString:
0000000000003f45	movq	%rax, %rdx
0000000000003f48	callq	*%rbx
0000000000003f4a	testb	%al, %al
0000000000003f4c	movq	-0x38(%rbp), %rax
0000000000003f50	movq	_OBJC_IVAR_$_UAPCaptioningViewController._profileIDs(%rip), %rcx
0000000000003f57	movq	(%rax,%rcx), %rdi
0000000000003f5b	je	0x3f71
0000000000003f5d	xorl	%ecx, %ecx
0000000000003f5f	movq	0x30412(%rip), %rsi     ## Objc selector ref: insertObject:atIndex:
0000000000003f66	movq	%r14, %rdx
0000000000003f69	callq	*0x25491(%rip)          ## Objc message: -[%rdi insertObject:atIndex:]
0000000000003f6f	jmp	0x3f81
0000000000003f71	movq	0x30408(%rip), %rsi     ## Objc selector ref: addObject:
0000000000003f78	movq	%r14, %rdx
0000000000003f7b	callq	*0x2547f(%rip)          ## Objc message: -[%rdi addObject:]
0000000000003f81	movq	0x303e8(%rip), %rbx     ## Objc selector ref: objectAtIndex:
0000000000003f88	movq	%rbx, %r15
0000000000003f8b	movq	0x303d6(%rip), %rbx     ## Objc selector ref: count
0000000000003f92	movq	-0x30(%rbp), %rdi
0000000000003f96	movq	0x30193(%rip), %rsi     ## Objc selector ref: removeObject:
0000000000003f9d	movq	%r14, %rdx
0000000000003fa0	callq	*0x2545a(%rip)          ## Objc message: -[%rdi removeObject:]
0000000000003fa6	incq	%r12
0000000000003fa9	movq	%r13, %rdi
0000000000003fac	movq	%rbx, %rsi
0000000000003faf	callq	*0x2544b(%rip)          ## Objc message: -[%rdi removeObject:]
0000000000003fb5	cmpq	%rax, %r12
0000000000003fb8	jb	0x3ecc
0000000000003fbe	movq	0x3159b(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_NSNumber
0000000000003fc5	movq	0x30394(%rip), %rsi     ## Objc selector ref: allocWithZone:
0000000000003fcc	xorl	%edx, %edx
0000000000003fce	movq	0x2542b(%rip), %rbx     ## Objc message: +[NSNumber allocWithZone:]
0000000000003fd5	movq	%rbx, %r15
0000000000003fd8	callq	*%r15
0000000000003fdb	movq	%rax, %r14
0000000000003fde	movq	-0x38(%rbp), %rbx
0000000000003fe2	movq	_OBJC_IVAR_$_UAPCaptioningViewController._profileIDs(%rip), %r12
0000000000003fe9	movq	(%rbx,%r12), %rdi
0000000000003fed	movq	0x30374(%rip), %rsi     ## Objc selector ref: count
0000000000003ff4	callq	*%r15
0000000000003ff7	movq	0x3038a(%rip), %rsi     ## Objc selector ref: initWithInteger:
0000000000003ffe	movq	%r14, %rdi
0000000000004001	movq	%rax, %rdx
0000000000004004	callq	*%r15
0000000000004007	movq	_OBJC_IVAR_$_UAPCaptioningViewController._numberOfDefaultProfiles(%rip), %rdx
000000000000400e	movq	%rax, %rdi
0000000000004011	movq	%rbx, %rsi
0000000000004014	callq	0x1e868                 ## symbol stub for: _objc_assign_ivar
0000000000004019	movq	(%rbx,%r12), %rdi
000000000000401d	movq	0x3036c(%rip), %rsi     ## Objc selector ref: addObjectsFromArray:
0000000000004024	movq	-0x30(%rbp), %r14
0000000000004028	movq	%r14, %rdx
000000000000402b	callq	*%r15
000000000000402e	movq	0x3011b(%rip), %rsi     ## Objc selector ref: release
0000000000004035	movq	%r14, %rdi
0000000000004038	callq	*%r15
000000000000403b	movq	0x31516(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_NSMutableArray
0000000000004042	movq	0x3011f(%rip), %rsi     ## Objc selector ref: alloc
0000000000004049	callq	*%r15
000000000000404c	movq	0x3021d(%rip), %rsi     ## Objc selector ref: init
0000000000004053	movq	%rax, %rdi
0000000000004056	callq	*%r15
0000000000004059	movq	%rax, -0x40(%rbp)
000000000000405d	movq	(%rbx,%r12), %rdi
0000000000004061	movq	0x30300(%rip), %rsi     ## Objc selector ref: count
0000000000004068	callq	*%r15
000000000000406b	movq	%r15, %r13
000000000000406e	testq	%rax, %rax
0000000000004071	je	0x40e7
0000000000004073	movq	_OBJC_IVAR_$_UAPCaptioningViewController._profileIDs(%rip), %r12
000000000000407a	movq	0x302ef(%rip), %r14     ## Objc selector ref: objectAtIndex:
0000000000004081	xorl	%r15d, %r15d
0000000000004084	movq	(%rbx,%r12), %rdi
0000000000004088	movq	%r14, %rsi
000000000000408b	movq	%r15, %rdx
000000000000408e	callq	*%r13
0000000000004091	movq	%rax, -0x30(%rbp)
0000000000004095	movq	(%rbx,%r12), %rdi
0000000000004099	movq	%r14, %rsi
000000000000409c	movq	%r15, %rdx
000000000000409f	callq	*%r13
00000000000040a2	movq	%rax, %rdi
00000000000040a5	callq	0x1e45a                 ## symbol stub for: _MACaptionAppearancePrefCopyProfileName
00000000000040aa	testq	%rax, %rax
00000000000040ad	je	0x40b9
00000000000040af	movq	%rax, %rdi
00000000000040b2	callq	0x1e562                 ## symbol stub for: _CFRelease
00000000000040b7	jmp	0x40ce
00000000000040b9	movq	-0x40(%rbp), %rdi
00000000000040bd	movq	0x302bc(%rip), %rsi     ## Objc selector ref: addObject:
00000000000040c4	movq	-0x30(%rbp), %rdx
00000000000040c8	callq	*0x25332(%rip)          ## Objc message: +[NSMutableArray addObject:]
00000000000040ce	incq	%r15
00000000000040d1	movq	(%rbx,%r12), %rdi
00000000000040d5	movq	0x3028c(%rip), %rsi     ## Objc selector ref: count
00000000000040dc	callq	*0x2531e(%rip)          ## Objc message: -[%rdi count]
00000000000040e2	cmpq	%rax, %r15
00000000000040e5	jb	0x4084
00000000000040e7	movq	0x3027a(%rip), %rsi     ## Objc selector ref: count
00000000000040ee	movq	-0x40(%rbp), %r14
00000000000040f2	movq	%r14, %rdi
00000000000040f5	callq	*0x25305(%rip)          ## Objc message: -[%rdi count]
00000000000040fb	testq	%rax, %rax
00000000000040fe	je	0x411b
0000000000004100	movq	_OBJC_IVAR_$_UAPCaptioningViewController._profileIDs(%rip), %rax
0000000000004107	movq	(%rbx,%rax), %rdi
000000000000410b	movq	0x30286(%rip), %rsi     ## Objc selector ref: removeObjectsInArray:
0000000000004112	movq	%r14, %rdx
0000000000004115	callq	*0x252e5(%rip)          ## Objc message: -[%rdi removeObjectsInArray:]
000000000000411b	movq	0x3002e(%rip), %rsi     ## Objc selector ref: release
0000000000004122	movq	%r14, %rdi
0000000000004125	callq	*0x252d5(%rip)          ## Objc message: -[%rdi release]
000000000000412b	movq	-0x48(%rbp), %rdi
000000000000412f	addq	$0x28, %rsp
0000000000004133	popq	%rbx
0000000000004134	popq	%r12
0000000000004136	popq	%r13
0000000000004138	popq	%r14
000000000000413a	popq	%r15
000000000000413c	popq	%rbp
000000000000413d	jmp	0x1e562                 ## symbol stub for: _CFRelease
0000000000004142	addq	$0x28, %rsp
0000000000004146	popq	%rbx
0000000000004147	popq	%r12
0000000000004149	popq	%r13
000000000000414b	popq	%r14
000000000000414d	popq	%r15
000000000000414f	popq	%rbp
0000000000004150	retq
0000000000004151	pushq	%rbp
0000000000004152	movq	%rsp, %rbp
0000000000004155	pushq	%r15
0000000000004157	pushq	%r14
0000000000004159	pushq	%r12
000000000000415b	pushq	%rbx
000000000000415c	subq	$0x10, %rsp
0000000000004160	movq	%rdx, %rbx
0000000000004163	movq	%rsi, %rdi
0000000000004166	callq	0x1e45a                 ## symbol stub for: _MACaptionAppearancePrefCopyProfileName
000000000000416b	movq	%rax, %r12
000000000000416e	movq	%rbx, %rdi
0000000000004171	callq	0x1e45a                 ## symbol stub for: _MACaptionAppearancePrefCopyProfileName
0000000000004176	movq	%rax, %r14
0000000000004179	xorl	%r15d, %r15d
000000000000417c	testq	%r12, %r12
000000000000417f	je	0x41d0
0000000000004181	testq	%r14, %r14
0000000000004184	je	0x41d0
0000000000004186	movq	0x2ff9b(%rip), %rsi     ## Objc selector ref: length
000000000000418d	movq	0x2526c(%rip), %r15     ## Objc message: -[%rdi length]
0000000000004194	movq	%r12, %rdi
0000000000004197	callq	*%r15
000000000000419a	movq	%rax, %rbx
000000000000419d	movq	0x313ac(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_NSLocale
00000000000041a4	movq	0x30195(%rip), %rsi     ## Objc selector ref: currentLocale
00000000000041ab	callq	*%r15
00000000000041ae	movq	0x30193(%rip), %rsi     ## Objc selector ref: compare:options:range:locale:
00000000000041b5	movq	%rax, (%rsp)
00000000000041b9	movl	$0x41, %ecx
00000000000041be	xorl	%r8d, %r8d
00000000000041c1	movq	%r12, %rdi
00000000000041c4	movq	%r14, %rdx
00000000000041c7	movq	%rbx, %r9
00000000000041ca	callq	*%r15
00000000000041cd	movq	%rax, %r15
00000000000041d0	testq	%r12, %r12
00000000000041d3	je	0x41dd
00000000000041d5	movq	%r12, %rdi
00000000000041d8	callq	0x1e562                 ## symbol stub for: _CFRelease
00000000000041dd	testq	%r14, %r14
00000000000041e0	je	0x41ea
00000000000041e2	movq	%r14, %rdi
00000000000041e5	callq	0x1e562                 ## symbol stub for: _CFRelease
00000000000041ea	movq	%r15, %rax
00000000000041ed	addq	$0x10, %rsp
00000000000041f1	popq	%rbx
00000000000041f2	popq	%r12
00000000000041f4	popq	%r14
00000000000041f6	popq	%r15
00000000000041f8	popq	%rbp
00000000000041f9	retq
00000000000041fa	pushq	%rbp
00000000000041fb	movq	%rsp, %rbp
00000000000041fe	pushq	%r15
0000000000004200	pushq	%r14
0000000000004202	pushq	%r13
0000000000004204	pushq	%r12
0000000000004206	pushq	%rbx
0000000000004207	pushq	%rax
0000000000004208	movq	%rdi, %r13
000000000000420b	movq	_OBJC_IVAR_$_UAPCaptioningViewController._profileIDs(%rip), %r15
0000000000004212	movq	(%r13,%r15), %rdi
0000000000004217	movq	0x3014a(%rip), %rsi     ## Objc selector ref: count
000000000000421e	callq	*0x251dc(%rip)          ## Objc message: +[NSLocale count]
0000000000004224	testq	%rax, %rax
0000000000004227	je	0x427c
0000000000004229	xorl	%ebx, %ebx
000000000000422b	movq	0x251ce(%rip), %r12     ## Objc message: -[%rdi count]
0000000000004232	movq	(%r13,%r15), %rdi
0000000000004237	movq	0x30132(%rip), %rsi     ## Objc selector ref: objectAtIndex:
000000000000423e	movq	%rbx, %rdx
0000000000004241	callq	*%r12
0000000000004244	movq	%rax, %r14
0000000000004247	movq	0x31312(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_NSNumber
000000000000424e	movq	0x3014b(%rip), %rsi     ## Objc selector ref: numberWithInt:
0000000000004255	movl	%ebx, %edx
0000000000004257	callq	*%r12
000000000000425a	movq	%r14, %rdi
000000000000425d	movq	%rax, %rsi
0000000000004260	callq	0x1e4ae                 ## symbol stub for: _MACaptionAppearancePrefSetProfileOrder
0000000000004265	incq	%rbx
0000000000004268	movq	(%r13,%r15), %rdi
000000000000426d	movq	0x300f4(%rip), %rsi     ## Objc selector ref: count
0000000000004274	callq	*%r12
0000000000004277	cmpq	%rax, %rbx
000000000000427a	jb	0x4232
000000000000427c	addq	$0x8, %rsp
0000000000004280	popq	%rbx
0000000000004281	popq	%r12
0000000000004283	popq	%r13
0000000000004285	popq	%r14
0000000000004287	popq	%r15
0000000000004289	popq	%rbp
000000000000428a	retq
000000000000428b	pushq	%rbp
000000000000428c	movq	%rsp, %rbp
000000000000428f	pushq	%r15
0000000000004291	pushq	%r14
0000000000004293	pushq	%rbx
0000000000004294	pushq	%rax
0000000000004295	movq	%rdi, %r14
0000000000004298	callq	0x1e442                 ## symbol stub for: _MACaptionAppearancePrefCopyActiveProfileID
000000000000429d	movq	%rax, %rbx
00000000000042a0	testq	%rbx, %rbx
00000000000042a3	je	0x42ea
00000000000042a5	movq	_OBJC_IVAR_$_UAPCaptioningViewController._activeProfile(%rip), %rax
00000000000042ac	movq	(%r14,%rax), %rdi
00000000000042b0	movq	0x2fe99(%rip), %rsi     ## Objc selector ref: release
00000000000042b7	movq	0x25142(%rip), %r15     ## Objc message: +[NSNumber release]
00000000000042be	callq	*%r15
00000000000042c1	movq	0x2ffa0(%rip), %rsi     ## Objc selector ref: retain
00000000000042c8	movq	%rbx, %rdi
00000000000042cb	callq	*%r15
00000000000042ce	movq	_OBJC_IVAR_$_UAPCaptioningViewController._activeProfile(%rip), %rdx
00000000000042d5	movq	%rax, %rdi
00000000000042d8	movq	%r14, %rsi
00000000000042db	callq	0x1e868                 ## symbol stub for: _objc_assign_ivar
00000000000042e0	movq	%rbx, %rdi
00000000000042e3	callq	0x1e562                 ## symbol stub for: _CFRelease
00000000000042e8	jmp	0x4347
00000000000042ea	movq	_OBJC_IVAR_$_UAPCaptioningViewController._profileIDs(%rip), %rbx
00000000000042f1	movq	(%r14,%rbx), %rdi
00000000000042f5	movq	0x3006c(%rip), %rsi     ## Objc selector ref: count
00000000000042fc	callq	*0x250fe(%rip)          ## Objc message: -[%rdi count]
0000000000004302	testq	%rax, %rax
0000000000004305	je	0x4347
0000000000004307	movq	(%r14,%rbx), %rdi
000000000000430b	movq	0x3005e(%rip), %rsi     ## Objc selector ref: objectAtIndex:
0000000000004312	movq	0x250e7(%rip), %rbx     ## Objc message: -[%rdi objectAtIndex:]
0000000000004319	xorl	%edx, %edx
000000000000431b	callq	*%rbx
000000000000431d	movq	0x2ff44(%rip), %rsi     ## Objc selector ref: retain
0000000000004324	movq	%rax, %rdi
0000000000004327	callq	*%rbx
0000000000004329	movq	_OBJC_IVAR_$_UAPCaptioningViewController._activeProfile(%rip), %rbx
0000000000004330	movq	%rax, %rdi
0000000000004333	movq	%r14, %rsi
0000000000004336	movq	%rbx, %rdx
0000000000004339	callq	0x1e868                 ## symbol stub for: _objc_assign_ivar
000000000000433e	movq	(%r14,%rbx), %rdi
0000000000004342	callq	0x1e496                 ## symbol stub for: _MACaptionAppearancePrefSetActiveProfileID
0000000000004347	movq	0x3005a(%rip), %rsi     ## Objc selector ref: _loadActiveProfile
000000000000434e	movq	%r14, %rdi
0000000000004351	addq	$0x8, %rsp
0000000000004355	popq	%rbx
0000000000004356	popq	%r14
0000000000004358	popq	%r15
000000000000435a	popq	%rbp
000000000000435b	jmpq	*0x2509f(%rip)          ## Objc message: -[%rdi _loadActiveProfile]
0000000000004361	pushq	%rbp
0000000000004362	movq	%rsp, %rbp
0000000000004365	pushq	%r15
0000000000004367	pushq	%r14
0000000000004369	pushq	%r12
000000000000436b	pushq	%rbx
000000000000436c	subq	$0x50, %rsp
0000000000004370	movq	%rdx, %rbx
0000000000004373	movq	%rdi, %r14
0000000000004376	callq	0x1e490                 ## symbol stub for: _MACaptionAppearancePrefSaveState
000000000000437b	cmpq	%rbx, %r14
000000000000437e	je	0x4394
0000000000004380	movq	0x30029(%rip), %rsi     ## Objc selector ref: _setEditingNewProfile:selectionBeforeEditing:
0000000000004387	xorl	%edx, %edx
0000000000004389	xorl	%ecx, %ecx
000000000000438b	movq	%r14, %rdi
000000000000438e	callq	*0x2506c(%rip)          ## Objc message: -[%rdi _setEditingNewProfile:selectionBeforeEditing:]
0000000000004394	movq	_OBJC_IVAR_$_UAPCaptioningViewController._optionsScrollView(%rip), %rax
000000000000439b	movq	(%r14,%rax), %rdi
000000000000439f	movq	0x2ff3a(%rip), %rsi     ## Objc selector ref: documentView
00000000000043a6	callq	*0x25054(%rip)          ## Objc message: -[%rdi documentView]
00000000000043ac	movq	%rax, %rbx
00000000000043af	testq	%rbx, %rbx
00000000000043b2	je	0x43ce
00000000000043b4	movq	0x2ff2d(%rip), %rdx     ## Objc selector ref: bounds
00000000000043bb	leaq	-0x40(%rbp), %rdi
00000000000043bf	movq	%rbx, %rsi
00000000000043c2	callq	0x1e892                 ## symbol stub for: _objc_msgSend_stret
00000000000043c7	movsd	-0x28(%rbp), %xmm1
00000000000043cc	jmp	0x43dc
00000000000043ce	xorps	%xmm0, %xmm0
00000000000043d1	movaps	%xmm0, -0x30(%rbp)
00000000000043d5	movaps	%xmm0, -0x40(%rbp)
00000000000043d9	xorps	%xmm1, %xmm1
00000000000043dc	movq	0x2ff0d(%rip), %rsi     ## Objc selector ref: scrollPoint:
00000000000043e3	movq	0x25016(%rip), %r12     ## Objc message: -[%rdi scrollPoint:]
00000000000043ea	xorps	%xmm0, %xmm0
00000000000043ed	movq	%rbx, %rdi
00000000000043f0	callq	*%r12
00000000000043f3	movq	_OBJC_IVAR_$_UAPCaptioningViewController._profileTableView(%rip), %rax
00000000000043fa	movq	(%r14,%rax), %rdi
00000000000043fe	movq	0x2ffb3(%rip), %rsi     ## Objc selector ref: selectedRow
0000000000004405	callq	*%r12
0000000000004408	movq	%rax, %rbx
000000000000440b	xorl	%edi, %edi
000000000000440d	testq	%rbx, %rbx
0000000000004410	js	0x4448
0000000000004412	movq	_OBJC_IVAR_$_UAPCaptioningViewController._profileIDs(%rip), %r15
0000000000004419	movq	(%r14,%r15), %rdi
000000000000441d	movq	0x2ff44(%rip), %rsi     ## Objc selector ref: count
0000000000004424	callq	*0x24fd6(%rip)          ## Objc message: -[%rdi count]
000000000000442a	xorl	%edi, %edi
000000000000442c	cmpq	%rax, %rbx
000000000000442f	jae	0x4448
0000000000004431	movq	(%r14,%r15), %rdi
0000000000004435	movq	0x2ff34(%rip), %rsi     ## Objc selector ref: objectAtIndex:
000000000000443c	movq	%rbx, %rdx
000000000000443f	callq	*0x24fbb(%rip)          ## Objc message: -[%rdi objectAtIndex:]
0000000000004445	movq	%rax, %rdi
0000000000004448	callq	0x1e478                 ## symbol stub for: _MACaptionAppearancePrefIsProfileEditable
000000000000444d	testb	%al, %al
000000000000444f	je	0x44e3
0000000000004455	movq	_OBJC_IVAR_$_UAPCaptioningViewController._sheetPreviewView(%rip), %rax
000000000000445c	movq	(%r14,%rax), %rdi
0000000000004460	movq	0x2fec1(%rip), %rsi     ## Objc selector ref: didAppear
0000000000004467	callq	*%r12
000000000000446a	movq	0x2ff4f(%rip), %rsi     ## Objc selector ref: view
0000000000004471	movq	%r14, %rdi
0000000000004474	callq	*%r12
0000000000004477	movq	0x2ff4a(%rip), %rsi     ## Objc selector ref: window
000000000000447e	movq	%rax, %rdi
0000000000004481	callq	*%r12
0000000000004484	movq	%rax, %rbx
0000000000004487	movq	_OBJC_IVAR_$_UAPCaptioningViewController._optionsSheet(%rip), %rax
000000000000448e	movq	(%r14,%rax), %r15
0000000000004492	movq	0x24eaf(%rip), %rax     ## literal pool symbol address: __NSConcreteStackBlock
0000000000004499	movq	%rax, -0x68(%rbp)
000000000000449d	movl	$0x42000000, -0x60(%rbp) ## imm = 0x42000000
00000000000044a4	movl	$0x0, -0x5c(%rbp)
00000000000044ab	leaq	0x4e(%rip), %rax
00000000000044b2	movq	%rax, -0x58(%rbp)
00000000000044b6	leaq	0x256e3(%rip), %rax
00000000000044bd	movq	%rax, -0x50(%rbp)
00000000000044c1	leaq	-0x48(%rbp), %rsi
00000000000044c5	movq	%r14, %rdi
00000000000044c8	callq	0x1e86e                 ## symbol stub for: _objc_assign_strongCast
00000000000044cd	movq	0x2ff04(%rip), %rsi     ## Objc selector ref: beginSheet:completionHandler:
00000000000044d4	leaq	-0x68(%rbp), %rcx
00000000000044d8	movq	%rbx, %rdi
00000000000044db	movq	%r15, %rdx
00000000000044de	callq	*%r12
00000000000044e1	jmp	0x44f3
00000000000044e3	movq	0x2fe0e(%rip), %rsi     ## Objc selector ref: _updateSelectionBasedUI
00000000000044ea	movq	%r14, %rdi
00000000000044ed	callq	*0x24f0d(%rip)          ## Objc message: -[%rdi _updateSelectionBasedUI]
00000000000044f3	addq	$0x50, %rsp
00000000000044f7	popq	%rbx
00000000000044f8	popq	%r12
00000000000044fa	popq	%r14
00000000000044fc	popq	%r15
00000000000044fe	popq	%rbp
00000000000044ff	retq
0000000000004500	pushq	%rbp
0000000000004501	movq	%rsp, %rbp
0000000000004504	pushq	%r14
0000000000004506	pushq	%rbx
0000000000004507	movq	%rdi, %rbx
000000000000450a	movq	0x20(%rbx), %rax
000000000000450e	movq	_OBJC_IVAR_$_UAPCaptioningViewController._optionsSheet(%rip), %rcx
0000000000004515	movq	(%rax,%rcx), %rdi
0000000000004519	movq	0x2feb0(%rip), %rsi     ## Objc selector ref: orderOut:
0000000000004520	movq	0x24ed9(%rip), %r14     ## Objc message: -[%rdi orderOut:]
0000000000004527	xorl	%edx, %edx
0000000000004529	callq	*%r14
000000000000452c	movq	0x20(%rbx), %rdi
0000000000004530	movq	0x2fe71(%rip), %rsi     ## Objc selector ref: _loadActiveProfile
0000000000004537	movq	%r14, %rax
000000000000453a	popq	%rbx
000000000000453b	popq	%r14
000000000000453d	popq	%rbp
000000000000453e	jmpq	*%rax
0000000000004540	pushq	%rbp
0000000000004541	movq	%rsp, %rbp
0000000000004544	addq	$0x20, %rdi
0000000000004548	movq	0x20(%rsi), %rsi
000000000000454c	movl	$0x3, %edx
0000000000004551	popq	%rbp
0000000000004552	jmp	0x1e8a4                 ## symbol stub for: __Block_object_assign
0000000000004557	nopw	(%rax,%rax)
0000000000004560	pushq	%rbp
0000000000004561	movq	%rsp, %rbp
0000000000004564	movq	0x20(%rdi), %rdi
0000000000004568	movl	$0x3, %esi
000000000000456d	popq	%rbp
000000000000456e	jmp	0x1e8aa                 ## symbol stub for: __Block_object_dispose
0000000000004573	pushq	%rbp
0000000000004574	movq	%rsp, %rbp
0000000000004577	movq	_OBJC_IVAR_$_UAPCaptioningViewController._profileIDs(%rip), %rax
000000000000457e	movq	(%rdi,%rax), %rdi
0000000000004582	movq	0x2fddf(%rip), %rsi     ## Objc selector ref: count
0000000000004589	popq	%rbp
000000000000458a	jmpq	*0x24e70(%rip)          ## Objc message: -[%rdi count]
0000000000004590	pushq	%rbp
0000000000004591	movq	%rsp, %rbp
0000000000004594	xorl	%eax, %eax
0000000000004596	popq	%rbp
0000000000004597	retq
0000000000004598	pushq	%rbp
0000000000004599	movq	%rsp, %rbp
000000000000459c	pushq	%r15
000000000000459e	pushq	%r14
00000000000045a0	pushq	%r13
00000000000045a2	pushq	%r12
00000000000045a4	pushq	%rbx
00000000000045a5	subq	$0x18, %rsp
00000000000045a9	movq	%rdi, %rbx
00000000000045ac	movq	_OBJC_IVAR_$_UAPCaptioningViewController._profileTableView(%rip), %r12
00000000000045b3	movq	(%rbx,%r12), %rdi
00000000000045b7	movq	0x2fdfa(%rip), %rsi     ## Objc selector ref: selectedRow
00000000000045be	callq	*0x24e3c(%rip)          ## Objc message: -[%rdi selectedRow]
00000000000045c4	movq	%rax, %r13
00000000000045c7	testq	%r13, %r13
00000000000045ca	js	0x4723
00000000000045d0	movq	_OBJC_IVAR_$_UAPCaptioningViewController._profileIDs(%rip), %r14
00000000000045d7	movq	(%rbx,%r14), %rdi
00000000000045db	movq	0x2fd86(%rip), %rsi     ## Objc selector ref: count
00000000000045e2	callq	*0x24e18(%rip)          ## Objc message: -[%rdi count]
00000000000045e8	cmpq	%rax, %r13
00000000000045eb	jae	0x4723
00000000000045f1	movq	(%rbx,%r14), %rdi
00000000000045f5	movq	0x2fd74(%rip), %rsi     ## Objc selector ref: objectAtIndex:
00000000000045fc	movq	%r13, %rdx
00000000000045ff	callq	*0x24dfb(%rip)          ## Objc message: -[%rdi objectAtIndex:]
0000000000004605	movq	%rax, -0x40(%rbp)
0000000000004609	testq	%rax, %rax
000000000000460c	je	0x4723
0000000000004612	movq	(%rbx,%r14), %rdi
0000000000004616	movq	0x2fd4b(%rip), %rsi     ## Objc selector ref: count
000000000000461d	movq	0x24ddc(%rip), %r14     ## Objc message: -[%rdi count]
0000000000004624	callq	*%r14
0000000000004627	movq	%rax, %r15
000000000000462a	movq	(%rbx,%r12), %rdi
000000000000462e	movq	0x2fdab(%rip), %rsi     ## Objc selector ref: numberOfRows
0000000000004635	callq	*%r14
0000000000004638	cmpq	%r15, %rax
000000000000463b	movq	%r15, %rcx
000000000000463e	cmovbq	%rax, %rcx
0000000000004642	testq	%rcx, %rcx
0000000000004645	je	0x46f1
000000000000464b	movq	%r13, -0x38(%rbp)
000000000000464f	notq	%r15
0000000000004652	notq	%rax
0000000000004655	cmpq	%rax, %r15
0000000000004658	cmovaq	%r15, %rax
000000000000465c	notq	%rax
000000000000465f	movq	%rax, -0x30(%rbp)
0000000000004663	xorl	%r15d, %r15d
0000000000004666	movq	(%rbx,%r12), %rdi
000000000000466a	xorl	%edx, %edx
000000000000466c	xorl	%r8d, %r8d
000000000000466f	movq	0x2fd72(%rip), %rsi     ## Objc selector ref: viewAtColumn:row:makeIfNecessary:
0000000000004676	movq	%r15, %rcx
0000000000004679	callq	*%r14
000000000000467c	movq	%rax, %r13
000000000000467f	movq	0x30ee2(%rip), %rdi     ## Objc class ref: UAPCaptioningProfileTableView
0000000000004686	movq	0x2fa33(%rip), %rsi     ## Objc selector ref: class
000000000000468d	callq	*%r14
0000000000004690	movq	%r13, %rdi
0000000000004693	movq	0x2fa5e(%rip), %rsi     ## Objc selector ref: isKindOfClass:
000000000000469a	movq	%rax, %rdx
000000000000469d	callq	*%r14
00000000000046a0	testb	%al, %al
00000000000046a2	je	0x46e1
00000000000046a4	movb	$0x1, %r12b
00000000000046a7	cmpq	%r15, -0x38(%rbp)
00000000000046ab	jne	0x46bc
00000000000046ad	movq	-0x40(%rbp), %rdi
00000000000046b1	callq	0x1e478                 ## symbol stub for: _MACaptionAppearancePrefIsProfileEditable
00000000000046b6	testb	%al, %al
00000000000046b8	sete	%r12b
00000000000046bc	movq	%r13, %rdi
00000000000046bf	movq	0x2fd2a(%rip), %rsi     ## Objc selector ref: editButton
00000000000046c6	callq	*%r14
00000000000046c9	movzbl	%r12b, %edx
00000000000046cd	movq	%rax, %rdi
00000000000046d0	movq	0x2fd21(%rip), %rsi     ## Objc selector ref: setHidden:
00000000000046d7	callq	*%r14
00000000000046da	movq	_OBJC_IVAR_$_UAPCaptioningViewController._profileTableView(%rip), %r12
00000000000046e1	incq	%r15
00000000000046e4	movq	-0x30(%rbp), %rax
00000000000046e8	cmpq	%r15, %rax
00000000000046eb	jne	0x4666
00000000000046f1	movq	-0x40(%rbp), %rdi
00000000000046f5	callq	0x1e478                 ## symbol stub for: _MACaptionAppearancePrefIsProfileEditable
00000000000046fa	movq	_OBJC_IVAR_$_UAPCaptioningViewController._addRemoveSegmentedControl(%rip), %rcx
0000000000004701	movq	(%rbx,%rcx), %rdi
0000000000004705	movq	0x2fcf4(%rip), %rsi     ## Objc selector ref: setRemoveEnabled:
000000000000470c	movsbl	%al, %edx
000000000000470f	addq	$0x18, %rsp
0000000000004713	popq	%rbx
0000000000004714	popq	%r12
0000000000004716	popq	%r13
0000000000004718	popq	%r14
000000000000471a	popq	%r15
000000000000471c	popq	%rbp
000000000000471d	jmpq	*0x24cdd(%rip)          ## Objc message: +[UAPCaptioningProfileTableView setRemoveEnabled:]
0000000000004723	addq	$0x18, %rsp
0000000000004727	popq	%rbx
0000000000004728	popq	%r12
000000000000472a	popq	%r13
000000000000472c	popq	%r14
000000000000472e	popq	%r15
0000000000004730	popq	%rbp
0000000000004731	retq
0000000000004732	pushq	%rbp
0000000000004733	movq	%rsp, %rbp
0000000000004736	pushq	%r15
0000000000004738	pushq	%r14
000000000000473a	pushq	%rbx
000000000000473b	pushq	%rax
000000000000473c	movq	%rdi, %r14
000000000000473f	movq	_OBJC_IVAR_$_UAPCaptioningViewController._profileTableView(%rip), %rax
0000000000004746	movq	(%r14,%rax), %rdi
000000000000474a	movq	0x2fc67(%rip), %rsi     ## Objc selector ref: selectedRow
0000000000004751	callq	*0x24ca9(%rip)          ## Objc message: -[%rdi selectedRow]
0000000000004757	movq	%rax, %rbx
000000000000475a	testq	%rbx, %rbx
000000000000475d	js	0x47cd
000000000000475f	movq	_OBJC_IVAR_$_UAPCaptioningViewController._profileIDs(%rip), %r15
0000000000004766	movq	(%r14,%r15), %rdi
000000000000476a	movq	0x2fbf7(%rip), %rsi     ## Objc selector ref: count
0000000000004771	callq	*0x24c89(%rip)          ## Objc message: -[%rdi count]
0000000000004777	cmpq	%rax, %rbx
000000000000477a	jae	0x47cd
000000000000477c	movq	(%r14,%r15), %rdi
0000000000004780	movq	0x2fbe9(%rip), %rsi     ## Objc selector ref: objectAtIndex:
0000000000004787	movq	0x24c72(%rip), %r15     ## Objc message: -[%rdi objectAtIndex:]
000000000000478e	movq	%rbx, %rdx
0000000000004791	callq	*%r15
0000000000004794	movq	%rax, %rbx
0000000000004797	movq	_OBJC_IVAR_$_UAPCaptioningViewController._activeProfile(%rip), %rax
000000000000479e	movq	(%r14,%rax), %rdi
00000000000047a2	movq	0x2f9a7(%rip), %rsi     ## Objc selector ref: release
00000000000047a9	callq	*%r15
00000000000047ac	movq	0x2fab5(%rip), %rsi     ## Objc selector ref: retain
00000000000047b3	movq	%rbx, %rdi
00000000000047b6	callq	*%r15
00000000000047b9	movq	_OBJC_IVAR_$_UAPCaptioningViewController._activeProfile(%rip), %rdx
00000000000047c0	movq	%rax, %rdi
00000000000047c3	movq	%r14, %rsi
00000000000047c6	callq	0x1e868                 ## symbol stub for: _objc_assign_ivar
00000000000047cb	jmp	0x4841
00000000000047cd	movq	_OBJC_IVAR_$_UAPCaptioningViewController._profileIDs(%rip), %rbx
00000000000047d4	movq	(%r14,%rbx), %rdi
00000000000047d8	movq	0x2fb89(%rip), %rsi     ## Objc selector ref: count
00000000000047df	callq	*0x24c1b(%rip)          ## Objc message: -[%rdi count]
00000000000047e5	testq	%rax, %rax
00000000000047e8	je	0x4841
00000000000047ea	movq	_OBJC_IVAR_$_UAPCaptioningViewController._activeProfile(%rip), %rax
00000000000047f1	movq	(%r14,%rax), %rdi
00000000000047f5	movq	0x2f954(%rip), %rsi     ## Objc selector ref: release
00000000000047fc	movq	0x24bfd(%rip), %r15     ## Objc message: -[%rdi release]
0000000000004803	callq	*%r15
0000000000004806	movq	(%r14,%rbx), %rdi
000000000000480a	movq	0x2fb5f(%rip), %rsi     ## Objc selector ref: objectAtIndex:
0000000000004811	xorl	%edx, %edx
0000000000004813	callq	*%r15
0000000000004816	movq	0x2fa4b(%rip), %rsi     ## Objc selector ref: retain
000000000000481d	movq	%rax, %rdi
0000000000004820	callq	*%r15
0000000000004823	movq	_OBJC_IVAR_$_UAPCaptioningViewController._activeProfile(%rip), %rbx
000000000000482a	movq	%rax, %rdi
000000000000482d	movq	%r14, %rsi
0000000000004830	movq	%rbx, %rdx
0000000000004833	callq	0x1e868                 ## symbol stub for: _objc_assign_ivar
0000000000004838	movq	(%r14,%rbx), %rdi
000000000000483c	callq	0x1e496                 ## symbol stub for: _MACaptionAppearancePrefSetActiveProfileID
0000000000004841	movq	0x2fb60(%rip), %rsi     ## Objc selector ref: _loadActiveProfile
0000000000004848	movq	%r14, %rdi
000000000000484b	addq	$0x8, %rsp
000000000000484f	popq	%rbx
0000000000004850	popq	%r14
0000000000004852	popq	%r15
0000000000004854	popq	%rbp
0000000000004855	jmpq	*0x24ba5(%rip)          ## Objc message: -[%rdi _loadActiveProfile]
000000000000485b	pushq	%rbp
000000000000485c	movq	%rsp, %rbp
000000000000485f	pushq	%r15
0000000000004861	pushq	%r14
0000000000004863	pushq	%r13
0000000000004865	pushq	%r12
0000000000004867	pushq	%rbx
0000000000004868	subq	$0x18, %rsp
000000000000486c	movq	%r8, %r14
000000000000486f	movq	%rdi, %r13
0000000000004872	movq	0x2fb8f(%rip), %rsi     ## Objc selector ref: makeViewWithIdentifier:owner:
0000000000004879	leaq	0x25b10(%rip), %rax     ## Objc cfstring ref: @"UAP_CAPTION_PROFILE_CELL"
0000000000004880	movq	0x24b79(%rip), %rbx     ## Objc message: -[%rdi makeViewWithIdentifier:owner:]
0000000000004887	movq	%rdx, %rdi
000000000000488a	movq	%rax, %rdx
000000000000488d	movq	%r13, %rcx
0000000000004890	callq	*%rbx
0000000000004892	movq	%rax, %r15
0000000000004895	movq	0x30ccc(%rip), %rdi     ## Objc class ref: UAPCaptioningProfileTableView
000000000000489c	movq	0x2f81d(%rip), %rsi     ## Objc selector ref: class
00000000000048a3	callq	*%rbx
00000000000048a5	movq	0x2f84c(%rip), %rsi     ## Objc selector ref: isKindOfClass:
00000000000048ac	movq	%r15, %rdi
00000000000048af	movq	%rax, %rdx
00000000000048b2	callq	*%rbx
00000000000048b4	testb	%al, %al
00000000000048b6	je	0x4977
00000000000048bc	movq	_OBJC_IVAR_$_UAPCaptioningViewController._profileIDs(%rip), %rax
00000000000048c3	movq	(%r13,%rax), %rdi
00000000000048c8	movq	0x2faa1(%rip), %rsi     ## Objc selector ref: objectAtIndex:
00000000000048cf	movq	%r14, %rdx
00000000000048d2	movq	%r14, -0x30(%rbp)
00000000000048d6	callq	*0x24b24(%rip)          ## Objc message: +[UAPCaptioningProfileTableView objectAtIndex:]
00000000000048dc	movq	%rax, -0x38(%rbp)
00000000000048e0	movq	%rax, %rdi
00000000000048e3	callq	0x1e45a                 ## symbol stub for: _MACaptionAppearancePrefCopyProfileName
00000000000048e8	movq	%rax, %r12
00000000000048eb	testq	%r12, %r12
00000000000048ee	je	0x48f5
00000000000048f0	movq	%r12, %r14
00000000000048f3	jmp	0x48fc
00000000000048f5	leaq	0x25814(%rip), %r14     ## Objc cfstring ref: @""
00000000000048fc	movq	0x2fb0d(%rip), %rsi     ## Objc selector ref: textField
0000000000004903	movq	%r15, %rdi
0000000000004906	movq	0x24af3(%rip), %rax     ## Objc message: -[%rdi textField]
000000000000490d	movq	%rax, %rbx
0000000000004910	callq	*%rbx
0000000000004912	movq	0x2faff(%rip), %rsi     ## Objc selector ref: setStringValue:
0000000000004919	movq	%rax, %rdi
000000000000491c	movq	%r14, %rdx
000000000000491f	callq	*%rbx
0000000000004921	movq	_OBJC_IVAR_$_UAPCaptioningViewController._profileTableView(%rip), %rax
0000000000004928	movq	(%r13,%rax), %rdi
000000000000492d	movq	0x2fa84(%rip), %rsi     ## Objc selector ref: selectedRow
0000000000004934	callq	*%rbx
0000000000004936	movb	$0x1, %r14b
0000000000004939	cmpq	-0x30(%rbp), %rax
000000000000493d	jne	0x494e
000000000000493f	movq	-0x38(%rbp), %rdi
0000000000004943	callq	0x1e478                 ## symbol stub for: _MACaptionAppearancePrefIsProfileEditable
0000000000004948	testb	%al, %al
000000000000494a	sete	%r14b
000000000000494e	movq	0x2fa9b(%rip), %rsi     ## Objc selector ref: editButton
0000000000004955	movq	%r15, %rdi
0000000000004958	callq	*%rbx
000000000000495a	movq	0x2fa97(%rip), %rsi     ## Objc selector ref: setHidden:
0000000000004961	movzbl	%r14b, %edx
0000000000004965	movq	%rax, %rdi
0000000000004968	callq	*%rbx
000000000000496a	testq	%r12, %r12
000000000000496d	je	0x4977
000000000000496f	movq	%r12, %rdi
0000000000004972	callq	0x1e562                 ## symbol stub for: _CFRelease
0000000000004977	movq	%r15, %rax
000000000000497a	addq	$0x18, %rsp
000000000000497e	popq	%rbx
000000000000497f	popq	%r12
0000000000004981	popq	%r13
0000000000004983	popq	%r14
0000000000004985	popq	%r15
0000000000004987	popq	%rbp
0000000000004988	retq
0000000000004989	pushq	%rbp
000000000000498a	movq	%rsp, %rbp
000000000000498d	pushq	%r15
000000000000498f	pushq	%r14
0000000000004991	pushq	%rbx
0000000000004992	pushq	%rax
0000000000004993	movq	%rdx, %r14
0000000000004996	movq	%rdi, %rbx
0000000000004999	movq	_OBJC_IVAR_$_UAPCaptioningViewController._addRemoveSegmentedControl(%rip), %r15
00000000000049a0	movq	(%rbx,%r15), %rdi
00000000000049a4	movq	0x2fa75(%rip), %rsi     ## Objc selector ref: isRemoveSelected
00000000000049ab	callq	*0x24a4f(%rip)          ## Objc message: -[%rdi isRemoveSelected]
00000000000049b1	testb	%al, %al
00000000000049b3	je	0x49d2
00000000000049b5	movq	0x2fa6c(%rip), %rsi     ## Objc selector ref: pressProfileDeleteButton:
00000000000049bc	movq	%rbx, %rdi
00000000000049bf	movq	%r14, %rdx
00000000000049c2	addq	$0x8, %rsp
00000000000049c6	popq	%rbx
00000000000049c7	popq	%r14
00000000000049c9	popq	%r15
00000000000049cb	popq	%rbp
00000000000049cc	jmpq	*0x24a2e(%rip)          ## Objc message: -[%rdi pressProfileDeleteButton:]
00000000000049d2	movq	(%rbx,%r15), %rdi
00000000000049d6	movq	0x2fa53(%rip), %rsi     ## Objc selector ref: isAddSelected
00000000000049dd	callq	*0x24a1d(%rip)          ## Objc message: -[%rdi isAddSelected]
00000000000049e3	testb	%al, %al
00000000000049e5	je	0x4a01
00000000000049e7	movq	0x2fa4a(%rip), %rsi     ## Objc selector ref: _addProfile
00000000000049ee	movq	%rbx, %rdi
00000000000049f1	addq	$0x8, %rsp
00000000000049f5	popq	%rbx
00000000000049f6	popq	%r14
00000000000049f8	popq	%r15
00000000000049fa	popq	%rbp
00000000000049fb	jmpq	*0x249ff(%rip)          ## Objc message: -[%rdi _addProfile]
0000000000004a01	addq	$0x8, %rsp
0000000000004a05	popq	%rbx
0000000000004a06	popq	%r14
0000000000004a08	popq	%r15
0000000000004a0a	popq	%rbp
0000000000004a0b	retq
0000000000004a0c	pushq	%rbp
0000000000004a0d	movq	%rsp, %rbp
0000000000004a10	pushq	%r14
0000000000004a12	pushq	%rbx
0000000000004a13	movq	%rdi, %r14
0000000000004a16	callq	0x1e44e                 ## symbol stub for: _MACaptionAppearancePrefCopyPreferAccessibleCaptions
0000000000004a1b	movq	%rax, %rbx
0000000000004a1e	testq	%rbx, %rbx
0000000000004a21	movq	_OBJC_IVAR_$_UAPCaptioningViewController._preferAccessibilityCaptionsCheckbox(%rip), %rax
0000000000004a28	movq	(%r14,%rax), %r14
0000000000004a2c	je	0x4a5a
0000000000004a2e	movq	%rbx, %rdi
0000000000004a31	callq	0x1e508                 ## symbol stub for: _CFBooleanGetValue
0000000000004a36	testb	%al, %al
0000000000004a38	setne	%al
0000000000004a3b	movzbl	%al, %edx
0000000000004a3e	movq	0x2f9fb(%rip), %rsi     ## Objc selector ref: setState:
0000000000004a45	movq	%r14, %rdi
0000000000004a48	callq	*0x249b2(%rip)          ## Objc message: -[%rdi setState:]
0000000000004a4e	movq	%rbx, %rdi
0000000000004a51	popq	%rbx
0000000000004a52	popq	%r14
0000000000004a54	popq	%rbp
0000000000004a55	jmp	0x1e562                 ## symbol stub for: _CFRelease
0000000000004a5a	movq	0x2f9df(%rip), %rsi     ## Objc selector ref: setState:
0000000000004a61	xorl	%edx, %edx
0000000000004a63	movq	%r14, %rdi
0000000000004a66	popq	%rbx
0000000000004a67	popq	%r14
0000000000004a69	popq	%rbp
0000000000004a6a	jmpq	*0x24990(%rip)          ## Objc message: -[%rdi setState:]
0000000000004a70	pushq	%rbp
0000000000004a71	movq	%rsp, %rbp
0000000000004a74	pushq	%r15
0000000000004a76	pushq	%r14
0000000000004a78	pushq	%r12
0000000000004a7a	pushq	%rbx
0000000000004a7b	movq	%rdi, %rbx
0000000000004a7e	movq	_OBJC_IVAR_$_UAPCaptioningViewController._activeProfile(%rip), %r15
0000000000004a85	movq	(%rbx,%r15), %rdi
0000000000004a89	callq	0x1e496                 ## symbol stub for: _MACaptionAppearancePrefSetActiveProfileID
0000000000004a8e	movq	(%rbx,%r15), %rdi
0000000000004a92	callq	0x1e45a                 ## symbol stub for: _MACaptionAppearancePrefCopyProfileName
0000000000004a97	movq	%rax, %r14
0000000000004a9a	testq	%r14, %r14
0000000000004a9d	movq	_OBJC_IVAR_$_UAPCaptioningViewController._profileIDs(%rip), %r12
0000000000004aa4	movq	(%rbx,%r12), %rdi
0000000000004aa8	je	0x4b0a
0000000000004aaa	movq	(%rbx,%r15), %rdx
0000000000004aae	movq	0x2f993(%rip), %rsi     ## Objc selector ref: indexOfObject:
0000000000004ab5	movq	0x24944(%rip), %r15     ## Objc message: -[%rdi indexOfObject:]
0000000000004abc	callq	*%r15
0000000000004abf	movq	0x30aaa(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_NSIndexSet
0000000000004ac6	movq	0x2f983(%rip), %rsi     ## Objc selector ref: indexSetWithIndex:
0000000000004acd	movq	%rax, %rdx
0000000000004ad0	callq	*%r15
0000000000004ad3	movq	_OBJC_IVAR_$_UAPCaptioningViewController._profileTableView(%rip), %rcx
0000000000004ada	movq	(%rbx,%rcx), %rdi
0000000000004ade	movq	0x2f973(%rip), %rsi     ## Objc selector ref: selectRowIndexes:byExtendingSelection:
0000000000004ae5	xorl	%ecx, %ecx
0000000000004ae7	movq	%rax, %rdx
0000000000004aea	callq	*%r15
0000000000004aed	movq	_OBJC_IVAR_$_UAPCaptioningViewController._profileNameTextField(%rip), %rax
0000000000004af4	movq	(%rbx,%rax), %rdi
0000000000004af8	movq	0x2f919(%rip), %rsi     ## Objc selector ref: setStringValue:
0000000000004aff	movq	%r14, %rdx
0000000000004b02	callq	*%r15
0000000000004b05	jmp	0x4b9c
0000000000004b0a	movq	0x2f857(%rip), %rsi     ## Objc selector ref: count
0000000000004b11	callq	*0x248e9(%rip)          ## Objc message: +[NSIndexSet count]
0000000000004b17	testq	%rax, %rax
0000000000004b1a	je	0x4ba4
0000000000004b20	movq	(%rbx,%r15), %rdi
0000000000004b24	movq	0x2f625(%rip), %rsi     ## Objc selector ref: release
0000000000004b2b	movq	0x248ce(%rip), %r14     ## Objc message: -[%rdi release]
0000000000004b32	callq	*%r14
0000000000004b35	movq	(%rbx,%r12), %rdi
0000000000004b39	movq	0x2f830(%rip), %rsi     ## Objc selector ref: objectAtIndex:
0000000000004b40	xorl	%edx, %edx
0000000000004b42	callq	*%r14
0000000000004b45	movq	0x2f71c(%rip), %rsi     ## Objc selector ref: retain
0000000000004b4c	movq	%rax, %rdi
0000000000004b4f	callq	*%r14
0000000000004b52	movq	_OBJC_IVAR_$_UAPCaptioningViewController._activeProfile(%rip), %r14
0000000000004b59	movq	%rax, %rdi
0000000000004b5c	movq	%rbx, %rsi
0000000000004b5f	movq	%r14, %rdx
0000000000004b62	callq	0x1e868                 ## symbol stub for: _objc_assign_ivar
0000000000004b67	movq	(%rbx,%r14), %rdi
0000000000004b6b	callq	0x1e496                 ## symbol stub for: _MACaptionAppearancePrefSetActiveProfileID
0000000000004b70	movq	(%rbx,%r14), %rdi
0000000000004b74	callq	0x1e45a                 ## symbol stub for: _MACaptionAppearancePrefCopyProfileName
0000000000004b79	movq	%rax, %r14
0000000000004b7c	testq	%r14, %r14
0000000000004b7f	je	0x4ba4
0000000000004b81	movq	_OBJC_IVAR_$_UAPCaptioningViewController._profileNameTextField(%rip), %rax
0000000000004b88	movq	(%rbx,%rax), %rdi
0000000000004b8c	movq	0x2f885(%rip), %rsi     ## Objc selector ref: setStringValue:
0000000000004b93	movq	%r14, %rdx
0000000000004b96	callq	*0x24864(%rip)          ## Objc message: -[%rdi setStringValue:]
0000000000004b9c	movq	%r14, %rdi
0000000000004b9f	callq	0x1e562                 ## symbol stub for: _CFRelease
0000000000004ba4	movq	0x2f74d(%rip), %rsi     ## Objc selector ref: _updateSelectionBasedUI
0000000000004bab	movq	0x2484e(%rip), %r14     ## Objc message: -[%rdi _updateSelectionBasedUI]
0000000000004bb2	movq	%rbx, %rdi
0000000000004bb5	callq	*%r14
0000000000004bb8	movq	0x2f8a1(%rip), %rsi     ## Objc selector ref: _loadPreferences
0000000000004bbf	movq	%rbx, %rdi
0000000000004bc2	movq	%r14, %rax
0000000000004bc5	popq	%rbx
0000000000004bc6	popq	%r12
0000000000004bc8	popq	%r14
0000000000004bca	popq	%r15
0000000000004bcc	popq	%rbp
0000000000004bcd	jmpq	*%rax
0000000000004bcf	pushq	%rbp
0000000000004bd0	movq	%rsp, %rbp
0000000000004bd3	pushq	%r15
0000000000004bd5	pushq	%r14
0000000000004bd7	pushq	%rbx
0000000000004bd8	pushq	%rax
0000000000004bd9	movq	%rcx, %r15
0000000000004bdc	movq	%rdx, %r14
0000000000004bdf	movq	_OBJC_IVAR_$_UAPCaptioningViewController._activeProfile(%rip), %rax
0000000000004be6	movq	(%rdi,%rax), %rdi
0000000000004bea	callq	*%r15
0000000000004bed	movq	%rax, %rbx
0000000000004bf0	testq	%rbx, %rbx
0000000000004bf3	je	0x4c22
0000000000004bf5	movq	%rbx, %rdi
0000000000004bf8	callq	0x4c82
0000000000004bfd	movq	0x2f864(%rip), %rsi     ## Objc selector ref: setColor:
0000000000004c04	movq	%r14, %rdi
0000000000004c07	movq	%rax, %rdx
0000000000004c0a	callq	*0x247f0(%rip)          ## Objc message: -[%rdi setColor:]
0000000000004c10	movq	%rbx, %rdi
0000000000004c13	addq	$0x8, %rsp
0000000000004c17	popq	%rbx
0000000000004c18	popq	%r14
0000000000004c1a	popq	%r15
0000000000004c1c	popq	%rbp
0000000000004c1d	jmp	0x1e562                 ## symbol stub for: _CFRelease
0000000000004c22	cmpq	0x243ef(%rip), %r15     ## literal pool symbol address: _MACaptionAppearancePrefCopyBackgroundColor
0000000000004c29	je	0x4c3f
0000000000004c2b	cmpq	0x243f6(%rip), %r15     ## literal pool symbol address: _MACaptionAppearancePrefCopyForegroundColor
0000000000004c32	je	0x4c4f
0000000000004c34	addq	$0x8, %rsp
0000000000004c38	popq	%rbx
0000000000004c39	popq	%r14
0000000000004c3b	popq	%r15
0000000000004c3d	popq	%rbp
0000000000004c3e	retq
0000000000004c3f	movq	0x308aa(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_NSColor
0000000000004c46	movq	0x2f823(%rip), %rsi     ## Objc selector ref: blackColor
0000000000004c4d	jmp	0x4c5d
0000000000004c4f	movq	0x3089a(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_NSColor
0000000000004c56	movq	0x2f5db(%rip), %rsi     ## Objc selector ref: whiteColor
0000000000004c5d	movq	0x2479c(%rip), %rbx     ## Objc message: +[NSColor whiteColor]
0000000000004c64	callq	*%rbx
0000000000004c66	movq	0x2f7fb(%rip), %rsi     ## Objc selector ref: setColor:
0000000000004c6d	movq	%r14, %rdi
0000000000004c70	movq	%rax, %rdx
0000000000004c73	movq	%rbx, %rax
0000000000004c76	addq	$0x8, %rsp
0000000000004c7a	popq	%rbx
0000000000004c7b	popq	%r14
0000000000004c7d	popq	%r15
0000000000004c7f	popq	%rbp
0000000000004c80	jmpq	*%rax
0000000000004c82	pushq	%rbp
0000000000004c83	movq	%rsp, %rbp
0000000000004c86	pushq	%rbx
0000000000004c87	pushq	%rax
0000000000004c88	movq	%rdi, %rbx
0000000000004c8b	testq	%rbx, %rbx
0000000000004c8e	je	0x4cdf
0000000000004c90	movq	%rbx, %rdi
0000000000004c93	callq	0x1e92e                 ## symbol stub for: _CGColorGetColorSpace
0000000000004c98	testq	%rax, %rax
0000000000004c9b	je	0x4cdf
0000000000004c9d	movq	%rax, %rdi
0000000000004ca0	callq	0x1e940                 ## symbol stub for: _CGColorSpaceGetModel
0000000000004ca5	cmpl	$0x1, %eax
0000000000004ca8	jne	0x4cdf
0000000000004caa	movq	%rbx, %rdi
0000000000004cad	callq	0x1e934                 ## symbol stub for: _CGColorGetComponents
0000000000004cb2	movsd	(%rax), %xmm0
0000000000004cb6	movsd	0x8(%rax), %xmm1
0000000000004cbb	movsd	0x10(%rax), %xmm2
0000000000004cc0	movsd	0x18(%rax), %xmm3
0000000000004cc5	movq	0x30824(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_NSColor
0000000000004ccc	movq	0x2f48d(%rip), %rsi     ## Objc selector ref: colorWithCalibratedRed:green:blue:alpha:
0000000000004cd3	addq	$0x8, %rsp
0000000000004cd7	popq	%rbx
0000000000004cd8	popq	%rbp
0000000000004cd9	jmpq	*0x24721(%rip)          ## Objc message: +[NSColor colorWithCalibratedRed:green:blue:alpha:]
0000000000004cdf	xorl	%eax, %eax
0000000000004ce1	addq	$0x8, %rsp
0000000000004ce5	popq	%rbx
0000000000004ce6	popq	%rbp
0000000000004ce7	retq
0000000000004ce8	pushq	%rbp
0000000000004ce9	movq	%rsp, %rbp
0000000000004cec	pushq	%r15
0000000000004cee	pushq	%r14
0000000000004cf0	pushq	%rbx
0000000000004cf1	pushq	%rax
0000000000004cf2	movq	%rdi, %r14
0000000000004cf5	movq	_OBJC_IVAR_$_UAPCaptioningViewController._activeProfile(%rip), %rax
0000000000004cfc	movq	(%r14,%rax), %rdi
0000000000004d00	callq	0x1e466                 ## symbol stub for: _MACaptionAppearancePrefCopyTextEdgeStyle
0000000000004d05	movq	%rax, %rbx
0000000000004d08	xorl	%r15d, %r15d
0000000000004d0b	testq	%rbx, %rbx
0000000000004d0e	je	0x4d2b
0000000000004d10	movq	0x2f421(%rip), %rsi     ## Objc selector ref: integerValue
0000000000004d17	movq	%rbx, %rdi
0000000000004d1a	callq	*0x246e0(%rip)          ## Objc message: -[%rdi integerValue]
0000000000004d20	movq	%rax, %r15
0000000000004d23	movq	%rbx, %rdi
0000000000004d26	callq	0x1e562                 ## symbol stub for: _CFRelease
0000000000004d2b	movq	_OBJC_IVAR_$_UAPCaptioningViewController._edgeStylePopup(%rip), %rax
0000000000004d32	movq	(%r14,%rax), %rdi
0000000000004d36	movq	0x2f73b(%rip), %rsi     ## Objc selector ref: selectItemWithTag:
0000000000004d3d	movq	%r15, %rdx
0000000000004d40	addq	$0x8, %rsp
0000000000004d44	popq	%rbx
0000000000004d45	popq	%r14
0000000000004d47	popq	%r15
0000000000004d49	popq	%rbp
0000000000004d4a	jmpq	*0x246b0(%rip)          ## Objc message: -[%rdi selectItemWithTag:]
0000000000004d50	pushq	%rbp
0000000000004d51	movq	%rsp, %rbp
0000000000004d54	pushq	%r15
0000000000004d56	pushq	%r14
0000000000004d58	pushq	%r13
0000000000004d5a	pushq	%r12
0000000000004d5c	pushq	%rbx
0000000000004d5d	subq	$0xe8, %rsp
0000000000004d64	movq	%rdx, %r15
0000000000004d67	movq	0x245ea(%rip), %rbx     ## literal pool symbol address: ___stack_chk_guard
0000000000004d6e	movq	(%rbx), %rax
0000000000004d71	movq	%rax, -0x30(%rbp)
0000000000004d75	movq	_OBJC_IVAR_$_UAPCaptioningViewController._activeProfile(%rip), %rax
0000000000004d7c	movq	(%rdi,%rax), %rdi
0000000000004d80	callq	*%rcx
0000000000004d82	testq	%rax, %rax
0000000000004d85	je	0x4eea
0000000000004d8b	movq	%rax, %rdi
0000000000004d8e	movq	%rdi, -0x110(%rbp)
0000000000004d95	callq	0x4c82
0000000000004d9a	movq	%rax, -0xf8(%rbp)
0000000000004da1	xorps	%xmm0, %xmm0
0000000000004da4	movaps	%xmm0, -0xc0(%rbp)
0000000000004dab	movaps	%xmm0, -0xd0(%rbp)
0000000000004db2	movaps	%xmm0, -0xe0(%rbp)
0000000000004db9	movaps	%xmm0, -0xf0(%rbp)
0000000000004dc0	movq	0x2f6b9(%rip), %rsi     ## Objc selector ref: itemArray
0000000000004dc7	movq	0x24632(%rip), %r14     ## Objc message: -[%rdi itemArray]
0000000000004dce	movq	%r15, %rdi
0000000000004dd1	movq	%r15, -0x108(%rbp)
0000000000004dd8	callq	*%r14
0000000000004ddb	movq	%rax, -0x100(%rbp)
0000000000004de2	movq	0x2f327(%rip), %rsi     ## Objc selector ref: countByEnumeratingWithState:objects:count:
0000000000004de9	leaq	-0xf0(%rbp), %rdx
0000000000004df0	leaq	-0xb0(%rbp), %rcx
0000000000004df7	movl	$0x10, %r8d
0000000000004dfd	movq	%rax, %rdi
0000000000004e00	callq	*%r14
0000000000004e03	movq	%rax, %rbx
0000000000004e06	testq	%rbx, %rbx
0000000000004e09	je	0x4ea0
0000000000004e0f	movq	-0xe0(%rbp), %rax
0000000000004e16	movq	(%rax), %r15
0000000000004e19	xorl	%r13d, %r13d
0000000000004e1c	movq	-0xe0(%rbp), %rax
0000000000004e23	cmpq	%r15, (%rax)
0000000000004e26	je	0x4e34
0000000000004e28	movq	-0x100(%rbp), %rdi
0000000000004e2f	callq	0x1e886                 ## symbol stub for: _objc_enumerationMutation
0000000000004e34	movq	-0xe8(%rbp), %rax
0000000000004e3b	movq	(%rax,%r13,8), %r12
0000000000004e3f	movq	%r12, %rdi
0000000000004e42	movq	0x2f63f(%rip), %rsi     ## Objc selector ref: representedObject
0000000000004e49	callq	*%r14
0000000000004e4c	movq	-0xf8(%rbp), %rdi
0000000000004e53	movq	0x2f636(%rip), %rsi     ## Objc selector ref: isEqualTo:
0000000000004e5a	movq	%rax, %rdx
0000000000004e5d	callq	*%r14
0000000000004e60	testb	%al, %al
0000000000004e62	jne	0x4ebc
0000000000004e64	incq	%r13
0000000000004e67	cmpq	%rbx, %r13
0000000000004e6a	jb	0x4e1c
0000000000004e6c	movl	$0x10, %r8d
0000000000004e72	movq	-0x100(%rbp), %rdi
0000000000004e79	movq	0x2f290(%rip), %rsi     ## Objc selector ref: countByEnumeratingWithState:objects:count:
0000000000004e80	leaq	-0xf0(%rbp), %rdx
0000000000004e87	leaq	-0xb0(%rbp), %rcx
0000000000004e8e	callq	*0x2456c(%rip)          ## Objc message: -[%rdi countByEnumeratingWithState:objects:count:]
0000000000004e94	movq	%rax, %rbx
0000000000004e97	testq	%rbx, %rbx
0000000000004e9a	jne	0x4e19
0000000000004ea0	movq	-0x110(%rbp), %rdi
0000000000004ea7	callq	0x1e562                 ## symbol stub for: _CFRelease
0000000000004eac	movq	0x244a5(%rip), %rbx     ## literal pool symbol address: ___stack_chk_guard
0000000000004eb3	movq	-0x108(%rbp), %r15
0000000000004eba	jmp	0x4eea
0000000000004ebc	movq	-0x110(%rbp), %rdi
0000000000004ec3	callq	0x1e562                 ## symbol stub for: _CFRelease
0000000000004ec8	testq	%r12, %r12
0000000000004ecb	movq	0x24486(%rip), %rbx     ## literal pool symbol address: ___stack_chk_guard
0000000000004ed2	movq	-0x108(%rbp), %r15
0000000000004ed9	je	0x4eea
0000000000004edb	movq	0x2f5be(%rip), %rsi     ## Objc selector ref: selectItem:
0000000000004ee2	movq	%r15, %rdi
0000000000004ee5	movq	%r12, %rdx
0000000000004ee8	jmp	0x4ef6
0000000000004eea	movq	0x2f5a7(%rip), %rsi     ## Objc selector ref: selectItemAtIndex:
0000000000004ef1	xorl	%edx, %edx
0000000000004ef3	movq	%r15, %rdi
0000000000004ef6	callq	*0x24504(%rip)          ## Objc message: -[%rdi selectItemAtIndex:]
0000000000004efc	movq	(%rbx), %rax
0000000000004eff	cmpq	-0x30(%rbp), %rax
0000000000004f03	jne	0x4f17
0000000000004f05	addq	$0xe8, %rsp
0000000000004f0c	popq	%rbx
0000000000004f0d	popq	%r12
0000000000004f0f	popq	%r13
0000000000004f11	popq	%r14
0000000000004f13	popq	%r15
0000000000004f15	popq	%rbp
0000000000004f16	retq
0000000000004f17	callq	0x1e8b6                 ## symbol stub for: ___stack_chk_fail
0000000000004f1c	pushq	%rbp
0000000000004f1d	movq	%rsp, %rbp
0000000000004f20	pushq	%r15
0000000000004f22	pushq	%r14
0000000000004f24	pushq	%rbx
0000000000004f25	pushq	%rax
0000000000004f26	movq	%rdx, %r14
0000000000004f29	movq	_OBJC_IVAR_$_UAPCaptioningViewController._activeProfile(%rip), %rax
0000000000004f30	movq	(%rdi,%rax), %rdi
0000000000004f34	callq	*%rcx
0000000000004f36	movq	%rax, %rbx
0000000000004f39	testq	%rbx, %rbx
0000000000004f3c	je	0x4fb2
0000000000004f3e	movq	0x2f563(%rip), %rsi     ## Objc selector ref: floatValue
0000000000004f45	movq	0x244b4(%rip), %r15     ## Objc message: -[%rdi floatValue]
0000000000004f4c	movq	%rbx, %rdi
0000000000004f4f	callq	*%r15
0000000000004f52	mulss	0x233c6(%rip), %xmm0
0000000000004f5a	movss	0x233c2(%rip), %xmm1
0000000000004f62	movaps	%xmm0, %xmm2
0000000000004f65	subss	%xmm1, %xmm2
0000000000004f69	cvttss2si	%xmm2, %rax
0000000000004f6e	movabsq	$-0x8000000000000000, %rcx ## imm = 0x8000000000000000
0000000000004f78	xorq	%rax, %rcx
0000000000004f7b	cvttss2si	%xmm0, %rax
0000000000004f80	ucomiss	%xmm1, %xmm0
0000000000004f83	cmovaeq	%rcx, %rax
0000000000004f87	testq	%rax, %rax
0000000000004f8a	movl	$0x64, %edx
0000000000004f8f	cmovneq	%rax, %rdx
0000000000004f93	movq	0x2f4de(%rip), %rsi     ## Objc selector ref: selectItemWithTag:
0000000000004f9a	movq	%r14, %rdi
0000000000004f9d	callq	*%r15
0000000000004fa0	movq	%rbx, %rdi
0000000000004fa3	addq	$0x8, %rsp
0000000000004fa7	popq	%rbx
0000000000004fa8	popq	%r14
0000000000004faa	popq	%r15
0000000000004fac	popq	%rbp
0000000000004fad	jmp	0x1e562                 ## symbol stub for: _CFRelease
0000000000004fb2	movq	0x2f4bf(%rip), %rsi     ## Objc selector ref: selectItemWithTag:
0000000000004fb9	movl	$0x64, %edx
0000000000004fbe	movq	%r14, %rdi
0000000000004fc1	addq	$0x8, %rsp
0000000000004fc5	popq	%rbx
0000000000004fc6	popq	%r14
0000000000004fc8	popq	%r15
0000000000004fca	popq	%rbp
0000000000004fcb	jmpq	*0x2442f(%rip)          ## Objc message: -[%rdi selectItemWithTag:]
0000000000004fd1	pushq	%rbp
0000000000004fd2	movq	%rsp, %rbp
0000000000004fd5	pushq	%r15
0000000000004fd7	pushq	%r14
0000000000004fd9	pushq	%rbx
0000000000004fda	pushq	%rax
0000000000004fdb	movq	%rdx, %r14
0000000000004fde	movq	_OBJC_IVAR_$_UAPCaptioningViewController._activeProfile(%rip), %rax
0000000000004fe5	movq	(%rdi,%rax), %rdi
0000000000004fe9	callq	*%rcx
0000000000004feb	movq	%rax, %rbx
0000000000004fee	testq	%rbx, %rbx
0000000000004ff1	je	0x505b
0000000000004ff3	movq	0x2f4ae(%rip), %rsi     ## Objc selector ref: floatValue
0000000000004ffa	movq	0x243ff(%rip), %r15     ## Objc message: -[%rdi floatValue]
0000000000005001	movq	%rbx, %rdi
0000000000005004	callq	*%r15
0000000000005007	mulss	0x23311(%rip), %xmm0
000000000000500f	movss	0x2330d(%rip), %xmm1
0000000000005017	movaps	%xmm0, %xmm2
000000000000501a	subss	%xmm1, %xmm2
000000000000501e	cvttss2si	%xmm2, %rax
0000000000005023	movabsq	$-0x8000000000000000, %rcx ## imm = 0x8000000000000000
000000000000502d	xorq	%rax, %rcx
0000000000005030	cvttss2si	%xmm0, %rdx
0000000000005035	ucomiss	%xmm1, %xmm0
0000000000005038	cmovaeq	%rcx, %rdx
000000000000503c	movq	0x2f435(%rip), %rsi     ## Objc selector ref: selectItemWithTag:
0000000000005043	movq	%r14, %rdi
0000000000005046	callq	*%r15
0000000000005049	movq	%rbx, %rdi
000000000000504c	addq	$0x8, %rsp
0000000000005050	popq	%rbx
0000000000005051	popq	%r14
0000000000005053	popq	%r15
0000000000005055	popq	%rbp
0000000000005056	jmp	0x1e562                 ## symbol stub for: _CFRelease
000000000000505b	movq	0x2f436(%rip), %rsi     ## Objc selector ref: selectItemAtIndex:
0000000000005062	xorl	%edx, %edx
0000000000005064	movq	%r14, %rdi
0000000000005067	addq	$0x8, %rsp
000000000000506b	popq	%rbx
000000000000506c	popq	%r14
000000000000506e	popq	%r15
0000000000005070	popq	%rbp
0000000000005071	jmpq	*0x24389(%rip)          ## Objc message: -[%rdi selectItemAtIndex:]
0000000000005077	pushq	%rbp
0000000000005078	movq	%rsp, %rbp
000000000000507b	pushq	%r15
000000000000507d	pushq	%r14
000000000000507f	pushq	%r13
0000000000005081	pushq	%r12
0000000000005083	pushq	%rbx
0000000000005084	subq	$0xf8, %rsp
000000000000508b	movq	%rdx, %r15
000000000000508e	movq	%rdi, %r12
0000000000005091	movq	0x242c0(%rip), %r14     ## literal pool symbol address: ___stack_chk_guard
0000000000005098	movq	(%r14), %rax
000000000000509b	movq	%rax, -0x30(%rbp)
000000000000509f	movq	_OBJC_IVAR_$_UAPCaptioningViewController._activeProfile(%rip), %rax
00000000000050a6	movq	(%r12,%rax), %rdi
00000000000050aa	movq	%rcx, %rsi
00000000000050ad	callq	0x1e448                 ## symbol stub for: _MACaptionAppearancePrefCopyFontForStyle
00000000000050b2	movq	%rax, %rbx
00000000000050b5	testq	%rbx, %rbx
00000000000050b8	je	0x52bb
00000000000050be	movq	%rbx, %rdi
00000000000050c1	callq	0x1e964                 ## symbol stub for: _CGFontCopyPostScriptName
00000000000050c6	movq	%rax, %r13
00000000000050c9	testq	%r13, %r13
00000000000050cc	je	0x52b3
00000000000050d2	movq	%rbx, -0x110(%rbp)
00000000000050d9	movq	_OBJC_IVAR_$_UAPCaptioningViewController._storagePSNameToFontFamilyPS(%rip), %rax
00000000000050e0	movq	(%r12,%rax), %rdi
00000000000050e4	movq	0x2f0dd(%rip), %rsi     ## Objc selector ref: objectForKey:
00000000000050eb	movq	0x2430e(%rip), %r14     ## Objc message: -[%rdi objectForKey:]
00000000000050f2	movq	%r13, %rdx
00000000000050f5	callq	*%r14
00000000000050f8	movq	%rax, %rbx
00000000000050fb	movq	0x2f026(%rip), %rsi     ## Objc selector ref: length
0000000000005102	movq	%rbx, %rdi
0000000000005105	callq	*%r14
0000000000005108	testq	%rax, %rax
000000000000510b	movq	%r13, %r14
000000000000510e	je	0x5123
0000000000005110	movq	%r14, %rdi
0000000000005113	callq	0x1e562                 ## symbol stub for: _CFRelease
0000000000005118	movq	%rbx, %rdi
000000000000511b	callq	0x1e568                 ## symbol stub for: _CFRetain
0000000000005120	movq	%rax, %r14
0000000000005123	movq	%r14, -0x118(%rbp)
000000000000512a	movq	0x30447(%rip), %r12     ## Objc class ref: _OBJC_CLASS_$_NSFont
0000000000005131	movq	0x2f378(%rip), %rsi     ## Objc selector ref: systemFontSize
0000000000005138	movq	%r12, %rdi
000000000000513b	movq	0x242be(%rip), %rbx     ## Objc message: +[NSFont systemFontSize]
0000000000005142	callq	*%rbx
0000000000005144	movq	0x2f36d(%rip), %rsi     ## Objc selector ref: fontWithName:size:
000000000000514b	movq	%r12, %rdi
000000000000514e	movq	%r14, %rdx
0000000000005151	callq	*%rbx
0000000000005153	movq	0x2f366(%rip), %rsi     ## Objc selector ref: fontDescriptor
000000000000515a	movq	%rax, %rdi
000000000000515d	callq	*%rbx
000000000000515f	movq	0x23f9a(%rip), %rcx     ## literal pool symbol address: _NSFontFamilyAttribute
0000000000005166	movq	(%rcx), %rdx
0000000000005169	movq	0x2f058(%rip), %rsi     ## Objc selector ref: objectForKey:
0000000000005170	movq	%rax, %rdi
0000000000005173	callq	*%rbx
0000000000005175	movq	%rax, -0xf8(%rbp)
000000000000517c	xorps	%xmm0, %xmm0
000000000000517f	movaps	%xmm0, -0xc0(%rbp)
0000000000005186	movaps	%xmm0, -0xd0(%rbp)
000000000000518d	movaps	%xmm0, -0xe0(%rbp)
0000000000005194	movaps	%xmm0, -0xf0(%rbp)
000000000000519b	movq	0x2f2de(%rip), %rsi     ## Objc selector ref: itemArray
00000000000051a2	movq	%r15, %rdi
00000000000051a5	movq	%r15, -0x108(%rbp)
00000000000051ac	callq	*%rbx
00000000000051ae	movq	%rax, -0x100(%rbp)
00000000000051b5	movq	0x2ef54(%rip), %rsi     ## Objc selector ref: countByEnumeratingWithState:objects:count:
00000000000051bc	leaq	-0xf0(%rbp), %rdx
00000000000051c3	leaq	-0xb0(%rbp), %rcx
00000000000051ca	movl	$0x10, %r8d
00000000000051d0	movq	%rax, %rdi
00000000000051d3	callq	*%rbx
00000000000051d5	movq	%rax, %r14
00000000000051d8	xorl	%r13d, %r13d
00000000000051db	testq	%r14, %r14
00000000000051de	je	0x5279
00000000000051e4	movq	-0xe0(%rbp), %rax
00000000000051eb	movq	(%rax), %r12
00000000000051ee	xorl	%r15d, %r15d
00000000000051f1	movq	-0xe0(%rbp), %rax
00000000000051f8	cmpq	%r12, (%rax)
00000000000051fb	je	0x5209
00000000000051fd	movq	-0x100(%rbp), %rdi
0000000000005204	callq	0x1e886                 ## symbol stub for: _objc_enumerationMutation
0000000000005209	movq	-0xe8(%rbp), %rax
0000000000005210	movq	(%rax,%r15,8), %r13
0000000000005214	movq	%r13, %rdi
0000000000005217	movq	0x2f2aa(%rip), %rsi     ## Objc selector ref: title
000000000000521e	callq	*%rbx
0000000000005220	movq	%rax, %rdi
0000000000005223	movq	0x2f2a6(%rip), %rsi     ## Objc selector ref: isEqual:
000000000000522a	movq	-0xf8(%rbp), %rdx
0000000000005231	callq	*%rbx
0000000000005233	testb	%al, %al
0000000000005235	jne	0x5279
0000000000005237	incq	%r15
000000000000523a	cmpq	%r14, %r15
000000000000523d	jb	0x51f1
000000000000523f	movl	$0x10, %r8d
0000000000005245	movq	-0x100(%rbp), %rdi
000000000000524c	movq	0x2eebd(%rip), %rsi     ## Objc selector ref: countByEnumeratingWithState:objects:count:
0000000000005253	leaq	-0xf0(%rbp), %rdx
000000000000525a	leaq	-0xb0(%rbp), %rcx
0000000000005261	callq	*0x24199(%rip)          ## Objc message: -[%rdi countByEnumeratingWithState:objects:count:]
0000000000005267	movq	%rax, %r14
000000000000526a	testq	%r14, %r14
000000000000526d	movl	$0x0, %r13d
0000000000005273	jne	0x51ee
0000000000005279	movq	-0x118(%rbp), %rdi
0000000000005280	callq	0x1e562                 ## symbol stub for: _CFRelease
0000000000005285	movq	-0x110(%rbp), %rdi
000000000000528c	callq	0x1e562                 ## symbol stub for: _CFRelease
0000000000005291	testq	%r13, %r13
0000000000005294	movq	0x240bd(%rip), %r14     ## literal pool symbol address: ___stack_chk_guard
000000000000529b	movq	-0x108(%rbp), %r15
00000000000052a2	je	0x52bb
00000000000052a4	movq	0x2f1f5(%rip), %rsi     ## Objc selector ref: selectItem:
00000000000052ab	movq	%r15, %rdi
00000000000052ae	movq	%r13, %rdx
00000000000052b1	jmp	0x52c7
00000000000052b3	movq	%rbx, %rdi
00000000000052b6	callq	0x1e562                 ## symbol stub for: _CFRelease
00000000000052bb	movq	0x2f1d6(%rip), %rsi     ## Objc selector ref: selectItemAtIndex:
00000000000052c2	xorl	%edx, %edx
00000000000052c4	movq	%r15, %rdi
00000000000052c7	callq	*0x24133(%rip)          ## Objc message: -[%rdi selectItemAtIndex:]
00000000000052cd	movq	(%r14), %rax
00000000000052d0	cmpq	-0x30(%rbp), %rax
00000000000052d4	jne	0x52e8
00000000000052d6	addq	$0xf8, %rsp
00000000000052dd	popq	%rbx
00000000000052de	popq	%r12
00000000000052e0	popq	%r13
00000000000052e2	popq	%r14
00000000000052e4	popq	%r15
00000000000052e6	popq	%rbp
00000000000052e7	retq
00000000000052e8	callq	0x1e8b6                 ## symbol stub for: ___stack_chk_fail
00000000000052ed	pushq	%rbp
00000000000052ee	movq	%rsp, %rbp
00000000000052f1	pushq	%rbx
00000000000052f2	pushq	%rax
00000000000052f3	movq	%rdx, %rbx
00000000000052f6	movq	_OBJC_IVAR_$_UAPCaptioningViewController._activeProfile(%rip), %rax
00000000000052fd	movq	(%rdi,%rax), %rdi
0000000000005301	callq	*%rcx
0000000000005303	testq	%rax, %rax
0000000000005306	je	0x5321
0000000000005308	movq	%rax, %rdi
000000000000530b	callq	0x1e508                 ## symbol stub for: _CFBooleanGetValue
0000000000005310	testb	%al, %al
0000000000005312	setne	%al
0000000000005315	movzbl	%al, %edx
0000000000005318	movq	0x2f121(%rip), %rsi     ## Objc selector ref: setState:
000000000000531f	jmp	0x532a
0000000000005321	movq	0x2f118(%rip), %rsi     ## Objc selector ref: setState:
0000000000005328	xorl	%edx, %edx
000000000000532a	movq	%rbx, %rdi
000000000000532d	addq	$0x8, %rsp
0000000000005331	popq	%rbx
0000000000005332	popq	%rbp
0000000000005333	jmpq	*0x240c7(%rip)          ## Objc message: -[%rdi setState:]
0000000000005339	pushq	%rbp
000000000000533a	movq	%rsp, %rbp
000000000000533d	pushq	%r14
000000000000533f	pushq	%rbx
0000000000005340	movq	%rdx, %r14
0000000000005343	movq	_OBJC_IVAR_$_UAPCaptioningViewController._activeProfile(%rip), %rax
000000000000534a	movq	(%rdi,%rax), %rdi
000000000000534e	movq	%rcx, %rsi
0000000000005351	callq	0x1e46c                 ## symbol stub for: _MACaptionAppearancePrefCopyVideoOverrideFontForStyle
0000000000005356	movq	%rax, %rbx
0000000000005359	testq	%rbx, %rbx
000000000000535c	je	0x538a
000000000000535e	movq	%rbx, %rdi
0000000000005361	callq	0x1e508                 ## symbol stub for: _CFBooleanGetValue
0000000000005366	testb	%al, %al
0000000000005368	setne	%al
000000000000536b	movzbl	%al, %edx
000000000000536e	movq	0x2f0cb(%rip), %rsi     ## Objc selector ref: setState:
0000000000005375	movq	%r14, %rdi
0000000000005378	callq	*0x24082(%rip)          ## Objc message: -[%rdi setState:]
000000000000537e	movq	%rbx, %rdi
0000000000005381	popq	%rbx
0000000000005382	popq	%r14
0000000000005384	popq	%rbp
0000000000005385	jmp	0x1e562                 ## symbol stub for: _CFRelease
000000000000538a	movq	0x2f0af(%rip), %rsi     ## Objc selector ref: setState:
0000000000005391	xorl	%edx, %edx
0000000000005393	movq	%r14, %rdi
0000000000005396	popq	%rbx
0000000000005397	popq	%r14
0000000000005399	popq	%rbp
000000000000539a	jmpq	*0x24060(%rip)          ## Objc message: -[%rdi setState:]
00000000000053a0	pushq	%rbp
00000000000053a1	movq	%rsp, %rbp
00000000000053a4	pushq	%r15
00000000000053a6	pushq	%r14
00000000000053a8	pushq	%r13
00000000000053aa	pushq	%r12
00000000000053ac	pushq	%rbx
00000000000053ad	subq	$0x48, %rsp
00000000000053b1	movq	%rdi, %r14
00000000000053b4	movq	0x23f9d(%rip), %r15     ## literal pool symbol address: ___stack_chk_guard
00000000000053bb	movq	(%r15), %rax
00000000000053be	movq	%rax, -0x30(%rbp)
00000000000053c2	movq	_OBJC_IVAR_$_UAPCaptioningViewController._textColorOverrideCheckbox(%rip), %rax
00000000000053c9	movq	(%r14,%rax), %rdi
00000000000053cd	leaq	-0x70(%rbp), %rsi
00000000000053d1	callq	0x1e86e                 ## symbol stub for: _objc_assign_strongCast
00000000000053d6	leaq	-0x68(%rbp), %rsi
00000000000053da	movq	_OBJC_IVAR_$_UAPCaptioningViewController._textSizeOverrideCheckbox(%rip), %rax
00000000000053e1	movq	(%r14,%rax), %rdi
00000000000053e5	callq	0x1e86e                 ## symbol stub for: _objc_assign_strongCast
00000000000053ea	leaq	-0x60(%rbp), %rsi
00000000000053ee	movq	_OBJC_IVAR_$_UAPCaptioningViewController._textOpacityOverrideCheckbox(%rip), %rax
00000000000053f5	movq	(%r14,%rax), %rdi
00000000000053f9	callq	0x1e86e                 ## symbol stub for: _objc_assign_strongCast
00000000000053fe	leaq	-0x58(%rbp), %rsi
0000000000005402	movq	_OBJC_IVAR_$_UAPCaptioningViewController._edgeStyleOverrideCheckbox(%rip), %rax
0000000000005409	movq	(%r14,%rax), %rdi
000000000000540d	callq	0x1e86e                 ## symbol stub for: _objc_assign_strongCast
0000000000005412	leaq	-0x50(%rbp), %rsi
0000000000005416	movq	_OBJC_IVAR_$_UAPCaptioningViewController._backgroundColorOverrideCheckbox(%rip), %rax
000000000000541d	movq	(%r14,%rax), %rdi
0000000000005421	callq	0x1e86e                 ## symbol stub for: _objc_assign_strongCast
0000000000005426	leaq	-0x48(%rbp), %rsi
000000000000542a	movq	_OBJC_IVAR_$_UAPCaptioningViewController._backgroundOpacityOverrideCheckbox(%rip), %rax
0000000000005431	movq	(%r14,%rax), %rdi
0000000000005435	callq	0x1e86e                 ## symbol stub for: _objc_assign_strongCast
000000000000543a	leaq	-0x40(%rbp), %rsi
000000000000543e	movq	_OBJC_IVAR_$_UAPCaptioningViewController._windowColorOverrideCheckbox(%rip), %rax
0000000000005445	movq	(%r14,%rax), %rdi
0000000000005449	callq	0x1e86e                 ## symbol stub for: _objc_assign_strongCast
000000000000544e	leaq	-0x38(%rbp), %rsi
0000000000005452	movq	_OBJC_IVAR_$_UAPCaptioningViewController._windowOpacityOverrideCheckbox(%rip), %rax
0000000000005459	movq	(%r14,%rax), %rdi
000000000000545d	callq	0x1e86e                 ## symbol stub for: _objc_assign_strongCast
0000000000005462	xorl	%ebx, %ebx
0000000000005464	movq	0x2f06d(%rip), %r12     ## Objc selector ref: _loadOverride:getter:
000000000000546b	leaq	0x2475e(%rip), %r13
0000000000005472	movq	-0x70(%rbp,%rbx), %rdx
0000000000005477	movq	(%rbx,%r13), %rcx
000000000000547b	movq	%r14, %rdi
000000000000547e	movq	%r12, %rsi
0000000000005481	callq	*0x23f79(%rip)          ## Objc message: -[%rdi _loadOverride:getter:]
0000000000005487	addq	$0x8, %rbx
000000000000548b	cmpq	$0x40, %rbx
000000000000548f	jne	0x5472
0000000000005491	movq	_OBJC_IVAR_$_UAPCaptioningViewController._defaultFontOverrideCheckbox(%rip), %rax
0000000000005498	movq	(%r14,%rax), %rdx
000000000000549c	movq	0x2f03d(%rip), %rsi     ## Objc selector ref: _loadFontOverride:fontStyle:
00000000000054a3	movq	0x23f56(%rip), %rbx     ## Objc message: -[%rdi _loadFontOverride:fontStyle:]
00000000000054aa	xorl	%ecx, %ecx
00000000000054ac	movq	%r14, %rdi
00000000000054af	callq	*%rbx
00000000000054b1	movq	_OBJC_IVAR_$_UAPCaptioningViewController._monospaceSerifFontOverrideCheckbox(%rip), %rax
00000000000054b8	movq	(%r14,%rax), %rdx
00000000000054bc	movq	0x2f01d(%rip), %rsi     ## Objc selector ref: _loadFontOverride:fontStyle:
00000000000054c3	movl	$0x1, %ecx
00000000000054c8	movq	%r14, %rdi
00000000000054cb	callq	*%rbx
00000000000054cd	movq	_OBJC_IVAR_$_UAPCaptioningViewController._proportionalSerifFontOverrideCheckbox(%rip), %rax
00000000000054d4	movq	(%r14,%rax), %rdx
00000000000054d8	movq	0x2f001(%rip), %rsi     ## Objc selector ref: _loadFontOverride:fontStyle:
00000000000054df	movl	$0x2, %ecx
00000000000054e4	movq	%r14, %rdi
00000000000054e7	callq	*%rbx
00000000000054e9	movq	_OBJC_IVAR_$_UAPCaptioningViewController._monospaceFontOverrideCheckbox(%rip), %rax
00000000000054f0	movq	(%r14,%rax), %rdx
00000000000054f4	movq	0x2efe5(%rip), %rsi     ## Objc selector ref: _loadFontOverride:fontStyle:
00000000000054fb	movl	$0x3, %ecx
0000000000005500	movq	%r14, %rdi
0000000000005503	callq	*%rbx
0000000000005505	movq	_OBJC_IVAR_$_UAPCaptioningViewController._proportionalFontOverrideCheckbox(%rip), %rax
000000000000550c	movq	(%r14,%rax), %rdx
0000000000005510	movq	0x2efc9(%rip), %rsi     ## Objc selector ref: _loadFontOverride:fontStyle:
0000000000005517	movl	$0x4, %ecx
000000000000551c	movq	%r14, %rdi
000000000000551f	callq	*%rbx
0000000000005521	movq	_OBJC_IVAR_$_UAPCaptioningViewController._casualFontOverrideCheckbox(%rip), %rax
0000000000005528	movq	(%r14,%rax), %rdx
000000000000552c	movq	0x2efad(%rip), %rsi     ## Objc selector ref: _loadFontOverride:fontStyle:
0000000000005533	movl	$0x5, %ecx
0000000000005538	movq	%r14, %rdi
000000000000553b	callq	*%rbx
000000000000553d	movq	_OBJC_IVAR_$_UAPCaptioningViewController._cursiveFontOverrideCheckbox(%rip), %rax
0000000000005544	movq	(%r14,%rax), %rdx
0000000000005548	movq	0x2ef91(%rip), %rsi     ## Objc selector ref: _loadFontOverride:fontStyle:
000000000000554f	movl	$0x6, %ecx
0000000000005554	movq	%r14, %rdi
0000000000005557	callq	*%rbx
0000000000005559	movq	_OBJC_IVAR_$_UAPCaptioningViewController._smallCapitalFontOverrideCheckbox(%rip), %rax
0000000000005560	movq	(%r14,%rax), %rdx
0000000000005564	movq	0x2ef75(%rip), %rsi     ## Objc selector ref: _loadFontOverride:fontStyle:
000000000000556b	movl	$0x7, %ecx
0000000000005570	movq	%r14, %rdi
0000000000005573	callq	*%rbx
0000000000005575	movq	(%r15), %rax
0000000000005578	cmpq	-0x30(%rbp), %rax
000000000000557c	jne	0x558d
000000000000557e	addq	$0x48, %rsp
0000000000005582	popq	%rbx
0000000000005583	popq	%r12
0000000000005585	popq	%r13
0000000000005587	popq	%r14
0000000000005589	popq	%r15
000000000000558b	popq	%rbp
000000000000558c	retq
000000000000558d	callq	0x1e8b6                 ## symbol stub for: ___stack_chk_fail
0000000000005592	pushq	%rbp
0000000000005593	movq	%rsp, %rbp
0000000000005596	pushq	%r14
0000000000005598	pushq	%rbx
0000000000005599	movq	%rdi, %rbx
000000000000559c	movq	_OBJC_IVAR_$_UAPCaptioningViewController._textColorPopup(%rip), %rax
00000000000055a3	movq	(%rbx,%rax), %rdx
00000000000055a7	movq	0x2ef3a(%rip), %rsi     ## Objc selector ref: _loadColorPopupValue:getter:
00000000000055ae	movq	0x23a73(%rip), %rcx     ## literal pool symbol address: _MACaptionAppearancePrefCopyForegroundColor
00000000000055b5	movq	0x23e44(%rip), %r14     ## Objc message: -[%rdi _loadColorPopupValue:getter:]
00000000000055bc	callq	*%r14
00000000000055bf	movq	_OBJC_IVAR_$_UAPCaptioningViewController._textSizePopup(%rip), %rax
00000000000055c6	movq	(%rbx,%rax), %rdx
00000000000055ca	movq	0x2ef1f(%rip), %rsi     ## Objc selector ref: _loadPercentagePopupValue:getter:
00000000000055d1	movq	0x23a60(%rip), %rcx     ## literal pool symbol address: _MACaptionAppearancePrefCopyRelativeCharacterSize
00000000000055d8	movq	%rbx, %rdi
00000000000055db	callq	*%r14
00000000000055de	movq	_OBJC_IVAR_$_UAPCaptioningViewController._textOpacityPopup(%rip), %rax
00000000000055e5	movq	(%rbx,%rax), %rdx
00000000000055e9	movq	0x2ef08(%rip), %rsi     ## Objc selector ref: _loadOpacityPopupValue:getter:
00000000000055f0	movq	0x23a39(%rip), %rcx     ## literal pool symbol address: _MACaptionAppearancePrefCopyForegroundOpacity
00000000000055f7	movq	%rbx, %rdi
00000000000055fa	callq	*%r14
00000000000055fd	movq	0x2eefc(%rip), %rsi     ## Objc selector ref: _loadEdgeStyle
0000000000005604	movq	%rbx, %rdi
0000000000005607	callq	*%r14
000000000000560a	movq	_OBJC_IVAR_$_UAPCaptioningViewController._backgroundColorPopup(%rip), %rax
0000000000005611	movq	(%rbx,%rax), %rdx
0000000000005615	movq	0x2eecc(%rip), %rsi     ## Objc selector ref: _loadColorPopupValue:getter:
000000000000561c	movq	0x239f5(%rip), %rcx     ## literal pool symbol address: _MACaptionAppearancePrefCopyBackgroundColor
0000000000005623	movq	%rbx, %rdi
0000000000005626	callq	*%r14
0000000000005629	movq	_OBJC_IVAR_$_UAPCaptioningViewController._backgroundOpacityPopup(%rip), %rax
0000000000005630	movq	(%rbx,%rax), %rdx
0000000000005634	movq	0x2eebd(%rip), %rsi     ## Objc selector ref: _loadOpacityPopupValue:getter:
000000000000563b	movq	0x239de(%rip), %rcx     ## literal pool symbol address: _MACaptionAppearancePrefCopyBackgroundOpacity
0000000000005642	movq	%rbx, %rdi
0000000000005645	callq	*%r14
0000000000005648	movq	_OBJC_IVAR_$_UAPCaptioningViewController._windowColorPopup(%rip), %rax
000000000000564f	movq	(%rbx,%rax), %rdx
0000000000005653	movq	0x2ee8e(%rip), %rsi     ## Objc selector ref: _loadColorPopupValue:getter:
000000000000565a	movq	0x239df(%rip), %rcx     ## literal pool symbol address: _MACaptionAppearancePrefCopyWindowColor
0000000000005661	movq	%rbx, %rdi
0000000000005664	callq	*%r14
0000000000005667	movq	_OBJC_IVAR_$_UAPCaptioningViewController._windowOpacityPopup(%rip), %rax
000000000000566e	movq	(%rbx,%rax), %rdx
0000000000005672	movq	0x2ee7f(%rip), %rsi     ## Objc selector ref: _loadOpacityPopupValue:getter:
0000000000005679	movq	0x239c8(%rip), %rcx     ## literal pool symbol address: _MACaptionAppearancePrefCopyWindowOpacity
0000000000005680	movq	%rbx, %rdi
0000000000005683	callq	*%r14
0000000000005686	movq	0x2ee7b(%rip), %rsi     ## Objc selector ref: _loadFontPreferences
000000000000568d	movq	%rbx, %rdi
0000000000005690	callq	*%r14
0000000000005693	movq	0x2ee76(%rip), %rsi     ## Objc selector ref: _loadOverrides
000000000000569a	movq	%rbx, %rdi
000000000000569d	movq	%r14, %rax
00000000000056a0	popq	%rbx
00000000000056a1	popq	%r14
00000000000056a3	popq	%rbp
00000000000056a4	jmpq	*%rax
00000000000056a6	pushq	%rbp
00000000000056a7	movq	%rsp, %rbp
00000000000056aa	pushq	%r14
00000000000056ac	pushq	%rbx
00000000000056ad	movq	%rdi, %rbx
00000000000056b0	movq	_OBJC_IVAR_$_UAPCaptioningViewController._defaultFontPopup(%rip), %rax
00000000000056b7	movq	(%rbx,%rax), %rdx
00000000000056bb	movq	0x2ee56(%rip), %rsi     ## Objc selector ref: _loadFontPopupValue:fontStyle:
00000000000056c2	movq	0x23d37(%rip), %r14     ## Objc message: -[%rdi _loadFontPopupValue:fontStyle:]
00000000000056c9	xorl	%ecx, %ecx
00000000000056cb	callq	*%r14
00000000000056ce	movq	_OBJC_IVAR_$_UAPCaptioningViewController._monospaceSerifFontPopup(%rip), %rax
00000000000056d5	movq	(%rbx,%rax), %rdx
00000000000056d9	movq	0x2ee38(%rip), %rsi     ## Objc selector ref: _loadFontPopupValue:fontStyle:
00000000000056e0	movl	$0x1, %ecx
00000000000056e5	movq	%rbx, %rdi
00000000000056e8	callq	*%r14
00000000000056eb	movq	_OBJC_IVAR_$_UAPCaptioningViewController._proportionalSerifFontPopup(%rip), %rax
00000000000056f2	movq	(%rbx,%rax), %rdx
00000000000056f6	movq	0x2ee1b(%rip), %rsi     ## Objc selector ref: _loadFontPopupValue:fontStyle:
00000000000056fd	movl	$0x2, %ecx
0000000000005702	movq	%rbx, %rdi
0000000000005705	callq	*%r14
0000000000005708	movq	_OBJC_IVAR_$_UAPCaptioningViewController._monospaceFontPopup(%rip), %rax
000000000000570f	movq	(%rbx,%rax), %rdx
0000000000005713	movq	0x2edfe(%rip), %rsi     ## Objc selector ref: _loadFontPopupValue:fontStyle:
000000000000571a	movl	$0x3, %ecx
000000000000571f	movq	%rbx, %rdi
0000000000005722	callq	*%r14
0000000000005725	movq	_OBJC_IVAR_$_UAPCaptioningViewController._proportionalFontPopup(%rip), %rax
000000000000572c	movq	(%rbx,%rax), %rdx
0000000000005730	movq	0x2ede1(%rip), %rsi     ## Objc selector ref: _loadFontPopupValue:fontStyle:
0000000000005737	movl	$0x4, %ecx
000000000000573c	movq	%rbx, %rdi
000000000000573f	callq	*%r14
0000000000005742	movq	_OBJC_IVAR_$_UAPCaptioningViewController._casualFontPopup(%rip), %rax
0000000000005749	movq	(%rbx,%rax), %rdx
000000000000574d	movq	0x2edc4(%rip), %rsi     ## Objc selector ref: _loadFontPopupValue:fontStyle:
0000000000005754	movl	$0x5, %ecx
0000000000005759	movq	%rbx, %rdi
000000000000575c	callq	*%r14
000000000000575f	movq	_OBJC_IVAR_$_UAPCaptioningViewController._cursiveFontPopup(%rip), %rax
0000000000005766	movq	(%rbx,%rax), %rdx
000000000000576a	movq	0x2eda7(%rip), %rsi     ## Objc selector ref: _loadFontPopupValue:fontStyle:
0000000000005771	movl	$0x6, %ecx
0000000000005776	movq	%rbx, %rdi
0000000000005779	callq	*%r14
000000000000577c	movq	_OBJC_IVAR_$_UAPCaptioningViewController._smallCapitalFontPopup(%rip), %rax
0000000000005783	movq	(%rbx,%rax), %rdx
0000000000005787	movq	0x2ed8a(%rip), %rsi     ## Objc selector ref: _loadFontPopupValue:fontStyle:
000000000000578e	movl	$0x7, %ecx
0000000000005793	movq	%rbx, %rdi
0000000000005796	movq	%r14, %rax
0000000000005799	popq	%rbx
000000000000579a	popq	%r14
000000000000579c	popq	%rbp
000000000000579d	jmpq	*%rax
000000000000579f	pushq	%rbp
00000000000057a0	movq	%rsp, %rbp
00000000000057a3	pushq	%r15
00000000000057a5	pushq	%r14
00000000000057a7	pushq	%rbx
00000000000057a8	subq	$0x88, %rsp
00000000000057af	movq	%rdi, %rbx
00000000000057b2	movq	0x23b9f(%rip), %r15     ## literal pool symbol address: ___stack_chk_guard
00000000000057b9	movq	(%r15), %rax
00000000000057bc	movq	%rax, -0x20(%rbp)
00000000000057c0	movq	_OBJC_IVAR_$_UAPCaptioningViewController._backgroundColorPopup(%rip), %rax
00000000000057c7	movq	(%rbx,%rax), %rdi
00000000000057cb	leaq	-0xa0(%rbp), %r14
00000000000057d2	movq	%r14, %rsi
00000000000057d5	callq	0x1e86e                 ## symbol stub for: _objc_assign_strongCast
00000000000057da	leaq	-0x98(%rbp), %rsi
00000000000057e1	movq	_OBJC_IVAR_$_UAPCaptioningViewController._windowColorPopup(%rip), %rax
00000000000057e8	movq	(%rbx,%rax), %rdi
00000000000057ec	callq	0x1e86e                 ## symbol stub for: _objc_assign_strongCast
00000000000057f1	leaq	-0x90(%rbp), %rsi
00000000000057f8	movq	_OBJC_IVAR_$_UAPCaptioningViewController._textColorPopup(%rip), %rax
00000000000057ff	movq	(%rbx,%rax), %rdi
0000000000005803	callq	0x1e86e                 ## symbol stub for: _objc_assign_strongCast
0000000000005808	leaq	-0x88(%rbp), %rsi
000000000000580f	movq	_OBJC_IVAR_$_UAPCaptioningViewController._backgroundOpacityPopup(%rip), %rax
0000000000005816	movq	(%rbx,%rax), %rdi
000000000000581a	callq	0x1e86e                 ## symbol stub for: _objc_assign_strongCast
000000000000581f	leaq	-0x80(%rbp), %rsi
0000000000005823	movq	_OBJC_IVAR_$_UAPCaptioningViewController._windowOpacityPopup(%rip), %rax
000000000000582a	movq	(%rbx,%rax), %rdi
000000000000582e	callq	0x1e86e                 ## symbol stub for: _objc_assign_strongCast
0000000000005833	leaq	-0x78(%rbp), %rsi
0000000000005837	movq	_OBJC_IVAR_$_UAPCaptioningViewController._textOpacityPopup(%rip), %rax
000000000000583e	movq	(%rbx,%rax), %rdi
0000000000005842	callq	0x1e86e                 ## symbol stub for: _objc_assign_strongCast
0000000000005847	leaq	-0x70(%rbp), %rsi
000000000000584b	movq	_OBJC_IVAR_$_UAPCaptioningViewController._textSizePopup(%rip), %rax
0000000000005852	movq	(%rbx,%rax), %rdi
0000000000005856	callq	0x1e86e                 ## symbol stub for: _objc_assign_strongCast
000000000000585b	leaq	-0x68(%rbp), %rsi
000000000000585f	movq	_OBJC_IVAR_$_UAPCaptioningViewController._edgeStylePopup(%rip), %rax
0000000000005866	movq	(%rbx,%rax), %rdi
000000000000586a	callq	0x1e86e                 ## symbol stub for: _objc_assign_strongCast
000000000000586f	leaq	-0x60(%rbp), %rsi
0000000000005873	movq	_OBJC_IVAR_$_UAPCaptioningViewController._defaultFontPopup(%rip), %rax
000000000000587a	movq	(%rbx,%rax), %rdi
000000000000587e	callq	0x1e86e                 ## symbol stub for: _objc_assign_strongCast
0000000000005883	leaq	-0x58(%rbp), %rsi
0000000000005887	movq	_OBJC_IVAR_$_UAPCaptioningViewController._monospaceSerifFontPopup(%rip), %rax
000000000000588e	movq	(%rbx,%rax), %rdi
0000000000005892	callq	0x1e86e                 ## symbol stub for: _objc_assign_strongCast
0000000000005897	leaq	-0x50(%rbp), %rsi
000000000000589b	movq	_OBJC_IVAR_$_UAPCaptioningViewController._proportionalSerifFontPopup(%rip), %rax
00000000000058a2	movq	(%rbx,%rax), %rdi
00000000000058a6	callq	0x1e86e                 ## symbol stub for: _objc_assign_strongCast
00000000000058ab	leaq	-0x48(%rbp), %rsi
00000000000058af	movq	_OBJC_IVAR_$_UAPCaptioningViewController._monospaceFontPopup(%rip), %rax
00000000000058b6	movq	(%rbx,%rax), %rdi
00000000000058ba	callq	0x1e86e                 ## symbol stub for: _objc_assign_strongCast
00000000000058bf	leaq	-0x40(%rbp), %rsi
00000000000058c3	movq	_OBJC_IVAR_$_UAPCaptioningViewController._proportionalFontPopup(%rip), %rax
00000000000058ca	movq	(%rbx,%rax), %rdi
00000000000058ce	callq	0x1e86e                 ## symbol stub for: _objc_assign_strongCast
00000000000058d3	leaq	-0x38(%rbp), %rsi
00000000000058d7	movq	_OBJC_IVAR_$_UAPCaptioningViewController._casualFontPopup(%rip), %rax
00000000000058de	movq	(%rbx,%rax), %rdi
00000000000058e2	callq	0x1e86e                 ## symbol stub for: _objc_assign_strongCast
00000000000058e7	leaq	-0x30(%rbp), %rsi
00000000000058eb	movq	_OBJC_IVAR_$_UAPCaptioningViewController._cursiveFontPopup(%rip), %rax
00000000000058f2	movq	(%rbx,%rax), %rdi
00000000000058f6	callq	0x1e86e                 ## symbol stub for: _objc_assign_strongCast
00000000000058fb	leaq	-0x28(%rbp), %rsi
00000000000058ff	movq	_OBJC_IVAR_$_UAPCaptioningViewController._smallCapitalFontPopup(%rip), %rax
0000000000005906	movq	(%rbx,%rax), %rdi
000000000000590a	callq	0x1e86e                 ## symbol stub for: _objc_assign_strongCast
000000000000590f	movq	0x2fbd2(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_NSArray
0000000000005916	movq	0x2ec03(%rip), %rsi     ## Objc selector ref: arrayWithObjects:count:
000000000000591d	movl	$0x10, %ecx
0000000000005922	movq	%r14, %rdx
0000000000005925	callq	*0x23ad5(%rip)          ## Objc message: +[NSArray arrayWithObjects:count:]
000000000000592b	movq	(%r15), %rcx
000000000000592e	cmpq	-0x20(%rbp), %rcx
0000000000005932	jne	0x5942
0000000000005934	addq	$0x88, %rsp
000000000000593b	popq	%rbx
000000000000593c	popq	%r14
000000000000593e	popq	%r15
0000000000005940	popq	%rbp
0000000000005941	retq
0000000000005942	callq	0x1e8b6                 ## symbol stub for: ___stack_chk_fail
0000000000005947	pushq	%rbp
0000000000005948	movq	%rsp, %rbp
000000000000594b	pushq	%r15
000000000000594d	pushq	%r14
000000000000594f	pushq	%r13
0000000000005951	pushq	%r12
0000000000005953	pushq	%rbx
0000000000005954	subq	$0x298, %rsp            ## imm = 0x298
000000000000595b	movq	%rdi, %r14
000000000000595e	movq	%r14, -0x220(%rbp)
0000000000005965	movq	0x239ec(%rip), %rax     ## literal pool symbol address: ___stack_chk_guard
000000000000596c	movq	(%rax), %rax
000000000000596f	movq	%rax, -0x30(%rbp)
0000000000005973	xorps	%xmm0, %xmm0
0000000000005976	movaps	%xmm0, -0x150(%rbp)
000000000000597d	movabsq	$0x4038000000000000, %rax ## imm = 0x4038000000000000
0000000000005987	movq	%rax, -0x140(%rbp)
000000000000598e	movabsq	$0x4028000000000000, %rax ## imm = 0x4028000000000000
0000000000005998	movq	%rax, -0x138(%rbp)
000000000000599f	movq	0x2fbda(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_NSBezierPath
00000000000059a6	movq	0x2eb7b(%rip), %rsi     ## Objc selector ref: bezierPathWithRect:
00000000000059ad	movq	-0x138(%rbp), %rax
00000000000059b4	movq	%rax, 0x18(%rsp)
00000000000059b9	movq	-0x140(%rbp), %rax
00000000000059c0	movq	%rax, 0x10(%rsp)
00000000000059c5	movq	-0x150(%rbp), %rax
00000000000059cc	movq	-0x148(%rbp), %rcx
00000000000059d3	movq	%rcx, 0x8(%rsp)
00000000000059d8	movq	%rax, (%rsp)
00000000000059dc	movq	0x23a1d(%rip), %r12     ## Objc message: +[NSBezierPath bezierPathWithRect:]
00000000000059e3	callq	*%r12
00000000000059e6	movq	0x2e87b(%rip), %rsi     ## Objc selector ref: retain
00000000000059ed	movq	%rax, %rdi
00000000000059f0	callq	*%r12
00000000000059f3	movq	_OBJC_IVAR_$_UAPCaptioningViewController._colorSwatchBorderPath(%rip), %r15
00000000000059fa	movq	%rax, %rdi
00000000000059fd	movq	%r14, %rbx
0000000000005a00	movq	%rbx, %rsi
0000000000005a03	movq	%r15, %rdx
0000000000005a06	callq	0x1e868                 ## symbol stub for: _objc_assign_ivar
0000000000005a0b	movq	(%rbx,%r15), %rdi
0000000000005a0f	movq	0x2eb1a(%rip), %rsi     ## Objc selector ref: setLineWidth:
0000000000005a16	movsd	0x228e2(%rip), %xmm0
0000000000005a1e	callq	*%r12
0000000000005a21	movq	0x2fb58(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_NSBezierPath
0000000000005a28	movq	0x2eaf9(%rip), %rsi     ## Objc selector ref: bezierPathWithRect:
0000000000005a2f	movq	-0x138(%rbp), %rax
0000000000005a36	movq	%rax, 0x18(%rsp)
0000000000005a3b	movq	-0x140(%rbp), %rax
0000000000005a42	movq	%rax, 0x10(%rsp)
0000000000005a47	movq	-0x150(%rbp), %rax
0000000000005a4e	movq	-0x148(%rbp), %rcx
0000000000005a55	movq	%rcx, 0x8(%rsp)
0000000000005a5a	movq	%rax, (%rsp)
0000000000005a5e	callq	*%r12
0000000000005a61	movq	0x2e800(%rip), %rsi     ## Objc selector ref: retain
0000000000005a68	movq	%rax, %rdi
0000000000005a6b	callq	*%r12
0000000000005a6e	movq	_OBJC_IVAR_$_UAPCaptioningViewController._colorSwatchFillPath(%rip), %rdx
0000000000005a75	movq	%rax, %rdi
0000000000005a78	movq	%rbx, %rsi
0000000000005a7b	callq	0x1e868                 ## symbol stub for: _objc_assign_ivar
0000000000005a80	movq	0x2fa69(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_NSColor
0000000000005a87	movq	0x2e6d2(%rip), %rsi     ## Objc selector ref: colorWithCalibratedRed:green:blue:alpha:
0000000000005a8e	movsd	0x2285a(%rip), %xmm3
0000000000005a96	xorps	%xmm0, %xmm0
0000000000005a99	xorps	%xmm1, %xmm1
0000000000005a9c	xorps	%xmm2, %xmm2
0000000000005a9f	callq	*%r12
0000000000005aa2	movq	%rax, -0x1d8(%rbp)
0000000000005aa9	movq	0x2fa40(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_NSColor
0000000000005ab0	movq	0x2e6a9(%rip), %rsi     ## Objc selector ref: colorWithCalibratedRed:green:blue:alpha:
0000000000005ab7	movsd	0x22831(%rip), %xmm0
0000000000005abf	movaps	%xmm0, %xmm1
0000000000005ac2	movaps	%xmm0, %xmm2
0000000000005ac5	movaps	%xmm0, %xmm3
0000000000005ac8	callq	*%r12
0000000000005acb	movq	%rax, -0x1f0(%rbp)
0000000000005ad2	movq	0x2fa17(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_NSColor
0000000000005ad9	movq	0x2e680(%rip), %rsi     ## Objc selector ref: colorWithCalibratedRed:green:blue:alpha:
0000000000005ae0	xorps	%xmm0, %xmm0
0000000000005ae3	xorps	%xmm1, %xmm1
0000000000005ae6	movsd	0x22802(%rip), %xmm2
0000000000005aee	movaps	%xmm2, %xmm3
0000000000005af1	callq	*%r12
0000000000005af4	movq	%rax, -0x1e0(%rbp)
0000000000005afb	movq	0x2f9ee(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_NSColor
0000000000005b02	movq	0x2e657(%rip), %rsi     ## Objc selector ref: colorWithCalibratedRed:green:blue:alpha:
0000000000005b09	xorps	%xmm1, %xmm1
0000000000005b0c	xorps	%xmm2, %xmm2
0000000000005b0f	movsd	0x227d9(%rip), %xmm0
0000000000005b17	movaps	%xmm0, %xmm3
0000000000005b1a	callq	*%r12
0000000000005b1d	movq	%rax, -0x1f8(%rbp)
0000000000005b24	movq	0x2f9c5(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_NSColor
0000000000005b2b	movq	0x2e62e(%rip), %rsi     ## Objc selector ref: colorWithCalibratedRed:green:blue:alpha:
0000000000005b32	xorps	%xmm0, %xmm0
0000000000005b35	xorps	%xmm2, %xmm2
0000000000005b38	movsd	0x227b0(%rip), %xmm1
0000000000005b40	movaps	%xmm1, %xmm3
0000000000005b43	callq	*%r12
0000000000005b46	movq	%rax, -0x200(%rbp)
0000000000005b4d	movq	0x2f99c(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_NSColor
0000000000005b54	movq	0x2e605(%rip), %rsi     ## Objc selector ref: colorWithCalibratedRed:green:blue:alpha:
0000000000005b5b	xorps	%xmm0, %xmm0
0000000000005b5e	movsd	0x2278a(%rip), %xmm1
0000000000005b66	movaps	%xmm1, %xmm2
0000000000005b69	movaps	%xmm1, %xmm3
0000000000005b6c	callq	*%r12
0000000000005b6f	movq	%rax, -0x208(%rbp)
0000000000005b76	movq	0x2f973(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_NSColor
0000000000005b7d	movq	0x2e5dc(%rip), %rsi     ## Objc selector ref: colorWithCalibratedRed:green:blue:alpha:
0000000000005b84	xorps	%xmm2, %xmm2
0000000000005b87	movsd	0x22761(%rip), %xmm0
0000000000005b8f	movaps	%xmm0, %xmm1
0000000000005b92	movaps	%xmm0, %xmm3
0000000000005b95	callq	*%r12
0000000000005b98	movq	%rax, -0x210(%rbp)
0000000000005b9f	movq	0x2f94a(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_NSColor
0000000000005ba6	movq	0x2e5b3(%rip), %rsi     ## Objc selector ref: colorWithCalibratedRed:green:blue:alpha:
0000000000005bad	xorps	%xmm1, %xmm1
0000000000005bb0	movsd	0x22738(%rip), %xmm0
0000000000005bb8	movaps	%xmm0, %xmm2
0000000000005bbb	movaps	%xmm0, %xmm3
0000000000005bbe	callq	*%r12
0000000000005bc1	movq	%rax, -0x218(%rbp)
0000000000005bc8	movq	0x2f961(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_NSDictionary
0000000000005bcf	movq	0x2e78a(%rip), %rsi     ## Objc selector ref: allocWithZone:
0000000000005bd6	xorl	%edx, %edx
0000000000005bd8	callq	*%r12
0000000000005bdb	movq	%rax, -0x1e8(%rbp)
0000000000005be2	movq	0x2f917(%rip), %rbx     ## Objc class ref: _OBJC_CLASS_$_NSBundle
0000000000005be9	movq	0x2f918(%rip), %rdi     ## Objc class ref: UniversalAccessPref
0000000000005bf0	movq	0x2e4c9(%rip), %rsi     ## Objc selector ref: class
0000000000005bf7	callq	*%r12
0000000000005bfa	movq	0x2e5b7(%rip), %rsi     ## Objc selector ref: bundleForClass:
0000000000005c01	movq	%rbx, %rdi
0000000000005c04	movq	%rax, %rdx
0000000000005c07	callq	*%r12
0000000000005c0a	movq	0x2e5af(%rip), %rsi     ## Objc selector ref: localizedStringForKey:value:table:
0000000000005c11	leaq	0x24798(%rip), %rdx     ## Objc cfstring ref: @"caption.color.black"
0000000000005c18	leaq	0x244f1(%rip), %r15     ## Objc cfstring ref: @""
0000000000005c1f	xorl	%r8d, %r8d
0000000000005c22	movq	%rax, %rdi
0000000000005c25	movq	%r15, %rcx
0000000000005c28	callq	*%r12
0000000000005c2b	movq	%rax, -0x228(%rbp)
0000000000005c32	movq	0x2f8c7(%rip), %rbx     ## Objc class ref: _OBJC_CLASS_$_NSBundle
0000000000005c39	movq	0x2f8c8(%rip), %rdi     ## Objc class ref: UniversalAccessPref
0000000000005c40	movq	0x2e479(%rip), %rsi     ## Objc selector ref: class
0000000000005c47	callq	*%r12
0000000000005c4a	movq	0x2e567(%rip), %rsi     ## Objc selector ref: bundleForClass:
0000000000005c51	movq	%rbx, %rdi
0000000000005c54	movq	%rax, %rdx
0000000000005c57	callq	*%r12
0000000000005c5a	movq	0x2e55f(%rip), %rsi     ## Objc selector ref: localizedStringForKey:value:table:
0000000000005c61	leaq	0x24768(%rip), %rdx     ## Objc cfstring ref: @"caption.color.blue"
0000000000005c68	xorl	%r8d, %r8d
0000000000005c6b	movq	%rax, %rdi
0000000000005c6e	movq	%r15, %rcx
0000000000005c71	callq	*%r12
0000000000005c74	movq	%rax, -0x230(%rbp)
0000000000005c7b	movq	0x2f87e(%rip), %rbx     ## Objc class ref: _OBJC_CLASS_$_NSBundle
0000000000005c82	movq	0x2f87f(%rip), %rdi     ## Objc class ref: UniversalAccessPref
0000000000005c89	movq	0x2e430(%rip), %rsi     ## Objc selector ref: class
0000000000005c90	callq	*%r12
0000000000005c93	movq	0x2e51e(%rip), %rsi     ## Objc selector ref: bundleForClass:
0000000000005c9a	movq	%rbx, %rdi
0000000000005c9d	movq	%rax, %rdx
0000000000005ca0	callq	*%r12
0000000000005ca3	movq	0x2e516(%rip), %rsi     ## Objc selector ref: localizedStringForKey:value:table:
0000000000005caa	leaq	0x2473f(%rip), %rdx     ## Objc cfstring ref: @"caption.color.cyan"
0000000000005cb1	xorl	%r8d, %r8d
0000000000005cb4	movq	%rax, %rdi
0000000000005cb7	movq	%r15, %rcx
0000000000005cba	callq	*%r12
0000000000005cbd	movq	%rax, -0x238(%rbp)
0000000000005cc4	movq	0x2f835(%rip), %rbx     ## Objc class ref: _OBJC_CLASS_$_NSBundle
0000000000005ccb	movq	0x2f836(%rip), %rdi     ## Objc class ref: UniversalAccessPref
0000000000005cd2	movq	0x2e3e7(%rip), %rsi     ## Objc selector ref: class
0000000000005cd9	callq	*%r12
0000000000005cdc	movq	0x2e4d5(%rip), %rsi     ## Objc selector ref: bundleForClass:
0000000000005ce3	movq	%rbx, %rdi
0000000000005ce6	movq	%rax, %rdx
0000000000005ce9	callq	*%r12
0000000000005cec	movq	0x2e4cd(%rip), %rsi     ## Objc selector ref: localizedStringForKey:value:table:
0000000000005cf3	leaq	0x24716(%rip), %rdx     ## Objc cfstring ref: @"caption.color.green"
0000000000005cfa	xorl	%r8d, %r8d
0000000000005cfd	movq	%rax, %rdi
0000000000005d00	movq	%r15, %rcx
0000000000005d03	callq	*%r12
0000000000005d06	movq	%rax, -0x240(%rbp)
0000000000005d0d	movq	0x2f7ec(%rip), %rbx     ## Objc class ref: _OBJC_CLASS_$_NSBundle
0000000000005d14	movq	0x2f7ed(%rip), %rdi     ## Objc class ref: UniversalAccessPref
0000000000005d1b	movq	0x2e39e(%rip), %rsi     ## Objc selector ref: class
0000000000005d22	callq	*%r12
0000000000005d25	movq	0x2e48c(%rip), %rsi     ## Objc selector ref: bundleForClass:
0000000000005d2c	movq	%rbx, %rdi
0000000000005d2f	movq	%rax, %rdx
0000000000005d32	callq	*%r12
0000000000005d35	movq	0x2e484(%rip), %rsi     ## Objc selector ref: localizedStringForKey:value:table:
0000000000005d3c	leaq	0x246ed(%rip), %rdx     ## Objc cfstring ref: @"caption.color.magenta"
0000000000005d43	xorl	%r8d, %r8d
0000000000005d46	movq	%rax, %rdi
0000000000005d49	movq	%r15, %rcx
0000000000005d4c	callq	*%r12
0000000000005d4f	movq	%rax, -0x248(%rbp)
0000000000005d56	movq	0x2f7a3(%rip), %rbx     ## Objc class ref: _OBJC_CLASS_$_NSBundle
0000000000005d5d	movq	0x2f7a4(%rip), %rdi     ## Objc class ref: UniversalAccessPref
0000000000005d64	movq	0x2e355(%rip), %rsi     ## Objc selector ref: class
0000000000005d6b	callq	*%r12
0000000000005d6e	movq	0x2e443(%rip), %rsi     ## Objc selector ref: bundleForClass:
0000000000005d75	movq	%rbx, %rdi
0000000000005d78	movq	%rax, %rdx
0000000000005d7b	callq	*%r12
0000000000005d7e	movq	0x2e43b(%rip), %rsi     ## Objc selector ref: localizedStringForKey:value:table:
0000000000005d85	leaq	0x246c4(%rip), %rdx     ## Objc cfstring ref: @"caption.color.red"
0000000000005d8c	xorl	%r8d, %r8d
0000000000005d8f	movq	%rax, %rdi
0000000000005d92	movq	%r15, %rcx
0000000000005d95	callq	*%r12
0000000000005d98	movq	%rax, %r14
0000000000005d9b	movq	0x2f75e(%rip), %rbx     ## Objc class ref: _OBJC_CLASS_$_NSBundle
0000000000005da2	movq	0x2f75f(%rip), %rdi     ## Objc class ref: UniversalAccessPref
0000000000005da9	movq	0x2e310(%rip), %rsi     ## Objc selector ref: class
0000000000005db0	callq	*%r12
0000000000005db3	movq	0x2e3fe(%rip), %rsi     ## Objc selector ref: bundleForClass:
0000000000005dba	movq	%rbx, %rdi
0000000000005dbd	movq	%rax, %rdx
0000000000005dc0	callq	*%r12
0000000000005dc3	movq	0x2e3f6(%rip), %rsi     ## Objc selector ref: localizedStringForKey:value:table:
0000000000005dca	leaq	0x2469f(%rip), %rdx     ## Objc cfstring ref: @"caption.color.white"
0000000000005dd1	xorl	%r8d, %r8d
0000000000005dd4	movq	%rax, %rdi
0000000000005dd7	movq	%r15, %rcx
0000000000005dda	callq	*%r12
0000000000005ddd	movq	%rax, %r13
0000000000005de0	movq	0x2f719(%rip), %rbx     ## Objc class ref: _OBJC_CLASS_$_NSBundle
0000000000005de7	movq	0x2f71a(%rip), %rdi     ## Objc class ref: UniversalAccessPref
0000000000005dee	movq	0x2e2cb(%rip), %rsi     ## Objc selector ref: class
0000000000005df5	callq	*%r12
0000000000005df8	movq	0x2e3b9(%rip), %rsi     ## Objc selector ref: bundleForClass:
0000000000005dff	movq	%rbx, %rdi
0000000000005e02	movq	%rax, %rdx
0000000000005e05	callq	*%r12
0000000000005e08	movq	0x2e3b1(%rip), %rsi     ## Objc selector ref: localizedStringForKey:value:table:
0000000000005e0f	leaq	0x2467a(%rip), %rdx     ## Objc cfstring ref: @"caption.color.yellow"
0000000000005e16	xorl	%r8d, %r8d
0000000000005e19	movq	%rax, %rdi
0000000000005e1c	movq	%r15, %rcx
0000000000005e1f	callq	*%r12
0000000000005e22	movq	0x2e70f(%rip), %rsi     ## Objc selector ref: initWithObjectsAndKeys:
0000000000005e29	movq	-0x210(%rbp), %rcx
0000000000005e30	movq	%rcx, 0x58(%rsp)
0000000000005e35	movq	%rax, 0x50(%rsp)
0000000000005e3a	movq	-0x1f0(%rbp), %rax
0000000000005e41	movq	%rax, 0x48(%rsp)
0000000000005e46	movq	%r13, 0x40(%rsp)
0000000000005e4b	movq	-0x1f8(%rbp), %rax
0000000000005e52	movq	%rax, 0x38(%rsp)
0000000000005e57	movq	%r14, 0x30(%rsp)
0000000000005e5c	movq	-0x218(%rbp), %rax
0000000000005e63	movq	%rax, 0x28(%rsp)
0000000000005e68	movq	-0x248(%rbp), %rax
0000000000005e6f	movq	%rax, 0x20(%rsp)
0000000000005e74	movq	-0x200(%rbp), %rax
0000000000005e7b	movq	%rax, 0x18(%rsp)
0000000000005e80	movq	-0x240(%rbp), %rax
0000000000005e87	movq	%rax, 0x10(%rsp)
0000000000005e8c	movq	-0x208(%rbp), %rax
0000000000005e93	movq	%rax, 0x8(%rsp)
0000000000005e98	movq	-0x238(%rbp), %rax
0000000000005e9f	movq	%rax, (%rsp)
0000000000005ea3	movq	$0x0, 0x60(%rsp)
0000000000005eac	xorl	%eax, %eax
0000000000005eae	movq	-0x228(%rbp), %rdx
0000000000005eb5	movq	-0x1d8(%rbp), %rcx
0000000000005ebc	movq	-0x1e8(%rbp), %rdi
0000000000005ec3	movq	-0x230(%rbp), %r8
0000000000005eca	movq	-0x1e0(%rbp), %r9
0000000000005ed1	callq	*%r12
0000000000005ed4	movq	%rax, -0x1e8(%rbp)
0000000000005edb	movq	0x2f64e(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_NSDictionary
0000000000005ee2	movq	0x2e477(%rip), %rsi     ## Objc selector ref: allocWithZone:
0000000000005ee9	xorl	%edx, %edx
0000000000005eeb	callq	*%r12
0000000000005eee	movq	%rax, -0x228(%rbp)
0000000000005ef5	movq	0x2f604(%rip), %rbx     ## Objc class ref: _OBJC_CLASS_$_NSBundle
0000000000005efc	movq	0x2f605(%rip), %rdi     ## Objc class ref: UniversalAccessPref
0000000000005f03	movq	0x2e1b6(%rip), %rsi     ## Objc selector ref: class
0000000000005f0a	callq	*%r12
0000000000005f0d	movq	0x2e2a4(%rip), %rsi     ## Objc selector ref: bundleForClass:
0000000000005f14	movq	%rbx, %rdi
0000000000005f17	movq	%rax, %rdx
0000000000005f1a	callq	*%r12
0000000000005f1d	movq	0x2e29c(%rip), %rsi     ## Objc selector ref: localizedStringForKey:value:table:
0000000000005f24	xorl	%r8d, %r8d
0000000000005f27	movq	%rax, %rdi
0000000000005f2a	leaq	0x2447f(%rip), %rdx     ## Objc cfstring ref: @"caption.color.black"
0000000000005f31	movq	%r15, %rcx
0000000000005f34	callq	*%r12
0000000000005f37	movq	%rax, -0x230(%rbp)
0000000000005f3e	movq	0x2f5bb(%rip), %rbx     ## Objc class ref: _OBJC_CLASS_$_NSBundle
0000000000005f45	movq	0x2f5bc(%rip), %rdi     ## Objc class ref: UniversalAccessPref
0000000000005f4c	movq	0x2e16d(%rip), %rsi     ## Objc selector ref: class
0000000000005f53	callq	*%r12
0000000000005f56	movq	0x2e25b(%rip), %rsi     ## Objc selector ref: bundleForClass:
0000000000005f5d	movq	%rbx, %rdi
0000000000005f60	movq	%rax, %rdx
0000000000005f63	callq	*%r12
0000000000005f66	movq	0x2e253(%rip), %rsi     ## Objc selector ref: localizedStringForKey:value:table:
0000000000005f6d	xorl	%r8d, %r8d
0000000000005f70	movq	%rax, %rdi
0000000000005f73	leaq	0x24456(%rip), %rdx     ## Objc cfstring ref: @"caption.color.blue"
0000000000005f7a	movq	%r15, %rcx
0000000000005f7d	callq	*%r12
0000000000005f80	movq	%rax, -0x238(%rbp)
0000000000005f87	movq	0x2f572(%rip), %rbx     ## Objc class ref: _OBJC_CLASS_$_NSBundle
0000000000005f8e	movq	0x2f573(%rip), %rdi     ## Objc class ref: UniversalAccessPref
0000000000005f95	movq	0x2e124(%rip), %rsi     ## Objc selector ref: class
0000000000005f9c	callq	*%r12
0000000000005f9f	movq	0x2e212(%rip), %rsi     ## Objc selector ref: bundleForClass:
0000000000005fa6	movq	%rbx, %rdi
0000000000005fa9	movq	%rax, %rdx
0000000000005fac	callq	*%r12
0000000000005faf	movq	0x2e20a(%rip), %rsi     ## Objc selector ref: localizedStringForKey:value:table:
0000000000005fb6	xorl	%r8d, %r8d
0000000000005fb9	movq	%rax, %rdi
0000000000005fbc	leaq	0x2442d(%rip), %rdx     ## Objc cfstring ref: @"caption.color.cyan"
0000000000005fc3	movq	%r15, %rcx
0000000000005fc6	callq	*%r12
0000000000005fc9	movq	%rax, -0x240(%rbp)
0000000000005fd0	movq	0x2f529(%rip), %rbx     ## Objc class ref: _OBJC_CLASS_$_NSBundle
0000000000005fd7	movq	0x2f52a(%rip), %rdi     ## Objc class ref: UniversalAccessPref
0000000000005fde	movq	0x2e0db(%rip), %rsi     ## Objc selector ref: class
0000000000005fe5	callq	*%r12
0000000000005fe8	movq	0x2e1c9(%rip), %rsi     ## Objc selector ref: bundleForClass:
0000000000005fef	movq	%rbx, %rdi
0000000000005ff2	movq	%rax, %rdx
0000000000005ff5	callq	*%r12
0000000000005ff8	movq	0x2e1c1(%rip), %rsi     ## Objc selector ref: localizedStringForKey:value:table:
0000000000005fff	xorl	%r8d, %r8d
0000000000006002	movq	%rax, %rdi
0000000000006005	leaq	0x24404(%rip), %rdx     ## Objc cfstring ref: @"caption.color.green"
000000000000600c	movq	%r15, %rcx
000000000000600f	callq	*%r12
0000000000006012	movq	%rax, -0x248(%rbp)
0000000000006019	movq	0x2f4e0(%rip), %rbx     ## Objc class ref: _OBJC_CLASS_$_NSBundle
0000000000006020	movq	0x2f4e1(%rip), %rdi     ## Objc class ref: UniversalAccessPref
0000000000006027	movq	0x2e092(%rip), %rsi     ## Objc selector ref: class
000000000000602e	callq	*%r12
0000000000006031	movq	0x2e180(%rip), %rsi     ## Objc selector ref: bundleForClass:
0000000000006038	movq	%rbx, %rdi
000000000000603b	movq	%rax, %rdx
000000000000603e	callq	*%r12
0000000000006041	movq	0x2e178(%rip), %rsi     ## Objc selector ref: localizedStringForKey:value:table:
0000000000006048	xorl	%r8d, %r8d
000000000000604b	movq	%rax, %rdi
000000000000604e	leaq	0x243db(%rip), %rdx     ## Objc cfstring ref: @"caption.color.magenta"
0000000000006055	movq	%r15, %rcx
0000000000006058	callq	*%r12
000000000000605b	movq	%rax, -0x250(%rbp)
0000000000006062	movq	0x2f497(%rip), %rbx     ## Objc class ref: _OBJC_CLASS_$_NSBundle
0000000000006069	movq	0x2f498(%rip), %rdi     ## Objc class ref: UniversalAccessPref
0000000000006070	movq	0x2e049(%rip), %rsi     ## Objc selector ref: class
0000000000006077	callq	*%r12
000000000000607a	movq	0x2e137(%rip), %rsi     ## Objc selector ref: bundleForClass:
0000000000006081	movq	%rbx, %rdi
0000000000006084	movq	%rax, %rdx
0000000000006087	callq	*%r12
000000000000608a	movq	0x2e12f(%rip), %rsi     ## Objc selector ref: localizedStringForKey:value:table:
0000000000006091	xorl	%r8d, %r8d
0000000000006094	movq	%rax, %rdi
0000000000006097	leaq	0x243b2(%rip), %rdx     ## Objc cfstring ref: @"caption.color.red"
000000000000609e	movq	%r15, %rcx
00000000000060a1	callq	*%r12
00000000000060a4	movq	%rax, %r13
00000000000060a7	movq	0x2f452(%rip), %r14     ## Objc class ref: _OBJC_CLASS_$_NSBundle
00000000000060ae	movq	0x2f453(%rip), %rdi     ## Objc class ref: UniversalAccessPref
00000000000060b5	movq	0x2e004(%rip), %rsi     ## Objc selector ref: class
00000000000060bc	callq	*%r12
00000000000060bf	movq	0x2e0f2(%rip), %rsi     ## Objc selector ref: bundleForClass:
00000000000060c6	movq	%r14, %rdi
00000000000060c9	movq	%rax, %rdx
00000000000060cc	callq	*%r12
00000000000060cf	movq	0x2e0ea(%rip), %rsi     ## Objc selector ref: localizedStringForKey:value:table:
00000000000060d6	xorl	%r8d, %r8d
00000000000060d9	movq	%rax, %rdi
00000000000060dc	leaq	0x2438d(%rip), %rdx     ## Objc cfstring ref: @"caption.color.white"
00000000000060e3	movq	%r15, %rcx
00000000000060e6	callq	*%r12
00000000000060e9	movq	%rax, %r14
00000000000060ec	movq	0x2f40d(%rip), %rbx     ## Objc class ref: _OBJC_CLASS_$_NSBundle
00000000000060f3	movq	0x2f40e(%rip), %rdi     ## Objc class ref: UniversalAccessPref
00000000000060fa	movq	0x2dfbf(%rip), %rsi     ## Objc selector ref: class
0000000000006101	callq	*%r12
0000000000006104	movq	0x2e0ad(%rip), %rsi     ## Objc selector ref: bundleForClass:
000000000000610b	movq	%rbx, %rdi
000000000000610e	movq	%rax, %rdx
0000000000006111	callq	*%r12
0000000000006114	movq	0x2e0a5(%rip), %rsi     ## Objc selector ref: localizedStringForKey:value:table:
000000000000611b	xorl	%r8d, %r8d
000000000000611e	movq	%rax, %rdi
0000000000006121	leaq	0x24368(%rip), %rdx     ## Objc cfstring ref: @"caption.color.yellow"
0000000000006128	movq	%r15, %rcx
000000000000612b	callq	*%r12
000000000000612e	movq	0x2e403(%rip), %rsi     ## Objc selector ref: initWithObjectsAndKeys:
0000000000006135	movq	-0x210(%rbp), %rcx
000000000000613c	movq	%rcx, 0x58(%rsp)
0000000000006141	movq	%rax, 0x50(%rsp)
0000000000006146	movq	-0x1f0(%rbp), %rax
000000000000614d	movq	%rax, 0x48(%rsp)
0000000000006152	movq	%r14, 0x40(%rsp)
0000000000006157	movq	-0x1f8(%rbp), %rax
000000000000615e	movq	%rax, 0x38(%rsp)
0000000000006163	movq	%r13, 0x30(%rsp)
0000000000006168	movq	-0x218(%rbp), %rax
000000000000616f	movq	%rax, 0x28(%rsp)
0000000000006174	movq	-0x250(%rbp), %rax
000000000000617b	movq	%rax, 0x20(%rsp)
0000000000006180	movq	-0x200(%rbp), %rax
0000000000006187	movq	%rax, 0x18(%rsp)
000000000000618c	movq	-0x248(%rbp), %rax
0000000000006193	movq	%rax, 0x10(%rsp)
0000000000006198	movq	-0x208(%rbp), %rax
000000000000619f	movq	%rax, 0x8(%rsp)
00000000000061a4	movq	-0x240(%rbp), %rax
00000000000061ab	movq	%rax, (%rsp)
00000000000061af	movq	$0x0, 0x60(%rsp)
00000000000061b8	xorl	%eax, %eax
00000000000061ba	movq	-0x230(%rbp), %rdx
00000000000061c1	movq	-0x1d8(%rbp), %rcx
00000000000061c8	movq	-0x228(%rbp), %rdi
00000000000061cf	movq	-0x238(%rbp), %r8
00000000000061d6	movq	-0x1e0(%rbp), %r9
00000000000061dd	callq	*%r12
00000000000061e0	movq	%rax, %rbx
00000000000061e3	movq	%rbx, -0x1f0(%rbp)
00000000000061ea	movq	0x2e357(%rip), %rsi     ## Objc selector ref: keysSortedByValueUsingComparator:
00000000000061f1	leaq	0x23a38(%rip), %rdx
00000000000061f8	movq	-0x1e8(%rbp), %rdi
00000000000061ff	callq	*%r12
0000000000006202	movq	%rax, %r14
0000000000006205	movq	%r14, -0x1e0(%rbp)
000000000000620c	movq	0x2e335(%rip), %rsi     ## Objc selector ref: keysSortedByValueUsingComparator:
0000000000006213	leaq	0x23a56(%rip), %rdx
000000000000621a	movq	%rbx, %rdi
000000000000621d	callq	*%r12
0000000000006220	movq	%rax, -0x200(%rbp)
0000000000006227	movq	_OBJC_IVAR_$_UAPCaptioningViewController._backgroundColorPopup(%rip), %rax
000000000000622e	movq	-0x220(%rbp), %rbx
0000000000006235	movq	(%rbx,%rax), %rdi
0000000000006239	movq	0x2e310(%rip), %rsi     ## Objc selector ref: removeAllItems
0000000000006240	callq	*%r12
0000000000006243	movq	_OBJC_IVAR_$_UAPCaptioningViewController._windowColorPopup(%rip), %rax
000000000000624a	movq	(%rbx,%rax), %rdi
000000000000624e	movq	0x2e2fb(%rip), %rsi     ## Objc selector ref: removeAllItems
0000000000006255	callq	*%r12
0000000000006258	movq	_OBJC_IVAR_$_UAPCaptioningViewController._textColorPopup(%rip), %rax
000000000000625f	movq	(%rbx,%rax), %rdi
0000000000006263	movq	%rbx, %r13
0000000000006266	movq	0x2e2e3(%rip), %rsi     ## Objc selector ref: removeAllItems
000000000000626d	callq	*%r12
0000000000006270	xorps	%xmm0, %xmm0
0000000000006273	movaps	%xmm0, -0x160(%rbp)
000000000000627a	movaps	%xmm0, -0x170(%rbp)
0000000000006281	movaps	%xmm0, -0x180(%rbp)
0000000000006288	movaps	%xmm0, -0x190(%rbp)
000000000000628f	movq	0x2de7a(%rip), %rsi     ## Objc selector ref: countByEnumeratingWithState:objects:count:
0000000000006296	leaq	-0x190(%rbp), %rdx
000000000000629d	leaq	-0xb0(%rbp), %rcx
00000000000062a4	movl	$0x10, %r8d
00000000000062aa	movq	%r14, %rdi
00000000000062ad	callq	*%r12
00000000000062b0	movq	%r12, %rbx
00000000000062b3	movq	%rax, %r14
00000000000062b6	testq	%r14, %r14
00000000000062b9	je	0x6369
00000000000062bf	movq	-0x180(%rbp), %rax
00000000000062c6	movq	(%rax), %rax
00000000000062c9	movq	%rax, -0x1d8(%rbp)
00000000000062d0	xorl	%r12d, %r12d
00000000000062d3	movq	-0x180(%rbp), %rax
00000000000062da	movq	-0x1d8(%rbp), %rcx
00000000000062e1	cmpq	%rcx, (%rax)
00000000000062e4	je	0x62f2
00000000000062e6	movq	-0x1e0(%rbp), %rdi
00000000000062ed	callq	0x1e886                 ## symbol stub for: _objc_enumerationMutation
00000000000062f2	movq	-0x188(%rbp), %rax
00000000000062f9	movq	(%rax,%r12,8), %r15
00000000000062fd	movq	-0x1e8(%rbp), %rdi
0000000000006304	movq	0x2debd(%rip), %rsi     ## Objc selector ref: objectForKey:
000000000000630b	movq	%r15, %rdx
000000000000630e	callq	*%rbx
0000000000006310	movq	%r13, %rdi
0000000000006313	movq	_OBJC_IVAR_$_UAPCaptioningViewController._textColorPopup(%rip), %rcx
000000000000631a	movq	(%rdi,%rcx), %r8
000000000000631e	movq	0x2e233(%rip), %rsi     ## Objc selector ref: _addColor:withNameKey:ToPopUp:
0000000000006325	movq	%r15, %rdx
0000000000006328	movq	%rax, %rcx
000000000000632b	callq	*%rbx
000000000000632d	incq	%r12
0000000000006330	cmpq	%r14, %r12
0000000000006333	jb	0x62d3
0000000000006335	movl	$0x10, %r8d
000000000000633b	movq	-0x1e0(%rbp), %rdi
0000000000006342	movq	0x2ddc7(%rip), %rsi     ## Objc selector ref: countByEnumeratingWithState:objects:count:
0000000000006349	leaq	-0x190(%rbp), %rdx
0000000000006350	leaq	-0xb0(%rbp), %rcx
0000000000006357	callq	*0x230a3(%rip)          ## Objc message: +[UniversalAccessPref countByEnumeratingWithState:objects:count:]
000000000000635d	movq	%rax, %r14
0000000000006360	testq	%r14, %r14
0000000000006363	jne	0x62d0
0000000000006369	xorps	%xmm0, %xmm0
000000000000636c	movaps	%xmm0, -0x1a0(%rbp)
0000000000006373	movaps	%xmm0, -0x1b0(%rbp)
000000000000637a	movaps	%xmm0, -0x1c0(%rbp)
0000000000006381	movaps	%xmm0, -0x1d0(%rbp)
0000000000006388	movq	0x2dd81(%rip), %rsi     ## Objc selector ref: countByEnumeratingWithState:objects:count:
000000000000638f	leaq	-0x1d0(%rbp), %rdx
0000000000006396	leaq	-0x130(%rbp), %rcx
000000000000639d	movl	$0x10, %r8d
00000000000063a3	movq	-0x200(%rbp), %rdi
00000000000063aa	callq	*0x23050(%rip)          ## Objc message: -[%rdi countByEnumeratingWithState:objects:count:]
00000000000063b0	movq	%rax, -0x1e0(%rbp)
00000000000063b7	testq	%rax, %rax
00000000000063ba	je	0x64b8
00000000000063c0	movq	-0x1c0(%rbp), %rax
00000000000063c7	movq	(%rax), %rax
00000000000063ca	movq	%rax, -0x1f8(%rbp)
00000000000063d1	movq	0x2ddf0(%rip), %r12     ## Objc selector ref: objectForKey:
00000000000063d8	xorl	%r14d, %r14d
00000000000063db	movq	-0x1c0(%rbp), %rax
00000000000063e2	movq	-0x1f8(%rbp), %rcx
00000000000063e9	cmpq	%rcx, (%rax)
00000000000063ec	je	0x63fa
00000000000063ee	movq	-0x200(%rbp), %rdi
00000000000063f5	callq	0x1e886                 ## symbol stub for: _objc_enumerationMutation
00000000000063fa	movq	-0x1c8(%rbp), %rax
0000000000006401	movq	(%rax,%r14,8), %rdx
0000000000006405	movq	%rdx, -0x1d8(%rbp)
000000000000640c	movq	-0x1f0(%rbp), %r15
0000000000006413	movq	%r15, %rdi
0000000000006416	movq	%r12, %rsi
0000000000006419	callq	*%rbx
000000000000641b	movq	_OBJC_IVAR_$_UAPCaptioningViewController._backgroundColorPopup(%rip), %rcx
0000000000006422	movq	(%r13,%rcx), %r8
0000000000006427	movq	%r13, %rdi
000000000000642a	movq	0x2e127(%rip), %rcx     ## Objc selector ref: _addColor:withNameKey:ToPopUp:
0000000000006431	movq	%rcx, %rsi
0000000000006434	movq	-0x1d8(%rbp), %rdx
000000000000643b	movq	%rax, %rcx
000000000000643e	callq	*%rbx
0000000000006440	movq	%r15, %rdi
0000000000006443	movq	%r12, %rsi
0000000000006446	movq	-0x1d8(%rbp), %r15
000000000000644d	movq	%r15, %rdx
0000000000006450	callq	*%rbx
0000000000006452	movq	_OBJC_IVAR_$_UAPCaptioningViewController._windowColorPopup(%rip), %rcx
0000000000006459	movq	(%r13,%rcx), %r8
000000000000645e	movq	%r13, %rdi
0000000000006461	movq	0x2e0f0(%rip), %rsi     ## Objc selector ref: _addColor:withNameKey:ToPopUp:
0000000000006468	movq	%r15, %rdx
000000000000646b	movq	%rax, %rcx
000000000000646e	callq	*%rbx
0000000000006470	incq	%r14
0000000000006473	cmpq	-0x1e0(%rbp), %r14
000000000000647a	jb	0x63db
0000000000006480	movl	$0x10, %r8d
0000000000006486	movq	-0x200(%rbp), %rdi
000000000000648d	movq	0x2dc7c(%rip), %rsi     ## Objc selector ref: countByEnumeratingWithState:objects:count:
0000000000006494	leaq	-0x1d0(%rbp), %rdx
000000000000649b	leaq	-0x130(%rbp), %rcx
00000000000064a2	callq	*0x22f58(%rip)          ## Objc message: -[%rdi countByEnumeratingWithState:objects:count:]
00000000000064a8	movq	%rax, -0x1e0(%rbp)
00000000000064af	testq	%rax, %rax
00000000000064b2	jne	0x63d8
00000000000064b8	movq	0x2dc91(%rip), %rsi     ## Objc selector ref: release
00000000000064bf	movq	-0x1e8(%rbp), %rdi
00000000000064c6	callq	*%rbx
00000000000064c8	movq	0x2dc81(%rip), %rsi     ## Objc selector ref: release
00000000000064cf	movq	-0x1f0(%rbp), %rdi
00000000000064d6	callq	*%rbx
00000000000064d8	movq	0x22e79(%rip), %rax     ## literal pool symbol address: ___stack_chk_guard
00000000000064df	movq	(%rax), %rax
00000000000064e2	cmpq	-0x30(%rbp), %rax
00000000000064e6	jne	0x64fa
00000000000064e8	addq	$0x298, %rsp            ## imm = 0x298
00000000000064ef	popq	%rbx
00000000000064f0	popq	%r12
00000000000064f2	popq	%r13
00000000000064f4	popq	%r14
00000000000064f6	popq	%r15
00000000000064f8	popq	%rbp
00000000000064f9	retq
00000000000064fa	callq	0x1e8b6                 ## symbol stub for: ___stack_chk_fail
00000000000064ff	pushq	%rbp
0000000000006500	movq	%rsp, %rbp
0000000000006503	movq	0x2e036(%rip), %rax     ## Objc selector ref: localizedCompare:
000000000000650a	movq	%rsi, %rdi
000000000000650d	movq	%rax, %rsi
0000000000006510	popq	%rbp
0000000000006511	jmpq	*0x22ee9(%rip)          ## Objc message: -[%rdi localizedCompare:]
0000000000006517	pushq	%rbp
0000000000006518	movq	%rsp, %rbp
000000000000651b	movq	0x2e01e(%rip), %rax     ## Objc selector ref: localizedCompare:
0000000000006522	movq	%rsi, %rdi
0000000000006525	movq	%rax, %rsi
0000000000006528	popq	%rbp
0000000000006529	jmpq	*0x22ed1(%rip)          ## Objc message: -[%rdi localizedCompare:]
000000000000652f	pushq	%rbp
0000000000006530	movq	%rsp, %rbp
0000000000006533	pushq	%r15
0000000000006535	pushq	%r14
0000000000006537	pushq	%r13
0000000000006539	pushq	%r12
000000000000653b	pushq	%rbx
000000000000653c	subq	$0x68, %rsp
0000000000006540	movq	%rdi, %r15
0000000000006543	movq	0x22e0e(%rip), %rax     ## literal pool symbol address: ___stack_chk_guard
000000000000654a	movq	(%rax), %rax
000000000000654d	movq	%rax, -0x30(%rbp)
0000000000006551	movq	_OBJC_IVAR_$_UAPCaptioningViewController._textSizePopup(%rip), %rbx
0000000000006558	movq	(%r15,%rbx), %rdi
000000000000655c	movq	0x2dfed(%rip), %rsi     ## Objc selector ref: removeAllItems
0000000000006563	movq	0x22e96(%rip), %r14     ## Objc message: -[%rdi removeAllItems]
000000000000656a	callq	*%r14
000000000000656d	movq	(%r15,%rbx), %rax
0000000000006571	movq	%rax, -0x88(%rbp)
0000000000006578	movq	0x2ef81(%rip), %rbx     ## Objc class ref: _OBJC_CLASS_$_NSBundle
000000000000657f	movq	0x2ef82(%rip), %rdi     ## Objc class ref: UniversalAccessPref
0000000000006586	movq	0x2db33(%rip), %rsi     ## Objc selector ref: class
000000000000658d	callq	*%r14
0000000000006590	movq	0x2dc21(%rip), %rsi     ## Objc selector ref: bundleForClass:
0000000000006597	movq	%rbx, %rdi
000000000000659a	movq	%rax, %rdx
000000000000659d	callq	*%r14
00000000000065a0	movq	0x2dc19(%rip), %rsi     ## Objc selector ref: localizedStringForKey:value:table:
00000000000065a7	leaq	0x23f02(%rip), %rdx     ## Objc cfstring ref: @"profile.fontSize.extraSmall"
00000000000065ae	leaq	0x23b5b(%rip), %r12     ## Objc cfstring ref: @""
00000000000065b5	xorl	%r8d, %r8d
00000000000065b8	movq	%rax, %rdi
00000000000065bb	movq	%r12, %rcx
00000000000065be	callq	*%r14
00000000000065c1	leaq	-0x58(%rbp), %rsi
00000000000065c5	movq	%rax, %rdi
00000000000065c8	callq	0x1e86e                 ## symbol stub for: _objc_assign_strongCast
00000000000065cd	leaq	-0x50(%rbp), %r13
00000000000065d1	movq	0x2ef28(%rip), %rbx     ## Objc class ref: _OBJC_CLASS_$_NSBundle
00000000000065d8	movq	0x2ef29(%rip), %rdi     ## Objc class ref: UniversalAccessPref
00000000000065df	movq	0x2dada(%rip), %rsi     ## Objc selector ref: class
00000000000065e6	callq	*%r14
00000000000065e9	movq	0x2dbc8(%rip), %rsi     ## Objc selector ref: bundleForClass:
00000000000065f0	movq	%rbx, %rdi
00000000000065f3	movq	%rax, %rdx
00000000000065f6	callq	*%r14
00000000000065f9	movq	0x2dbc0(%rip), %rsi     ## Objc selector ref: localizedStringForKey:value:table:
0000000000006600	leaq	0x23ec9(%rip), %rdx     ## Objc cfstring ref: @"profile.fontSize.small"
0000000000006607	xorl	%r8d, %r8d
000000000000660a	movq	%rax, %rdi
000000000000660d	movq	%r12, %rcx
0000000000006610	callq	*%r14
0000000000006613	movq	%rax, %rdi
0000000000006616	movq	%r13, %rsi
0000000000006619	callq	0x1e86e                 ## symbol stub for: _objc_assign_strongCast
000000000000661e	leaq	-0x48(%rbp), %r13
0000000000006622	movq	0x2eed7(%rip), %rbx     ## Objc class ref: _OBJC_CLASS_$_NSBundle
0000000000006629	movq	0x2eed8(%rip), %rdi     ## Objc class ref: UniversalAccessPref
0000000000006630	movq	0x2da89(%rip), %rsi     ## Objc selector ref: class
0000000000006637	callq	*%r14
000000000000663a	movq	0x2db77(%rip), %rsi     ## Objc selector ref: bundleForClass:
0000000000006641	movq	%rbx, %rdi
0000000000006644	movq	%rax, %rdx
0000000000006647	callq	*%r14
000000000000664a	movq	0x2db6f(%rip), %rsi     ## Objc selector ref: localizedStringForKey:value:table:
0000000000006651	leaq	0x23e98(%rip), %rdx     ## Objc cfstring ref: @"profile.fontSize.medium"
0000000000006658	xorl	%r8d, %r8d
000000000000665b	movq	%rax, %rdi
000000000000665e	movq	%r12, %rcx
0000000000006661	callq	*%r14
0000000000006664	movq	%rax, %rdi
0000000000006667	movq	%r13, %rsi
000000000000666a	callq	0x1e86e                 ## symbol stub for: _objc_assign_strongCast
000000000000666f	leaq	-0x40(%rbp), %r13
0000000000006673	movq	0x2ee86(%rip), %rbx     ## Objc class ref: _OBJC_CLASS_$_NSBundle
000000000000667a	movq	0x2ee87(%rip), %rdi     ## Objc class ref: UniversalAccessPref
0000000000006681	movq	0x2da38(%rip), %rsi     ## Objc selector ref: class
0000000000006688	callq	*%r14
000000000000668b	movq	0x2db26(%rip), %rsi     ## Objc selector ref: bundleForClass:
0000000000006692	movq	%rbx, %rdi
0000000000006695	movq	%rax, %rdx
0000000000006698	callq	*%r14
000000000000669b	movq	0x2db1e(%rip), %rsi     ## Objc selector ref: localizedStringForKey:value:table:
00000000000066a2	leaq	0x23e67(%rip), %rdx     ## Objc cfstring ref: @"profile.fontSize.large"
00000000000066a9	xorl	%r8d, %r8d
00000000000066ac	movq	%rax, %rdi
00000000000066af	movq	%r12, %rcx
00000000000066b2	callq	*%r14
00000000000066b5	movq	%rax, %rdi
00000000000066b8	movq	%r13, %rsi
00000000000066bb	callq	0x1e86e                 ## symbol stub for: _objc_assign_strongCast
00000000000066c0	leaq	-0x38(%rbp), %r13
00000000000066c4	movq	0x2ee35(%rip), %rbx     ## Objc class ref: _OBJC_CLASS_$_NSBundle
00000000000066cb	movq	0x2ee36(%rip), %rdi     ## Objc class ref: UniversalAccessPref
00000000000066d2	movq	0x2d9e7(%rip), %rsi     ## Objc selector ref: class
00000000000066d9	callq	*%r14
00000000000066dc	movq	0x2dad5(%rip), %rsi     ## Objc selector ref: bundleForClass:
00000000000066e3	movq	%rbx, %rdi
00000000000066e6	movq	%rax, %rdx
00000000000066e9	callq	*%r14
00000000000066ec	movq	0x2dacd(%rip), %rsi     ## Objc selector ref: localizedStringForKey:value:table:
00000000000066f3	leaq	0x23e36(%rip), %rdx     ## Objc cfstring ref: @"profile.fontSize.extraLarge"
00000000000066fa	xorl	%r8d, %r8d
00000000000066fd	movq	%rax, %rdi
0000000000006700	movq	%r12, %rcx
0000000000006703	callq	*%r14
0000000000006706	movq	%rax, %rdi
0000000000006709	movq	%r13, %rsi
000000000000670c	movq	%r14, %r13
000000000000670f	movq	%r15, %rbx
0000000000006712	callq	0x1e86e                 ## symbol stub for: _objc_assign_strongCast
0000000000006717	movq	0x2edca(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_NSArray
000000000000671e	movq	0x2ddfb(%rip), %rsi     ## Objc selector ref: arrayWithObjects:count:
0000000000006725	movl	$0x5, %ecx
000000000000672a	leaq	-0x58(%rbp), %rdx
000000000000672e	callq	*%r13
0000000000006731	movq	0x2de28(%rip), %rsi     ## Objc selector ref: addItemsWithTitles:
0000000000006738	movq	-0x88(%rbp), %rdi
000000000000673f	movq	%rax, %rdx
0000000000006742	callq	*%r13
0000000000006745	movq	0x2ee14(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_NSNumber
000000000000674c	movq	0x2dc4d(%rip), %rsi     ## Objc selector ref: numberWithInt:
0000000000006753	movl	$0x23, %edx
0000000000006758	callq	*%r13
000000000000675b	leaq	-0x80(%rbp), %r15
000000000000675f	movq	%rax, %rdi
0000000000006762	movq	%r15, %rsi
0000000000006765	callq	0x1e86e                 ## symbol stub for: _objc_assign_strongCast
000000000000676a	leaq	-0x78(%rbp), %r14
000000000000676e	movq	0x2edeb(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_NSNumber
0000000000006775	movq	0x2dc24(%rip), %rsi     ## Objc selector ref: numberWithInt:
000000000000677c	movl	$0x3c, %edx
0000000000006781	callq	*%r13
0000000000006784	movq	%rax, %rdi
0000000000006787	movq	%r14, %rsi
000000000000678a	callq	0x1e86e                 ## symbol stub for: _objc_assign_strongCast
000000000000678f	leaq	-0x70(%rbp), %r14
0000000000006793	movq	0x2edc6(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_NSNumber
000000000000679a	movq	0x2dbff(%rip), %rsi     ## Objc selector ref: numberWithInt:
00000000000067a1	movl	$0x64, %edx
00000000000067a6	callq	*%r13
00000000000067a9	movq	%rax, %rdi
00000000000067ac	movq	%r14, %rsi
00000000000067af	callq	0x1e86e                 ## symbol stub for: _objc_assign_strongCast
00000000000067b4	leaq	-0x68(%rbp), %r14
00000000000067b8	movq	0x2eda1(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_NSNumber
00000000000067bf	movq	0x2dbda(%rip), %rsi     ## Objc selector ref: numberWithInt:
00000000000067c6	movl	$0x96, %edx
00000000000067cb	callq	*%r13
00000000000067ce	movq	%rax, %rdi
00000000000067d1	movq	%r14, %rsi
00000000000067d4	callq	0x1e86e                 ## symbol stub for: _objc_assign_strongCast
00000000000067d9	leaq	-0x60(%rbp), %r14
00000000000067dd	movq	0x2ed7c(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_NSNumber
00000000000067e4	movq	0x2dbb5(%rip), %rsi     ## Objc selector ref: numberWithInt:
00000000000067eb	movl	$0xc8, %edx
00000000000067f0	callq	*%r13
00000000000067f3	movq	%rax, %rdi
00000000000067f6	movq	%r14, %rsi
00000000000067f9	callq	0x1e86e                 ## symbol stub for: _objc_assign_strongCast
00000000000067fe	movq	0x2ece3(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_NSArray
0000000000006805	movq	0x2dd14(%rip), %rsi     ## Objc selector ref: arrayWithObjects:count:
000000000000680c	movl	$0x5, %ecx
0000000000006811	movq	%r15, %rdx
0000000000006814	callq	*%r13
0000000000006817	movq	%rax, -0x88(%rbp)
000000000000681e	movq	_OBJC_IVAR_$_UAPCaptioningViewController._textSizePopup(%rip), %rax
0000000000006825	movq	(%rbx,%rax), %rdi
0000000000006829	movq	0x2dc50(%rip), %rsi     ## Objc selector ref: itemArray
0000000000006830	callq	*%r13
0000000000006833	movq	0x2db2e(%rip), %rsi     ## Objc selector ref: count
000000000000683a	movq	%rax, %rdi
000000000000683d	callq	*%r13
0000000000006840	testq	%rax, %rax
0000000000006843	je	0x68b7
0000000000006845	movq	_OBJC_IVAR_$_UAPCaptioningViewController._textSizePopup(%rip), %r15
000000000000684c	xorl	%r12d, %r12d
000000000000684f	movq	(%rbx,%r15), %rdi
0000000000006853	movq	0x2dd0e(%rip), %rsi     ## Objc selector ref: itemAtIndex:
000000000000685a	movq	%r12, %rdx
000000000000685d	callq	*%r13
0000000000006860	movq	%rax, %r14
0000000000006863	movq	-0x88(%rbp), %rdi
000000000000686a	movq	0x2daff(%rip), %rsi     ## Objc selector ref: objectAtIndex:
0000000000006871	movq	%r12, %rdx
0000000000006874	callq	*%r13
0000000000006877	movq	%rax, %rdi
000000000000687a	movq	0x2d8b7(%rip), %rsi     ## Objc selector ref: integerValue
0000000000006881	callq	*%r13
0000000000006884	movq	%r14, %rdi
0000000000006887	movq	0x2dce2(%rip), %rsi     ## Objc selector ref: setTag:
000000000000688e	movq	%rax, %rdx
0000000000006891	callq	*%r13
0000000000006894	incq	%r12
0000000000006897	movq	(%rbx,%r15), %rdi
000000000000689b	movq	0x2dbde(%rip), %rsi     ## Objc selector ref: itemArray
00000000000068a2	callq	*%r13
00000000000068a5	movq	%rax, %rdi
00000000000068a8	movq	0x2dab9(%rip), %rsi     ## Objc selector ref: count
00000000000068af	callq	*%r13
00000000000068b2	cmpq	%rax, %r12
00000000000068b5	jb	0x684f
00000000000068b7	movq	0x22a9a(%rip), %rax     ## literal pool symbol address: ___stack_chk_guard
00000000000068be	movq	(%rax), %rax
00000000000068c1	cmpq	-0x30(%rbp), %rax
00000000000068c5	jne	0x68d6
00000000000068c7	addq	$0x68, %rsp
00000000000068cb	popq	%rbx
00000000000068cc	popq	%r12
00000000000068ce	popq	%r13
00000000000068d0	popq	%r14
00000000000068d2	popq	%r15
00000000000068d4	popq	%rbp
00000000000068d5	retq
00000000000068d6	callq	0x1e8b6                 ## symbol stub for: ___stack_chk_fail
00000000000068db	pushq	%rbp
00000000000068dc	movq	%rsp, %rbp
00000000000068df	pushq	%r15
00000000000068e1	pushq	%r14
00000000000068e3	pushq	%rbx
00000000000068e4	subq	$0x48, %rsp
00000000000068e8	movq	%rdi, %rbx
00000000000068eb	movq	0x22a66(%rip), %r15     ## literal pool symbol address: ___stack_chk_guard
00000000000068f2	movq	(%r15), %rax
00000000000068f5	movq	%rax, -0x20(%rbp)
00000000000068f9	movq	_OBJC_IVAR_$_UAPCaptioningViewController._defaultFontPopup(%rip), %rax
0000000000006900	movq	(%rbx,%rax), %rdi
0000000000006904	leaq	-0x60(%rbp), %r14
0000000000006908	movq	%r14, %rsi
000000000000690b	callq	0x1e86e                 ## symbol stub for: _objc_assign_strongCast
0000000000006910	leaq	-0x58(%rbp), %rsi
0000000000006914	movq	_OBJC_IVAR_$_UAPCaptioningViewController._monospaceSerifFontPopup(%rip), %rax
000000000000691b	movq	(%rbx,%rax), %rdi
000000000000691f	callq	0x1e86e                 ## symbol stub for: _objc_assign_strongCast
0000000000006924	leaq	-0x50(%rbp), %rsi
0000000000006928	movq	_OBJC_IVAR_$_UAPCaptioningViewController._proportionalSerifFontPopup(%rip), %rax
000000000000692f	movq	(%rbx,%rax), %rdi
0000000000006933	callq	0x1e86e                 ## symbol stub for: _objc_assign_strongCast
0000000000006938	leaq	-0x48(%rbp), %rsi
000000000000693c	movq	_OBJC_IVAR_$_UAPCaptioningViewController._casualFontPopup(%rip), %rax
0000000000006943	movq	(%rbx,%rax), %rdi
0000000000006947	callq	0x1e86e                 ## symbol stub for: _objc_assign_strongCast
000000000000694c	leaq	-0x40(%rbp), %rsi
0000000000006950	movq	_OBJC_IVAR_$_UAPCaptioningViewController._cursiveFontPopup(%rip), %rax
0000000000006957	movq	(%rbx,%rax), %rdi
000000000000695b	callq	0x1e86e                 ## symbol stub for: _objc_assign_strongCast
0000000000006960	leaq	-0x38(%rbp), %rsi
0000000000006964	movq	_OBJC_IVAR_$_UAPCaptioningViewController._smallCapitalFontPopup(%rip), %rax
000000000000696b	movq	(%rbx,%rax), %rdi
000000000000696f	callq	0x1e86e                 ## symbol stub for: _objc_assign_strongCast
0000000000006974	leaq	-0x30(%rbp), %rsi
0000000000006978	movq	_OBJC_IVAR_$_UAPCaptioningViewController._monospaceFontPopup(%rip), %rax
000000000000697f	movq	(%rbx,%rax), %rdi
0000000000006983	callq	0x1e86e                 ## symbol stub for: _objc_assign_strongCast
0000000000006988	leaq	-0x28(%rbp), %rsi
000000000000698c	movq	_OBJC_IVAR_$_UAPCaptioningViewController._proportionalFontPopup(%rip), %rax
0000000000006993	movq	(%rbx,%rax), %rdi
0000000000006997	callq	0x1e86e                 ## symbol stub for: _objc_assign_strongCast
000000000000699c	movq	0x2eb45(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_NSArray
00000000000069a3	movq	0x2db76(%rip), %rsi     ## Objc selector ref: arrayWithObjects:count:
00000000000069aa	movl	$0x8, %ecx
00000000000069af	movq	%r14, %rdx
00000000000069b2	callq	*0x22a48(%rip)          ## Objc message: +[NSArray arrayWithObjects:count:]
00000000000069b8	movq	(%r15), %rcx
00000000000069bb	cmpq	-0x20(%rbp), %rcx
00000000000069bf	jne	0x69cc
00000000000069c1	addq	$0x48, %rsp
00000000000069c5	popq	%rbx
00000000000069c6	popq	%r14
00000000000069c8	popq	%r15
00000000000069ca	popq	%rbp
00000000000069cb	retq
00000000000069cc	callq	0x1e8b6                 ## symbol stub for: ___stack_chk_fail
00000000000069d1	pushq	%rbp
00000000000069d2	movq	%rsp, %rbp
00000000000069d5	pushq	%r15
00000000000069d7	pushq	%r14
00000000000069d9	pushq	%rbx
00000000000069da	pushq	%rax
00000000000069db	movq	%rdi, %r14
00000000000069de	movq	0x2eb93(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_NSFont
00000000000069e5	movq	0x2dacc(%rip), %rsi     ## Objc selector ref: fontWithName:size:
00000000000069ec	movq	0x22a0d(%rip), %r15     ## Objc message: +[NSFont fontWithName:size:]
00000000000069f3	movsd	0x2190d(%rip), %xmm0
00000000000069fb	callq	*%r15
00000000000069fe	movq	0x2dabb(%rip), %rsi     ## Objc selector ref: fontDescriptor
0000000000006a05	movq	%rax, %rdi
0000000000006a08	callq	*%r15
0000000000006a0b	movq	0x2db66(%rip), %rsi     ## Objc selector ref: postscriptName
0000000000006a12	movq	%rax, %rdi
0000000000006a15	callq	*%r15
0000000000006a18	movq	%rax, %rbx
0000000000006a1b	movq	_OBJC_IVAR_$_UAPCaptioningViewController._fontFamilyPSNameToStoragePSName(%rip), %rax
0000000000006a22	movq	(%r14,%rax), %rdi
0000000000006a26	movq	0x2d79b(%rip), %rsi     ## Objc selector ref: objectForKey:
0000000000006a2d	movq	%rbx, %rdx
0000000000006a30	callq	*%r15
0000000000006a33	testq	%rax, %rax
0000000000006a36	cmoveq	%rbx, %rax
0000000000006a3a	addq	$0x8, %rsp
0000000000006a3e	popq	%rbx
0000000000006a3f	popq	%r14
0000000000006a41	popq	%r15
0000000000006a43	popq	%rbp
0000000000006a44	retq
0000000000006a45	pushq	%rbp
0000000000006a46	movq	%rsp, %rbp
0000000000006a49	pushq	%r15
0000000000006a4b	pushq	%r14
0000000000006a4d	pushq	%r13
0000000000006a4f	pushq	%r12
0000000000006a51	pushq	%rbx
0000000000006a52	subq	$0x1b8, %rsp            ## imm = 0x1B8
0000000000006a59	movq	%rdi, %r14
0000000000006a5c	movq	0x228f5(%rip), %rax     ## literal pool symbol address: ___stack_chk_guard
0000000000006a63	movq	(%rax), %rax
0000000000006a66	movq	%rax, -0x30(%rbp)
0000000000006a6a	movq	0x2eb17(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_NSFontManager
0000000000006a71	movq	0x2db08(%rip), %rsi     ## Objc selector ref: sharedFontManager
0000000000006a78	movq	0x22981(%rip), %rbx     ## Objc message: +[NSFontManager sharedFontManager]
0000000000006a7f	callq	*%rbx
0000000000006a81	movq	0x2db00(%rip), %rsi     ## Objc selector ref: availableFontFamilies
0000000000006a88	movq	%rax, %rdi
0000000000006a8b	callq	*%rbx
0000000000006a8d	movq	%rax, -0x1b8(%rbp)
0000000000006a94	xorps	%xmm0, %xmm0
0000000000006a97	movaps	%xmm0, -0x140(%rbp)
0000000000006a9e	movaps	%xmm0, -0x150(%rbp)
0000000000006aa5	movaps	%xmm0, -0x160(%rbp)
0000000000006aac	movaps	%xmm0, -0x170(%rbp)
0000000000006ab3	movq	0x2dad6(%rip), %rsi     ## Objc selector ref: _fontPopUps
0000000000006aba	movq	%r14, %rdi
0000000000006abd	callq	*%rbx
0000000000006abf	movq	%rax, -0x1d8(%rbp)
0000000000006ac6	movq	0x2d643(%rip), %rsi     ## Objc selector ref: countByEnumeratingWithState:objects:count:
0000000000006acd	leaq	-0x170(%rbp), %rdx
0000000000006ad4	leaq	-0xb0(%rbp), %rcx
0000000000006adb	movl	$0x10, %r8d
0000000000006ae1	movq	%rax, %rdi
0000000000006ae4	callq	*%rbx
0000000000006ae6	movq	%rax, -0x1c8(%rbp)
0000000000006aed	testq	%rax, %rax
0000000000006af0	je	0x6c64
0000000000006af6	movq	-0x160(%rbp), %rax
0000000000006afd	movq	(%rax), %rax
0000000000006b00	movq	%rax, -0x1d0(%rbp)
0000000000006b07	movq	0x2da8a(%rip), %r14     ## Objc selector ref: addItemWithTitle:
0000000000006b0e	xorl	%ebx, %ebx
0000000000006b10	movq	-0x160(%rbp), %rax
0000000000006b17	movq	-0x1d0(%rbp), %rcx
0000000000006b1e	cmpq	%rcx, (%rax)
0000000000006b21	je	0x6b2f
0000000000006b23	movq	-0x1d8(%rbp), %rdi
0000000000006b2a	callq	0x1e886                 ## symbol stub for: _objc_enumerationMutation
0000000000006b2f	movq	-0x168(%rbp), %rax
0000000000006b36	movq	(%rax,%rbx,8), %r13
0000000000006b3a	movq	%rbx, -0x1c0(%rbp)
0000000000006b41	movq	%r13, %rdi
0000000000006b44	movq	0x2da05(%rip), %rsi     ## Objc selector ref: removeAllItems
0000000000006b4b	movq	0x228ae(%rip), %rax     ## Objc message: -[%rdi removeAllItems]
0000000000006b52	movq	%rax, %rbx
0000000000006b55	callq	*%rbx
0000000000006b57	xorps	%xmm0, %xmm0
0000000000006b5a	movaps	%xmm0, -0x180(%rbp)
0000000000006b61	movaps	%xmm0, -0x190(%rbp)
0000000000006b68	movaps	%xmm0, -0x1a0(%rbp)
0000000000006b6f	movaps	%xmm0, -0x1b0(%rbp)
0000000000006b76	movl	$0x10, %r8d
0000000000006b7c	movq	-0x1b8(%rbp), %rdi
0000000000006b83	movq	0x2d586(%rip), %rsi     ## Objc selector ref: countByEnumeratingWithState:objects:count:
0000000000006b8a	leaq	-0x1b0(%rbp), %rdx
0000000000006b91	leaq	-0x130(%rbp), %rcx
0000000000006b98	callq	*%rbx
0000000000006b9a	movq	%rax, %r15
0000000000006b9d	testq	%r15, %r15
0000000000006ba0	je	0x6c15
0000000000006ba2	movq	-0x1a0(%rbp), %rax
0000000000006ba9	movq	(%rax), %r12
0000000000006bac	xorl	%ebx, %ebx
0000000000006bae	movq	-0x1a0(%rbp), %rax
0000000000006bb5	cmpq	%r12, (%rax)
0000000000006bb8	je	0x6bc6
0000000000006bba	movq	-0x1b8(%rbp), %rdi
0000000000006bc1	callq	0x1e886                 ## symbol stub for: _objc_enumerationMutation
0000000000006bc6	movq	-0x1a8(%rbp), %rax
0000000000006bcd	movq	(%rax,%rbx,8), %rdx
0000000000006bd1	movq	%r13, %rdi
0000000000006bd4	movq	%r14, %rsi
0000000000006bd7	callq	*0x22823(%rip)          ## Objc message: -[%rdi countByEnumeratingWithState:objects:count:]
0000000000006bdd	incq	%rbx
0000000000006be0	cmpq	%r15, %rbx
0000000000006be3	jb	0x6bae
0000000000006be5	movl	$0x10, %r8d
0000000000006beb	movq	-0x1b8(%rbp), %rdi
0000000000006bf2	movq	0x2d517(%rip), %rsi     ## Objc selector ref: countByEnumeratingWithState:objects:count:
0000000000006bf9	leaq	-0x1b0(%rbp), %rdx
0000000000006c00	leaq	-0x130(%rbp), %rcx
0000000000006c07	callq	*0x227f3(%rip)          ## Objc message: -[%rdi countByEnumeratingWithState:objects:count:]
0000000000006c0d	movq	%rax, %r15
0000000000006c10	testq	%r15, %r15
0000000000006c13	jne	0x6bac
0000000000006c15	movq	-0x1c0(%rbp), %rbx
0000000000006c1c	incq	%rbx
0000000000006c1f	cmpq	-0x1c8(%rbp), %rbx
0000000000006c26	jb	0x6b10
0000000000006c2c	movl	$0x10, %r8d
0000000000006c32	movq	-0x1d8(%rbp), %rdi
0000000000006c39	movq	0x2d4d0(%rip), %rsi     ## Objc selector ref: countByEnumeratingWithState:objects:count:
0000000000006c40	leaq	-0x170(%rbp), %rdx
0000000000006c47	leaq	-0xb0(%rbp), %rcx
0000000000006c4e	callq	*0x227ac(%rip)          ## Objc message: -[%rdi countByEnumeratingWithState:objects:count:]
0000000000006c54	movq	%rax, -0x1c8(%rbp)
0000000000006c5b	testq	%rax, %rax
0000000000006c5e	jne	0x6b0e
0000000000006c64	movq	0x226ed(%rip), %rax     ## literal pool symbol address: ___stack_chk_guard
0000000000006c6b	movq	(%rax), %rax
0000000000006c6e	cmpq	-0x30(%rbp), %rax
0000000000006c72	jne	0x6c86
0000000000006c74	addq	$0x1b8, %rsp            ## imm = 0x1B8
0000000000006c7b	popq	%rbx
0000000000006c7c	popq	%r12
0000000000006c7e	popq	%r13
0000000000006c80	popq	%r14
0000000000006c82	popq	%r15
0000000000006c84	popq	%rbp
0000000000006c85	retq
0000000000006c86	callq	0x1e8b6                 ## symbol stub for: ___stack_chk_fail
0000000000006c8b	pushq	%rbp
0000000000006c8c	movq	%rsp, %rbp
0000000000006c8f	pushq	%r15
0000000000006c91	pushq	%r14
0000000000006c93	pushq	%rbx
0000000000006c94	pushq	%rax
0000000000006c95	movq	%rdi, %r14
0000000000006c98	movq	_OBJC_IVAR_$_UAPCaptioningViewController._activeProfile(%rip), %r15
0000000000006c9f	movl	$0x1, %ebx
0000000000006ca4	movq	(%r14,%r15), %rdi
0000000000006ca8	movq	%rbx, %rsi
0000000000006cab	callq	0x1e448                 ## symbol stub for: _MACaptionAppearancePrefCopyFontForStyle
0000000000006cb0	testq	%rax, %rax
0000000000006cb3	jne	0x6cc2
0000000000006cb5	incq	%rbx
0000000000006cb8	cmpq	$0x7, %rbx
0000000000006cbc	jle	0x6ca4
0000000000006cbe	xorl	%eax, %eax
0000000000006cc0	jmp	0x6ccc
0000000000006cc2	movq	%rax, %rdi
0000000000006cc5	callq	0x1e562                 ## symbol stub for: _CFRelease
0000000000006cca	movb	$0x1, %al
0000000000006ccc	movzbl	%al, %eax
0000000000006ccf	addq	$0x8, %rsp
0000000000006cd3	popq	%rbx
0000000000006cd4	popq	%r14
0000000000006cd6	popq	%r15
0000000000006cd8	popq	%rbp
0000000000006cd9	retq
0000000000006cda	pushq	%rbp
0000000000006cdb	movq	%rsp, %rbp
0000000000006cde	pushq	%r15
0000000000006ce0	pushq	%r14
0000000000006ce2	pushq	%r13
0000000000006ce4	pushq	%r12
0000000000006ce6	pushq	%rbx
0000000000006ce7	subq	$0xe8, %rsp
0000000000006cee	movq	%rdi, %rbx
0000000000006cf1	movq	0x22660(%rip), %rax     ## literal pool symbol address: ___stack_chk_guard
0000000000006cf8	movq	(%rax), %rax
0000000000006cfb	movq	%rax, -0x30(%rbp)
0000000000006cff	movq	_OBJC_IVAR_$_UAPCaptioningViewController._defaultFontPopup(%rip), %rax
0000000000006d06	movq	(%rbx,%rax), %rdi
0000000000006d0a	movq	0x2d88f(%rip), %rsi     ## Objc selector ref: selectedItem
0000000000006d11	movq	0x226e8(%rip), %r14     ## Objc message: -[%rdi selectedItem]
0000000000006d18	callq	*%r14
0000000000006d1b	movq	0x2d7a6(%rip), %rsi     ## Objc selector ref: title
0000000000006d22	movq	%rax, %rdi
0000000000006d25	callq	*%r14
0000000000006d28	movq	%rax, %r13
0000000000006d2b	xorps	%xmm0, %xmm0
0000000000006d2e	movaps	%xmm0, -0xc0(%rbp)
0000000000006d35	movaps	%xmm0, -0xd0(%rbp)
0000000000006d3c	movaps	%xmm0, -0xe0(%rbp)
0000000000006d43	movaps	%xmm0, -0xf0(%rbp)
0000000000006d4a	movq	0x2d83f(%rip), %rsi     ## Objc selector ref: _fontPopUps
0000000000006d51	movq	%rbx, %rdi
0000000000006d54	callq	*%r14
0000000000006d57	movq	%rax, -0x108(%rbp)
0000000000006d5e	movq	0x2d3ab(%rip), %rsi     ## Objc selector ref: countByEnumeratingWithState:objects:count:
0000000000006d65	leaq	-0xf0(%rbp), %rdx
0000000000006d6c	leaq	-0xb0(%rbp), %rcx
0000000000006d73	movl	$0x10, %r8d
0000000000006d79	movq	%rax, %rdi
0000000000006d7c	callq	*%r14
0000000000006d7f	movq	%rax, -0xf8(%rbp)
0000000000006d86	testq	%rax, %rax
0000000000006d89	je	0x6ea5
0000000000006d8f	movq	-0xe0(%rbp), %rax
0000000000006d96	movq	(%rax), %rax
0000000000006d99	movq	%rax, -0x100(%rbp)
0000000000006da0	xorl	%r15d, %r15d
0000000000006da3	movq	-0xe0(%rbp), %rax
0000000000006daa	movq	-0x100(%rbp), %rcx
0000000000006db1	cmpq	%rcx, (%rax)
0000000000006db4	je	0x6dc2
0000000000006db6	movq	-0x108(%rbp), %rdi
0000000000006dbd	callq	0x1e886                 ## symbol stub for: _objc_enumerationMutation
0000000000006dc2	movq	-0xe8(%rbp), %rax
0000000000006dc9	movq	(%rax,%r15,8), %rdi
0000000000006dcd	movq	0x2d7cc(%rip), %rsi     ## Objc selector ref: selectedItem
0000000000006dd4	callq	*%r14
0000000000006dd7	movq	%rax, %rdi
0000000000006dda	movq	0x2d6e7(%rip), %rsi     ## Objc selector ref: title
0000000000006de1	callq	*%r14
0000000000006de4	movq	%rax, %r12
0000000000006de7	movq	%r12, %rdi
0000000000006dea	movq	0x2d2ff(%rip), %rsi     ## Objc selector ref: isEqualToString:
0000000000006df1	movq	%r13, %rdx
0000000000006df4	callq	*%r14
0000000000006df7	testb	%al, %al
0000000000006df9	jne	0x6e5d
0000000000006dfb	movq	%r13, %rbx
0000000000006dfe	movq	0x2e6fb(%rip), %r13     ## Objc class ref: _OBJC_CLASS_$_NSBundle
0000000000006e05	movq	0x2e6fc(%rip), %rdi     ## Objc class ref: UniversalAccessPref
0000000000006e0c	movq	0x2d2ad(%rip), %rsi     ## Objc selector ref: class
0000000000006e13	callq	*%r14
0000000000006e16	movq	%r13, %rdi
0000000000006e19	movq	%rbx, %r13
0000000000006e1c	movq	0x2d395(%rip), %rsi     ## Objc selector ref: bundleForClass:
0000000000006e23	movq	%rax, %rdx
0000000000006e26	callq	*%r14
0000000000006e29	xorl	%ebx, %ebx
0000000000006e2b	xorl	%r8d, %r8d
0000000000006e2e	movq	%rax, %rdi
0000000000006e31	movq	0x2d388(%rip), %rsi     ## Objc selector ref: localizedStringForKey:value:table:
0000000000006e38	leaq	0x23711(%rip), %rdx     ## Objc cfstring ref: @"profile.default.multiple"
0000000000006e3f	leaq	0x232ca(%rip), %rcx     ## Objc cfstring ref: @""
0000000000006e46	callq	*%r14
0000000000006e49	movq	%r12, %rdi
0000000000006e4c	movq	0x2d29d(%rip), %rsi     ## Objc selector ref: isEqualToString:
0000000000006e53	movq	%rax, %rdx
0000000000006e56	callq	*%r14
0000000000006e59	testb	%al, %al
0000000000006e5b	je	0x6ea7
0000000000006e5d	incq	%r15
0000000000006e60	cmpq	-0xf8(%rbp), %r15
0000000000006e67	jb	0x6da3
0000000000006e6d	movl	$0x10, %r8d
0000000000006e73	movq	-0x108(%rbp), %rdi
0000000000006e7a	movq	0x2d28f(%rip), %rsi     ## Objc selector ref: countByEnumeratingWithState:objects:count:
0000000000006e81	leaq	-0xf0(%rbp), %rdx
0000000000006e88	leaq	-0xb0(%rbp), %rcx
0000000000006e8f	callq	*0x2256b(%rip)          ## Objc message: +[UniversalAccessPref countByEnumeratingWithState:objects:count:]
0000000000006e95	movq	%rax, -0xf8(%rbp)
0000000000006e9c	testq	%rax, %rax
0000000000006e9f	jne	0x6da0
0000000000006ea5	movb	$0x1, %bl
0000000000006ea7	movq	0x224aa(%rip), %rax     ## literal pool symbol address: ___stack_chk_guard
0000000000006eae	movq	(%rax), %rax
0000000000006eb1	cmpq	-0x30(%rbp), %rax
0000000000006eb5	jne	0x6ecc
0000000000006eb7	movzbl	%bl, %eax
0000000000006eba	addq	$0xe8, %rsp
0000000000006ec1	popq	%rbx
0000000000006ec2	popq	%r12
0000000000006ec4	popq	%r13
0000000000006ec6	popq	%r14
0000000000006ec8	popq	%r15
0000000000006eca	popq	%rbp
0000000000006ecb	retq
0000000000006ecc	callq	0x1e8b6                 ## symbol stub for: ___stack_chk_fail
0000000000006ed1	pushq	%rbp
0000000000006ed2	movq	%rsp, %rbp
0000000000006ed5	pushq	%r15
0000000000006ed7	pushq	%r14
0000000000006ed9	pushq	%rbx
0000000000006eda	subq	$0x28, %rsp
0000000000006ede	movq	%rdi, %rbx
0000000000006ee1	movq	0x22470(%rip), %r15     ## literal pool symbol address: ___stack_chk_guard
0000000000006ee8	movq	(%r15), %rax
0000000000006eeb	movq	%rax, -0x20(%rbp)
0000000000006eef	movq	_OBJC_IVAR_$_UAPCaptioningViewController._backgroundOpacityPopup(%rip), %rax
0000000000006ef6	movq	(%rbx,%rax), %rdi
0000000000006efa	leaq	-0x38(%rbp), %r14
0000000000006efe	movq	%r14, %rsi
0000000000006f01	callq	0x1e86e                 ## symbol stub for: _objc_assign_strongCast
0000000000006f06	leaq	-0x30(%rbp), %rsi
0000000000006f0a	movq	_OBJC_IVAR_$_UAPCaptioningViewController._textOpacityPopup(%rip), %rax
0000000000006f11	movq	(%rbx,%rax), %rdi
0000000000006f15	callq	0x1e86e                 ## symbol stub for: _objc_assign_strongCast
0000000000006f1a	leaq	-0x28(%rbp), %rsi
0000000000006f1e	movq	_OBJC_IVAR_$_UAPCaptioningViewController._windowOpacityPopup(%rip), %rax
0000000000006f25	movq	(%rbx,%rax), %rdi
0000000000006f29	callq	0x1e86e                 ## symbol stub for: _objc_assign_strongCast
0000000000006f2e	movq	0x2e5b3(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_NSArray
0000000000006f35	movq	0x2d5e4(%rip), %rsi     ## Objc selector ref: arrayWithObjects:count:
0000000000006f3c	movl	$0x3, %ecx
0000000000006f41	movq	%r14, %rdx
0000000000006f44	callq	*0x224b6(%rip)          ## Objc message: +[NSArray arrayWithObjects:count:]
0000000000006f4a	movq	(%r15), %rcx
0000000000006f4d	cmpq	-0x20(%rbp), %rcx
0000000000006f51	jne	0x6f5e
0000000000006f53	addq	$0x28, %rsp
0000000000006f57	popq	%rbx
0000000000006f58	popq	%r14
0000000000006f5a	popq	%r15
0000000000006f5c	popq	%rbp
0000000000006f5d	retq
0000000000006f5e	callq	0x1e8b6                 ## symbol stub for: ___stack_chk_fail
0000000000006f63	pushq	%rbp
0000000000006f64	movq	%rsp, %rbp
0000000000006f67	pushq	%r15
0000000000006f69	pushq	%r14
0000000000006f6b	pushq	%r13
0000000000006f6d	pushq	%r12
0000000000006f6f	pushq	%rbx
0000000000006f70	subq	$0x158, %rsp            ## imm = 0x158
0000000000006f77	movq	%rdi, -0x158(%rbp)
0000000000006f7e	movq	0x223d3(%rip), %rax     ## literal pool symbol address: ___stack_chk_guard
0000000000006f85	movq	(%rax), %rax
0000000000006f88	movq	%rax, -0x30(%rbp)
0000000000006f8c	movq	0x2e56d(%rip), %rbx     ## Objc class ref: _OBJC_CLASS_$_NSBundle
0000000000006f93	movq	0x2e56e(%rip), %rdi     ## Objc class ref: UniversalAccessPref
0000000000006f9a	movq	0x2d11f(%rip), %rsi     ## Objc selector ref: class
0000000000006fa1	movq	0x22458(%rip), %r13     ## Objc message: +[UniversalAccessPref class]
0000000000006fa8	callq	*%r13
0000000000006fab	movq	0x2d206(%rip), %rsi     ## Objc selector ref: bundleForClass:
0000000000006fb2	movq	%rbx, %rdi
0000000000006fb5	movq	%rax, %rdx
0000000000006fb8	callq	*%r13
0000000000006fbb	movq	0x2d1fe(%rip), %rsi     ## Objc selector ref: localizedStringForKey:value:table:
0000000000006fc2	leaq	0x235a7(%rip), %rdx     ## Objc cfstring ref: @"profile.transparency.opaque"
0000000000006fc9	leaq	0x23140(%rip), %r12     ## Objc cfstring ref: @""
0000000000006fd0	xorl	%r8d, %r8d
0000000000006fd3	movq	%rax, %rdi
0000000000006fd6	movq	%r12, %rcx
0000000000006fd9	callq	*%r13
0000000000006fdc	leaq	-0x48(%rbp), %r14
0000000000006fe0	movq	%rax, %rdi
0000000000006fe3	movq	%r14, %rsi
0000000000006fe6	callq	0x1e86e                 ## symbol stub for: _objc_assign_strongCast
0000000000006feb	leaq	-0x40(%rbp), %r15
0000000000006fef	movq	0x2e50a(%rip), %rbx     ## Objc class ref: _OBJC_CLASS_$_NSBundle
0000000000006ff6	movq	0x2e50b(%rip), %rdi     ## Objc class ref: UniversalAccessPref
0000000000006ffd	movq	0x2d0bc(%rip), %rsi     ## Objc selector ref: class
0000000000007004	callq	*%r13
0000000000007007	movq	0x2d1aa(%rip), %rsi     ## Objc selector ref: bundleForClass:
000000000000700e	movq	%rbx, %rdi
0000000000007011	movq	%rax, %rdx
0000000000007014	callq	*%r13
0000000000007017	movq	0x2d1a2(%rip), %rsi     ## Objc selector ref: localizedStringForKey:value:table:
000000000000701e	leaq	0x2356b(%rip), %rdx     ## Objc cfstring ref: @"profile.transparency.semitransparent"
0000000000007025	xorl	%r8d, %r8d
0000000000007028	movq	%rax, %rdi
000000000000702b	movq	%r12, %rcx
000000000000702e	callq	*%r13
0000000000007031	movq	%rax, %rdi
0000000000007034	movq	%r15, %rsi
0000000000007037	callq	0x1e86e                 ## symbol stub for: _objc_assign_strongCast
000000000000703c	leaq	-0x38(%rbp), %r15
0000000000007040	movq	0x2e4b9(%rip), %rbx     ## Objc class ref: _OBJC_CLASS_$_NSBundle
0000000000007047	movq	0x2e4ba(%rip), %rdi     ## Objc class ref: UniversalAccessPref
000000000000704e	movq	0x2d06b(%rip), %rsi     ## Objc selector ref: class
0000000000007055	callq	*%r13
0000000000007058	movq	0x2d159(%rip), %rsi     ## Objc selector ref: bundleForClass:
000000000000705f	movq	%rbx, %rdi
0000000000007062	movq	%rax, %rdx
0000000000007065	callq	*%r13
0000000000007068	movq	0x2d151(%rip), %rsi     ## Objc selector ref: localizedStringForKey:value:table:
000000000000706f	leaq	0x2353a(%rip), %rdx     ## Objc cfstring ref: @"profile.transparency.transparent"
0000000000007076	xorl	%r8d, %r8d
0000000000007079	movq	%rax, %rdi
000000000000707c	movq	%r12, %rcx
000000000000707f	callq	*%r13
0000000000007082	movq	%rax, %rdi
0000000000007085	movq	%r15, %rsi
0000000000007088	callq	0x1e86e                 ## symbol stub for: _objc_assign_strongCast
000000000000708d	movq	0x2e454(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_NSArray
0000000000007094	movq	0x2d485(%rip), %rsi     ## Objc selector ref: arrayWithObjects:count:
000000000000709b	movl	$0x3, %ecx
00000000000070a0	movq	%r14, %rdx
00000000000070a3	callq	*%r13
00000000000070a6	movq	%rax, %r15
00000000000070a9	movq	%r15, -0x160(%rbp)
00000000000070b0	movq	0x2e4a9(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_NSNumber
00000000000070b7	movq	0x2d4ea(%rip), %rsi     ## Objc selector ref: numberWithFloat:
00000000000070be	movss	0x21262(%rip), %xmm0
00000000000070c6	callq	*%r13
00000000000070c9	leaq	-0x60(%rbp), %r14
00000000000070cd	movq	%rax, %rdi
00000000000070d0	movq	%r14, %rsi
00000000000070d3	callq	0x1e86e                 ## symbol stub for: _objc_assign_strongCast
00000000000070d8	leaq	-0x58(%rbp), %rbx
00000000000070dc	movq	0x2e47d(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_NSNumber
00000000000070e3	movq	0x2d4be(%rip), %rsi     ## Objc selector ref: numberWithFloat:
00000000000070ea	movss	0x2123a(%rip), %xmm0
00000000000070f2	callq	*%r13
00000000000070f5	movq	%rax, %rdi
00000000000070f8	movq	%rbx, %rsi
00000000000070fb	callq	0x1e86e                 ## symbol stub for: _objc_assign_strongCast
0000000000007100	leaq	-0x50(%rbp), %rbx
0000000000007104	movq	0x2e455(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_NSNumber
000000000000710b	movq	0x2d496(%rip), %rsi     ## Objc selector ref: numberWithFloat:
0000000000007112	xorps	%xmm0, %xmm0
0000000000007115	callq	*%r13
0000000000007118	movq	%rax, %rdi
000000000000711b	movq	%rbx, %rsi
000000000000711e	callq	0x1e86e                 ## symbol stub for: _objc_assign_strongCast
0000000000007123	movq	0x2e3be(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_NSArray
000000000000712a	movq	0x2d3ef(%rip), %rsi     ## Objc selector ref: arrayWithObjects:count:
0000000000007131	movl	$0x3, %ecx
0000000000007136	movq	%r14, %rdx
0000000000007139	callq	*%r13
000000000000713c	movq	%rax, -0x128(%rbp)
0000000000007143	xorps	%xmm0, %xmm0
0000000000007146	movaps	%xmm0, -0xf0(%rbp)
000000000000714d	movaps	%xmm0, -0x100(%rbp)
0000000000007154	movaps	%xmm0, -0x110(%rbp)
000000000000715b	movaps	%xmm0, -0x120(%rbp)
0000000000007162	movq	0x2d447(%rip), %rsi     ## Objc selector ref: _opacityPopups
0000000000007169	movq	-0x158(%rbp), %rdi
0000000000007170	callq	*%r13
0000000000007173	movq	%rax, -0x180(%rbp)
000000000000717a	movq	0x2cf8f(%rip), %rsi     ## Objc selector ref: countByEnumeratingWithState:objects:count:
0000000000007181	leaq	-0x120(%rbp), %rdx
0000000000007188	leaq	-0xe0(%rbp), %rcx
000000000000718f	movl	$0x10, %r8d
0000000000007195	movq	%rax, %rdi
0000000000007198	callq	*%r13
000000000000719b	movq	%r13, %r12
000000000000719e	movq	%rax, -0x170(%rbp)
00000000000071a5	testq	%rax, %rax
00000000000071a8	je	0x73bf
00000000000071ae	movq	-0x110(%rbp), %rax
00000000000071b5	movq	0x2d1ac(%rip), %rcx     ## Objc selector ref: count
00000000000071bc	movq	%rcx, -0x148(%rbp)
00000000000071c3	movq	0x2d1a6(%rip), %rcx     ## Objc selector ref: objectAtIndex:
00000000000071ca	movq	%rcx, -0x130(%rbp)
00000000000071d1	movq	0x2d398(%rip), %rcx     ## Objc selector ref: setTag:
00000000000071d8	movq	%rcx, -0x138(%rbp)
00000000000071df	movq	(%rax), %rax
00000000000071e2	movq	%rax, -0x178(%rbp)
00000000000071e9	movq	%r15, %r14
00000000000071ec	xorl	%r15d, %r15d
00000000000071ef	movq	-0x110(%rbp), %rax
00000000000071f6	movq	-0x178(%rbp), %rcx
00000000000071fd	cmpq	%rcx, (%rax)
0000000000007200	je	0x720e
0000000000007202	movq	-0x180(%rbp), %rdi
0000000000007209	callq	0x1e886                 ## symbol stub for: _objc_enumerationMutation
000000000000720e	movq	-0x118(%rbp), %rax
0000000000007215	movq	(%rax,%r15,8), %rdi
0000000000007219	movq	%rdi, -0x150(%rbp)
0000000000007220	movq	%r15, -0x168(%rbp)
0000000000007227	movq	0x2d322(%rip), %rsi     ## Objc selector ref: removeAllItems
000000000000722e	callq	*%r12
0000000000007231	movq	%r14, %rdi
0000000000007234	movq	-0x148(%rbp), %rsi
000000000000723b	callq	*%r12
000000000000723e	testq	%rax, %rax
0000000000007241	movl	$0x0, %r15d
0000000000007247	je	0x736d
000000000000724d	movq	%r14, %rdi
0000000000007250	movq	-0x130(%rbp), %r14
0000000000007257	movq	%r14, %rsi
000000000000725a	movq	%r15, %rdx
000000000000725d	callq	*%r12
0000000000007260	movq	-0x150(%rbp), %rbx
0000000000007267	movq	%rbx, %rdi
000000000000726a	movq	0x2d327(%rip), %rsi     ## Objc selector ref: addItemWithTitle:
0000000000007271	movq	%rax, %rdx
0000000000007274	callq	*%r12
0000000000007277	movq	%rbx, %rdi
000000000000727a	movq	0x2d337(%rip), %rsi     ## Objc selector ref: lastItem
0000000000007281	callq	*%r12
0000000000007284	movq	%rax, %r13
0000000000007287	movq	%r13, -0x140(%rbp)
000000000000728e	movq	-0x128(%rbp), %rdi
0000000000007295	movq	%r14, %rsi
0000000000007298	movq	-0x160(%rbp), %r14
000000000000729f	movq	%r15, %rdx
00000000000072a2	callq	*%r12
00000000000072a5	movq	%rax, %rdi
00000000000072a8	movq	0x2d1f9(%rip), %rsi     ## Objc selector ref: floatValue
00000000000072af	callq	*%r12
00000000000072b2	mulss	0x21066(%rip), %xmm0
00000000000072ba	cvttss2si	%xmm0, %rdx
00000000000072bf	movq	%r13, %rdi
00000000000072c2	movq	-0x138(%rbp), %rsi
00000000000072c9	callq	*%r12
00000000000072cc	movq	-0x158(%rbp), %rax
00000000000072d3	movq	_OBJC_IVAR_$_UAPCaptioningViewController._textOpacityPopup(%rip), %rcx
00000000000072da	movq	(%rax,%rcx), %rdx
00000000000072de	movq	%rbx, %rdi
00000000000072e1	movq	0x2d1e8(%rip), %rsi     ## Objc selector ref: isEqual:
00000000000072e8	callq	*%r12
00000000000072eb	testb	%al, %al
00000000000072ed	je	0x7351
00000000000072ef	movq	-0x128(%rbp), %rdi
00000000000072f6	movq	-0x130(%rbp), %rsi
00000000000072fd	movq	%r15, %rdx
0000000000007300	callq	*%r12
0000000000007303	movq	%r12, %rbx
0000000000007306	movq	%r14, %r12
0000000000007309	movq	%rax, %r14
000000000000730c	movq	0x2e24d(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_NSNumber
0000000000007313	xorps	%xmm0, %xmm0
0000000000007316	movq	0x2d28b(%rip), %rsi     ## Objc selector ref: numberWithFloat:
000000000000731d	callq	*%rbx
000000000000731f	movq	%r14, %rdi
0000000000007322	movq	%r12, %r14
0000000000007325	movq	0x2ce6c(%rip), %rsi     ## Objc selector ref: isEqualToNumber:
000000000000732c	movq	%rax, %rdx
000000000000732f	callq	*%rbx
0000000000007331	movq	%rbx, %r12
0000000000007334	testb	%al, %al
0000000000007336	je	0x7351
0000000000007338	movl	$0x14, %edx
000000000000733d	movq	-0x140(%rbp), %rdi
0000000000007344	movq	-0x138(%rbp), %rsi
000000000000734b	callq	*0x220af(%rip)          ## Objc message: +[NSNumber isEqualToNumber:]
0000000000007351	incq	%r15
0000000000007354	movq	%r14, %rdi
0000000000007357	movq	-0x148(%rbp), %rsi
000000000000735e	callq	*0x2209c(%rip)          ## Objc message: -[%rdi isEqualToNumber:]
0000000000007364	cmpq	%rax, %r15
0000000000007367	jb	0x724d
000000000000736d	movq	-0x168(%rbp), %r15
0000000000007374	incq	%r15
0000000000007377	cmpq	-0x170(%rbp), %r15
000000000000737e	jb	0x71ef
0000000000007384	movq	%r14, %r15
0000000000007387	movl	$0x10, %r8d
000000000000738d	movq	-0x180(%rbp), %rdi
0000000000007394	movq	0x2cd75(%rip), %rsi     ## Objc selector ref: countByEnumeratingWithState:objects:count:
000000000000739b	leaq	-0x120(%rbp), %rdx
00000000000073a2	leaq	-0xe0(%rbp), %rcx
00000000000073a9	callq	*0x22051(%rip)          ## Objc message: -[%rdi countByEnumeratingWithState:objects:count:]
00000000000073af	movq	%rax, -0x170(%rbp)
00000000000073b6	testq	%rax, %rax
00000000000073b9	jne	0x71e9
00000000000073bf	movq	0x21f92(%rip), %rax     ## literal pool symbol address: ___stack_chk_guard
00000000000073c6	movq	(%rax), %rax
00000000000073c9	cmpq	-0x30(%rbp), %rax
00000000000073cd	jne	0x73e1
00000000000073cf	addq	$0x158, %rsp            ## imm = 0x158
00000000000073d6	popq	%rbx
00000000000073d7	popq	%r12
00000000000073d9	popq	%r13
00000000000073db	popq	%r14
00000000000073dd	popq	%r15
00000000000073df	popq	%rbp
00000000000073e0	retq
00000000000073e1	callq	0x1e8b6                 ## symbol stub for: ___stack_chk_fail
00000000000073e6	pushq	%rbp
00000000000073e7	movq	%rsp, %rbp
00000000000073ea	pushq	%r15
00000000000073ec	pushq	%r14
00000000000073ee	pushq	%r13
00000000000073f0	pushq	%r12
00000000000073f2	pushq	%rbx
00000000000073f3	pushq	%rax
00000000000073f4	movq	%r8, %rbx
00000000000073f7	movq	%rdx, %r12
00000000000073fa	movq	%rdi, %r15
00000000000073fd	movq	0x2d194(%rip), %rsi     ## Objc selector ref: addItemWithTitle:
0000000000007404	movq	0x21ff5(%rip), %r13     ## Objc message: -[%rdi addItemWithTitle:]
000000000000740b	movq	%rbx, %rdi
000000000000740e	movq	%rcx, %rdx
0000000000007411	callq	*%r13
0000000000007414	movq	0x2d19d(%rip), %rsi     ## Objc selector ref: lastItem
000000000000741b	movq	%rbx, %rdi
000000000000741e	callq	*%r13
0000000000007421	movq	%rax, %r14
0000000000007424	movq	0x2d195(%rip), %rsi     ## Objc selector ref: setRepresentedObject:
000000000000742b	movq	%r14, %rdi
000000000000742e	movq	%r12, %rdx
0000000000007431	callq	*%r13
0000000000007434	movq	0x2e155(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_NSImage
000000000000743b	movq	0x2cf1e(%rip), %rsi     ## Objc selector ref: allocWithZone:
0000000000007442	xorl	%edx, %edx
0000000000007444	callq	*%r13
0000000000007447	movq	0x2d17a(%rip), %rsi     ## Objc selector ref: initWithSize:
000000000000744e	movsd	0x20eba(%rip), %xmm0
0000000000007456	movsd	0x20eaa(%rip), %xmm1
000000000000745e	movq	%rax, %rdi
0000000000007461	callq	*%r13
0000000000007464	movq	%rax, %rbx
0000000000007467	movq	0x2d162(%rip), %rsi     ## Objc selector ref: lockFocus
000000000000746e	movq	%rbx, %rdi
0000000000007471	callq	*%r13
0000000000007474	movq	0x2cdc5(%rip), %rsi     ## Objc selector ref: set
000000000000747b	movq	%r12, %rdi
000000000000747e	callq	*%r13
0000000000007481	movq	_OBJC_IVAR_$_UAPCaptioningViewController._colorSwatchFillPath(%rip), %rax
0000000000007488	movq	(%r15,%rax), %rdi
000000000000748c	movq	0x2d145(%rip), %rsi     ## Objc selector ref: fill
0000000000007493	callq	*%r13
0000000000007496	movq	0x2e053(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_NSColor
000000000000749d	movq	0x2d13c(%rip), %rsi     ## Objc selector ref: colorWithCalibratedWhite:alpha:
00000000000074a4	movsd	0x20e6c(%rip), %xmm1
00000000000074ac	xorps	%xmm0, %xmm0
00000000000074af	callq	*%r13
00000000000074b2	movq	0x2cd87(%rip), %rsi     ## Objc selector ref: set
00000000000074b9	movq	%rax, %rdi
00000000000074bc	callq	*%r13
00000000000074bf	movq	_OBJC_IVAR_$_UAPCaptioningViewController._colorSwatchBorderPath(%rip), %rax
00000000000074c6	movq	(%r15,%rax), %rdi
00000000000074ca	movq	0x2d117(%rip), %rsi     ## Objc selector ref: stroke
00000000000074d1	callq	*%r13
00000000000074d4	movq	0x2d115(%rip), %rsi     ## Objc selector ref: unlockFocus
00000000000074db	movq	%rbx, %rdi
00000000000074de	callq	*%r13
00000000000074e1	movq	0x2d110(%rip), %rsi     ## Objc selector ref: setImage:
00000000000074e8	movq	%r14, %rdi
00000000000074eb	movq	%rbx, %rdx
00000000000074ee	callq	*%r13
00000000000074f1	movq	0x2cc58(%rip), %rsi     ## Objc selector ref: release
00000000000074f8	movq	%rbx, %rdi
00000000000074fb	movq	%r13, %rax
00000000000074fe	addq	$0x8, %rsp
0000000000007502	popq	%rbx
0000000000007503	popq	%r12
0000000000007505	popq	%r13
0000000000007507	popq	%r14
0000000000007509	popq	%r15
000000000000750b	popq	%rbp
000000000000750c	jmpq	*%rax
000000000000750e	pushq	%rbp
000000000000750f	movq	%rsp, %rbp
0000000000007512	pushq	%r15
0000000000007514	pushq	%r14
0000000000007516	pushq	%r13
0000000000007518	pushq	%r12
000000000000751a	pushq	%rbx
000000000000751b	subq	$0x58, %rsp
000000000000751f	movq	%rdx, %r12
0000000000007522	movq	%rdi, %r14
0000000000007525	movq	0x2ce84(%rip), %rsi     ## Objc selector ref: _setEditingNewProfile:selectionBeforeEditing:
000000000000752c	xorl	%edx, %edx
000000000000752e	xorl	%ecx, %ecx
0000000000007530	callq	*0x21eca(%rip)          ## Objc message: +[NSColor _setEditingNewProfile:selectionBeforeEditing:]
0000000000007536	movq	_OBJC_IVAR_$_UAPCaptioningViewController._activeProfile(%rip), %rax
000000000000753d	movq	(%r14,%rax), %rdi
0000000000007541	callq	0x1e45a                 ## symbol stub for: _MACaptionAppearancePrefCopyProfileName
0000000000007546	movq	%rax, %rbx
0000000000007549	testq	%rbx, %rbx
000000000000754c	je	0x7716
0000000000007552	movq	_OBJC_IVAR_$_UAPCaptioningViewController._profileNameTextField(%rip), %r15
0000000000007559	movq	(%r14,%r15), %rdi
000000000000755d	movq	0x2d09c(%rip), %rsi     ## Objc selector ref: stringValue
0000000000007564	movq	0x21e95(%rip), %r13     ## Objc message: -[%rdi stringValue]
000000000000756b	callq	*%r13
000000000000756e	movq	0x2cb7b(%rip), %rsi     ## Objc selector ref: isEqualToString:
0000000000007575	movq	%rbx, %rdi
0000000000007578	movq	%rax, %rdx
000000000000757b	callq	*%r13
000000000000757e	testb	%al, %al
0000000000007580	je	0x758f
0000000000007582	movq	%rbx, %rdi
0000000000007585	callq	0x1e562                 ## symbol stub for: _CFRelease
000000000000758a	jmp	0x7716
000000000000758f	movq	(%r14,%r15), %rdi
0000000000007593	movq	0x2d066(%rip), %rsi     ## Objc selector ref: stringValue
000000000000759a	callq	*%r13
000000000000759d	movq	%rax, %r15
00000000000075a0	movq	0x2df69(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_NSCharacterSet
00000000000075a7	movq	0x2cc4a(%rip), %rsi     ## Objc selector ref: whitespaceAndNewlineCharacterSet
00000000000075ae	callq	*%r13
00000000000075b1	movq	0x2cc38(%rip), %rsi     ## Objc selector ref: stringByTrimmingCharactersInSet:
00000000000075b8	movq	%r15, %rdi
00000000000075bb	movq	%rax, %rdx
00000000000075be	callq	*%r13
00000000000075c1	movq	%rax, -0x60(%rbp)
00000000000075c5	movq	0x2cb5c(%rip), %rsi     ## Objc selector ref: length
00000000000075cc	movq	%rax, %rdi
00000000000075cf	callq	*%r13
00000000000075d2	testq	%rax, %rax
00000000000075d5	je	0x77c7
00000000000075db	movq	%rbx, -0x68(%rbp)
00000000000075df	movq	%r12, -0x70(%rbp)
00000000000075e3	movq	_OBJC_IVAR_$_UAPCaptioningViewController._profileIDs(%rip), %rax
00000000000075ea	movq	(%r14,%rax), %rdi
00000000000075ee	movq	0x2cd73(%rip), %rsi     ## Objc selector ref: count
00000000000075f5	callq	*0x21e05(%rip)          ## Objc message: +[NSCharacterSet count]
00000000000075fb	testq	%rax, %rax
00000000000075fe	movq	%r14, %r15
0000000000007601	je	0x76c9
0000000000007607	movq	_OBJC_IVAR_$_UAPCaptioningViewController._profileIDs(%rip), %r13
000000000000760e	movq	%r13, -0x58(%rbp)
0000000000007612	movq	0x2cd57(%rip), %r14     ## Objc selector ref: objectAtIndex:
0000000000007619	xorl	%r12d, %r12d
000000000000761c	xorl	%ebx, %ebx
000000000000761e	movq	(%r15,%r13), %rdi
0000000000007622	movq	%r14, %rsi
0000000000007625	movq	%r12, %rdx
0000000000007628	movq	0x21dd1(%rip), %rcx     ## Objc message: -[%rdi objectAtIndex:]
000000000000762f	movq	%rcx, %r13
0000000000007632	callq	*%r13
0000000000007635	movq	_OBJC_IVAR_$_UAPCaptioningViewController._activeProfile(%rip), %rcx
000000000000763c	movq	(%r15,%rcx), %rdx
0000000000007640	movq	%rax, %rdi
0000000000007643	movq	0x2caa6(%rip), %rsi     ## Objc selector ref: isEqualToString:
000000000000764a	callq	*%r13
000000000000764d	testb	%al, %al
000000000000764f	je	0x7659
0000000000007651	movq	-0x58(%rbp), %r13
0000000000007655	incl	%ebx
0000000000007657	jmp	0x76aa
0000000000007659	movq	-0x58(%rbp), %rax
000000000000765d	movq	(%r15,%rax), %rdi
0000000000007661	movq	%rax, %r13
0000000000007664	movq	%r14, %rsi
0000000000007667	movq	%r12, %rdx
000000000000766a	callq	*0x21d90(%rip)          ## Objc message: -[%rdi isEqualToString:]
0000000000007670	testq	%rax, %rax
0000000000007673	je	0x76aa
0000000000007675	movq	%rax, %rdi
0000000000007678	callq	0x1e45a                 ## symbol stub for: _MACaptionAppearancePrefCopyProfileName
000000000000767d	movq	%rax, %r12
0000000000007680	testq	%r12, %r12
0000000000007683	je	0x76aa
0000000000007685	movq	%r12, %rdi
0000000000007688	movq	0x2cf81(%rip), %rsi     ## Objc selector ref: caseInsensitiveCompare:
000000000000768f	movq	-0x60(%rbp), %rdx
0000000000007693	callq	*0x21d67(%rip)          ## Objc message: -[%rdi caseInsensitiveCompare:]
0000000000007699	testq	%rax, %rax
000000000000769c	je	0x77e1
00000000000076a2	movq	%r12, %rdi
00000000000076a5	callq	0x1e562                 ## symbol stub for: _CFRelease
00000000000076aa	incl	%ebx
00000000000076ac	movslq	%ebx, %r12
00000000000076af	movq	(%r15,%r13), %rdi
00000000000076b3	movq	0x2ccae(%rip), %rsi     ## Objc selector ref: count
00000000000076ba	callq	*0x21d40(%rip)          ## Objc message: -[%rdi count]
00000000000076c0	cmpq	%rax, %r12
00000000000076c3	jb	0x761e
00000000000076c9	movq	_OBJC_IVAR_$_UAPCaptioningViewController._activeProfile(%rip), %rax
00000000000076d0	movq	(%r15,%rax), %rdi
00000000000076d4	movq	-0x60(%rbp), %rsi
00000000000076d8	callq	0x1e4a8                 ## symbol stub for: _MACaptionAppearancePrefSetProfileName
00000000000076dd	movq	0x2cb9c(%rip), %rsi     ## Objc selector ref: _generateOrderedProfileIDCache
00000000000076e4	movq	%r15, %rdi
00000000000076e7	movq	0x21d12(%rip), %r13     ## Objc message: -[%rdi _generateOrderedProfileIDCache]
00000000000076ee	callq	*%r13
00000000000076f1	movq	_OBJC_IVAR_$_UAPCaptioningViewController._profileTableView(%rip), %rax
00000000000076f8	movq	(%r15,%rax), %rdi
00000000000076fc	movq	0x2cf1d(%rip), %rsi     ## Objc selector ref: reloadData
0000000000007703	callq	*%r13
0000000000007706	movq	-0x68(%rbp), %rdi
000000000000770a	callq	0x1e562                 ## symbol stub for: _CFRelease
000000000000770f	movq	-0x70(%rbp), %r12
0000000000007713	movq	%r15, %r14
0000000000007716	movq	0x2ccab(%rip), %rsi     ## Objc selector ref: window
000000000000771d	movq	0x21cdc(%rip), %r15     ## Objc message: -[%rdi window]
0000000000007724	movq	%r12, %rdi
0000000000007727	callq	*%r15
000000000000772a	movq	0x2cc9f(%rip), %rsi     ## Objc selector ref: orderOut:
0000000000007731	xorl	%edx, %edx
0000000000007733	movq	%rax, %rdi
0000000000007736	callq	*%r15
0000000000007739	movq	0x219a0(%rip), %rax     ## literal pool symbol address: _NSApp
0000000000007740	movq	(%rax), %rbx
0000000000007743	movq	0x2cc7e(%rip), %rsi     ## Objc selector ref: window
000000000000774a	movq	%r12, %rdi
000000000000774d	callq	*%r15
0000000000007750	movq	0x2ced1(%rip), %rsi     ## Objc selector ref: endSheet:
0000000000007757	movq	%rbx, %rdi
000000000000775a	movq	%rax, %rdx
000000000000775d	callq	*%r15
0000000000007760	movq	_OBJC_IVAR_$_UAPCaptioningViewController._optionsScrollView(%rip), %rax
0000000000007767	movq	(%r14,%rax), %rdi
000000000000776b	movq	0x2cb6e(%rip), %rsi     ## Objc selector ref: documentView
0000000000007772	callq	*%r15
0000000000007775	movq	%rax, %rbx
0000000000007778	testq	%rbx, %rbx
000000000000777b	je	0x7797
000000000000777d	movq	0x2cb64(%rip), %rdx     ## Objc selector ref: bounds
0000000000007784	leaq	-0x50(%rbp), %rdi
0000000000007788	movq	%rbx, %rsi
000000000000778b	callq	0x1e892                 ## symbol stub for: _objc_msgSend_stret
0000000000007790	movsd	-0x38(%rbp), %xmm1
0000000000007795	jmp	0x77a5
0000000000007797	xorps	%xmm0, %xmm0
000000000000779a	movaps	%xmm0, -0x40(%rbp)
000000000000779e	movaps	%xmm0, -0x50(%rbp)
00000000000077a2	xorps	%xmm1, %xmm1
00000000000077a5	movq	0x2cb44(%rip), %rsi     ## Objc selector ref: scrollPoint:
00000000000077ac	xorps	%xmm0, %xmm0
00000000000077af	movq	%rbx, %rdi
00000000000077b2	callq	*0x21c48(%rip)          ## Objc message: -[%rdi scrollPoint:]
00000000000077b8	addq	$0x58, %rsp
00000000000077bc	popq	%rbx
00000000000077bd	popq	%r12
00000000000077bf	popq	%r13
00000000000077c1	popq	%r14
00000000000077c3	popq	%r15
00000000000077c5	popq	%rbp
00000000000077c6	retq
00000000000077c7	movq	0x2ce3a(%rip), %rsi     ## Objc selector ref: _warnOfNoName
00000000000077ce	movq	%r14, %rdi
00000000000077d1	callq	*0x21c29(%rip)          ## Objc message: -[%rdi _warnOfNoName]
00000000000077d7	movq	%rbx, %rdi
00000000000077da	callq	0x1e562                 ## symbol stub for: _CFRelease
00000000000077df	jmp	0x77b8
00000000000077e1	movq	0x2ce30(%rip), %rsi     ## Objc selector ref: _warnOfDuplicateNameAssignment:
00000000000077e8	movq	%r15, %rdi
00000000000077eb	movq	-0x60(%rbp), %rdx
00000000000077ef	callq	*0x21c0b(%rip)          ## Objc message: -[%rdi _warnOfDuplicateNameAssignment:]
00000000000077f5	movq	%r12, %rdi
00000000000077f8	callq	0x1e562                 ## symbol stub for: _CFRelease
00000000000077fd	movq	-0x68(%rbp), %rbx
0000000000007801	jmp	0x77d7
0000000000007803	pushq	%rbp
0000000000007804	movq	%rsp, %rbp
0000000000007807	pushq	%r15
0000000000007809	pushq	%r14
000000000000780b	pushq	%r13
000000000000780d	pushq	%r12
000000000000780f	pushq	%rbx
0000000000007810	subq	$0x38, %rsp
0000000000007814	movq	%rdi, -0x60(%rbp)
0000000000007818	movq	0x2dd79(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_NSAlert
000000000000781f	movq	0x2cb3a(%rip), %rsi     ## Objc selector ref: allocWithZone:
0000000000007826	movq	0x21bd3(%rip), %r14     ## Objc message: +[NSAlert allocWithZone:]
000000000000782d	xorl	%edx, %edx
000000000000782f	callq	*%r14
0000000000007832	movq	0x2ca37(%rip), %rsi     ## Objc selector ref: init
0000000000007839	movq	%rax, %rdi
000000000000783c	callq	*%r14
000000000000783f	movq	0x2c8c2(%rip), %rsi     ## Objc selector ref: autorelease
0000000000007846	movq	%rax, %rdi
0000000000007849	callq	*%r14
000000000000784c	movq	%rax, %r13
000000000000784f	movq	0x2dcc2(%rip), %r12     ## Objc class ref: _OBJC_CLASS_$_NSString
0000000000007856	movq	0x2dca3(%rip), %rbx     ## Objc class ref: _OBJC_CLASS_$_NSBundle
000000000000785d	movq	0x2dca4(%rip), %rdi     ## Objc class ref: UniversalAccessPref
0000000000007864	movq	0x2c855(%rip), %rsi     ## Objc selector ref: class
000000000000786b	callq	*%r14
000000000000786e	movq	0x2c943(%rip), %rsi     ## Objc selector ref: bundleForClass:
0000000000007875	movq	%rbx, %rdi
0000000000007878	movq	%rax, %rdx
000000000000787b	callq	*%r14
000000000000787e	movq	0x2c93b(%rip), %rsi     ## Objc selector ref: localizedStringForKey:value:table:
0000000000007885	leaq	0x22d44(%rip), %rdx     ## Objc cfstring ref: @"profile.warning.noName"
000000000000788c	leaq	0x2287d(%rip), %r15     ## Objc cfstring ref: @""
0000000000007893	xorl	%r8d, %r8d
0000000000007896	movq	%rax, %rdi
0000000000007899	movq	%r15, %rcx
000000000000789c	callq	*%r14
000000000000789f	movq	0x2cd8a(%rip), %rsi     ## Objc selector ref: stringWithString:
00000000000078a6	movq	%r12, %rdi
00000000000078a9	movq	%rax, %rdx
00000000000078ac	callq	*%r14
00000000000078af	movq	0x2cd82(%rip), %rsi     ## Objc selector ref: setMessageText:
00000000000078b6	movq	%r13, %rdi
00000000000078b9	movq	%rax, %rdx
00000000000078bc	callq	*%r14
00000000000078bf	movq	0x2dc3a(%rip), %rbx     ## Objc class ref: _OBJC_CLASS_$_NSBundle
00000000000078c6	movq	0x2dc3b(%rip), %rdi     ## Objc class ref: UniversalAccessPref
00000000000078cd	movq	0x2c7ec(%rip), %rsi     ## Objc selector ref: class
00000000000078d4	callq	*%r14
00000000000078d7	movq	0x2c8da(%rip), %rsi     ## Objc selector ref: bundleForClass:
00000000000078de	movq	%rbx, %rdi
00000000000078e1	movq	%rax, %rdx
00000000000078e4	callq	*%r14
00000000000078e7	movq	0x2c8d2(%rip), %rsi     ## Objc selector ref: localizedStringForKey:value:table:
00000000000078ee	leaq	0x22cfb(%rip), %rdx     ## Objc cfstring ref: @"global.button.ok"
00000000000078f5	xorl	%r8d, %r8d
00000000000078f8	movq	%rax, %rdi
00000000000078fb	movq	%r15, %rcx
00000000000078fe	callq	*%r14
0000000000007901	movq	0x2cd38(%rip), %rsi     ## Objc selector ref: addButtonWithTitle:
0000000000007908	movq	%r13, %rdi
000000000000790b	movq	%rax, %rdx
000000000000790e	callq	*%r14
0000000000007911	movq	0x217c8(%rip), %rax     ## literal pool symbol address: _NSApp
0000000000007918	movq	(%rax), %rdi
000000000000791b	movq	0x2cd26(%rip), %rsi     ## Objc selector ref: keyWindow
0000000000007922	callq	*%r14
0000000000007925	movq	%rax, %rbx
0000000000007928	movq	0x21a19(%rip), %rax     ## literal pool symbol address: __NSConcreteStackBlock
000000000000792f	movq	%rax, -0x58(%rbp)
0000000000007933	movl	$0x42000000, -0x50(%rbp) ## imm = 0x42000000
000000000000793a	movl	$0x0, -0x4c(%rbp)
0000000000007941	leaq	0x4b(%rip), %rax
0000000000007948	movq	%rax, -0x48(%rbp)
000000000000794c	leaq	0x2233d(%rip), %rax
0000000000007953	movq	%rax, -0x40(%rbp)
0000000000007957	leaq	-0x38(%rbp), %rsi
000000000000795b	movq	-0x60(%rbp), %rdi
000000000000795f	callq	0x1e86e                 ## symbol stub for: _objc_assign_strongCast
0000000000007964	leaq	-0x30(%rbp), %rsi
0000000000007968	movq	%r13, %rdi
000000000000796b	callq	0x1e86e                 ## symbol stub for: _objc_assign_strongCast
0000000000007970	movq	0x2cce1(%rip), %rsi     ## Objc selector ref: beginSheetModalForWindow:completionHandler:
0000000000007977	leaq	-0x58(%rbp), %rcx
000000000000797b	movq	%r13, %rdi
000000000000797e	movq	%rbx, %rdx
0000000000007981	callq	*%r14
0000000000007984	addq	$0x38, %rsp
0000000000007988	popq	%rbx
0000000000007989	popq	%r12
000000000000798b	popq	%r13
000000000000798d	popq	%r14
000000000000798f	popq	%r15
0000000000007991	popq	%rbp
0000000000007992	retq
0000000000007993	pushq	%rbp
0000000000007994	movq	%rsp, %rbp
0000000000007997	movq	0x20(%rdi), %rax
000000000000799b	movq	0x28(%rdi), %rdx
000000000000799f	movq	0x2ccaa(%rip), %rsi     ## Objc selector ref: _duplicateOrNoNameWarningAlertDidEnd:
00000000000079a6	movq	%rax, %rdi
00000000000079a9	popq	%rbp
00000000000079aa	jmpq	*0x21a50(%rip)          ## Objc message: +[UniversalAccessPref _duplicateOrNoNameWarningAlertDidEnd:]
00000000000079b0	pushq	%rbp
00000000000079b1	movq	%rsp, %rbp
00000000000079b4	pushq	%r14
00000000000079b6	pushq	%rbx
00000000000079b7	movq	%rsi, %r14
00000000000079ba	movq	%rdi, %rbx
00000000000079bd	leaq	0x20(%rbx), %rdi
00000000000079c1	movq	0x20(%r14), %rsi
00000000000079c5	movl	$0x3, %edx
00000000000079ca	callq	0x1e8a4                 ## symbol stub for: __Block_object_assign
00000000000079cf	addq	$0x28, %rbx
00000000000079d3	movq	0x28(%r14), %rsi
00000000000079d7	movl	$0x3, %edx
00000000000079dc	movq	%rbx, %rdi
00000000000079df	popq	%rbx
00000000000079e0	popq	%r14
00000000000079e2	popq	%rbp
00000000000079e3	jmp	0x1e8a4                 ## symbol stub for: __Block_object_assign
00000000000079e8	nopl	(%rax,%rax)
00000000000079f0	pushq	%rbp
00000000000079f1	movq	%rsp, %rbp
00000000000079f4	pushq	%rbx
00000000000079f5	pushq	%rax
00000000000079f6	movq	%rdi, %rbx
00000000000079f9	movq	0x20(%rbx), %rdi
00000000000079fd	movl	$0x3, %esi
0000000000007a02	callq	0x1e8aa                 ## symbol stub for: __Block_object_dispose
0000000000007a07	movq	0x28(%rbx), %rdi
0000000000007a0b	movl	$0x3, %esi
0000000000007a10	addq	$0x8, %rsp
0000000000007a14	popq	%rbx
0000000000007a15	popq	%rbp
0000000000007a16	jmp	0x1e8aa                 ## symbol stub for: __Block_object_dispose
0000000000007a1b	pushq	%rbp
0000000000007a1c	movq	%rsp, %rbp
0000000000007a1f	pushq	%r15
0000000000007a21	pushq	%r14
0000000000007a23	pushq	%r13
0000000000007a25	pushq	%r12
0000000000007a27	pushq	%rbx
0000000000007a28	subq	$0x38, %rsp
0000000000007a2c	movq	%rdx, %r15
0000000000007a2f	movq	%rdi, -0x60(%rbp)
0000000000007a33	movq	0x2db5e(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_NSAlert
0000000000007a3a	movq	0x2c91f(%rip), %rsi     ## Objc selector ref: allocWithZone:
0000000000007a41	movq	0x219b8(%rip), %r14     ## Objc message: +[NSAlert allocWithZone:]
0000000000007a48	xorl	%edx, %edx
0000000000007a4a	callq	*%r14
0000000000007a4d	movq	0x2c81c(%rip), %rsi     ## Objc selector ref: init
0000000000007a54	movq	%rax, %rdi
0000000000007a57	callq	*%r14
0000000000007a5a	movq	0x2c6a7(%rip), %rsi     ## Objc selector ref: autorelease
0000000000007a61	movq	%rax, %rdi
0000000000007a64	callq	*%r14
0000000000007a67	movq	%rax, %r13
0000000000007a6a	movq	0x2da8f(%rip), %rbx     ## Objc class ref: _OBJC_CLASS_$_NSBundle
0000000000007a71	movq	0x2da90(%rip), %rdi     ## Objc class ref: UniversalAccessPref
0000000000007a78	movq	0x2c641(%rip), %rsi     ## Objc selector ref: class
0000000000007a7f	callq	*%r14
0000000000007a82	movq	0x2c72f(%rip), %rsi     ## Objc selector ref: bundleForClass:
0000000000007a89	movq	%rbx, %rdi
0000000000007a8c	movq	%rax, %rdx
0000000000007a8f	callq	*%r14
0000000000007a92	movq	0x2c727(%rip), %rsi     ## Objc selector ref: localizedStringForKey:value:table:
0000000000007a99	leaq	0x22b70(%rip), %rdx     ## Objc cfstring ref: @"profile.warning.nameDuplication.formatter"
0000000000007aa0	leaq	0x22669(%rip), %r12     ## Objc cfstring ref: @""
0000000000007aa7	xorl	%r8d, %r8d
0000000000007aaa	movq	%rax, %rdi
0000000000007aad	movq	%r12, %rcx
0000000000007ab0	callq	*%r14
0000000000007ab3	movq	%rax, %rcx
0000000000007ab6	movq	0x2da5b(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_NSString
0000000000007abd	movq	0x2c73c(%rip), %rsi     ## Objc selector ref: stringWithFormat:
0000000000007ac4	xorl	%eax, %eax
0000000000007ac6	movq	%rcx, %rdx
0000000000007ac9	movq	%r15, %rcx
0000000000007acc	callq	*%r14
0000000000007acf	movq	0x2cb62(%rip), %rsi     ## Objc selector ref: setMessageText:
0000000000007ad6	movq	%r13, %rdi
0000000000007ad9	movq	%rax, %rdx
0000000000007adc	callq	*%r14
0000000000007adf	movq	0x2da1a(%rip), %rbx     ## Objc class ref: _OBJC_CLASS_$_NSBundle
0000000000007ae6	movq	0x2da1b(%rip), %rdi     ## Objc class ref: UniversalAccessPref
0000000000007aed	movq	0x2c5cc(%rip), %rsi     ## Objc selector ref: class
0000000000007af4	callq	*%r14
0000000000007af7	movq	0x2c6ba(%rip), %rsi     ## Objc selector ref: bundleForClass:
0000000000007afe	movq	%rbx, %rdi
0000000000007b01	movq	%rax, %rdx
0000000000007b04	callq	*%r14
0000000000007b07	movq	0x2c6b2(%rip), %rsi     ## Objc selector ref: localizedStringForKey:value:table:
0000000000007b0e	leaq	0x22adb(%rip), %rdx     ## Objc cfstring ref: @"global.button.ok"
0000000000007b15	xorl	%r8d, %r8d
0000000000007b18	movq	%rax, %rdi
0000000000007b1b	movq	%r12, %rcx
0000000000007b1e	callq	*%r14
0000000000007b21	movq	0x2cb18(%rip), %rsi     ## Objc selector ref: addButtonWithTitle:
0000000000007b28	movq	%r13, %rdi
0000000000007b2b	movq	%rax, %rdx
0000000000007b2e	callq	*%r14
0000000000007b31	movq	0x215a8(%rip), %rax     ## literal pool symbol address: _NSApp
0000000000007b38	movq	(%rax), %rdi
0000000000007b3b	movq	0x2cb06(%rip), %rsi     ## Objc selector ref: keyWindow
0000000000007b42	callq	*%r14
0000000000007b45	movq	%rax, %rbx
0000000000007b48	movq	0x217f9(%rip), %rax     ## literal pool symbol address: __NSConcreteStackBlock
0000000000007b4f	movq	%rax, -0x58(%rbp)
0000000000007b53	movl	$0x42000000, -0x50(%rbp) ## imm = 0x42000000
0000000000007b5a	movl	$0x0, -0x4c(%rbp)
0000000000007b61	leaq	0x4b(%rip), %rax
0000000000007b68	movq	%rax, -0x48(%rbp)
0000000000007b6c	leaq	0x2214d(%rip), %rax
0000000000007b73	movq	%rax, -0x40(%rbp)
0000000000007b77	leaq	-0x38(%rbp), %rsi
0000000000007b7b	movq	-0x60(%rbp), %rdi
0000000000007b7f	callq	0x1e86e                 ## symbol stub for: _objc_assign_strongCast
0000000000007b84	leaq	-0x30(%rbp), %rsi
0000000000007b88	movq	%r13, %rdi
0000000000007b8b	callq	0x1e86e                 ## symbol stub for: _objc_assign_strongCast
0000000000007b90	movq	0x2cac1(%rip), %rsi     ## Objc selector ref: beginSheetModalForWindow:completionHandler:
0000000000007b97	leaq	-0x58(%rbp), %rcx
0000000000007b9b	movq	%r13, %rdi
0000000000007b9e	movq	%rbx, %rdx
0000000000007ba1	callq	*%r14
0000000000007ba4	addq	$0x38, %rsp
0000000000007ba8	popq	%rbx
0000000000007ba9	popq	%r12
0000000000007bab	popq	%r13
0000000000007bad	popq	%r14
0000000000007baf	popq	%r15
0000000000007bb1	popq	%rbp
0000000000007bb2	retq
0000000000007bb3	pushq	%rbp
0000000000007bb4	movq	%rsp, %rbp
0000000000007bb7	movq	0x20(%rdi), %rax
0000000000007bbb	movq	0x28(%rdi), %rdx
0000000000007bbf	movq	0x2ca8a(%rip), %rsi     ## Objc selector ref: _duplicateOrNoNameWarningAlertDidEnd:
0000000000007bc6	movq	%rax, %rdi
0000000000007bc9	popq	%rbp
0000000000007bca	jmpq	*0x21830(%rip)          ## Objc message: +[UniversalAccessPref _duplicateOrNoNameWarningAlertDidEnd:]
0000000000007bd0	pushq	%rbp
0000000000007bd1	movq	%rsp, %rbp
0000000000007bd4	pushq	%r14
0000000000007bd6	pushq	%rbx
0000000000007bd7	movq	%rsi, %r14
0000000000007bda	movq	%rdi, %rbx
0000000000007bdd	leaq	0x20(%rbx), %rdi
0000000000007be1	movq	0x20(%r14), %rsi
0000000000007be5	movl	$0x3, %edx
0000000000007bea	callq	0x1e8a4                 ## symbol stub for: __Block_object_assign
0000000000007bef	addq	$0x28, %rbx
0000000000007bf3	movq	0x28(%r14), %rsi
0000000000007bf7	movl	$0x3, %edx
0000000000007bfc	movq	%rbx, %rdi
0000000000007bff	popq	%rbx
0000000000007c00	popq	%r14
0000000000007c02	popq	%rbp
0000000000007c03	jmp	0x1e8a4                 ## symbol stub for: __Block_object_assign
0000000000007c08	nopl	(%rax,%rax)
0000000000007c10	pushq	%rbp
0000000000007c11	movq	%rsp, %rbp
0000000000007c14	pushq	%rbx
0000000000007c15	pushq	%rax
0000000000007c16	movq	%rdi, %rbx
0000000000007c19	movq	0x20(%rbx), %rdi
0000000000007c1d	movl	$0x3, %esi
0000000000007c22	callq	0x1e8aa                 ## symbol stub for: __Block_object_dispose
0000000000007c27	movq	0x28(%rbx), %rdi
0000000000007c2b	movl	$0x3, %esi
0000000000007c30	addq	$0x8, %rsp
0000000000007c34	popq	%rbx
0000000000007c35	popq	%rbp
0000000000007c36	jmp	0x1e8aa                 ## symbol stub for: __Block_object_dispose
0000000000007c3b	pushq	%rbp
0000000000007c3c	movq	%rsp, %rbp
0000000000007c3f	pushq	%r15
0000000000007c41	pushq	%r14
0000000000007c43	pushq	%rbx
0000000000007c44	pushq	%rax
0000000000007c45	movq	%rdi, %r14
0000000000007c48	movq	0x2c779(%rip), %rsi     ## Objc selector ref: window
0000000000007c4f	movq	0x217aa(%rip), %r15     ## Objc message: -[%rdi window]
0000000000007c56	movq	%rdx, %rdi
0000000000007c59	callq	*%r15
0000000000007c5c	movq	0x2c76d(%rip), %rsi     ## Objc selector ref: orderOut:
0000000000007c63	xorl	%edx, %edx
0000000000007c65	movq	%rax, %rdi
0000000000007c68	callq	*%r15
0000000000007c6b	movq	0x2146e(%rip), %rax     ## literal pool symbol address: _NSApp
0000000000007c72	movq	(%rax), %rdi
0000000000007c75	movq	0x2c9cc(%rip), %rsi     ## Objc selector ref: keyWindow
0000000000007c7c	callq	*%r15
0000000000007c7f	movq	0x2c9da(%rip), %rsi     ## Objc selector ref: firstResponder
0000000000007c86	movq	%rax, %rdi
0000000000007c89	callq	*%r15
0000000000007c8c	movq	%rax, %rbx
0000000000007c8f	movq	0x2d90a(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_NSTextView
0000000000007c96	movq	0x2c423(%rip), %rsi     ## Objc selector ref: class
0000000000007c9d	callq	*%r15
0000000000007ca0	movq	0x2c451(%rip), %rsi     ## Objc selector ref: isKindOfClass:
0000000000007ca7	movq	%rbx, %rdi
0000000000007caa	movq	%rax, %rdx
0000000000007cad	callq	*%r15
0000000000007cb0	testb	%al, %al
0000000000007cb2	je	0x7cbf
0000000000007cb4	addq	$0x8, %rsp
0000000000007cb8	popq	%rbx
0000000000007cb9	popq	%r14
0000000000007cbb	popq	%r15
0000000000007cbd	popq	%rbp
0000000000007cbe	retq
0000000000007cbf	movq	_OBJC_IVAR_$_UAPCaptioningViewController._profileNameTextField(%rip), %rax
0000000000007cc6	movq	(%r14,%rax), %rdi
0000000000007cca	movq	0x2c997(%rip), %rsi     ## Objc selector ref: becomeFirstResponder
0000000000007cd1	addq	$0x8, %rsp
0000000000007cd5	popq	%rbx
0000000000007cd6	popq	%r14
0000000000007cd8	popq	%r15
0000000000007cda	popq	%rbp
0000000000007cdb	jmpq	*0x2171f(%rip)          ## Objc message: +[NSTextView becomeFirstResponder]
0000000000007ce1	pushq	%rbp
0000000000007ce2	movq	%rsp, %rbp
0000000000007ce5	pushq	%r15
0000000000007ce7	pushq	%r14
0000000000007ce9	pushq	%r12
0000000000007ceb	pushq	%rbx
0000000000007cec	subq	$0x20, %rsp
0000000000007cf0	movq	%rdx, %rbx
0000000000007cf3	movq	%rdi, %r14
0000000000007cf6	callq	0x1e48a                 ## symbol stub for: _MACaptionAppearancePrefRestoreState
0000000000007cfb	movq	0x2c6c6(%rip), %rsi     ## Objc selector ref: window
0000000000007d02	movq	0x216f7(%rip), %r12     ## Objc message: -[%rdi window]
0000000000007d09	movq	%rbx, %rdi
0000000000007d0c	callq	*%r12
0000000000007d0f	movq	0x2c6ba(%rip), %rsi     ## Objc selector ref: orderOut:
0000000000007d16	xorl	%edx, %edx
0000000000007d18	movq	%rax, %rdi
0000000000007d1b	callq	*%r12
0000000000007d1e	movq	0x213bb(%rip), %rax     ## literal pool symbol address: _NSApp
0000000000007d25	movq	(%rax), %r15
0000000000007d28	movq	0x2c699(%rip), %rsi     ## Objc selector ref: window
0000000000007d2f	movq	%rbx, %rdi
0000000000007d32	callq	*%r12
0000000000007d35	movq	0x2c8ec(%rip), %rsi     ## Objc selector ref: endSheet:
0000000000007d3c	movq	%r15, %rdi
0000000000007d3f	movq	%rax, %rdx
0000000000007d42	callq	*%r12
0000000000007d45	movq	_OBJC_IVAR_$_UAPCaptioningViewController._optionsScrollView(%rip), %rax
0000000000007d4c	movq	(%r14,%rax), %rdi
0000000000007d50	movq	0x2c589(%rip), %rsi     ## Objc selector ref: documentView
0000000000007d57	callq	*%r12
0000000000007d5a	movq	%rax, %rbx
0000000000007d5d	testq	%rbx, %rbx
0000000000007d60	je	0x7d7c
0000000000007d62	movq	0x2c57f(%rip), %rdx     ## Objc selector ref: bounds
0000000000007d69	leaq	-0x40(%rbp), %rdi
0000000000007d6d	movq	%rbx, %rsi
0000000000007d70	callq	0x1e892                 ## symbol stub for: _objc_msgSend_stret
0000000000007d75	movsd	-0x28(%rbp), %xmm1
0000000000007d7a	jmp	0x7d8a
0000000000007d7c	xorps	%xmm0, %xmm0
0000000000007d7f	movaps	%xmm0, -0x30(%rbp)
0000000000007d83	movaps	%xmm0, -0x40(%rbp)
0000000000007d87	xorps	%xmm1, %xmm1
0000000000007d8a	movq	0x2c55f(%rip), %rsi     ## Objc selector ref: scrollPoint:
0000000000007d91	xorps	%xmm0, %xmm0
0000000000007d94	movq	%rbx, %rdi
0000000000007d97	callq	*0x21663(%rip)          ## Objc message: -[%rdi scrollPoint:]
0000000000007d9d	movq	_OBJC_IVAR_$_UAPCaptioningViewController._editingNewProfile(%rip), %rax
0000000000007da4	movq	(%r14,%rax), %rdx
0000000000007da8	testq	%rdx, %rdx
0000000000007dab	je	0x7dd6
0000000000007dad	movq	_OBJC_IVAR_$_UAPCaptioningViewController._selctionBeforeEditingProfile(%rip), %rax
0000000000007db4	movq	(%r14,%rax), %rcx
0000000000007db8	movq	0x2c8b1(%rip), %rsi     ## Objc selector ref: _removeProfile:preferSelection:
0000000000007dbf	movq	%r14, %rdi
0000000000007dc2	callq	*%r12
0000000000007dc5	movq	0x2c5e4(%rip), %rsi     ## Objc selector ref: _setEditingNewProfile:selectionBeforeEditing:
0000000000007dcc	xorl	%edx, %edx
0000000000007dce	xorl	%ecx, %ecx
0000000000007dd0	movq	%r14, %rdi
0000000000007dd3	callq	*%r12
0000000000007dd6	addq	$0x20, %rsp
0000000000007dda	popq	%rbx
0000000000007ddb	popq	%r12
0000000000007ddd	popq	%r14
0000000000007ddf	popq	%r15
0000000000007de1	popq	%rbp
0000000000007de2	retq
0000000000007de3	pushq	%rbp
0000000000007de4	movq	%rsp, %rbp
0000000000007de7	pushq	%r15
0000000000007de9	pushq	%r14
0000000000007deb	pushq	%r13
0000000000007ded	pushq	%r12
0000000000007def	pushq	%rbx
0000000000007df0	subq	$0x58, %rsp
0000000000007df4	movq	%rdi, %r13
0000000000007df7	movq	_OBJC_IVAR_$_UAPCaptioningViewController._activeProfile(%rip), %rbx
0000000000007dfe	movq	(%r13,%rbx), %rdi
0000000000007e03	callq	0x1e478                 ## symbol stub for: _MACaptionAppearancePrefIsProfileEditable
0000000000007e08	testb	%al, %al
0000000000007e0a	je	0x805a
0000000000007e10	movq	(%r13,%rbx), %rdi
0000000000007e15	callq	0x1e45a                 ## symbol stub for: _MACaptionAppearancePrefCopyProfileName
0000000000007e1a	movq	%rax, %r14
0000000000007e1d	testq	%r14, %r14
0000000000007e20	je	0x805a
0000000000007e26	movq	0x2d76b(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_NSAlert
0000000000007e2d	movq	0x2c52c(%rip), %rsi     ## Objc selector ref: allocWithZone:
0000000000007e34	movq	0x215c5(%rip), %r12     ## Objc message: +[NSAlert allocWithZone:]
0000000000007e3b	xorl	%edx, %edx
0000000000007e3d	callq	*%r12
0000000000007e40	movq	0x2c429(%rip), %rsi     ## Objc selector ref: init
0000000000007e47	movq	%rax, %rdi
0000000000007e4a	callq	*%r12
0000000000007e4d	movq	0x2c2b4(%rip), %rsi     ## Objc selector ref: autorelease
0000000000007e54	movq	%rax, %rdi
0000000000007e57	callq	*%r12
0000000000007e5a	movq	%rax, %r15
0000000000007e5d	movq	0x2d69c(%rip), %rbx     ## Objc class ref: _OBJC_CLASS_$_NSBundle
0000000000007e64	movq	0x2d69d(%rip), %rdi     ## Objc class ref: UniversalAccessPref
0000000000007e6b	movq	0x2c24e(%rip), %rsi     ## Objc selector ref: class
0000000000007e72	callq	*%r12
0000000000007e75	movq	0x2c33c(%rip), %rsi     ## Objc selector ref: bundleForClass:
0000000000007e7c	movq	%rbx, %rdi
0000000000007e7f	movq	%rax, %rdx
0000000000007e82	callq	*%r12
0000000000007e85	movq	0x2c334(%rip), %rsi     ## Objc selector ref: localizedStringForKey:value:table:
0000000000007e8c	leaq	0x2279d(%rip), %rdx     ## Objc cfstring ref: @"profile.warning.deleteProfile.formatter"
0000000000007e93	leaq	0x22276(%rip), %rcx     ## Objc cfstring ref: @""
0000000000007e9a	xorl	%r8d, %r8d
0000000000007e9d	movq	%rax, %rdi
0000000000007ea0	callq	*%r12
0000000000007ea3	movq	%rax, %rbx
0000000000007ea6	movq	0x2d66b(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_NSString
0000000000007ead	movq	0x2c4ac(%rip), %rsi     ## Objc selector ref: allocWithZone:
0000000000007eb4	xorl	%edx, %edx
0000000000007eb6	callq	*%r12
0000000000007eb9	movq	%rax, %rcx
0000000000007ebc	movq	0x2c7b5(%rip), %rsi     ## Objc selector ref: initWithFormat:
0000000000007ec3	xorl	%eax, %eax
0000000000007ec5	movq	%rcx, %rdi
0000000000007ec8	movq	%rbx, %rdx
0000000000007ecb	movq	%r14, %rcx
0000000000007ece	movq	%r14, -0x80(%rbp)
0000000000007ed2	callq	*%r12
0000000000007ed5	movq	%rax, %rbx
0000000000007ed8	movq	0x2c759(%rip), %rsi     ## Objc selector ref: setMessageText:
0000000000007edf	movq	%r15, %rdi
0000000000007ee2	movq	%rbx, %rdx
0000000000007ee5	callq	*%r12
0000000000007ee8	movq	0x2c261(%rip), %rsi     ## Objc selector ref: release
0000000000007eef	movq	%rbx, %rdi
0000000000007ef2	callq	*%r12
0000000000007ef5	movq	0x2d604(%rip), %rbx     ## Objc class ref: _OBJC_CLASS_$_NSBundle
0000000000007efc	movq	0x2d605(%rip), %rdi     ## Objc class ref: UniversalAccessPref
0000000000007f03	movq	0x2c1b6(%rip), %rsi     ## Objc selector ref: class
0000000000007f0a	callq	*%r12
0000000000007f0d	movq	0x2c2a4(%rip), %rsi     ## Objc selector ref: bundleForClass:
0000000000007f14	movq	%rbx, %rdi
0000000000007f17	movq	%rax, %rdx
0000000000007f1a	callq	*%r12
0000000000007f1d	movq	0x2c29c(%rip), %rsi     ## Objc selector ref: localizedStringForKey:value:table:
0000000000007f24	leaq	0x22725(%rip), %rdx     ## Objc cfstring ref: @"global.button.delete"
0000000000007f2b	xorl	%r8d, %r8d
0000000000007f2e	movq	%rax, %rdi
0000000000007f31	leaq	0x221d8(%rip), %r14     ## Objc cfstring ref: @""
0000000000007f38	movq	%r14, %rcx
0000000000007f3b	callq	*%r12
0000000000007f3e	movq	0x2c6fb(%rip), %rsi     ## Objc selector ref: addButtonWithTitle:
0000000000007f45	movq	%r15, %rdi
0000000000007f48	movq	%rax, %rdx
0000000000007f4b	callq	*%r12
0000000000007f4e	movq	0x2d5ab(%rip), %rbx     ## Objc class ref: _OBJC_CLASS_$_NSBundle
0000000000007f55	movq	0x2d5ac(%rip), %rdi     ## Objc class ref: UniversalAccessPref
0000000000007f5c	movq	0x2c15d(%rip), %rsi     ## Objc selector ref: class
0000000000007f63	callq	*%r12
0000000000007f66	movq	0x2c24b(%rip), %rsi     ## Objc selector ref: bundleForClass:
0000000000007f6d	movq	%rbx, %rdi
0000000000007f70	movq	%rax, %rdx
0000000000007f73	callq	*%r12
0000000000007f76	movq	0x2c243(%rip), %rsi     ## Objc selector ref: localizedStringForKey:value:table:
0000000000007f7d	leaq	0x226ec(%rip), %rdx     ## Objc cfstring ref: @"global.button.cancel"
0000000000007f84	xorl	%r8d, %r8d
0000000000007f87	movq	%rax, %rdi
0000000000007f8a	movq	%r14, %rcx
0000000000007f8d	movq	%r15, %rbx
0000000000007f90	callq	*%r12
0000000000007f93	movq	0x2c6a6(%rip), %rsi     ## Objc selector ref: addButtonWithTitle:
0000000000007f9a	movq	%rbx, %rdi
0000000000007f9d	movq	%rax, %rdx
0000000000007fa0	callq	*%r12
0000000000007fa3	movq	$0x0, -0x48(%rbp)
0000000000007fab	leaq	-0x48(%rbp), %r15
0000000000007faf	movq	%r15, -0x40(%rbp)
0000000000007fb3	movl	$0x0, -0x38(%rbp)
0000000000007fba	movl	$0x20, -0x34(%rbp)
0000000000007fc1	movq	_OBJC_IVAR_$_UAPCaptioningViewController._profileTableView(%rip), %r14
0000000000007fc8	movq	(%r13,%r14), %rdi
0000000000007fcd	movq	0x2c3e4(%rip), %rsi     ## Objc selector ref: selectedRow
0000000000007fd4	callq	*%r12
0000000000007fd7	movq	%rax, -0x30(%rbp)
0000000000007fdb	movq	(%r13,%r14), %rdi
0000000000007fe0	movq	0x2c3e1(%rip), %rsi     ## Objc selector ref: window
0000000000007fe7	callq	*%r12
0000000000007fea	movq	%rax, %r12
0000000000007fed	movq	0x21354(%rip), %rax     ## literal pool symbol address: __NSConcreteStackBlock
0000000000007ff4	movq	%rax, -0x78(%rbp)
0000000000007ff8	movl	$0x42000000, -0x70(%rbp) ## imm = 0x42000000
0000000000007fff	movl	$0x0, -0x6c(%rbp)
0000000000008006	leaq	0x78(%rip), %rax
000000000000800d	movq	%rax, -0x68(%rbp)
0000000000008011	leaq	0x21cd8(%rip), %rax
0000000000008018	movq	%rax, -0x60(%rbp)
000000000000801c	movq	%r15, -0x50(%rbp)
0000000000008020	leaq	-0x58(%rbp), %rsi
0000000000008024	movq	%r13, %rdi
0000000000008027	callq	0x1e86e                 ## symbol stub for: _objc_assign_strongCast
000000000000802c	movq	0x2c625(%rip), %rsi     ## Objc selector ref: beginSheetModalForWindow:completionHandler:
0000000000008033	leaq	-0x78(%rbp), %rcx
0000000000008037	movq	%rbx, %rdi
000000000000803a	movq	%r12, %rdx
000000000000803d	callq	*0x213bd(%rip)          ## Objc message: +[UniversalAccessPref beginSheetModalForWindow:completionHandler:]
0000000000008043	movq	-0x80(%rbp), %rdi
0000000000008047	callq	0x1e562                 ## symbol stub for: _CFRelease
000000000000804c	leaq	-0x48(%rbp), %rdi
0000000000008050	movl	$0x8, %esi
0000000000008055	callq	0x1e8aa                 ## symbol stub for: __Block_object_dispose
000000000000805a	addq	$0x58, %rsp
000000000000805e	popq	%rbx
000000000000805f	popq	%r12
0000000000008061	popq	%r13
0000000000008063	popq	%r14
0000000000008065	popq	%r15
0000000000008067	popq	%rbp
0000000000008068	retq
0000000000008069	movq	%rax, %rbx
000000000000806c	leaq	-0x48(%rbp), %rax
0000000000008070	movl	$0x8, %esi
0000000000008075	movq	%rax, %rdi
0000000000008078	callq	0x1e8aa                 ## symbol stub for: __Block_object_dispose
000000000000807d	movq	%rbx, %rdi
0000000000008080	callq	0x1e8b0                 ## symbol stub for: __Unwind_Resume
0000000000008085	pushq	%rbp
0000000000008086	movq	%rsp, %rbp
0000000000008089	pushq	%r15
000000000000808b	pushq	%r14
000000000000808d	pushq	%r13
000000000000808f	pushq	%r12
0000000000008091	pushq	%rbx
0000000000008092	pushq	%rax
0000000000008093	movq	%rsi, %r15
0000000000008096	movq	%rdi, %r13
0000000000008099	movq	0x20(%r13), %rax
000000000000809d	movq	0x28(%r13), %rcx
00000000000080a1	movq	0x8(%rcx), %rcx
00000000000080a5	movq	0x18(%rcx), %rbx
00000000000080a9	movq	_OBJC_IVAR_$_UAPCaptioningViewController._profileTableView(%rip), %rcx
00000000000080b0	movq	(%rax,%rcx), %rdi
00000000000080b4	movq	0x2c2fd(%rip), %rsi     ## Objc selector ref: selectedRow
00000000000080bb	callq	*0x2133f(%rip)          ## Objc message: -[%rdi selectedRow]
00000000000080c1	cmpq	%rax, %rbx
00000000000080c4	jne	0x8139
00000000000080c6	movq	0x20(%r13), %rax
00000000000080ca	movq	_OBJC_IVAR_$_UAPCaptioningViewController._activeProfile(%rip), %r12
00000000000080d1	movq	(%rax,%r12), %rdi
00000000000080d5	callq	0x1e45a                 ## symbol stub for: _MACaptionAppearancePrefCopyProfileName
00000000000080da	movq	%rax, %r14
00000000000080dd	testq	%r14, %r14
00000000000080e0	je	0x8139
00000000000080e2	cmpq	$0x3e8, %r15            ## imm = 0x3E8
00000000000080e9	jne	0x8123
00000000000080eb	movq	0x20(%r13), %rax
00000000000080ef	movq	_OBJC_IVAR_$_UAPCaptioningViewController._profileIDs(%rip), %rcx
00000000000080f6	movq	(%rax,%rcx), %rdi
00000000000080fa	movq	0x2c267(%rip), %rsi     ## Objc selector ref: count
0000000000008101	callq	*0x212f9(%rip)          ## Objc message: -[%rdi count]
0000000000008107	testq	%rax, %rax
000000000000810a	je	0x8123
000000000000810c	movq	0x20(%r13), %rdi
0000000000008110	movq	(%rdi,%r12), %rdx
0000000000008114	movq	0x2c555(%rip), %rsi     ## Objc selector ref: _removeProfile:preferSelection:
000000000000811b	xorl	%ecx, %ecx
000000000000811d	callq	*0x212dd(%rip)          ## Objc message: -[%rdi _removeProfile:preferSelection:]
0000000000008123	movq	%r14, %rdi
0000000000008126	addq	$0x8, %rsp
000000000000812a	popq	%rbx
000000000000812b	popq	%r12
000000000000812d	popq	%r13
000000000000812f	popq	%r14
0000000000008131	popq	%r15
0000000000008133	popq	%rbp
0000000000008134	jmp	0x1e562                 ## symbol stub for: _CFRelease
0000000000008139	addq	$0x8, %rsp
000000000000813d	popq	%rbx
000000000000813e	popq	%r12
0000000000008140	popq	%r13
0000000000008142	popq	%r14
0000000000008144	popq	%r15
0000000000008146	popq	%rbp
0000000000008147	retq
0000000000008148	nopl	(%rax,%rax)
0000000000008150	pushq	%rbp
0000000000008151	movq	%rsp, %rbp
0000000000008154	pushq	%r14
0000000000008156	pushq	%rbx
0000000000008157	movq	%rsi, %r14
000000000000815a	movq	%rdi, %rbx
000000000000815d	leaq	0x28(%rbx), %rdi
0000000000008161	movq	0x28(%r14), %rsi
0000000000008165	movl	$0x8, %edx
000000000000816a	callq	0x1e8a4                 ## symbol stub for: __Block_object_assign
000000000000816f	addq	$0x20, %rbx
0000000000008173	movq	0x20(%r14), %rsi
0000000000008177	movl	$0x3, %edx
000000000000817c	movq	%rbx, %rdi
000000000000817f	popq	%rbx
0000000000008180	popq	%r14
0000000000008182	popq	%rbp
0000000000008183	jmp	0x1e8a4                 ## symbol stub for: __Block_object_assign
0000000000008188	nopl	(%rax,%rax)
0000000000008190	pushq	%rbp
0000000000008191	movq	%rsp, %rbp
0000000000008194	pushq	%rbx
0000000000008195	pushq	%rax
0000000000008196	movq	%rdi, %rbx
0000000000008199	movq	0x28(%rbx), %rdi
000000000000819d	movl	$0x8, %esi
00000000000081a2	callq	0x1e8aa                 ## symbol stub for: __Block_object_dispose
00000000000081a7	movq	0x20(%rbx), %rdi
00000000000081ab	movl	$0x3, %esi
00000000000081b0	addq	$0x8, %rsp
00000000000081b4	popq	%rbx
00000000000081b5	popq	%rbp
00000000000081b6	jmp	0x1e8aa                 ## symbol stub for: __Block_object_dispose
00000000000081bb	pushq	%rbp
00000000000081bc	movq	%rsp, %rbp
00000000000081bf	pushq	%r15
00000000000081c1	pushq	%r14
00000000000081c3	pushq	%r13
00000000000081c5	pushq	%r12
00000000000081c7	pushq	%rbx
00000000000081c8	pushq	%rax
00000000000081c9	movq	%rcx, %r15
00000000000081cc	movq	%rdx, %r14
00000000000081cf	movq	%rdi, %rbx
00000000000081d2	movq	_OBJC_IVAR_$_UAPCaptioningViewController._profileIDs(%rip), %r12
00000000000081d9	movq	(%rbx,%r12), %rdi
00000000000081dd	movq	0x2c184(%rip), %rsi     ## Objc selector ref: count
00000000000081e4	callq	*0x21216(%rip)          ## Objc message: -[%rdi count]
00000000000081ea	testq	%rax, %rax
00000000000081ed	je	0x8333
00000000000081f3	testq	%r14, %r14
00000000000081f6	je	0x8333
00000000000081fc	movq	(%rbx,%r12), %rdi
0000000000008200	movq	0x2bf19(%rip), %rsi     ## Objc selector ref: containsObject:
0000000000008207	movq	%r14, %rdx
000000000000820a	callq	*0x211f0(%rip)          ## Objc message: -[%rdi containsObject:]
0000000000008210	testb	%al, %al
0000000000008212	je	0x8333
0000000000008218	movq	0x2c049(%rip), %rsi     ## Objc selector ref: retain
000000000000821f	movq	0x211da(%rip), %r13     ## Objc message: -[%rdi retain]
0000000000008226	movq	%r14, %rdi
0000000000008229	callq	*%r13
000000000000822c	movq	_OBJC_IVAR_$_UAPCaptioningViewController._activeProfile(%rip), %rax
0000000000008233	movq	(%rbx,%rax), %rdi
0000000000008237	movq	0x2bf12(%rip), %rsi     ## Objc selector ref: release
000000000000823e	callq	*%r13
0000000000008241	testq	%r15, %r15
0000000000008244	je	0x8279
0000000000008246	movq	(%rbx,%r12), %rdi
000000000000824a	movq	0x2becf(%rip), %rsi     ## Objc selector ref: containsObject:
0000000000008251	movq	%r14, %rdx
0000000000008254	callq	*0x211a6(%rip)          ## Objc message: -[%rdi containsObject:]
000000000000825a	testb	%al, %al
000000000000825c	je	0x8279
000000000000825e	movq	0x2c26b(%rip), %rsi     ## Objc selector ref: isEqual:
0000000000008265	movq	%r15, %rdi
0000000000008268	movq	%r14, %rdx
000000000000826b	callq	*0x2118f(%rip)          ## Objc message: -[%rdi isEqual:]
0000000000008271	testb	%al, %al
0000000000008273	je	0x8351
0000000000008279	movq	(%rbx,%r12), %rdi
000000000000827d	movq	0x2c0ec(%rip), %rsi     ## Objc selector ref: objectAtIndex:
0000000000008284	xorl	%edx, %edx
0000000000008286	callq	*%r13
0000000000008289	movq	0x2bfd8(%rip), %rsi     ## Objc selector ref: retain
0000000000008290	movq	%rax, %rdi
0000000000008293	callq	*%r13
0000000000008296	movq	_OBJC_IVAR_$_UAPCaptioningViewController._activeProfile(%rip), %rdx
000000000000829d	movq	%rax, %rdi
00000000000082a0	movq	%rbx, %rsi
00000000000082a3	callq	0x1e868                 ## symbol stub for: _objc_assign_ivar
00000000000082a8	movq	%r12, %r15
00000000000082ab	movq	%r13, %r12
00000000000082ae	movq	_OBJC_IVAR_$_UAPCaptioningViewController._activeProfile(%rip), %r13
00000000000082b5	movq	(%rbx,%r13), %rdi
00000000000082b9	callq	0x1e496                 ## symbol stub for: _MACaptionAppearancePrefSetActiveProfileID
00000000000082be	movq	0x2c0e3(%rip), %rsi     ## Objc selector ref: _loadActiveProfile
00000000000082c5	movq	%rbx, %rdi
00000000000082c8	callq	*%r12
00000000000082cb	movq	(%rbx,%r15), %rdi
00000000000082cf	movq	0x2be5a(%rip), %rsi     ## Objc selector ref: removeObject:
00000000000082d6	movq	%r14, %rdx
00000000000082d9	callq	*%r12
00000000000082dc	movq	%r14, %rdi
00000000000082df	callq	0x1e47e                 ## symbol stub for: _MACaptionAppearancePrefRemoveProfile
00000000000082e4	movq	_OBJC_IVAR_$_UAPCaptioningViewController._profileTableView(%rip), %r13
00000000000082eb	movq	(%rbx,%r13), %rdi
00000000000082ef	movq	0x2c32a(%rip), %rsi     ## Objc selector ref: reloadData
00000000000082f6	callq	*%r12
00000000000082f9	movq	(%rbx,%r13), %r13
00000000000082fd	movq	(%rbx,%r15), %rdi
0000000000008301	movq	_OBJC_IVAR_$_UAPCaptioningViewController._activeProfile(%rip), %rax
0000000000008308	movq	(%rbx,%rax), %rdx
000000000000830c	movq	0x2c135(%rip), %rsi     ## Objc selector ref: indexOfObject:
0000000000008313	callq	*%r12
0000000000008316	movq	0x2c363(%rip), %rsi     ## Objc selector ref: scrollRowToVisible:
000000000000831d	movq	%r13, %rdi
0000000000008320	movq	%rax, %rdx
0000000000008323	callq	*%r12
0000000000008326	movq	0x2be23(%rip), %rsi     ## Objc selector ref: release
000000000000832d	movq	%r14, %rdi
0000000000008330	callq	*%r12
0000000000008333	movq	0x2c06e(%rip), %rsi     ## Objc selector ref: _loadActiveProfile
000000000000833a	movq	%rbx, %rdi
000000000000833d	addq	$0x8, %rsp
0000000000008341	popq	%rbx
0000000000008342	popq	%r12
0000000000008344	popq	%r13
0000000000008346	popq	%r14
0000000000008348	popq	%r15
000000000000834a	popq	%rbp
000000000000834b	jmpq	*0x210af(%rip)          ## Objc message: -[%rdi _loadActiveProfile]
0000000000008351	movq	0x2bf10(%rip), %rsi     ## Objc selector ref: retain
0000000000008358	movq	%r15, %rdi
000000000000835b	callq	*0x2109f(%rip)          ## Objc message: -[%rdi retain]
0000000000008361	jmp	0x8296
0000000000008366	pushq	%rbp
0000000000008367	movq	%rsp, %rbp
000000000000836a	pushq	%r15
000000000000836c	pushq	%r14
000000000000836e	pushq	%r13
0000000000008370	pushq	%r12
0000000000008372	pushq	%rbx
0000000000008373	subq	$0xd8, %rsp
000000000000837a	movq	0x20fd7(%rip), %rax     ## literal pool symbol address: ___stack_chk_guard
0000000000008381	movq	(%rax), %rax
0000000000008384	movq	%rax, -0x30(%rbp)
0000000000008388	xorps	%xmm0, %xmm0
000000000000838b	movaps	%xmm0, -0xc0(%rbp)
0000000000008392	movaps	%xmm0, -0xd0(%rbp)
0000000000008399	movaps	%xmm0, -0xe0(%rbp)
00000000000083a0	movaps	%xmm0, -0xf0(%rbp)
00000000000083a7	movq	_OBJC_IVAR_$_UAPCaptioningViewController._profileIDs(%rip), %rax
00000000000083ae	movq	(%rdi,%rax), %rdi
00000000000083b2	movq	%rdi, -0x100(%rbp)
00000000000083b9	movq	0x2bd50(%rip), %rsi     ## Objc selector ref: countByEnumeratingWithState:objects:count:
00000000000083c0	leaq	-0xf0(%rbp), %rdx
00000000000083c7	leaq	-0xb0(%rbp), %rcx
00000000000083ce	movl	$0x10, %r8d
00000000000083d4	callq	*0x21026(%rip)          ## Objc message: -[%rdi countByEnumeratingWithState:objects:count:]
00000000000083da	movq	%rax, %r13
00000000000083dd	testq	%r13, %r13
00000000000083e0	je	0x8490
00000000000083e6	movq	-0xe0(%rbp), %rax
00000000000083ed	movq	(%rax), %rax
00000000000083f0	movq	%rax, -0xf8(%rbp)
00000000000083f7	xorl	%r15d, %r15d
00000000000083fa	movq	-0xe0(%rbp), %rax
0000000000008401	movq	-0xf8(%rbp), %rcx
0000000000008408	cmpq	%rcx, (%rax)
000000000000840b	je	0x8419
000000000000840d	movq	-0x100(%rbp), %rdi
0000000000008414	callq	0x1e886                 ## symbol stub for: _objc_enumerationMutation
0000000000008419	movq	-0xe8(%rbp), %rax
0000000000008420	movq	(%rax,%r15,8), %rbx
0000000000008424	movq	%rbx, %rdi
0000000000008427	callq	0x1e45a                 ## symbol stub for: _MACaptionAppearancePrefCopyProfileName
000000000000842c	movq	%rax, %r12
000000000000842f	movq	%rbx, %rdi
0000000000008432	callq	0x1e460                 ## symbol stub for: _MACaptionAppearancePrefCopyProfileOrder
0000000000008437	movq	%rax, %r14
000000000000843a	testq	%r12, %r12
000000000000843d	je	0x8447
000000000000843f	movq	%r12, %rdi
0000000000008442	callq	0x1e562                 ## symbol stub for: _CFRelease
0000000000008447	testq	%r14, %r14
000000000000844a	je	0x8454
000000000000844c	movq	%r14, %rdi
000000000000844f	callq	0x1e562                 ## symbol stub for: _CFRelease
0000000000008454	incq	%r15
0000000000008457	cmpq	%r13, %r15
000000000000845a	jb	0x83fa
000000000000845c	movl	$0x10, %r8d
0000000000008462	movq	-0x100(%rbp), %rdi
0000000000008469	movq	0x2bca0(%rip), %rsi     ## Objc selector ref: countByEnumeratingWithState:objects:count:
0000000000008470	leaq	-0xf0(%rbp), %rdx
0000000000008477	leaq	-0xb0(%rbp), %rcx
000000000000847e	callq	*0x20f7c(%rip)          ## Objc message: -[%rdi countByEnumeratingWithState:objects:count:]
0000000000008484	movq	%rax, %r13
0000000000008487	testq	%r13, %r13
000000000000848a	jne	0x83f7
0000000000008490	movq	0x20ec1(%rip), %rax     ## literal pool symbol address: ___stack_chk_guard
0000000000008497	movq	(%rax), %rax
000000000000849a	cmpq	-0x30(%rbp), %rax
000000000000849e	jne	0x84b2
00000000000084a0	addq	$0xd8, %rsp
00000000000084a7	popq	%rbx
00000000000084a8	popq	%r12
00000000000084aa	popq	%r13
00000000000084ac	popq	%r14
00000000000084ae	popq	%r15
00000000000084b0	popq	%rbp
00000000000084b1	retq
00000000000084b2	callq	0x1e8b6                 ## symbol stub for: ___stack_chk_fail
00000000000084b7	pushq	%rbp
00000000000084b8	movq	%rsp, %rbp
00000000000084bb	pushq	%r15
00000000000084bd	pushq	%r14
00000000000084bf	pushq	%rbx
00000000000084c0	pushq	%rax
00000000000084c1	movq	%rcx, %r14
00000000000084c4	movq	%rdx, %rbx
00000000000084c7	movq	%rdi, %r15
00000000000084ca	testq	%rbx, %rbx
00000000000084cd	je	0x84d7
00000000000084cf	movq	%rbx, %rdi
00000000000084d2	callq	0x1e568                 ## symbol stub for: _CFRetain
00000000000084d7	movq	_OBJC_IVAR_$_UAPCaptioningViewController._editingNewProfile(%rip), %rax
00000000000084de	movq	(%r15,%rax), %rdi
00000000000084e2	testq	%rdi, %rdi
00000000000084e5	je	0x84f3
00000000000084e7	callq	0x1e562                 ## symbol stub for: _CFRelease
00000000000084ec	movq	_OBJC_IVAR_$_UAPCaptioningViewController._editingNewProfile(%rip), %rax
00000000000084f3	movq	%rbx, (%r15,%rax)
00000000000084f7	testq	%r14, %r14
00000000000084fa	je	0x8504
00000000000084fc	movq	%r14, %rdi
00000000000084ff	callq	0x1e568                 ## symbol stub for: _CFRetain
0000000000008504	movq	_OBJC_IVAR_$_UAPCaptioningViewController._selctionBeforeEditingProfile(%rip), %rax
000000000000850b	movq	(%r15,%rax), %rdi
000000000000850f	testq	%rdi, %rdi
0000000000008512	je	0x8520
0000000000008514	callq	0x1e562                 ## symbol stub for: _CFRelease
0000000000008519	movq	_OBJC_IVAR_$_UAPCaptioningViewController._selctionBeforeEditingProfile(%rip), %rax
0000000000008520	movq	%r14, (%r15,%rax)
0000000000008524	addq	$0x8, %rsp
0000000000008528	popq	%rbx
0000000000008529	popq	%r14
000000000000852b	popq	%r15
000000000000852d	popq	%rbp
000000000000852e	retq
000000000000852f	pushq	%rbp
0000000000008530	movq	%rsp, %rbp
0000000000008533	pushq	%r15
0000000000008535	pushq	%r14
0000000000008537	pushq	%r13
0000000000008539	pushq	%r12
000000000000853b	pushq	%rbx
000000000000853c	subq	$0xf8, %rsp
0000000000008543	movq	%rdi, %rbx
0000000000008546	movq	%rbx, -0x108(%rbp)
000000000000854d	movq	0x20e04(%rip), %r14     ## literal pool symbol address: ___stack_chk_guard
0000000000008554	movq	(%r14), %rax
0000000000008557	movq	%rax, -0x30(%rbp)
000000000000855b	movq	_OBJC_IVAR_$_UAPCaptioningViewController._activeProfile(%rip), %rax
0000000000008562	movq	(%rbx,%rax), %rdi
0000000000008566	callq	0x1e472                 ## symbol stub for: _MACaptionAppearancePrefCreateNewProfileFromProfile
000000000000856b	movq	%rax, %r15
000000000000856e	testq	%r15, %r15
0000000000008571	je	0x87ca
0000000000008577	movq	_OBJC_IVAR_$_UAPCaptioningViewController._profileIDs(%rip), %rax
000000000000857e	movq	(%rbx,%rax), %r14
0000000000008582	movq	0x2bddf(%rip), %rsi     ## Objc selector ref: count
0000000000008589	movq	0x20e70(%rip), %r12     ## Objc message: -[%rdi count]
0000000000008590	movq	%r14, %rdi
0000000000008593	callq	*%r12
0000000000008596	movq	0x2bddb(%rip), %rsi     ## Objc selector ref: insertObject:atIndex:
000000000000859d	movq	%r14, %rdi
00000000000085a0	movq	%r15, %rdx
00000000000085a3	movq	%r15, -0x110(%rbp)
00000000000085aa	movq	%rax, %rcx
00000000000085ad	callq	*%r12
00000000000085b0	movq	0x2cf49(%rip), %r14     ## Objc class ref: _OBJC_CLASS_$_NSBundle
00000000000085b7	movq	0x2cf4a(%rip), %rdi     ## Objc class ref: UniversalAccessPref
00000000000085be	movq	0x2bafb(%rip), %rsi     ## Objc selector ref: class
00000000000085c5	callq	*%r12
00000000000085c8	movq	0x2bbe9(%rip), %rsi     ## Objc selector ref: bundleForClass:
00000000000085cf	movq	%r14, %rdi
00000000000085d2	movq	%rax, %rdx
00000000000085d5	callq	*%r12
00000000000085d8	movq	0x2bbe1(%rip), %rsi     ## Objc selector ref: localizedStringForKey:value:table:
00000000000085df	leaq	0x220aa(%rip), %rdx     ## Objc cfstring ref: @"profile.default.newProfileName"
00000000000085e6	leaq	0x21b23(%rip), %rcx     ## Objc cfstring ref: @""
00000000000085ed	xorl	%r8d, %r8d
00000000000085f0	movq	%rax, %rdi
00000000000085f3	callq	*%r12
00000000000085f6	movq	0x2bc6b(%rip), %rsi     ## Objc selector ref: retain
00000000000085fd	movq	%rax, %rdi
0000000000008600	callq	*%r12
0000000000008603	movq	%rax, -0xf8(%rbp)
000000000000860a	movl	$0x2, %r15d
0000000000008610	xorps	%xmm0, %xmm0
0000000000008613	movaps	%xmm0, -0xc0(%rbp)
000000000000861a	movaps	%xmm0, -0xd0(%rbp)
0000000000008621	movaps	%xmm0, -0xe0(%rbp)
0000000000008628	movaps	%xmm0, -0xf0(%rbp)
000000000000862f	movq	_OBJC_IVAR_$_UAPCaptioningViewController._profileIDs(%rip), %rax
0000000000008636	movq	(%rbx,%rax), %r13
000000000000863a	movl	$0x10, %r8d
0000000000008640	movq	%r13, %rdi
0000000000008643	movq	0x2bac6(%rip), %rsi     ## Objc selector ref: countByEnumeratingWithState:objects:count:
000000000000864a	leaq	-0xf0(%rbp), %rdx
0000000000008651	leaq	-0xb0(%rbp), %rcx
0000000000008658	callq	*0x20da2(%rip)          ## Objc message: +[UniversalAccessPref countByEnumeratingWithState:objects:count:]
000000000000865e	movq	%rax, %r14
0000000000008661	testq	%r14, %r14
0000000000008664	je	0x87e6
000000000000866a	movq	%r15, -0x100(%rbp)
0000000000008671	movq	-0xe0(%rbp), %rax
0000000000008678	movq	(%rax), %r12
000000000000867b	xorl	%r15d, %r15d
000000000000867e	movq	-0xe0(%rbp), %rax
0000000000008685	cmpq	%r12, (%rax)
0000000000008688	je	0x8692
000000000000868a	movq	%r13, %rdi
000000000000868d	callq	0x1e886                 ## symbol stub for: _objc_enumerationMutation
0000000000008692	movq	-0xe8(%rbp), %rax
0000000000008699	movq	(%rax,%r15,8), %rdi
000000000000869d	callq	0x1e45a                 ## symbol stub for: _MACaptionAppearancePrefCopyProfileName
00000000000086a2	movq	%rax, %rbx
00000000000086a5	testq	%rbx, %rbx
00000000000086a8	je	0x86cd
00000000000086aa	movq	-0xf8(%rbp), %rdi
00000000000086b1	movq	0x2ba38(%rip), %rsi     ## Objc selector ref: isEqualToString:
00000000000086b8	movq	%rbx, %rdx
00000000000086bb	callq	*0x20d3f(%rip)          ## Objc message: -[%rdi isEqualToString:]
00000000000086c1	testb	%al, %al
00000000000086c3	jne	0x870a
00000000000086c5	movq	%rbx, %rdi
00000000000086c8	callq	0x1e562                 ## symbol stub for: _CFRelease
00000000000086cd	incq	%r15
00000000000086d0	cmpq	%r14, %r15
00000000000086d3	jb	0x867e
00000000000086d5	movl	$0x10, %r8d
00000000000086db	movq	%r13, %rdi
00000000000086de	movq	0x2ba2b(%rip), %rsi     ## Objc selector ref: countByEnumeratingWithState:objects:count:
00000000000086e5	leaq	-0xf0(%rbp), %rdx
00000000000086ec	leaq	-0xb0(%rbp), %rcx
00000000000086f3	callq	*0x20d07(%rip)          ## Objc message: -[%rdi countByEnumeratingWithState:objects:count:]
00000000000086f9	movq	%rax, %r14
00000000000086fc	testq	%r14, %r14
00000000000086ff	jne	0x867b
0000000000008705	jmp	0x87df
000000000000870a	movq	-0xf8(%rbp), %rdi
0000000000008711	movq	0x2ba38(%rip), %rsi     ## Objc selector ref: release
0000000000008718	movq	0x20ce1(%rip), %r12     ## Objc message: -[%rdi release]
000000000000871f	callq	*%r12
0000000000008722	movq	0x2cdef(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_NSString
0000000000008729	xorl	%edx, %edx
000000000000872b	movq	0x2bc2e(%rip), %rsi     ## Objc selector ref: allocWithZone:
0000000000008732	callq	*%r12
0000000000008735	movq	%rax, %r14
0000000000008738	movq	0x2cdc1(%rip), %r15     ## Objc class ref: _OBJC_CLASS_$_NSBundle
000000000000873f	movq	0x2cdc2(%rip), %rdi     ## Objc class ref: UniversalAccessPref
0000000000008746	movq	0x2b973(%rip), %rsi     ## Objc selector ref: class
000000000000874d	callq	*%r12
0000000000008750	movq	%r15, %rdi
0000000000008753	movq	0x2ba5e(%rip), %rsi     ## Objc selector ref: bundleForClass:
000000000000875a	movq	%rax, %rdx
000000000000875d	callq	*%r12
0000000000008760	xorl	%r8d, %r8d
0000000000008763	movq	%rax, %rdi
0000000000008766	movq	0x2ba53(%rip), %rsi     ## Objc selector ref: localizedStringForKey:value:table:
000000000000876d	leaq	0x21f1c(%rip), %rdx     ## Objc cfstring ref: @"profile.default.newProfileName"
0000000000008774	leaq	0x21995(%rip), %rcx     ## Objc cfstring ref: @""
000000000000877b	callq	*%r12
000000000000877e	movq	%rax, %rcx
0000000000008781	movq	-0x100(%rbp), %r15
0000000000008788	movq	%r15, %r8
000000000000878b	leaq	0x1(%r15), %r15
000000000000878f	xorl	%eax, %eax
0000000000008791	movq	%r14, %rdi
0000000000008794	movq	0x2bedd(%rip), %rsi     ## Objc selector ref: initWithFormat:
000000000000879b	leaq	0x21f0e(%rip), %rdx     ## Objc cfstring ref: @"%@ %lu"
00000000000087a2	callq	*%r12
00000000000087a5	movq	%rax, -0xf8(%rbp)
00000000000087ac	movq	%rbx, %rdi
00000000000087af	callq	0x1e562                 ## symbol stub for: _CFRelease
00000000000087b4	cmpl	$0x1f4, %r15d           ## imm = 0x1F4
00000000000087bb	movq	-0x108(%rbp), %rbx
00000000000087c2	jl	0x8610
00000000000087c8	jmp	0x87e6
00000000000087ca	movq	0x2bbd7(%rip), %rsi     ## Objc selector ref: _loadActiveProfile
00000000000087d1	movq	%rbx, %rdi
00000000000087d4	callq	*0x20c26(%rip)          ## Objc message: +[UniversalAccessPref _loadActiveProfile]
00000000000087da	jmp	0x88db
00000000000087df	movq	-0x108(%rbp), %rbx
00000000000087e6	movq	-0x110(%rbp), %r15
00000000000087ed	movq	%r15, %rdi
00000000000087f0	movq	-0xf8(%rbp), %r13
00000000000087f7	movq	%r13, %rsi
00000000000087fa	callq	0x1e4a8                 ## symbol stub for: _MACaptionAppearancePrefSetProfileName
00000000000087ff	movq	0x2ba7a(%rip), %rsi     ## Objc selector ref: _generateOrderedProfileIDCache
0000000000008806	movq	%rbx, %rdi
0000000000008809	movq	0x20bf0(%rip), %r12     ## Objc message: -[%rdi _generateOrderedProfileIDCache]
0000000000008810	callq	*%r12
0000000000008813	movq	_OBJC_IVAR_$_UAPCaptioningViewController._profileTableView(%rip), %r14
000000000000881a	movq	(%rbx,%r14), %rdi
000000000000881e	movq	0x2bdfb(%rip), %rsi     ## Objc selector ref: reloadData
0000000000008825	callq	*%r12
0000000000008828	movq	(%rbx,%r14), %r14
000000000000882c	movq	_OBJC_IVAR_$_UAPCaptioningViewController._profileIDs(%rip), %rax
0000000000008833	movq	(%rbx,%rax), %rdi
0000000000008837	movq	0x2bc0a(%rip), %rsi     ## Objc selector ref: indexOfObject:
000000000000883e	movq	%r15, %rdx
0000000000008841	callq	*%r12
0000000000008844	movq	0x2be35(%rip), %rsi     ## Objc selector ref: scrollRowToVisible:
000000000000884b	movq	%r14, %rdi
000000000000884e	movq	%rax, %rdx
0000000000008851	callq	*%r12
0000000000008854	movq	0x2b8f5(%rip), %rsi     ## Objc selector ref: release
000000000000885b	movq	%r13, %rdi
000000000000885e	callq	*%r12
0000000000008861	movq	_OBJC_IVAR_$_UAPCaptioningViewController._activeProfile(%rip), %rax
0000000000008868	movq	%rax, %r14
000000000000886b	movq	(%rbx,%r14), %rcx
000000000000886f	movq	0x2bb3a(%rip), %rsi     ## Objc selector ref: _setEditingNewProfile:selectionBeforeEditing:
0000000000008876	movq	%rbx, %rdi
0000000000008879	movq	%r15, %rdx
000000000000887c	callq	*%r12
000000000000887f	movq	(%rbx,%r14), %rdi
0000000000008883	movq	0x2b8c6(%rip), %rsi     ## Objc selector ref: release
000000000000888a	callq	*%r12
000000000000888d	movq	0x2b9d4(%rip), %rsi     ## Objc selector ref: retain
0000000000008894	movq	%r15, %rdi
0000000000008897	callq	*%r12
000000000000889a	movq	_OBJC_IVAR_$_UAPCaptioningViewController._activeProfile(%rip), %rdx
00000000000088a1	movq	%rax, %rdi
00000000000088a4	movq	%rbx, %rsi
00000000000088a7	callq	0x1e868                 ## symbol stub for: _objc_assign_ivar
00000000000088ac	movq	0x2baf5(%rip), %rsi     ## Objc selector ref: _loadActiveProfile
00000000000088b3	movq	%rbx, %rdi
00000000000088b6	callq	*%r12
00000000000088b9	movq	0x2ba48(%rip), %rsi     ## Objc selector ref: pressEditProfileButton:
00000000000088c0	movq	%rbx, %rdi
00000000000088c3	movq	%rbx, %rdx
00000000000088c6	callq	*%r12
00000000000088c9	movq	%r15, %rdi
00000000000088cc	callq	0x1e562                 ## symbol stub for: _CFRelease
00000000000088d1	movq	0x20a80(%rip), %rbx     ## literal pool symbol address: ___stack_chk_guard
00000000000088d8	movq	%rbx, %r14
00000000000088db	movq	(%r14), %rax
00000000000088de	cmpq	-0x30(%rbp), %rax
00000000000088e2	jne	0x88f6
00000000000088e4	addq	$0xf8, %rsp
00000000000088eb	popq	%rbx
00000000000088ec	popq	%r12
00000000000088ee	popq	%r13
00000000000088f0	popq	%r14
00000000000088f2	popq	%r15
00000000000088f4	popq	%rbp
00000000000088f5	retq
00000000000088f6	callq	0x1e8b6                 ## symbol stub for: ___stack_chk_fail
00000000000088fb	pushq	%rbp
00000000000088fc	movq	%rsp, %rbp
00000000000088ff	pushq	%r15
0000000000008901	pushq	%r14
0000000000008903	pushq	%rbx
0000000000008904	pushq	%rax
0000000000008905	movq	%rcx, %r14
0000000000008908	movq	%rdx, %rbx
000000000000890b	callq	0x1e442                 ## symbol stub for: _MACaptionAppearancePrefCopyActiveProfileID
0000000000008910	movq	%rax, %r15
0000000000008913	testq	%r15, %r15
0000000000008916	je	0x895b
0000000000008918	movq	0x2bd69(%rip), %rsi     ## Objc selector ref: color
000000000000891f	movq	%rbx, %rdi
0000000000008922	callq	*0x20ad8(%rip)          ## Objc message: -[%rdi color]
0000000000008928	movq	%rax, %rdi
000000000000892b	callq	0x8966
0000000000008930	movq	%rax, %rbx
0000000000008933	movq	%r15, %rdi
0000000000008936	movq	%rbx, %rsi
0000000000008939	callq	*%r14
000000000000893c	testq	%rbx, %rbx
000000000000893f	je	0x8949
0000000000008941	movq	%rbx, %rdi
0000000000008944	callq	0x1e562                 ## symbol stub for: _CFRelease
0000000000008949	movq	%r15, %rdi
000000000000894c	addq	$0x8, %rsp
0000000000008950	popq	%rbx
0000000000008951	popq	%r14
0000000000008953	popq	%r15
0000000000008955	popq	%rbp
0000000000008956	jmp	0x1e562                 ## symbol stub for: _CFRelease
000000000000895b	addq	$0x8, %rsp
000000000000895f	popq	%rbx
0000000000008960	popq	%r14
0000000000008962	popq	%r15
0000000000008964	popq	%rbp
0000000000008965	retq
0000000000008966	pushq	%rbp
0000000000008967	movq	%rsp, %rbp
000000000000896a	pushq	%r15
000000000000896c	pushq	%r14
000000000000896e	pushq	%rbx
000000000000896f	subq	$0x28, %rsp
0000000000008973	movq	0x209de(%rip), %r15     ## literal pool symbol address: ___stack_chk_guard
000000000000897a	movq	(%r15), %rax
000000000000897d	movq	%rax, -0x20(%rbp)
0000000000008981	xorl	%ebx, %ebx
0000000000008983	testq	%rdi, %rdi
0000000000008986	je	0x89cb
0000000000008988	leaq	-0x38(%rbp), %rcx
000000000000898c	leaq	-0x30(%rbp), %r8
0000000000008990	leaq	-0x28(%rbp), %r9
0000000000008994	movq	0x2bd5d(%rip), %rsi     ## Objc selector ref: getRed:green:blue:alpha:
000000000000899b	leaq	-0x40(%rbp), %rdx
000000000000899f	callq	*0x20a5b(%rip)          ## Objc message: -[%rdi getRed:green:blue:alpha:]
00000000000089a5	callq	0x1e93a                 ## symbol stub for: _CGColorSpaceCreateDeviceRGB
00000000000089aa	movq	%rax, %r14
00000000000089ad	xorl	%ebx, %ebx
00000000000089af	testq	%r14, %r14
00000000000089b2	je	0x89cb
00000000000089b4	leaq	-0x40(%rbp), %rsi
00000000000089b8	movq	%r14, %rdi
00000000000089bb	callq	0x1e928                 ## symbol stub for: _CGColorCreate
00000000000089c0	movq	%rax, %rbx
00000000000089c3	movq	%r14, %rdi
00000000000089c6	callq	0x1e562                 ## symbol stub for: _CFRelease
00000000000089cb	movq	(%r15), %rax
00000000000089ce	cmpq	-0x20(%rbp), %rax
00000000000089d2	jne	0x89e2
00000000000089d4	movq	%rbx, %rax
00000000000089d7	addq	$0x28, %rsp
00000000000089db	popq	%rbx
00000000000089dc	popq	%r14
00000000000089de	popq	%r15
00000000000089e0	popq	%rbp
00000000000089e1	retq
00000000000089e2	callq	0x1e8b6                 ## symbol stub for: ___stack_chk_fail
00000000000089e7	pushq	%rbp
00000000000089e8	movq	%rsp, %rbp
00000000000089eb	pushq	%r15
00000000000089ed	pushq	%r14
00000000000089ef	pushq	%r12
00000000000089f1	pushq	%rbx
00000000000089f2	movq	%rcx, %r14
00000000000089f5	movq	%rdx, %r15
00000000000089f8	callq	0x1e442                 ## symbol stub for: _MACaptionAppearancePrefCopyActiveProfileID
00000000000089fd	movq	%rax, %r12
0000000000008a00	testq	%r12, %r12
0000000000008a03	je	0x8a55
0000000000008a05	movq	0x2bb94(%rip), %rsi     ## Objc selector ref: selectedItem
0000000000008a0c	movq	0x209ed(%rip), %rbx     ## Objc message: -[%rdi selectedItem]
0000000000008a13	movq	%r15, %rdi
0000000000008a16	callq	*%rbx
0000000000008a18	movq	0x2ba69(%rip), %rsi     ## Objc selector ref: representedObject
0000000000008a1f	movq	%rax, %rdi
0000000000008a22	callq	*%rbx
0000000000008a24	movq	%rax, %rdi
0000000000008a27	callq	0x8966
0000000000008a2c	movq	%rax, %rbx
0000000000008a2f	movq	%r12, %rdi
0000000000008a32	movq	%rbx, %rsi
0000000000008a35	callq	*%r14
0000000000008a38	testq	%rbx, %rbx
0000000000008a3b	je	0x8a45
0000000000008a3d	movq	%rbx, %rdi
0000000000008a40	callq	0x1e562                 ## symbol stub for: _CFRelease
0000000000008a45	movq	%r12, %rdi
0000000000008a48	popq	%rbx
0000000000008a49	popq	%r12
0000000000008a4b	popq	%r14
0000000000008a4d	popq	%r15
0000000000008a4f	popq	%rbp
0000000000008a50	jmp	0x1e562                 ## symbol stub for: _CFRelease
0000000000008a55	popq	%rbx
0000000000008a56	popq	%r12
0000000000008a58	popq	%r14
0000000000008a5a	popq	%r15
0000000000008a5c	popq	%rbp
0000000000008a5d	retq
0000000000008a5e	pushq	%rbp
0000000000008a5f	movq	%rsp, %rbp
0000000000008a62	pushq	%r15
0000000000008a64	pushq	%r14
0000000000008a66	pushq	%r12
0000000000008a68	pushq	%rbx
0000000000008a69	movq	%rcx, %r12
0000000000008a6c	movq	%rdi, %r14
0000000000008a6f	movq	0x2bb2a(%rip), %rsi     ## Objc selector ref: selectedItem
0000000000008a76	movq	0x20983(%rip), %r15     ## Objc message: -[%rdi selectedItem]
0000000000008a7d	movq	%rdx, %rdi
0000000000008a80	callq	*%r15
0000000000008a83	movq	0x2cad6(%rip), %rbx     ## Objc class ref: _OBJC_CLASS_$_NSNumber
0000000000008a8a	movq	0x2bbff(%rip), %rsi     ## Objc selector ref: tag
0000000000008a91	movq	%rax, %rdi
0000000000008a94	callq	*%r15
0000000000008a97	cvtsi2ssq	%rax, %xmm0
0000000000008a9c	divss	0x1f87c(%rip), %xmm0
0000000000008aa4	movq	0x2bafd(%rip), %rsi     ## Objc selector ref: numberWithFloat:
0000000000008aab	movq	%rbx, %rdi
0000000000008aae	callq	*%r15
0000000000008ab1	movq	_OBJC_IVAR_$_UAPCaptioningViewController._activeProfile(%rip), %rcx
0000000000008ab8	movq	(%r14,%rcx), %rdi
0000000000008abc	movq	%rax, %rsi
0000000000008abf	movq	%r12, %rax
0000000000008ac2	popq	%rbx
0000000000008ac3	popq	%r12
0000000000008ac5	popq	%r14
0000000000008ac7	popq	%r15
0000000000008ac9	popq	%rbp
0000000000008aca	jmpq	*%rax
0000000000008acc	pushq	%rbp
0000000000008acd	movq	%rsp, %rbp
0000000000008ad0	pushq	%r15
0000000000008ad2	pushq	%r14
0000000000008ad4	pushq	%rbx
0000000000008ad5	pushq	%rax
0000000000008ad6	movq	%rcx, %r15
0000000000008ad9	movq	%rdi, %r14
0000000000008adc	movq	0x2babd(%rip), %rsi     ## Objc selector ref: selectedItem
0000000000008ae3	movq	0x20916(%rip), %rbx     ## Objc message: +[NSNumber selectedItem]
0000000000008aea	movq	%rdx, %rdi
0000000000008aed	callq	*%rbx
0000000000008aef	movq	0x2bb9a(%rip), %rsi     ## Objc selector ref: tag
0000000000008af6	movq	%rax, %rdi
0000000000008af9	callq	*%rbx
0000000000008afb	movq	0x2ca5e(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_NSNumber
0000000000008b02	cvtsi2ssq	%rax, %xmm0
0000000000008b07	divss	0x1f811(%rip), %xmm0
0000000000008b0f	movq	0x2ba92(%rip), %rsi     ## Objc selector ref: numberWithFloat:
0000000000008b16	callq	*%rbx
0000000000008b18	movq	_OBJC_IVAR_$_UAPCaptioningViewController._activeProfile(%rip), %rcx
0000000000008b1f	movq	(%r14,%rcx), %rdi
0000000000008b23	movq	%rax, %rsi
0000000000008b26	movq	%r15, %rax
0000000000008b29	addq	$0x8, %rsp
0000000000008b2d	popq	%rbx
0000000000008b2e	popq	%r14
0000000000008b30	popq	%r15
0000000000008b32	popq	%rbp
0000000000008b33	jmpq	*%rax
0000000000008b35	pushq	%rbp
0000000000008b36	movq	%rsp, %rbp
0000000000008b39	pushq	%r15
0000000000008b3b	pushq	%r14
0000000000008b3d	pushq	%r12
0000000000008b3f	pushq	%rbx
0000000000008b40	movq	%rcx, %r14
0000000000008b43	movq	%rdx, %rbx
0000000000008b46	movq	%rdi, %r15
0000000000008b49	movq	0x2bb48(%rip), %rsi     ## Objc selector ref: indexOfSelectedItem
0000000000008b50	movq	%rbx, %rdi
0000000000008b53	callq	*0x208a7(%rip)          ## Objc message: +[NSNumber indexOfSelectedItem]
0000000000008b59	testq	%rax, %rax
0000000000008b5c	je	0x8ba3
0000000000008b5e	movq	0x2ba3b(%rip), %rsi     ## Objc selector ref: selectedItem
0000000000008b65	movq	0x20894(%rip), %r12     ## Objc message: -[%rdi selectedItem]
0000000000008b6c	movq	%rbx, %rdi
0000000000008b6f	callq	*%r12
0000000000008b72	movq	0x2b94f(%rip), %rsi     ## Objc selector ref: title
0000000000008b79	movq	%rax, %rdi
0000000000008b7c	callq	*%r12
0000000000008b7f	movq	0x2bb1a(%rip), %rsi     ## Objc selector ref: _psNameForFontName:
0000000000008b86	movq	%r15, %rdi
0000000000008b89	movq	%rax, %rdx
0000000000008b8c	callq	*%r12
0000000000008b8f	xorl	%ebx, %ebx
0000000000008b91	testq	%rax, %rax
0000000000008b94	je	0x8ba5
0000000000008b96	movq	%rax, %rdi
0000000000008b99	callq	0x1e96a                 ## symbol stub for: _CGFontCreateWithFontName
0000000000008b9e	movq	%rax, %rbx
0000000000008ba1	jmp	0x8ba5
0000000000008ba3	xorl	%ebx, %ebx
0000000000008ba5	movq	_OBJC_IVAR_$_UAPCaptioningViewController._activeProfile(%rip), %rax
0000000000008bac	movq	(%r15,%rax), %rdi
0000000000008bb0	movq	%rbx, %rsi
0000000000008bb3	movq	%r14, %rdx
0000000000008bb6	callq	0x1e49c                 ## symbol stub for: _MACaptionAppearancePrefSetFontForStyle
0000000000008bbb	testq	%rbx, %rbx
0000000000008bbe	je	0x8bd0
0000000000008bc0	movq	%rbx, %rdi
0000000000008bc3	popq	%rbx
0000000000008bc4	popq	%r12
0000000000008bc6	popq	%r14
0000000000008bc8	popq	%r15
0000000000008bca	popq	%rbp
0000000000008bcb	jmp	0x1e562                 ## symbol stub for: _CFRelease
0000000000008bd0	popq	%rbx
0000000000008bd1	popq	%r12
0000000000008bd3	popq	%r14
0000000000008bd5	popq	%r15
0000000000008bd7	popq	%rbp
0000000000008bd8	retq
0000000000008bd9	pushq	%rbp
0000000000008bda	movq	%rsp, %rbp
0000000000008bdd	pushq	%rbx
0000000000008bde	pushq	%rax
0000000000008bdf	movq	_OBJC_IVAR_$_UAPCaptioningViewController._preferAccessibilityCaptionsCheckbox(%rip), %rax
0000000000008be6	movq	(%rdi,%rax), %rdi
0000000000008bea	movq	0x2bab7(%rip), %rsi     ## Objc selector ref: state
0000000000008bf1	callq	*0x20809(%rip)          ## Objc message: -[%rdi state]
0000000000008bf7	movq	%rax, %rbx
0000000000008bfa	movq	0x20797(%rip), %rax     ## literal pool symbol address: _kCFBooleanFalse
0000000000008c01	cmpq	$0x1, %rbx
0000000000008c05	cmoveq	0x20793(%rip), %rax     ## literal pool symbol address: _kCFBooleanTrue
0000000000008c0d	movq	(%rax), %rdi
0000000000008c10	callq	0x1e4a2                 ## symbol stub for: _MACaptionAppearancePrefSetPreferAccessibleCaptions
0000000000008c15	movl	$0x1, %edi
0000000000008c1a	cmpq	$0x1, %rbx
0000000000008c1e	jne	0x8c27
0000000000008c20	movl	$0x2, %esi
0000000000008c25	jmp	0x8c3c
0000000000008c27	callq	0x1e430                 ## symbol stub for: _MACaptionAppearanceGetDisplayType
0000000000008c2c	cmpq	$0x2, %rax
0000000000008c30	jne	0x8c47
0000000000008c32	movl	$0x1, %edi
0000000000008c37	movl	$0x1, %esi
0000000000008c3c	addq	$0x8, %rsp
0000000000008c40	popq	%rbx
0000000000008c41	popq	%rbp
0000000000008c42	jmp	0x1e4c0                 ## symbol stub for: _MACaptionAppearanceSetDisplayType
0000000000008c47	addq	$0x8, %rsp
0000000000008c4b	popq	%rbx
0000000000008c4c	popq	%rbp
0000000000008c4d	retq
0000000000008c4e	pushq	%rbp
0000000000008c4f	movq	%rsp, %rbp
0000000000008c52	pushq	%r14
0000000000008c54	pushq	%rbx
0000000000008c55	movq	%rdi, %rbx
0000000000008c58	movq	0x2ba51(%rip), %rsi     ## Objc selector ref: _ensureSingleSelection:
0000000000008c5f	movq	0x2079a(%rip), %r14     ## Objc message: -[%rdi _ensureSingleSelection:]
0000000000008c66	callq	*%r14
0000000000008c69	movq	_OBJC_IVAR_$_UAPCaptioningViewController._backgroundColorPopup(%rip), %rax
0000000000008c70	movq	(%rbx,%rax), %rdx
0000000000008c74	movq	0x2ba3d(%rip), %rsi     ## Objc selector ref: _storeColorPopupValue:setter:
0000000000008c7b	movq	0x203ce(%rip), %rcx     ## literal pool symbol address: _MACaptionAppearancePrefSetBackgroundColor
0000000000008c82	movq	%rbx, %rdi
0000000000008c85	movq	%r14, %rax
0000000000008c88	popq	%rbx
0000000000008c89	popq	%r14
0000000000008c8b	popq	%rbp
0000000000008c8c	jmpq	*%rax
0000000000008c8e	pushq	%rbp
0000000000008c8f	movq	%rsp, %rbp
0000000000008c92	pushq	%r14
0000000000008c94	pushq	%rbx
0000000000008c95	movq	%rdi, %rbx
0000000000008c98	movq	0x2ba11(%rip), %rsi     ## Objc selector ref: _ensureSingleSelection:
0000000000008c9f	movq	0x2075a(%rip), %r14     ## Objc message: -[%rdi _ensureSingleSelection:]
0000000000008ca6	callq	*%r14
0000000000008ca9	movq	_OBJC_IVAR_$_UAPCaptioningViewController._windowColorPopup(%rip), %rax
0000000000008cb0	movq	(%rbx,%rax), %rdx
0000000000008cb4	movq	0x2b9fd(%rip), %rsi     ## Objc selector ref: _storeColorPopupValue:setter:
0000000000008cbb	movq	0x203f6(%rip), %rcx     ## literal pool symbol address: _MACaptionAppearancePrefSetWindowColor
0000000000008cc2	movq	%rbx, %rdi
0000000000008cc5	movq	%r14, %rax
0000000000008cc8	popq	%rbx
0000000000008cc9	popq	%r14
0000000000008ccb	popq	%rbp
0000000000008ccc	jmpq	*%rax
0000000000008cce	pushq	%rbp
0000000000008ccf	movq	%rsp, %rbp
0000000000008cd2	pushq	%r14
0000000000008cd4	pushq	%rbx
0000000000008cd5	movq	%rdi, %rbx
0000000000008cd8	movq	0x2b9d1(%rip), %rsi     ## Objc selector ref: _ensureSingleSelection:
0000000000008cdf	movq	0x2071a(%rip), %r14     ## Objc message: -[%rdi _ensureSingleSelection:]
0000000000008ce6	callq	*%r14
0000000000008ce9	movq	_OBJC_IVAR_$_UAPCaptioningViewController._textColorPopup(%rip), %rax
0000000000008cf0	movq	(%rbx,%rax), %rdx
0000000000008cf4	movq	0x2b9bd(%rip), %rsi     ## Objc selector ref: _storeColorPopupValue:setter:
0000000000008cfb	movq	0x2035e(%rip), %rcx     ## literal pool symbol address: _MACaptionAppearancePrefSetForegroundColor
0000000000008d02	movq	%rbx, %rdi
0000000000008d05	movq	%r14, %rax
0000000000008d08	popq	%rbx
0000000000008d09	popq	%r14
0000000000008d0b	popq	%rbp
0000000000008d0c	jmpq	*%rax
0000000000008d0e	pushq	%rbp
0000000000008d0f	movq	%rsp, %rbp
0000000000008d12	pushq	%r14
0000000000008d14	pushq	%rbx
0000000000008d15	movq	%rdi, %rbx
0000000000008d18	movq	0x2b991(%rip), %rsi     ## Objc selector ref: _ensureSingleSelection:
0000000000008d1f	movq	0x206da(%rip), %r14     ## Objc message: -[%rdi _ensureSingleSelection:]
0000000000008d26	callq	*%r14
0000000000008d29	movq	_OBJC_IVAR_$_UAPCaptioningViewController._backgroundOpacityPopup(%rip), %rax
0000000000008d30	movq	(%rbx,%rax), %rdx
0000000000008d34	movq	0x2b985(%rip), %rsi     ## Objc selector ref: _storeOpacityPopupValue:setter:
0000000000008d3b	movq	0x20316(%rip), %rcx     ## literal pool symbol address: _MACaptionAppearancePrefSetBackgroundOpacity
0000000000008d42	movq	%rbx, %rdi
0000000000008d45	movq	%r14, %rax
0000000000008d48	popq	%rbx
0000000000008d49	popq	%r14
0000000000008d4b	popq	%rbp
0000000000008d4c	jmpq	*%rax
0000000000008d4e	pushq	%rbp
0000000000008d4f	movq	%rsp, %rbp
0000000000008d52	pushq	%r14
0000000000008d54	pushq	%rbx
0000000000008d55	movq	%rdi, %rbx
0000000000008d58	movq	0x2b951(%rip), %rsi     ## Objc selector ref: _ensureSingleSelection:
0000000000008d5f	movq	0x2069a(%rip), %r14     ## Objc message: -[%rdi _ensureSingleSelection:]
0000000000008d66	callq	*%r14
0000000000008d69	movq	_OBJC_IVAR_$_UAPCaptioningViewController._windowOpacityPopup(%rip), %rax
0000000000008d70	movq	(%rbx,%rax), %rdx
0000000000008d74	movq	0x2b945(%rip), %rsi     ## Objc selector ref: _storeOpacityPopupValue:setter:
0000000000008d7b	movq	0x2033e(%rip), %rcx     ## literal pool symbol address: _MACaptionAppearancePrefSetWindowOpacity
0000000000008d82	movq	%rbx, %rdi
0000000000008d85	movq	%r14, %rax
0000000000008d88	popq	%rbx
0000000000008d89	popq	%r14
0000000000008d8b	popq	%rbp
0000000000008d8c	jmpq	*%rax
0000000000008d8e	pushq	%rbp
0000000000008d8f	movq	%rsp, %rbp
0000000000008d92	pushq	%r14
0000000000008d94	pushq	%rbx
0000000000008d95	movq	%rdi, %rbx
0000000000008d98	movq	0x2b911(%rip), %rsi     ## Objc selector ref: _ensureSingleSelection:
0000000000008d9f	movq	0x2065a(%rip), %r14     ## Objc message: -[%rdi _ensureSingleSelection:]
0000000000008da6	callq	*%r14
0000000000008da9	movq	_OBJC_IVAR_$_UAPCaptioningViewController._textOpacityPopup(%rip), %rax
0000000000008db0	movq	(%rbx,%rax), %rdx
0000000000008db4	movq	0x2b905(%rip), %rsi     ## Objc selector ref: _storeOpacityPopupValue:setter:
0000000000008dbb	movq	0x202a6(%rip), %rcx     ## literal pool symbol address: _MACaptionAppearancePrefSetForegroundOpacity
0000000000008dc2	movq	%rbx, %rdi
0000000000008dc5	movq	%r14, %rax
0000000000008dc8	popq	%rbx
0000000000008dc9	popq	%r14
0000000000008dcb	popq	%rbp
0000000000008dcc	jmpq	*%rax
0000000000008dce	pushq	%rbp
0000000000008dcf	movq	%rsp, %rbp
0000000000008dd2	pushq	%r14
0000000000008dd4	pushq	%rbx
0000000000008dd5	movq	%rdi, %rbx
0000000000008dd8	movq	0x2b8d1(%rip), %rsi     ## Objc selector ref: _ensureSingleSelection:
0000000000008ddf	movq	0x2061a(%rip), %r14     ## Objc message: -[%rdi _ensureSingleSelection:]
0000000000008de6	callq	*%r14
0000000000008de9	movq	_OBJC_IVAR_$_UAPCaptioningViewController._textSizePopup(%rip), %rax
0000000000008df0	movq	(%rbx,%rax), %rdx
0000000000008df4	movq	0x2b8cd(%rip), %rsi     ## Objc selector ref: _storePercentagePopupValue:setter:
0000000000008dfb	movq	0x2026e(%rip), %rcx     ## literal pool symbol address: _MACaptionAppearancePrefSetRelativeCharacterSize
0000000000008e02	movq	%rbx, %rdi
0000000000008e05	movq	%r14, %rax
0000000000008e08	popq	%rbx
0000000000008e09	popq	%r14
0000000000008e0b	popq	%rbp
0000000000008e0c	jmpq	*%rax
0000000000008e0e	pushq	%rbp
0000000000008e0f	movq	%rsp, %rbp
0000000000008e12	pushq	%r14
0000000000008e14	pushq	%rbx
0000000000008e15	movq	%rdi, %rbx
0000000000008e18	movq	0x2b891(%rip), %rsi     ## Objc selector ref: _ensureSingleSelection:
0000000000008e1f	movq	0x205da(%rip), %r14     ## Objc message: -[%rdi _ensureSingleSelection:]
0000000000008e26	callq	*%r14
0000000000008e29	movq	_OBJC_IVAR_$_UAPCaptioningViewController._edgeStylePopup(%rip), %rax
0000000000008e30	movq	(%rbx,%rax), %rdi
0000000000008e34	movq	0x2b765(%rip), %rsi     ## Objc selector ref: selectedItem
0000000000008e3b	callq	*%r14
0000000000008e3e	movq	0x2b84b(%rip), %rsi     ## Objc selector ref: tag
0000000000008e45	movq	%rax, %rdi
0000000000008e48	callq	*%r14
0000000000008e4b	movq	0x2c70e(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_NSNumber
0000000000008e52	movq	0x2b877(%rip), %rsi     ## Objc selector ref: numberWithInteger:
0000000000008e59	movq	%rax, %rdx
0000000000008e5c	callq	*%r14
0000000000008e5f	movq	_OBJC_IVAR_$_UAPCaptioningViewController._activeProfile(%rip), %rcx
0000000000008e66	movq	(%rbx,%rcx), %rdi
0000000000008e6a	movq	%rax, %rsi
0000000000008e6d	popq	%rbx
0000000000008e6e	popq	%r14
0000000000008e70	popq	%rbp
0000000000008e71	jmp	0x1e4b4                 ## symbol stub for: _MACaptionAppearancePrefSetTextEdgeStyle
0000000000008e76	pushq	%rbp
0000000000008e77	movq	%rsp, %rbp
0000000000008e7a	pushq	%r14
0000000000008e7c	pushq	%rbx
0000000000008e7d	movq	%rdi, %rbx
0000000000008e80	movq	0x2b829(%rip), %rsi     ## Objc selector ref: _ensureSingleSelection:
0000000000008e87	movq	0x20572(%rip), %r14     ## Objc message: +[NSNumber _ensureSingleSelection:]
0000000000008e8e	callq	*%r14
0000000000008e91	movq	_OBJC_IVAR_$_UAPCaptioningViewController._defaultFontPopup(%rip), %rax
0000000000008e98	movq	(%rbx,%rax), %rdx
0000000000008e9c	movq	0x2b835(%rip), %rsi     ## Objc selector ref: _storeFontPopupValue:fontStyle:
0000000000008ea3	xorl	%ecx, %ecx
0000000000008ea5	movq	%rbx, %rdi
0000000000008ea8	movq	%r14, %rax
0000000000008eab	popq	%rbx
0000000000008eac	popq	%r14
0000000000008eae	popq	%rbp
0000000000008eaf	jmpq	*%rax
0000000000008eb1	pushq	%rbp
0000000000008eb2	movq	%rsp, %rbp
0000000000008eb5	pushq	%r14
0000000000008eb7	pushq	%rbx
0000000000008eb8	movq	%rdi, %rbx
0000000000008ebb	movq	0x2b7ee(%rip), %rsi     ## Objc selector ref: _ensureSingleSelection:
0000000000008ec2	movq	0x20537(%rip), %r14     ## Objc message: -[%rdi _ensureSingleSelection:]
0000000000008ec9	callq	*%r14
0000000000008ecc	movq	_OBJC_IVAR_$_UAPCaptioningViewController._monospaceSerifFontPopup(%rip), %rax
0000000000008ed3	movq	(%rbx,%rax), %rdx
0000000000008ed7	movq	0x2b7fa(%rip), %rsi     ## Objc selector ref: _storeFontPopupValue:fontStyle:
0000000000008ede	movl	$0x1, %ecx
0000000000008ee3	movq	%rbx, %rdi
0000000000008ee6	movq	%r14, %rax
0000000000008ee9	popq	%rbx
0000000000008eea	popq	%r14
0000000000008eec	popq	%rbp
0000000000008eed	jmpq	*%rax
0000000000008eef	pushq	%rbp
0000000000008ef0	movq	%rsp, %rbp
0000000000008ef3	pushq	%r14
0000000000008ef5	pushq	%rbx
0000000000008ef6	movq	%rdi, %rbx
0000000000008ef9	movq	0x2b7b0(%rip), %rsi     ## Objc selector ref: _ensureSingleSelection:
0000000000008f00	movq	0x204f9(%rip), %r14     ## Objc message: -[%rdi _ensureSingleSelection:]
0000000000008f07	callq	*%r14
0000000000008f0a	movq	_OBJC_IVAR_$_UAPCaptioningViewController._proportionalSerifFontPopup(%rip), %rax
0000000000008f11	movq	(%rbx,%rax), %rdx
0000000000008f15	movq	0x2b7bc(%rip), %rsi     ## Objc selector ref: _storeFontPopupValue:fontStyle:
0000000000008f1c	movl	$0x2, %ecx
0000000000008f21	movq	%rbx, %rdi
0000000000008f24	movq	%r14, %rax
0000000000008f27	popq	%rbx
0000000000008f28	popq	%r14
0000000000008f2a	popq	%rbp
0000000000008f2b	jmpq	*%rax
0000000000008f2d	pushq	%rbp
0000000000008f2e	movq	%rsp, %rbp
0000000000008f31	pushq	%r14
0000000000008f33	pushq	%rbx
0000000000008f34	movq	%rdi, %rbx
0000000000008f37	movq	0x2b772(%rip), %rsi     ## Objc selector ref: _ensureSingleSelection:
0000000000008f3e	movq	0x204bb(%rip), %r14     ## Objc message: -[%rdi _ensureSingleSelection:]
0000000000008f45	callq	*%r14
0000000000008f48	movq	_OBJC_IVAR_$_UAPCaptioningViewController._monospaceFontPopup(%rip), %rax
0000000000008f4f	movq	(%rbx,%rax), %rdx
0000000000008f53	movq	0x2b77e(%rip), %rsi     ## Objc selector ref: _storeFontPopupValue:fontStyle:
0000000000008f5a	movl	$0x3, %ecx
0000000000008f5f	movq	%rbx, %rdi
0000000000008f62	movq	%r14, %rax
0000000000008f65	popq	%rbx
0000000000008f66	popq	%r14
0000000000008f68	popq	%rbp
0000000000008f69	jmpq	*%rax
0000000000008f6b	pushq	%rbp
0000000000008f6c	movq	%rsp, %rbp
0000000000008f6f	pushq	%r14
0000000000008f71	pushq	%rbx
0000000000008f72	movq	%rdi, %rbx
0000000000008f75	movq	0x2b734(%rip), %rsi     ## Objc selector ref: _ensureSingleSelection:
0000000000008f7c	movq	0x2047d(%rip), %r14     ## Objc message: -[%rdi _ensureSingleSelection:]
0000000000008f83	callq	*%r14
0000000000008f86	movq	_OBJC_IVAR_$_UAPCaptioningViewController._proportionalFontPopup(%rip), %rax
0000000000008f8d	movq	(%rbx,%rax), %rdx
0000000000008f91	movq	0x2b740(%rip), %rsi     ## Objc selector ref: _storeFontPopupValue:fontStyle:
0000000000008f98	movl	$0x4, %ecx
0000000000008f9d	movq	%rbx, %rdi
0000000000008fa0	movq	%r14, %rax
0000000000008fa3	popq	%rbx
0000000000008fa4	popq	%r14
0000000000008fa6	popq	%rbp
0000000000008fa7	jmpq	*%rax
0000000000008fa9	pushq	%rbp
0000000000008faa	movq	%rsp, %rbp
0000000000008fad	pushq	%r14
0000000000008faf	pushq	%rbx
0000000000008fb0	movq	%rdi, %rbx
0000000000008fb3	movq	0x2b6f6(%rip), %rsi     ## Objc selector ref: _ensureSingleSelection:
0000000000008fba	movq	0x2043f(%rip), %r14     ## Objc message: -[%rdi _ensureSingleSelection:]
0000000000008fc1	callq	*%r14
0000000000008fc4	movq	_OBJC_IVAR_$_UAPCaptioningViewController._casualFontPopup(%rip), %rax
0000000000008fcb	movq	(%rbx,%rax), %rdx
0000000000008fcf	movq	0x2b702(%rip), %rsi     ## Objc selector ref: _storeFontPopupValue:fontStyle:
0000000000008fd6	movl	$0x5, %ecx
0000000000008fdb	movq	%rbx, %rdi
0000000000008fde	movq	%r14, %rax
0000000000008fe1	popq	%rbx
0000000000008fe2	popq	%r14
0000000000008fe4	popq	%rbp
0000000000008fe5	jmpq	*%rax
0000000000008fe7	pushq	%rbp
0000000000008fe8	movq	%rsp, %rbp
0000000000008feb	pushq	%r14
0000000000008fed	pushq	%rbx
0000000000008fee	movq	%rdi, %rbx
0000000000008ff1	movq	0x2b6b8(%rip), %rsi     ## Objc selector ref: _ensureSingleSelection:
0000000000008ff8	movq	0x20401(%rip), %r14     ## Objc message: -[%rdi _ensureSingleSelection:]
0000000000008fff	callq	*%r14
0000000000009002	movq	_OBJC_IVAR_$_UAPCaptioningViewController._cursiveFontPopup(%rip), %rax
0000000000009009	movq	(%rbx,%rax), %rdx
000000000000900d	movq	0x2b6c4(%rip), %rsi     ## Objc selector ref: _storeFontPopupValue:fontStyle:
0000000000009014	movl	$0x6, %ecx
0000000000009019	movq	%rbx, %rdi
000000000000901c	movq	%r14, %rax
000000000000901f	popq	%rbx
0000000000009020	popq	%r14
0000000000009022	popq	%rbp
0000000000009023	jmpq	*%rax
0000000000009025	pushq	%rbp
0000000000009026	movq	%rsp, %rbp
0000000000009029	pushq	%r14
000000000000902b	pushq	%rbx
000000000000902c	movq	%rdi, %rbx
000000000000902f	movq	0x2b67a(%rip), %rsi     ## Objc selector ref: _ensureSingleSelection:
0000000000009036	movq	0x203c3(%rip), %r14     ## Objc message: -[%rdi _ensureSingleSelection:]
000000000000903d	callq	*%r14
0000000000009040	movq	_OBJC_IVAR_$_UAPCaptioningViewController._smallCapitalFontPopup(%rip), %rax
0000000000009047	movq	(%rbx,%rax), %rdx
000000000000904b	movq	0x2b686(%rip), %rsi     ## Objc selector ref: _storeFontPopupValue:fontStyle:
0000000000009052	movl	$0x7, %ecx
0000000000009057	movq	%rbx, %rdi
000000000000905a	movq	%r14, %rax
000000000000905d	popq	%rbx
000000000000905e	popq	%r14
0000000000009060	popq	%rbp
0000000000009061	jmpq	*%rax
0000000000009063	pushq	%rbp
0000000000009064	movq	%rsp, %rbp
0000000000009067	pushq	%r15
0000000000009069	pushq	%r14
000000000000906b	pushq	%r13
000000000000906d	pushq	%r12
000000000000906f	pushq	%rbx
0000000000009070	pushq	%rax
0000000000009071	movq	%rdx, %r14
0000000000009074	movq	0x2b61d(%rip), %rsi     ## Objc selector ref: indexOfSelectedItem
000000000000907b	movq	0x2037e(%rip), %r13     ## Objc message: -[%rdi indexOfSelectedItem]
0000000000009082	movq	%r14, %rdi
0000000000009085	callq	*%r13
0000000000009088	movq	%rax, %r15
000000000000908b	movq	0x2b64e(%rip), %rsi     ## Objc selector ref: numberOfItems
0000000000009092	movq	%r14, %rdi
0000000000009095	callq	*%r13
0000000000009098	movq	%rax, %rbx
000000000000909b	testq	%r15, %r15
000000000000909e	js	0x90d4
00000000000090a0	testq	%rbx, %rbx
00000000000090a3	jle	0x90d4
00000000000090a5	xorl	%r12d, %r12d
00000000000090a8	cmpq	%r12, %r15
00000000000090ab	je	0x90cc
00000000000090ad	movq	%r14, %rdi
00000000000090b0	movq	0x2b4b1(%rip), %rsi     ## Objc selector ref: itemAtIndex:
00000000000090b7	movq	%r12, %rdx
00000000000090ba	callq	*%r13
00000000000090bd	xorl	%edx, %edx
00000000000090bf	movq	%rax, %rdi
00000000000090c2	movq	0x2b377(%rip), %rsi     ## Objc selector ref: setState:
00000000000090c9	callq	*%r13
00000000000090cc	incq	%r12
00000000000090cf	cmpq	%r12, %rbx
00000000000090d2	jne	0x90a8
00000000000090d4	addq	$0x8, %rsp
00000000000090d8	popq	%rbx
00000000000090d9	popq	%r12
00000000000090db	popq	%r13
00000000000090dd	popq	%r14
00000000000090df	popq	%r15
00000000000090e1	popq	%rbp
00000000000090e2	retq
00000000000090e3	pushq	%rbp
00000000000090e4	movq	%rsp, %rbp
00000000000090e7	pushq	%r15
00000000000090e9	pushq	%r14
00000000000090eb	pushq	%r12
00000000000090ed	pushq	%rbx
00000000000090ee	movq	%rcx, %r12
00000000000090f1	movq	%rdx, %rbx
00000000000090f4	movq	%rdi, %r14
00000000000090f7	movq	0x2c4aa(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_NSButton
00000000000090fe	movq	0x2afbb(%rip), %rsi     ## Objc selector ref: class
0000000000009105	movq	0x202f4(%rip), %r15     ## Objc message: +[NSButton class]
000000000000910c	callq	*%r15
000000000000910f	movq	0x2afe2(%rip), %rsi     ## Objc selector ref: isKindOfClass:
0000000000009116	movq	%rbx, %rdi
0000000000009119	movq	%rax, %rdx
000000000000911c	callq	*%r15
000000000000911f	testb	%al, %al
0000000000009121	je	0x9161
0000000000009123	movq	0x2b57e(%rip), %rsi     ## Objc selector ref: state
000000000000912a	movq	%rbx, %rdi
000000000000912d	callq	*0x202cd(%rip)          ## Objc message: -[%rdi state]
0000000000009133	cmpq	$0x1, %rax
0000000000009137	movq	_OBJC_IVAR_$_UAPCaptioningViewController._activeProfile(%rip), %rax
000000000000913e	movq	(%r14,%rax), %rdi
0000000000009142	movq	0x2024f(%rip), %rax     ## literal pool symbol address: _kCFBooleanFalse
0000000000009149	cmoveq	0x2024f(%rip), %rax     ## literal pool symbol address: _kCFBooleanTrue
0000000000009151	movq	(%rax), %rsi
0000000000009154	movq	%r12, %rax
0000000000009157	popq	%rbx
0000000000009158	popq	%r12
000000000000915a	popq	%r14
000000000000915c	popq	%r15
000000000000915e	popq	%rbp
000000000000915f	jmpq	*%rax
0000000000009161	popq	%rbx
0000000000009162	popq	%r12
0000000000009164	popq	%r14
0000000000009166	popq	%r15
0000000000009168	popq	%rbp
0000000000009169	retq
000000000000916a	pushq	%rbp
000000000000916b	movq	%rsp, %rbp
000000000000916e	pushq	%r15
0000000000009170	pushq	%r14
0000000000009172	pushq	%r12
0000000000009174	pushq	%rbx
0000000000009175	movq	%rcx, %r14
0000000000009178	movq	%rdx, %rbx
000000000000917b	movq	%rdi, %r15
000000000000917e	movq	0x2c423(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_NSButton
0000000000009185	movq	0x2af34(%rip), %rsi     ## Objc selector ref: class
000000000000918c	movq	0x2026d(%rip), %r12     ## Objc message: +[NSButton class]
0000000000009193	callq	*%r12
0000000000009196	movq	0x2af5b(%rip), %rsi     ## Objc selector ref: isKindOfClass:
000000000000919d	movq	%rbx, %rdi
00000000000091a0	movq	%rax, %rdx
00000000000091a3	callq	*%r12
00000000000091a6	testb	%al, %al
00000000000091a8	je	0x91eb
00000000000091aa	movq	0x2b4f7(%rip), %rsi     ## Objc selector ref: state
00000000000091b1	movq	%rbx, %rdi
00000000000091b4	callq	*0x20246(%rip)          ## Objc message: -[%rdi state]
00000000000091ba	cmpq	$0x1, %rax
00000000000091be	movq	_OBJC_IVAR_$_UAPCaptioningViewController._activeProfile(%rip), %rax
00000000000091c5	movq	(%r15,%rax), %rdi
00000000000091c9	movq	0x201c8(%rip), %rax     ## literal pool symbol address: _kCFBooleanFalse
00000000000091d0	cmoveq	0x201c8(%rip), %rax     ## literal pool symbol address: _kCFBooleanTrue
00000000000091d8	movq	(%rax), %rdx
00000000000091db	movq	%r14, %rsi
00000000000091de	popq	%rbx
00000000000091df	popq	%r12
00000000000091e1	popq	%r14
00000000000091e3	popq	%r15
00000000000091e5	popq	%rbp
00000000000091e6	jmp	0x1e4ba                 ## symbol stub for: _MACaptionAppearancePrefSetVideoOverrideFontForStyle
00000000000091eb	popq	%rbx
00000000000091ec	popq	%r12
00000000000091ee	popq	%r14
00000000000091f0	popq	%r15
00000000000091f2	popq	%rbp
00000000000091f3	retq
00000000000091f4	pushq	%rbp
00000000000091f5	movq	%rsp, %rbp
00000000000091f8	movq	0x2b4e9(%rip), %rsi     ## Objc selector ref: _setOverride:setter:
00000000000091ff	movq	0x1fe82(%rip), %rcx     ## literal pool symbol address: _MACaptionAppearancePrefSetVideoOverrideForegroundColor
0000000000009206	popq	%rbp
0000000000009207	jmpq	*0x201f3(%rip)          ## Objc message: -[%rdi _setOverride:setter:]
000000000000920d	pushq	%rbp
000000000000920e	movq	%rsp, %rbp
0000000000009211	movq	0x2b4d0(%rip), %rsi     ## Objc selector ref: _setOverride:setter:
0000000000009218	movq	0x1fe79(%rip), %rcx     ## literal pool symbol address: _MACaptionAppearancePrefSetVideoOverrideRelativeCharacterSize
000000000000921f	popq	%rbp
0000000000009220	jmpq	*0x201da(%rip)          ## Objc message: -[%rdi _setOverride:setter:]
0000000000009226	pushq	%rbp
0000000000009227	movq	%rsp, %rbp
000000000000922a	movq	0x2b4b7(%rip), %rsi     ## Objc selector ref: _setOverride:setter:
0000000000009231	movq	0x1fe40(%rip), %rcx     ## literal pool symbol address: _MACaptionAppearancePrefSetVideoOverrideBackgroundColor
0000000000009238	popq	%rbp
0000000000009239	jmpq	*0x201c1(%rip)          ## Objc message: -[%rdi _setOverride:setter:]
000000000000923f	pushq	%rbp
0000000000009240	movq	%rsp, %rbp
0000000000009243	movq	0x2b49e(%rip), %rsi     ## Objc selector ref: _setOverride:setter:
000000000000924a	movq	0x1fe2f(%rip), %rcx     ## literal pool symbol address: _MACaptionAppearancePrefSetVideoOverrideBackgroundOpacity
0000000000009251	popq	%rbp
0000000000009252	jmpq	*0x201a8(%rip)          ## Objc message: -[%rdi _setOverride:setter:]
0000000000009258	pushq	%rbp
0000000000009259	movq	%rsp, %rbp
000000000000925c	movq	0x2b485(%rip), %rsi     ## Objc selector ref: _setOverride:setter:
0000000000009263	movq	0x1fe3e(%rip), %rcx     ## literal pool symbol address: _MACaptionAppearancePrefSetVideoOverrideWindowColor
000000000000926a	popq	%rbp
000000000000926b	jmpq	*0x2018f(%rip)          ## Objc message: -[%rdi _setOverride:setter:]
0000000000009271	pushq	%rbp
0000000000009272	movq	%rsp, %rbp
0000000000009275	movq	0x2b46c(%rip), %rsi     ## Objc selector ref: _setOverride:setter:
000000000000927c	movq	0x1fe2d(%rip), %rcx     ## literal pool symbol address: _MACaptionAppearancePrefSetVideoOverrideWindowOpacity
0000000000009283	popq	%rbp
0000000000009284	jmpq	*0x20176(%rip)          ## Objc message: -[%rdi _setOverride:setter:]
000000000000928a	pushq	%rbp
000000000000928b	movq	%rsp, %rbp
000000000000928e	movq	0x2b453(%rip), %rsi     ## Objc selector ref: _setOverride:setter:
0000000000009295	movq	0x1fdf4(%rip), %rcx     ## literal pool symbol address: _MACaptionAppearancePrefSetVideoOverrideForegroundOpacity
000000000000929c	popq	%rbp
000000000000929d	jmpq	*0x2015d(%rip)          ## Objc message: -[%rdi _setOverride:setter:]
00000000000092a3	pushq	%rbp
00000000000092a4	movq	%rsp, %rbp
00000000000092a7	movq	0x2b43a(%rip), %rsi     ## Objc selector ref: _setOverride:setter:
00000000000092ae	movq	0x1fdeb(%rip), %rcx     ## literal pool symbol address: _MACaptionAppearancePrefSetVideoOverrideTextEdgeStyle
00000000000092b5	popq	%rbp
00000000000092b6	jmpq	*0x20144(%rip)          ## Objc message: -[%rdi _setOverride:setter:]
00000000000092bc	pushq	%rbp
00000000000092bd	movq	%rsp, %rbp
00000000000092c0	movq	0x2b429(%rip), %rsi     ## Objc selector ref: _setFontOverride:fontStyle:
00000000000092c7	xorl	%ecx, %ecx
00000000000092c9	popq	%rbp
00000000000092ca	jmpq	*0x20130(%rip)          ## Objc message: -[%rdi _setFontOverride:fontStyle:]
00000000000092d0	pushq	%rbp
00000000000092d1	movq	%rsp, %rbp
00000000000092d4	movq	0x2b415(%rip), %rsi     ## Objc selector ref: _setFontOverride:fontStyle:
00000000000092db	movl	$0x1, %ecx
00000000000092e0	popq	%rbp
00000000000092e1	jmpq	*0x20119(%rip)          ## Objc message: -[%rdi _setFontOverride:fontStyle:]
00000000000092e7	pushq	%rbp
00000000000092e8	movq	%rsp, %rbp
00000000000092eb	movq	0x2b3fe(%rip), %rsi     ## Objc selector ref: _setFontOverride:fontStyle:
00000000000092f2	movl	$0x2, %ecx
00000000000092f7	popq	%rbp
00000000000092f8	jmpq	*0x20102(%rip)          ## Objc message: -[%rdi _setFontOverride:fontStyle:]
00000000000092fe	pushq	%rbp
00000000000092ff	movq	%rsp, %rbp
0000000000009302	movq	0x2b3e7(%rip), %rsi     ## Objc selector ref: _setFontOverride:fontStyle:
0000000000009309	movl	$0x3, %ecx
000000000000930e	popq	%rbp
000000000000930f	jmpq	*0x200eb(%rip)          ## Objc message: -[%rdi _setFontOverride:fontStyle:]
0000000000009315	pushq	%rbp
0000000000009316	movq	%rsp, %rbp
0000000000009319	movq	0x2b3d0(%rip), %rsi     ## Objc selector ref: _setFontOverride:fontStyle:
0000000000009320	movl	$0x4, %ecx
0000000000009325	popq	%rbp
0000000000009326	jmpq	*0x200d4(%rip)          ## Objc message: -[%rdi _setFontOverride:fontStyle:]
000000000000932c	pushq	%rbp
000000000000932d	movq	%rsp, %rbp
0000000000009330	movq	0x2b3b9(%rip), %rsi     ## Objc selector ref: _setFontOverride:fontStyle:
0000000000009337	movl	$0x5, %ecx
000000000000933c	popq	%rbp
000000000000933d	jmpq	*0x200bd(%rip)          ## Objc message: -[%rdi _setFontOverride:fontStyle:]
0000000000009343	pushq	%rbp
0000000000009344	movq	%rsp, %rbp
0000000000009347	movq	0x2b3a2(%rip), %rsi     ## Objc selector ref: _setFontOverride:fontStyle:
000000000000934e	movl	$0x6, %ecx
0000000000009353	popq	%rbp
0000000000009354	jmpq	*0x200a6(%rip)          ## Objc message: -[%rdi _setFontOverride:fontStyle:]
000000000000935a	pushq	%rbp
000000000000935b	movq	%rsp, %rbp
000000000000935e	movq	0x2b38b(%rip), %rsi     ## Objc selector ref: _setFontOverride:fontStyle:
0000000000009365	movl	$0x7, %ecx
000000000000936a	popq	%rbp
000000000000936b	jmpq	*0x2008f(%rip)          ## Objc message: -[%rdi _setFontOverride:fontStyle:]
0000000000009371	nop
0000000000009372	nop
0000000000009373	nop
0000000000009374	pushq	%rbp
0000000000009375	movq	%rsp, %rbp
0000000000009378	movq	0x2c169(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_NSArray
000000000000937f	movq	0x2ad3a(%rip), %rsi     ## Objc selector ref: class
0000000000009386	popq	%rbp
0000000000009387	jmpq	*0x20073(%rip)          ## Objc message: +[NSArray class]
000000000000938d	pushq	%rbp
000000000000938e	movq	%rsp, %rbp
0000000000009391	xorl	%eax, %eax
0000000000009393	popq	%rbp
0000000000009394	retq
0000000000009395	pushq	%rbp
0000000000009396	movq	%rsp, %rbp
0000000000009399	pushq	%r15
000000000000939b	pushq	%r14
000000000000939d	pushq	%r13
000000000000939f	pushq	%r12
00000000000093a1	pushq	%rbx
00000000000093a2	pushq	%rax
00000000000093a3	movq	%rdx, %rbx
00000000000093a6	movq	0x2c1b3(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_NSNumber
00000000000093ad	movq	0x2ad0c(%rip), %rsi     ## Objc selector ref: class
00000000000093b4	movq	0x20045(%rip), %r15     ## Objc message: +[NSNumber class]
00000000000093bb	callq	*%r15
00000000000093be	movq	0x2ad33(%rip), %rsi     ## Objc selector ref: isKindOfClass:
00000000000093c5	movq	%rbx, %rdi
00000000000093c8	movq	%rax, %rdx
00000000000093cb	callq	*%r15
00000000000093ce	xorl	%r14d, %r14d
00000000000093d1	testb	%al, %al
00000000000093d3	je	0x9438
00000000000093d5	movq	0x2c17c(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_NSMutableArray
00000000000093dc	movq	0x2b31d(%rip), %rsi     ## Objc selector ref: array
00000000000093e3	callq	*%r15
00000000000093e6	movq	%rax, %r14
00000000000093e9	movq	0x2ade0(%rip), %rsi     ## Objc selector ref: unsignedIntegerValue
00000000000093f0	movq	%rbx, %rdi
00000000000093f3	callq	*%r15
00000000000093f6	movq	%rax, %rbx
00000000000093f9	testq	%rbx, %rbx
00000000000093fc	je	0x9438
00000000000093fe	xorl	%r12d, %r12d
0000000000009401	movq	0x2af78(%rip), %r13     ## Objc selector ref: addObject:
0000000000009408	testb	$0x1, %bl
000000000000940b	je	0x942d
000000000000940d	movq	0x2c14c(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_NSNumber
0000000000009414	movq	0x2af85(%rip), %rsi     ## Objc selector ref: numberWithInt:
000000000000941b	movl	%r12d, %edx
000000000000941e	callq	*%r15
0000000000009421	movq	%r14, %rdi
0000000000009424	movq	%r13, %rsi
0000000000009427	movq	%rax, %rdx
000000000000942a	callq	*%r15
000000000000942d	shrq	%rbx
0000000000009430	incl	%r12d
0000000000009433	testq	%rbx, %rbx
0000000000009436	jne	0x9408
0000000000009438	movq	%r14, %rax
000000000000943b	addq	$0x8, %rsp
000000000000943f	popq	%rbx
0000000000009440	popq	%r12
0000000000009442	popq	%r13
0000000000009444	popq	%r14
0000000000009446	popq	%r15
0000000000009448	popq	%rbp
0000000000009449	retq
000000000000944a	pushq	%rbp
000000000000944b	movq	%rsp, %rbp
000000000000944e	movq	0x2c0c3(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_NSString
0000000000009455	movq	0x2ac64(%rip), %rsi     ## Objc selector ref: class
000000000000945c	popq	%rbp
000000000000945d	jmpq	*0x1ff9d(%rip)          ## Objc message: +[NSString class]
0000000000009463	pushq	%rbp
0000000000009464	movq	%rsp, %rbp
0000000000009467	movl	$0x1, %eax
000000000000946c	popq	%rbp
000000000000946d	retq
000000000000946e	pushq	%rbp
000000000000946f	movq	%rsp, %rbp
0000000000009472	pushq	%r14
0000000000009474	pushq	%rbx
0000000000009475	movq	%rdx, %rbx
0000000000009478	movq	0x2c0e1(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_NSNumber
000000000000947f	movq	0x2ac3a(%rip), %rsi     ## Objc selector ref: class
0000000000009486	movq	0x1ff73(%rip), %r14     ## Objc message: +[NSNumber class]
000000000000948d	callq	*%r14
0000000000009490	movq	0x2ac61(%rip), %rsi     ## Objc selector ref: isKindOfClass:
0000000000009497	movq	%rbx, %rdi
000000000000949a	movq	%rax, %rdx
000000000000949d	callq	*%r14
00000000000094a0	movb	%al, %cl
00000000000094a2	xorl	%eax, %eax
00000000000094a4	testb	%cl, %cl
00000000000094a6	je	0x960a
00000000000094ac	movq	0x2ad1d(%rip), %rsi     ## Objc selector ref: unsignedIntegerValue
00000000000094b3	movq	%rbx, %rdi
00000000000094b6	callq	*0x1ff44(%rip)          ## Objc message: -[%rdi unsignedIntegerValue]
00000000000094bc	movq	%rax, %rcx
00000000000094bf	xorl	%eax, %eax
00000000000094c1	decq	%rcx
00000000000094c4	cmpq	$0x4, %rcx
00000000000094c8	ja	0x960a
00000000000094ce	leaq	0x13b(%rip), %rax
00000000000094d5	movslq	(%rax,%rcx,4), %rcx
00000000000094d9	addq	%rax, %rcx
00000000000094dc	jmpq	*%rcx
00000000000094de	movq	0x2c01b(%rip), %rbx     ## Objc class ref: _OBJC_CLASS_$_NSBundle
00000000000094e5	movq	0x2c01c(%rip), %rdi     ## Objc class ref: UniversalAccessPref
00000000000094ec	movq	0x2abcd(%rip), %rsi     ## Objc selector ref: class
00000000000094f3	callq	*%r14
00000000000094f6	movq	0x2acbb(%rip), %rsi     ## Objc selector ref: bundleForClass:
00000000000094fd	movq	%rbx, %rdi
0000000000009500	movq	%rax, %rdx
0000000000009503	callq	*%r14
0000000000009506	movq	0x2acb3(%rip), %rsi     ## Objc selector ref: localizedStringForKey:value:table:
000000000000950d	leaq	0x211bc(%rip), %rdx     ## Objc cfstring ref: @"switch.action.run.displayName"
0000000000009514	jmp	0x95fa
0000000000009519	movq	0x2bfe0(%rip), %rbx     ## Objc class ref: _OBJC_CLASS_$_NSBundle
0000000000009520	movq	0x2bfe1(%rip), %rdi     ## Objc class ref: UniversalAccessPref
0000000000009527	movq	0x2ab92(%rip), %rsi     ## Objc selector ref: class
000000000000952e	callq	*%r14
0000000000009531	movq	0x2ac80(%rip), %rsi     ## Objc selector ref: bundleForClass:
0000000000009538	movq	%rbx, %rdi
000000000000953b	movq	%rax, %rdx
000000000000953e	callq	*%r14
0000000000009541	movq	0x2ac78(%rip), %rsi     ## Objc selector ref: localizedStringForKey:value:table:
0000000000009548	leaq	0x211a1(%rip), %rdx     ## Objc cfstring ref: @"switch.action.select.displayName"
000000000000954f	jmp	0x95fa
0000000000009554	movq	0x2bfa5(%rip), %rbx     ## Objc class ref: _OBJC_CLASS_$_NSBundle
000000000000955b	movq	0x2bfa6(%rip), %rdi     ## Objc class ref: UniversalAccessPref
0000000000009562	movq	0x2ab57(%rip), %rsi     ## Objc selector ref: class
0000000000009569	callq	*%r14
000000000000956c	movq	0x2ac45(%rip), %rsi     ## Objc selector ref: bundleForClass:
0000000000009573	movq	%rbx, %rdi
0000000000009576	movq	%rax, %rdx
0000000000009579	callq	*%r14
000000000000957c	movq	0x2ac3d(%rip), %rsi     ## Objc selector ref: localizedStringForKey:value:table:
0000000000009583	leaq	0x21186(%rip), %rdx     ## Objc cfstring ref: @"switch.action.step.displayName"
000000000000958a	jmp	0x95fa
000000000000958c	movq	0x2bf6d(%rip), %rbx     ## Objc class ref: _OBJC_CLASS_$_NSBundle
0000000000009593	movq	0x2bf6e(%rip), %rdi     ## Objc class ref: UniversalAccessPref
000000000000959a	movq	0x2ab1f(%rip), %rsi     ## Objc selector ref: class
00000000000095a1	callq	*%r14
00000000000095a4	movq	0x2ac0d(%rip), %rsi     ## Objc selector ref: bundleForClass:
00000000000095ab	movq	%rbx, %rdi
00000000000095ae	movq	%rax, %rdx
00000000000095b1	callq	*%r14
00000000000095b4	movq	0x2ac05(%rip), %rsi     ## Objc selector ref: localizedStringForKey:value:table:
00000000000095bb	leaq	0x2116e(%rip), %rdx     ## Objc cfstring ref: @"switch.action.stop.displayName"
00000000000095c2	jmp	0x95fa
00000000000095c4	movq	0x2bf35(%rip), %rbx     ## Objc class ref: _OBJC_CLASS_$_NSBundle
00000000000095cb	movq	0x2bf36(%rip), %rdi     ## Objc class ref: UniversalAccessPref
00000000000095d2	movq	0x2aae7(%rip), %rsi     ## Objc selector ref: class
00000000000095d9	callq	*%r14
00000000000095dc	movq	0x2abd5(%rip), %rsi     ## Objc selector ref: bundleForClass:
00000000000095e3	movq	%rbx, %rdi
00000000000095e6	movq	%rax, %rdx
00000000000095e9	callq	*%r14
00000000000095ec	movq	0x2abcd(%rip), %rsi     ## Objc selector ref: localizedStringForKey:value:table:
00000000000095f3	leaq	0x21156(%rip), %rdx     ## Objc cfstring ref: @"switch.action.custom.displayName.elipsis"
00000000000095fa	leaq	0x20b0f(%rip), %rcx     ## Objc cfstring ref: @""
0000000000009601	xorl	%r8d, %r8d
0000000000009604	movq	%rax, %rdi
0000000000009607	callq	*%r14
000000000000960a	popq	%rbx
000000000000960b	popq	%r14
000000000000960d	popq	%rbp
000000000000960e	retq
000000000000960f	nop
0000000000009610	into
0000000000009611	.byte 0xfe #bad opcode
0000000000009612	.byte 0xff #bad opcode
0000000000009613	decl	(%rcx)
0000000000009615	.byte 0xff #bad opcode
0000000000009616	.byte 0xff #bad opcode
0000000000009617	incl	-0x1(%rdi,%rdi,8)
000000000000961b	.byte 0xff #bad opcode
000000000000961c	jl	0x961d
000000000000961e	.byte 0xff #bad opcode
000000000000961f	pushq	0x4855ffff(%rdi,%rdi,8)
0000000000009626	movl	%esp, %ebp
0000000000009628	pushq	%r15
000000000000962a	pushq	%r14
000000000000962c	pushq	%rbx
000000000000962d	pushq	%rax
000000000000962e	movq	%rdx, %r14
0000000000009631	movq	0x2bee0(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_NSString
0000000000009638	movq	0x2aa81(%rip), %rsi     ## Objc selector ref: class
000000000000963f	movq	0x1fdba(%rip), %r15     ## Objc message: +[NSString class]
0000000000009646	callq	*%r15
0000000000009649	movq	0x2aaa8(%rip), %rsi     ## Objc selector ref: isKindOfClass:
0000000000009650	movq	%r14, %rdi
0000000000009653	movq	%rax, %rdx
0000000000009656	callq	*%r15
0000000000009659	xorl	%ebx, %ebx
000000000000965b	testb	%al, %al
000000000000965d	je	0x98a0
0000000000009663	movq	0x2be96(%rip), %rbx     ## Objc class ref: _OBJC_CLASS_$_NSBundle
000000000000966a	movq	0x2be97(%rip), %rdi     ## Objc class ref: UniversalAccessPref
0000000000009671	movq	0x2aa48(%rip), %rsi     ## Objc selector ref: class
0000000000009678	callq	*%r15
000000000000967b	movq	0x2ab36(%rip), %rsi     ## Objc selector ref: bundleForClass:
0000000000009682	movq	%rbx, %rdi
0000000000009685	movq	%rax, %rdx
0000000000009688	callq	*%r15
000000000000968b	movq	0x2ab2e(%rip), %rsi     ## Objc selector ref: localizedStringForKey:value:table:
0000000000009692	leaq	0x21037(%rip), %rdx     ## Objc cfstring ref: @"switch.action.run.displayName"
0000000000009699	leaq	0x20a70(%rip), %rcx     ## Objc cfstring ref: @""
00000000000096a0	xorl	%r8d, %r8d
00000000000096a3	movq	%rax, %rdi
00000000000096a6	callq	*%r15
00000000000096a9	movq	0x2aa40(%rip), %rsi     ## Objc selector ref: isEqualToString:
00000000000096b0	movq	%r14, %rdi
00000000000096b3	movq	%rax, %rdx
00000000000096b6	callq	*%r15
00000000000096b9	testb	%al, %al
00000000000096bb	je	0x96d5
00000000000096bd	movq	0x2be9c(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_NSNumber
00000000000096c4	movq	0x2b03d(%rip), %rsi     ## Objc selector ref: numberWithUnsignedInteger:
00000000000096cb	movl	$0x1, %edx
00000000000096d0	jmp	0x9897
00000000000096d5	movq	0x2be24(%rip), %rbx     ## Objc class ref: _OBJC_CLASS_$_NSBundle
00000000000096dc	movq	0x2be25(%rip), %rdi     ## Objc class ref: UniversalAccessPref
00000000000096e3	movq	0x2a9d6(%rip), %rsi     ## Objc selector ref: class
00000000000096ea	callq	*%r15
00000000000096ed	movq	0x2aac4(%rip), %rsi     ## Objc selector ref: bundleForClass:
00000000000096f4	movq	%rbx, %rdi
00000000000096f7	movq	%rax, %rdx
00000000000096fa	callq	*%r15
00000000000096fd	movq	0x2aabc(%rip), %rsi     ## Objc selector ref: localizedStringForKey:value:table:
0000000000009704	leaq	0x20fe5(%rip), %rdx     ## Objc cfstring ref: @"switch.action.select.displayName"
000000000000970b	leaq	0x209fe(%rip), %rcx     ## Objc cfstring ref: @""
0000000000009712	xorl	%r8d, %r8d
0000000000009715	movq	%rax, %rdi
0000000000009718	callq	*%r15
000000000000971b	movq	0x2a9ce(%rip), %rsi     ## Objc selector ref: isEqualToString:
0000000000009722	movq	%r14, %rdi
0000000000009725	movq	%rax, %rdx
0000000000009728	callq	*%r15
000000000000972b	testb	%al, %al
000000000000972d	je	0x9747
000000000000972f	movq	0x2be2a(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_NSNumber
0000000000009736	movq	0x2afcb(%rip), %rsi     ## Objc selector ref: numberWithUnsignedInteger:
000000000000973d	movl	$0x2, %edx
0000000000009742	jmp	0x9897
0000000000009747	movq	0x2bdb2(%rip), %rbx     ## Objc class ref: _OBJC_CLASS_$_NSBundle
000000000000974e	movq	0x2bdb3(%rip), %rdi     ## Objc class ref: UniversalAccessPref
0000000000009755	movq	0x2a964(%rip), %rsi     ## Objc selector ref: class
000000000000975c	callq	*%r15
000000000000975f	movq	0x2aa52(%rip), %rsi     ## Objc selector ref: bundleForClass:
0000000000009766	movq	%rbx, %rdi
0000000000009769	movq	%rax, %rdx
000000000000976c	callq	*%r15
000000000000976f	movq	0x2aa4a(%rip), %rsi     ## Objc selector ref: localizedStringForKey:value:table:
0000000000009776	leaq	0x20f93(%rip), %rdx     ## Objc cfstring ref: @"switch.action.step.displayName"
000000000000977d	leaq	0x2098c(%rip), %rcx     ## Objc cfstring ref: @""
0000000000009784	xorl	%r8d, %r8d
0000000000009787	movq	%rax, %rdi
000000000000978a	callq	*%r15
000000000000978d	movq	0x2a95c(%rip), %rsi     ## Objc selector ref: isEqualToString:
0000000000009794	movq	%r14, %rdi
0000000000009797	movq	%rax, %rdx
000000000000979a	callq	*%r15
000000000000979d	testb	%al, %al
000000000000979f	je	0x97b9
00000000000097a1	movq	0x2bdb8(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_NSNumber
00000000000097a8	movq	0x2af59(%rip), %rsi     ## Objc selector ref: numberWithUnsignedInteger:
00000000000097af	movl	$0x3, %edx
00000000000097b4	jmp	0x9897
00000000000097b9	movq	0x2bd40(%rip), %rbx     ## Objc class ref: _OBJC_CLASS_$_NSBundle
00000000000097c0	movq	0x2bd41(%rip), %rdi     ## Objc class ref: UniversalAccessPref
00000000000097c7	movq	0x2a8f2(%rip), %rsi     ## Objc selector ref: class
00000000000097ce	callq	*%r15
00000000000097d1	movq	0x2a9e0(%rip), %rsi     ## Objc selector ref: bundleForClass:
00000000000097d8	movq	%rbx, %rdi
00000000000097db	movq	%rax, %rdx
00000000000097de	callq	*%r15
00000000000097e1	movq	0x2a9d8(%rip), %rsi     ## Objc selector ref: localizedStringForKey:value:table:
00000000000097e8	leaq	0x20f41(%rip), %rdx     ## Objc cfstring ref: @"switch.action.stop.displayName"
00000000000097ef	leaq	0x2091a(%rip), %rcx     ## Objc cfstring ref: @""
00000000000097f6	xorl	%r8d, %r8d
00000000000097f9	movq	%rax, %rdi
00000000000097fc	callq	*%r15
00000000000097ff	movq	0x2a8ea(%rip), %rsi     ## Objc selector ref: isEqualToString:
0000000000009806	movq	%r14, %rdi
0000000000009809	movq	%rax, %rdx
000000000000980c	callq	*%r15
000000000000980f	testb	%al, %al
0000000000009811	je	0x9828
0000000000009813	movq	0x2bd46(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_NSNumber
000000000000981a	movq	0x2aee7(%rip), %rsi     ## Objc selector ref: numberWithUnsignedInteger:
0000000000009821	movl	$0x4, %edx
0000000000009826	jmp	0x9897
0000000000009828	movq	0x2bcd1(%rip), %rbx     ## Objc class ref: _OBJC_CLASS_$_NSBundle
000000000000982f	movq	0x2bcd2(%rip), %rdi     ## Objc class ref: UniversalAccessPref
0000000000009836	movq	0x2a883(%rip), %rsi     ## Objc selector ref: class
000000000000983d	callq	*%r15
0000000000009840	movq	0x2a971(%rip), %rsi     ## Objc selector ref: bundleForClass:
0000000000009847	movq	%rbx, %rdi
000000000000984a	movq	%rax, %rdx
000000000000984d	callq	*%r15
0000000000009850	movq	0x2a969(%rip), %rsi     ## Objc selector ref: localizedStringForKey:value:table:
0000000000009857	leaq	0x20ef2(%rip), %rdx     ## Objc cfstring ref: @"switch.action.custom.displayName.elipsis"
000000000000985e	leaq	0x208ab(%rip), %rcx     ## Objc cfstring ref: @""
0000000000009865	xorl	%ebx, %ebx
0000000000009867	xorl	%r8d, %r8d
000000000000986a	movq	%rax, %rdi
000000000000986d	callq	*%r15
0000000000009870	movq	0x2a879(%rip), %rsi     ## Objc selector ref: isEqualToString:
0000000000009877	movq	%r14, %rdi
000000000000987a	movq	%rax, %rdx
000000000000987d	callq	*%r15
0000000000009880	testb	%al, %al
0000000000009882	je	0x98a0
0000000000009884	movq	0x2bcd5(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_NSNumber
000000000000988b	movq	0x2ae76(%rip), %rsi     ## Objc selector ref: numberWithUnsignedInteger:
0000000000009892	movl	$0x5, %edx
0000000000009897	callq	*0x1fb63(%rip)          ## Objc message: +[NSNumber numberWithUnsignedInteger:]
000000000000989d	movq	%rax, %rbx
00000000000098a0	movq	%rbx, %rax
00000000000098a3	addq	$0x8, %rsp
00000000000098a7	popq	%rbx
00000000000098a8	popq	%r14
00000000000098aa	popq	%r15
00000000000098ac	popq	%rbp
00000000000098ad	retq
00000000000098ae	pushq	%rbp
00000000000098af	movq	%rsp, %rbp
00000000000098b2	movq	0x2bc5f(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_NSString
00000000000098b9	movq	0x2a800(%rip), %rsi     ## Objc selector ref: class
00000000000098c0	popq	%rbp
00000000000098c1	jmpq	*0x1fb39(%rip)          ## Objc message: +[NSString class]
00000000000098c7	pushq	%rbp
00000000000098c8	movq	%rsp, %rbp
00000000000098cb	xorl	%eax, %eax
00000000000098cd	popq	%rbp
00000000000098ce	retq
00000000000098cf	pushq	%rbp
00000000000098d0	movq	%rsp, %rbp
00000000000098d3	pushq	%r14
00000000000098d5	pushq	%rbx
00000000000098d6	movq	%rdx, %rbx
00000000000098d9	movq	0x2bc80(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_NSNumber
00000000000098e0	movq	0x2a7d9(%rip), %rsi     ## Objc selector ref: class
00000000000098e7	movq	0x1fb12(%rip), %r14     ## Objc message: +[NSNumber class]
00000000000098ee	callq	*%r14
00000000000098f1	movq	0x2a800(%rip), %rsi     ## Objc selector ref: isKindOfClass:
00000000000098f8	movq	%rbx, %rdi
00000000000098fb	movq	%rax, %rdx
00000000000098fe	callq	*%r14
0000000000009901	movb	%al, %cl
0000000000009903	xorl	%eax, %eax
0000000000009905	testb	%cl, %cl
0000000000009907	je	0x99b4
000000000000990d	movq	0x2a8bc(%rip), %rsi     ## Objc selector ref: unsignedIntegerValue
0000000000009914	movq	%rbx, %rdi
0000000000009917	callq	*0x1fae3(%rip)          ## Objc message: -[%rdi unsignedIntegerValue]
000000000000991d	decq	%rax
0000000000009920	cmpq	$0x5, %rax
0000000000009924	ja	0x996e
0000000000009926	leaq	0x177(%rip), %rcx
000000000000992d	movslq	(%rcx,%rax,4), %rax
0000000000009931	addq	%rcx, %rax
0000000000009934	jmpq	*%rax
0000000000009936	movq	0x2bbc3(%rip), %rbx     ## Objc class ref: _OBJC_CLASS_$_NSBundle
000000000000993d	movq	0x2bbc4(%rip), %rdi     ## Objc class ref: UniversalAccessPref
0000000000009944	movq	0x2a775(%rip), %rsi     ## Objc selector ref: class
000000000000994b	callq	*%r14
000000000000994e	movq	0x2a863(%rip), %rsi     ## Objc selector ref: bundleForClass:
0000000000009955	movq	%rbx, %rdi
0000000000009958	movq	%rax, %rdx
000000000000995b	callq	*%r14
000000000000995e	movq	0x2a85b(%rip), %rsi     ## Objc selector ref: localizedStringForKey:value:table:
0000000000009965	leaq	0x20e04(%rip), %rdx     ## Objc cfstring ref: @"switch.triggerType.keyboard.displayName"
000000000000996c	jmp	0x99a4
000000000000996e	movq	0x2bb8b(%rip), %rbx     ## Objc class ref: _OBJC_CLASS_$_NSBundle
0000000000009975	movq	0x2bb8c(%rip), %rdi     ## Objc class ref: UniversalAccessPref
000000000000997c	movq	0x2a73d(%rip), %rsi     ## Objc selector ref: class
0000000000009983	callq	*%r14
0000000000009986	movq	0x2a82b(%rip), %rsi     ## Objc selector ref: bundleForClass:
000000000000998d	movq	%rbx, %rdi
0000000000009990	movq	%rax, %rdx
0000000000009993	callq	*%r14
0000000000009996	movq	0x2a823(%rip), %rsi     ## Objc selector ref: localizedStringForKey:value:table:
000000000000999d	leaq	0x20e6c(%rip), %rdx     ## Objc cfstring ref: @"switch.triggerType.generic.displayName"
00000000000099a4	leaq	0x20765(%rip), %rcx     ## Objc cfstring ref: @""
00000000000099ab	xorl	%r8d, %r8d
00000000000099ae	movq	%rax, %rdi
00000000000099b1	callq	*%r14
00000000000099b4	popq	%rbx
00000000000099b5	popq	%r14
00000000000099b7	popq	%rbp
00000000000099b8	retq
00000000000099b9	movq	0x2bb40(%rip), %rbx     ## Objc class ref: _OBJC_CLASS_$_NSBundle
00000000000099c0	movq	0x2bb41(%rip), %rdi     ## Objc class ref: UniversalAccessPref
00000000000099c7	movq	0x2a6f2(%rip), %rsi     ## Objc selector ref: class
00000000000099ce	callq	*%r14
00000000000099d1	movq	0x2a7e0(%rip), %rsi     ## Objc selector ref: bundleForClass:
00000000000099d8	movq	%rbx, %rdi
00000000000099db	movq	%rax, %rdx
00000000000099de	callq	*%r14
00000000000099e1	movq	0x2a7d8(%rip), %rsi     ## Objc selector ref: localizedStringForKey:value:table:
00000000000099e8	leaq	0x20dc1(%rip), %rdx     ## Objc cfstring ref: @"switch.triggerType.combo.displayName"
00000000000099ef	jmp	0x99a4
00000000000099f1	movq	0x2bb08(%rip), %rbx     ## Objc class ref: _OBJC_CLASS_$_NSBundle
00000000000099f8	movq	0x2bb09(%rip), %rdi     ## Objc class ref: UniversalAccessPref
00000000000099ff	movq	0x2a6ba(%rip), %rsi     ## Objc selector ref: class
0000000000009a06	callq	*%r14
0000000000009a09	movq	0x2a7a8(%rip), %rsi     ## Objc selector ref: bundleForClass:
0000000000009a10	movq	%rbx, %rdi
0000000000009a13	movq	%rax, %rdx
0000000000009a16	callq	*%r14
0000000000009a19	movq	0x2a7a0(%rip), %rsi     ## Objc selector ref: localizedStringForKey:value:table:
0000000000009a20	leaq	0x20d69(%rip), %rdx     ## Objc cfstring ref: @"switch.triggerType.mouse.displayName"
0000000000009a27	jmp	0x99a4
0000000000009a2c	movq	0x2bacd(%rip), %rbx     ## Objc class ref: _OBJC_CLASS_$_NSBundle
0000000000009a33	movq	0x2bace(%rip), %rdi     ## Objc class ref: UniversalAccessPref
0000000000009a3a	movq	0x2a67f(%rip), %rsi     ## Objc selector ref: class
0000000000009a41	callq	*%r14
0000000000009a44	movq	0x2a76d(%rip), %rsi     ## Objc selector ref: bundleForClass:
0000000000009a4b	movq	%rbx, %rdi
0000000000009a4e	movq	%rax, %rdx
0000000000009a51	callq	*%r14
0000000000009a54	movq	0x2a765(%rip), %rsi     ## Objc selector ref: localizedStringForKey:value:table:
0000000000009a5b	leaq	0x20d6e(%rip), %rdx     ## Objc cfstring ref: @"switch.triggerType.audio.displayName"
0000000000009a62	jmp	0x99a4
0000000000009a67	movq	0x2ba92(%rip), %rbx     ## Objc class ref: _OBJC_CLASS_$_NSBundle
0000000000009a6e	movq	0x2ba93(%rip), %rdi     ## Objc class ref: UniversalAccessPref
0000000000009a75	movq	0x2a644(%rip), %rsi     ## Objc selector ref: class
0000000000009a7c	callq	*%r14
0000000000009a7f	movq	0x2a732(%rip), %rsi     ## Objc selector ref: bundleForClass:
0000000000009a86	movq	%rbx, %rdi
0000000000009a89	movq	%rax, %rdx
0000000000009a8c	callq	*%r14
0000000000009a8f	movq	0x2a72a(%rip), %rsi     ## Objc selector ref: localizedStringForKey:value:table:
0000000000009a96	leaq	0x20d53(%rip), %rdx     ## Objc cfstring ref: @"switch.triggerType.app.displayName"
0000000000009a9d	jmp	0x99a4
0000000000009aa2	nop
0000000000009aa4	xchgl	%edx, %eax
0000000000009aa5	.byte 0xfe #bad opcode
0000000000009aa6	.byte 0xff #bad opcode
0000000000009aa7	callq	*0x4dffffff(%rip)
0000000000009aad	.byte 0xff #bad opcode
0000000000009aae	.byte 0xff #bad opcode
0000000000009aaf	decl	%edx
0000000000009ab1	.byte 0xfe #bad opcode
0000000000009ab2	.byte 0xff #bad opcode
0000000000009ab3	decl	-0x3c000001(%rax)
0000000000009ab9	.byte 0xff #bad opcode
0000000000009aba	.byte 0xff #bad opcode
0000000000009abb	callq	*0x48(%rbp)
0000000000009abe	movl	%esp, %ebp
0000000000009ac0	movq	0x2ba51(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_NSString
0000000000009ac7	movq	0x2a5f2(%rip), %rsi     ## Objc selector ref: class
0000000000009ace	popq	%rbp
0000000000009acf	jmpq	*0x1f92b(%rip)          ## Objc message: +[NSString class]
0000000000009ad5	pushq	%rbp
0000000000009ad6	movq	%rsp, %rbp
0000000000009ad9	xorl	%eax, %eax
0000000000009adb	popq	%rbp
0000000000009adc	retq
0000000000009add	pushq	%rbp
0000000000009ade	movq	%rsp, %rbp
0000000000009ae1	pushq	%r15
0000000000009ae3	pushq	%r14
0000000000009ae5	pushq	%rbx
0000000000009ae6	pushq	%rax
0000000000009ae7	movq	%rdx, %rbx
0000000000009aea	movq	0x2ba6f(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_NSNumber
0000000000009af1	movq	0x2a5c8(%rip), %rsi     ## Objc selector ref: class
0000000000009af8	movq	0x1f901(%rip), %r15     ## Objc message: +[NSNumber class]
0000000000009aff	callq	*%r15
0000000000009b02	movq	0x2a5ef(%rip), %rsi     ## Objc selector ref: isKindOfClass:
0000000000009b09	movq	%rbx, %rdi
0000000000009b0c	movq	%rax, %rdx
0000000000009b0f	callq	*%r15
0000000000009b12	movb	%al, %cl
0000000000009b14	xorl	%eax, %eax
0000000000009b16	testb	%cl, %cl
0000000000009b18	je	0x9c02
0000000000009b1e	movq	0x2a6ab(%rip), %rsi     ## Objc selector ref: unsignedIntegerValue
0000000000009b25	movq	%rbx, %rdi
0000000000009b28	callq	*0x1f8d2(%rip)          ## Objc message: -[%rdi unsignedIntegerValue]
0000000000009b2e	movq	%rax, %rcx
0000000000009b31	xorl	%eax, %eax
0000000000009b33	cmpq	$0x3, %rcx
0000000000009b37	je	0x9b95
0000000000009b39	cmpq	$0x2, %rcx
0000000000009b3d	je	0x9b49
0000000000009b3f	cmpq	$0x1, %rcx
0000000000009b43	jne	0x9c02
0000000000009b49	movq	0x2ba40(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_NSImage
0000000000009b50	movq	0x2a611(%rip), %rsi     ## Objc selector ref: alloc
0000000000009b57	callq	*%r15
0000000000009b5a	movq	%rax, %r14
0000000000009b5d	movq	0x2b99c(%rip), %rbx     ## Objc class ref: _OBJC_CLASS_$_NSBundle
0000000000009b64	movq	0x2b99d(%rip), %rdi     ## Objc class ref: UniversalAccessPref
0000000000009b6b	movq	0x2a54e(%rip), %rsi     ## Objc selector ref: class
0000000000009b72	callq	*%r15
0000000000009b75	movq	0x2a63c(%rip), %rsi     ## Objc selector ref: bundleForClass:
0000000000009b7c	movq	%rbx, %rdi
0000000000009b7f	movq	%rax, %rdx
0000000000009b82	callq	*%r15
0000000000009b85	movq	0x2ab84(%rip), %rsi     ## Objc selector ref: pathForImageResource:
0000000000009b8c	leaq	0x20c9d(%rip), %rdx     ## Objc cfstring ref: @"Keyboard"
0000000000009b93	jmp	0x9bdf
0000000000009b95	movq	0x2b9f4(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_NSImage
0000000000009b9c	movq	0x2a5c5(%rip), %rsi     ## Objc selector ref: alloc
0000000000009ba3	callq	*%r15
0000000000009ba6	movq	%rax, %r14
0000000000009ba9	movq	0x2b950(%rip), %rbx     ## Objc class ref: _OBJC_CLASS_$_NSBundle
0000000000009bb0	movq	0x2b951(%rip), %rdi     ## Objc class ref: UniversalAccessPref
0000000000009bb7	movq	0x2a502(%rip), %rsi     ## Objc selector ref: class
0000000000009bbe	callq	*%r15
0000000000009bc1	movq	0x2a5f0(%rip), %rsi     ## Objc selector ref: bundleForClass:
0000000000009bc8	movq	%rbx, %rdi
0000000000009bcb	movq	%rax, %rdx
0000000000009bce	callq	*%r15
0000000000009bd1	movq	0x2ab38(%rip), %rsi     ## Objc selector ref: pathForImageResource:
0000000000009bd8	leaq	0x20c71(%rip), %rdx     ## Objc cfstring ref: @"MouseTrackpad"
0000000000009bdf	movq	%rax, %rdi
0000000000009be2	callq	*%r15
0000000000009be5	movq	0x2ab2c(%rip), %rsi     ## Objc selector ref: initWithContentsOfFile:
0000000000009bec	movq	%r14, %rdi
0000000000009bef	movq	%rax, %rdx
0000000000009bf2	callq	*%r15
0000000000009bf5	movq	0x2a50c(%rip), %rsi     ## Objc selector ref: autorelease
0000000000009bfc	movq	%rax, %rdi
0000000000009bff	callq	*%r15
0000000000009c02	addq	$0x8, %rsp
0000000000009c06	popq	%rbx
0000000000009c07	popq	%r14
0000000000009c09	popq	%r15
0000000000009c0b	popq	%rbp
0000000000009c0c	retq
0000000000009c0d	pushq	%rbp
0000000000009c0e	movq	%rsp, %rbp
0000000000009c11	pushq	%r15
0000000000009c13	pushq	%r14
0000000000009c15	pushq	%rbx
0000000000009c16	subq	$0x18, %rsp
0000000000009c1a	movq	%rdi, %r14
0000000000009c1d	movq	0x2b8dc(%rip), %rbx     ## Objc class ref: _OBJC_CLASS_$_NSBundle
0000000000009c24	movq	0x2b8dd(%rip), %rdi     ## Objc class ref: UniversalAccessPref
0000000000009c2b	movq	0x2a48e(%rip), %rsi     ## Objc selector ref: class
0000000000009c32	movq	0x1f7c7(%rip), %r15     ## Objc message: +[UniversalAccessPref class]
0000000000009c39	callq	*%r15
0000000000009c3c	movq	0x2a575(%rip), %rsi     ## Objc selector ref: bundleForClass:
0000000000009c43	movq	%rbx, %rdi
0000000000009c46	movq	%rax, %rdx
0000000000009c49	callq	*%r15
0000000000009c4c	movq	%r14, -0x28(%rbp)
0000000000009c50	movq	0x2bad9(%rip), %rcx     ## Objc class ref: UAPAudioViewController
0000000000009c57	movq	%rcx, -0x20(%rbp)
0000000000009c5b	movq	0x2a5e6(%rip), %rsi     ## Objc selector ref: initWithNibName:bundle:
0000000000009c62	leaq	0x20c07(%rip), %rdx     ## Objc cfstring ref: @"Audio"
0000000000009c69	leaq	-0x28(%rbp), %rdi
0000000000009c6d	movq	%rax, %rcx
0000000000009c70	callq	0x1e88c                 ## Objc message: -[[%rdi super] initWithNibName:bundle:]
0000000000009c75	movq	%rax, %rbx
0000000000009c78	movq	0x1f4f9(%rip), %rax     ## literal pool symbol address: _UADomainSoundSettingsDidChangeNotification
0000000000009c7f	movq	(%rax), %rdi
0000000000009c82	leaq	_OBJC_IVAR_$_UAPOptionsViewController._notificationOfInterest(%rip), %rax
0000000000009c89	movq	(%rax), %rdx
0000000000009c8c	movq	%rbx, %rsi
0000000000009c8f	callq	0x1e868                 ## symbol stub for: _objc_assign_ivar
0000000000009c94	movq	%rbx, %rax
0000000000009c97	addq	$0x18, %rsp
0000000000009c9b	popq	%rbx
0000000000009c9c	popq	%r14
0000000000009c9e	popq	%r15
0000000000009ca0	popq	%rbp
0000000000009ca1	retq
0000000000009ca2	pushq	%rbp
0000000000009ca3	movq	%rsp, %rbp
0000000000009ca6	pushq	%r14
0000000000009ca8	pushq	%rbx
0000000000009ca9	movq	%rdi, %rbx
0000000000009cac	movq	0x2aa6d(%rip), %rsi     ## Objc selector ref: stopListeningForChanges
0000000000009cb3	movq	0x1f746(%rip), %r14     ## Objc message: -[%rdi stopListeningForChanges]
0000000000009cba	callq	*%r14
0000000000009cbd	movq	_OBJC_IVAR_$_UAPAudioViewController._monoAudioCheckbox(%rip), %rax
0000000000009cc4	movq	(%rbx,%rax), %rdi
0000000000009cc8	movq	0x2a9d9(%rip), %rsi     ## Objc selector ref: state
0000000000009ccf	callq	*%r14
0000000000009cd2	cmpq	$0x1, %rax
0000000000009cd6	sete	%al
0000000000009cd9	movzbl	%al, %edi
0000000000009cdc	callq	0x1e658                 ## symbol stub for: _UAPlayStereoAsMonoSetEnabled
0000000000009ce1	movq	0x2aa40(%rip), %rsi     ## Objc selector ref: startListeningForChanges
0000000000009ce8	movq	%rbx, %rdi
0000000000009ceb	movq	%r14, %rax
0000000000009cee	popq	%rbx
0000000000009cef	popq	%r14
0000000000009cf1	popq	%rbp
0000000000009cf2	jmpq	*%rax
0000000000009cf4	pushq	%rbp
0000000000009cf5	movq	%rsp, %rbp
0000000000009cf8	pushq	%r14
0000000000009cfa	pushq	%rbx
0000000000009cfb	movq	%rdi, %rbx
0000000000009cfe	movq	0x2aa1b(%rip), %rsi     ## Objc selector ref: stopListeningForChanges
0000000000009d05	movq	0x1f6f4(%rip), %r14     ## Objc message: -[%rdi stopListeningForChanges]
0000000000009d0c	callq	*%r14
0000000000009d0f	movq	_OBJC_IVAR_$_UAPAudioViewController._flashScreenCheckbox(%rip), %rax
0000000000009d16	movq	(%rbx,%rax), %rdi
0000000000009d1a	movq	0x2a987(%rip), %rsi     ## Objc selector ref: state
0000000000009d21	callq	*%r14
0000000000009d24	cmpq	$0x1, %rax
0000000000009d28	sete	%al
0000000000009d2b	movzbl	%al, %edi
0000000000009d2e	callq	0x1e5e0                 ## symbol stub for: _UAFlashScreenSetEnabled
0000000000009d33	movq	0x2a9ee(%rip), %rsi     ## Objc selector ref: startListeningForChanges
0000000000009d3a	movq	%rbx, %rdi
0000000000009d3d	movq	%r14, %rax
0000000000009d40	popq	%rbx
0000000000009d41	popq	%r14
0000000000009d43	popq	%rbp
0000000000009d44	jmpq	*%rax
0000000000009d46	pushq	%rbp
0000000000009d47	movq	%rsp, %rbp
0000000000009d4a	popq	%rbp
0000000000009d4b	jmp	0x1e946                 ## symbol stub for: _CGDisplayDefaultVisualBell
0000000000009d50	pushq	%rbp
0000000000009d51	movq	%rsp, %rbp
0000000000009d54	movq	0x2a9d5(%rip), %rsi     ## Objc selector ref: switchToPanel:
0000000000009d5b	leaq	0x20b2e(%rip), %rdx     ## Objc cfstring ref: @"Sound"
0000000000009d62	popq	%rbp
0000000000009d63	jmpq	*0x1f697(%rip)          ## Objc message: -[%rdi switchToPanel:]
0000000000009d69	pushq	%rbp
0000000000009d6a	movq	%rsp, %rbp
0000000000009d6d	pushq	%r15
0000000000009d6f	pushq	%r14
0000000000009d71	pushq	%r12
0000000000009d73	pushq	%rbx
0000000000009d74	subq	$0x10, %rsp
0000000000009d78	movq	%rdi, %rbx
0000000000009d7b	movq	%rbx, -0x30(%rbp)
0000000000009d7f	movq	0x2b9aa(%rip), %rax     ## Objc class ref: UAPAudioViewController
0000000000009d86	movq	%rax, -0x28(%rbp)
0000000000009d8a	movq	0x2a9a7(%rip), %rsi     ## Objc selector ref: readPreferences:
0000000000009d91	leaq	-0x30(%rbp), %rdi
0000000000009d95	callq	0x1e88c                 ## Objc message: -[[%rdi super] readPreferences:]
0000000000009d9a	movq	_OBJC_IVAR_$_UAPAudioViewController._flashScreenCheckbox(%rip), %rax
0000000000009da1	movq	(%rbx,%rax), %r14
0000000000009da5	callq	0x1e5da                 ## symbol stub for: _UAFlashScreenIsEnabled
0000000000009daa	testb	%al, %al
0000000000009dac	setne	%al
0000000000009daf	movzbl	%al, %edx
0000000000009db2	movq	0x2a687(%rip), %rsi     ## Objc selector ref: setState:
0000000000009db9	movq	0x1f640(%rip), %r15     ## Objc message: -[%rdi setState:]
0000000000009dc0	movq	%r14, %rdi
0000000000009dc3	callq	*%r15
0000000000009dc6	movq	_OBJC_IVAR_$_UAPAudioViewController._monoAudioCheckbox(%rip), %r12
0000000000009dcd	movq	(%rbx,%r12), %r14
0000000000009dd1	callq	0x1e64c                 ## symbol stub for: _UAPlayStereoAsMonoIsEnabled
0000000000009dd6	testb	%al, %al
0000000000009dd8	setne	%al
0000000000009ddb	movzbl	%al, %edx
0000000000009dde	movq	0x2a65b(%rip), %rsi     ## Objc selector ref: setState:
0000000000009de5	movq	%r14, %rdi
0000000000009de8	callq	*%r15
0000000000009deb	movq	(%rbx,%r12), %rbx
0000000000009def	callq	0x1e652                 ## symbol stub for: _UAPlayStereoAsMonoIsSupported
0000000000009df4	testb	%al, %al
0000000000009df6	sete	%al
0000000000009df9	movq	0x2a5f8(%rip), %rsi     ## Objc selector ref: setHidden:
0000000000009e00	movzbl	%al, %edx
0000000000009e03	movq	%rbx, %rdi
0000000000009e06	callq	*%r15
0000000000009e09	addq	$0x10, %rsp
0000000000009e0d	popq	%rbx
0000000000009e0e	popq	%r12
0000000000009e10	popq	%r14
0000000000009e12	popq	%r15
0000000000009e14	popq	%rbp
0000000000009e15	retq
0000000000009e16	pushq	%rbp
0000000000009e17	movq	%rsp, %rbp
0000000000009e1a	pushq	%r15
0000000000009e1c	pushq	%r14
0000000000009e1e	pushq	%rbx
0000000000009e1f	subq	$0x18, %rsp
0000000000009e23	movq	%rdi, %rbx
0000000000009e26	movq	_OBJC_IVAR_$_UAPAudioViewController._flashScreenCheckbox(%rip), %rax
0000000000009e2d	movq	(%rbx,%rax), %r14
0000000000009e31	movq	0x1f358(%rip), %rax     ## literal pool symbol address: _UAFlashScreenEnabledKey
0000000000009e38	movq	(%rax), %rdi
0000000000009e3b	callq	0x1e4cc                 ## symbol stub for: _UAPreferenceIsForced
0000000000009e40	testb	%al, %al
0000000000009e42	sete	%al
0000000000009e45	movq	0x2a8f4(%rip), %rsi     ## Objc selector ref: setEnabled:
0000000000009e4c	movzbl	%al, %edx
0000000000009e4f	movq	0x1f5aa(%rip), %r15     ## Objc message: -[%rdi setEnabled:]
0000000000009e56	movq	%r14, %rdi
0000000000009e59	callq	*%r15
0000000000009e5c	movq	_OBJC_IVAR_$_UAPAudioViewController._monoAudioCheckbox(%rip), %rax
0000000000009e63	movq	(%rbx,%rax), %r14
0000000000009e67	movq	0x1f362(%rip), %rax     ## literal pool symbol address: _UAPlayStereoAsMonoKey
0000000000009e6e	movq	(%rax), %rdi
0000000000009e71	callq	0x1e4cc                 ## symbol stub for: _UAPreferenceIsForced
0000000000009e76	testb	%al, %al
0000000000009e78	sete	%al
0000000000009e7b	movq	0x2a8be(%rip), %rsi     ## Objc selector ref: setEnabled:
0000000000009e82	movzbl	%al, %edx
0000000000009e85	movq	%r14, %rdi
0000000000009e88	callq	*%r15
0000000000009e8b	movq	%rbx, -0x28(%rbp)
0000000000009e8f	movq	0x2b89a(%rip), %rax     ## Objc class ref: UAPAudioViewController
0000000000009e96	movq	%rax, -0x20(%rbp)
0000000000009e9a	movq	0x2a8a7(%rip), %rsi     ## Objc selector ref: validateControls
0000000000009ea1	leaq	-0x28(%rbp), %rdi
0000000000009ea5	callq	0x1e88c                 ## Objc message: -[[%rdi super] validateControls]
0000000000009eaa	addq	$0x18, %rsp
0000000000009eae	popq	%rbx
0000000000009eaf	popq	%r14
0000000000009eb1	popq	%r15
0000000000009eb3	popq	%rbp
0000000000009eb4	retq
0000000000009eb5	pushq	%rbp
0000000000009eb6	movq	%rsp, %rbp
0000000000009eb9	pushq	%r15
0000000000009ebb	pushq	%r14
0000000000009ebd	pushq	%r12
0000000000009ebf	pushq	%rbx
0000000000009ec0	subq	$0x20, %rsp
0000000000009ec4	movq	%rdi, %r14
0000000000009ec7	movq	0x2b632(%rip), %rbx     ## Objc class ref: _OBJC_CLASS_$_NSBundle
0000000000009ece	movq	0x2b633(%rip), %rdi     ## Objc class ref: UniversalAccessPref
0000000000009ed5	movq	0x2a1e4(%rip), %rsi     ## Objc selector ref: class
0000000000009edc	movq	0x1f51d(%rip), %r12     ## Objc message: +[UniversalAccessPref class]
0000000000009ee3	callq	*%r12
0000000000009ee6	movq	0x2a2cb(%rip), %rsi     ## Objc selector ref: bundleForClass:
0000000000009eed	movq	%rbx, %rdi
0000000000009ef0	movq	%rax, %rdx
0000000000009ef3	callq	*%r12
0000000000009ef6	movq	%r14, -0x30(%rbp)
0000000000009efa	movq	0x2b837(%rip), %rcx     ## Objc class ref: UAPDisplayViewController
0000000000009f01	movq	%rcx, -0x28(%rbp)
0000000000009f05	movq	0x2a33c(%rip), %rsi     ## Objc selector ref: initWithNibName:bundle:
0000000000009f0c	leaq	0x2099d(%rip), %rdx     ## Objc cfstring ref: @"Display"
0000000000009f13	leaq	-0x30(%rbp), %rdi
0000000000009f17	movq	%rax, %rcx
0000000000009f1a	callq	0x1e88c                 ## Objc message: -[[%rdi super] initWithNibName:bundle:]
0000000000009f1f	movq	%rax, %rbx
0000000000009f22	movq	0x1f237(%rip), %rax     ## literal pool symbol address: _UADomainCloseViewSettingsDidChangeNotification
0000000000009f29	movq	(%rax), %rdi
0000000000009f2c	leaq	_OBJC_IVAR_$_UAPOptionsViewController._notificationOfInterest(%rip), %rax
0000000000009f33	movq	(%rax), %rdx
0000000000009f36	movq	%rbx, %rsi
0000000000009f39	callq	0x1e868                 ## symbol stub for: _objc_assign_ivar
0000000000009f3e	testq	%rbx, %rbx
0000000000009f41	je	0x9fbb
0000000000009f43	movq	0x2b666(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_NSDistributedNotificationCenter
0000000000009f4a	movq	0x2a3df(%rip), %rsi     ## Objc selector ref: defaultCenter
0000000000009f51	callq	*%r12
0000000000009f54	movq	%rax, %r14
0000000000009f57	movq	0x2b5ea(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_NSNotificationCenter
0000000000009f5e	movq	0x2a3cb(%rip), %rsi     ## Objc selector ref: defaultCenter
0000000000009f65	callq	*%r12
0000000000009f68	movq	%rax, %r15
0000000000009f6b	movq	0x2a7de(%rip), %rcx     ## Objc selector ref: _contrastDidChange:
0000000000009f72	movq	0x1f1cf(%rip), %rax     ## literal pool symbol address: _UAContrastDidChangeNotification
0000000000009f79	movq	(%rax), %r8
0000000000009f7c	movq	0x2a7d5(%rip), %rsi     ## Objc selector ref: addObserver:selector:name:object:suspensionBehavior:
0000000000009f83	movq	$0x4, (%rsp)
0000000000009f8b	xorl	%r9d, %r9d
0000000000009f8e	movq	%r14, %rdi
0000000000009f91	movq	%rbx, %rdx
0000000000009f94	callq	*%r12
0000000000009f97	movq	0x2a7c2(%rip), %rcx     ## Objc selector ref: _didChangeScreenParameters:
0000000000009f9e	movq	0x1f143(%rip), %rax     ## literal pool symbol address: _NSApplicationDidChangeScreenParametersNotification
0000000000009fa5	movq	(%rax), %r8
0000000000009fa8	movq	0x2a7b9(%rip), %rsi     ## Objc selector ref: addObserver:selector:name:object:
0000000000009faf	xorl	%r9d, %r9d
0000000000009fb2	movq	%r15, %rdi
0000000000009fb5	movq	%rbx, %rdx
0000000000009fb8	callq	*%r12
0000000000009fbb	movq	%rbx, %rax
0000000000009fbe	addq	$0x20, %rsp
0000000000009fc2	popq	%rbx
0000000000009fc3	popq	%r12
0000000000009fc5	popq	%r14
0000000000009fc7	popq	%r15
0000000000009fc9	popq	%rbp
0000000000009fca	retq
0000000000009fcb	pushq	%rbp
0000000000009fcc	movq	%rsp, %rbp
0000000000009fcf	pushq	%r15
0000000000009fd1	pushq	%r14
0000000000009fd3	pushq	%r12
0000000000009fd5	pushq	%rbx
0000000000009fd6	subq	$0x10, %rsp
0000000000009fda	movq	%rdi, %rbx
0000000000009fdd	movq	%rbx, -0x30(%rbp)
0000000000009fe1	movq	0x2b750(%rip), %rax     ## Objc class ref: UAPDisplayViewController
0000000000009fe8	movq	%rax, -0x28(%rbp)
0000000000009fec	movq	0x2a77d(%rip), %rsi     ## Objc selector ref: loadView
0000000000009ff3	leaq	-0x30(%rbp), %rdi
0000000000009ff7	callq	0x1e88c                 ## Objc message: -[[%rdi super] loadView]
0000000000009ffc	movq	0x2a3bd(%rip), %rsi     ## Objc selector ref: view
000000000000a003	movq	0x1f3f6(%rip), %r15     ## Objc message: -[%rdi view]
000000000000a00a	movq	%rbx, %rdi
000000000000a00d	callq	*%r15
000000000000a010	movq	_OBJC_IVAR_$_UAPDisplayViewController._cursorSizeSlider(%rip), %r12
000000000000a017	movq	(%rbx,%r12), %r14
000000000000a01b	callq	0x1e5c2                 ## symbol stub for: _UACursorMinimumScale
000000000000a020	cvtss2sd	%xmm0, %xmm0
000000000000a024	movq	0x2a74d(%rip), %rsi     ## Objc selector ref: setMinValue:
000000000000a02b	movq	%r14, %rdi
000000000000a02e	callq	*%r15
000000000000a031	movq	(%rbx,%r12), %rbx
000000000000a035	callq	0x1e5bc                 ## symbol stub for: _UACursorMaximumScale
000000000000a03a	cvtss2sd	%xmm0, %xmm0
000000000000a03e	movq	0x2a73b(%rip), %rsi     ## Objc selector ref: setMaxValue:
000000000000a045	movq	%rbx, %rdi
000000000000a048	callq	*%r15
000000000000a04b	addq	$0x10, %rsp
000000000000a04f	popq	%rbx
000000000000a050	popq	%r12
000000000000a052	popq	%r14
000000000000a054	popq	%r15
000000000000a056	popq	%rbp
000000000000a057	retq
000000000000a058	pushq	%rbp
000000000000a059	movq	%rsp, %rbp
000000000000a05c	movq	0x2a6d5(%rip), %rsi     ## Objc selector ref: readPreferences:
000000000000a063	popq	%rbp
000000000000a064	jmpq	*0x1f396(%rip)          ## Objc message: -[%rdi readPreferences:]
000000000000a06a	pushq	%rbp
000000000000a06b	movq	%rsp, %rbp
000000000000a06e	movq	0x2a6c3(%rip), %rsi     ## Objc selector ref: readPreferences:
000000000000a075	popq	%rbp
000000000000a076	jmpq	*0x1f384(%rip)          ## Objc message: -[%rdi readPreferences:]
000000000000a07c	pushq	%rbp
000000000000a07d	movq	%rsp, %rbp
000000000000a080	pushq	%r14
000000000000a082	pushq	%rbx
000000000000a083	movq	%rdi, %rbx
000000000000a086	movq	0x2a693(%rip), %rsi     ## Objc selector ref: stopListeningForChanges
000000000000a08d	movq	0x1f36c(%rip), %r14     ## Objc message: -[%rdi stopListeningForChanges]
000000000000a094	callq	*%r14
000000000000a097	movq	_OBJC_IVAR_$_UAPDisplayViewController._differentiateWithoutColorCheckbox(%rip), %rax
000000000000a09e	movq	(%rbx,%rax), %rdi
000000000000a0a2	movq	0x2a5ff(%rip), %rsi     ## Objc selector ref: state
000000000000a0a9	callq	*%r14
000000000000a0ac	cmpq	$0x1, %rax
000000000000a0b0	sete	%al
000000000000a0b3	movzbl	%al, %edi
000000000000a0b6	callq	0x1e916                 ## symbol stub for: __AXInterfaceSetDifferentiateWithoutColorEnabled
000000000000a0bb	movq	0x2a666(%rip), %rsi     ## Objc selector ref: startListeningForChanges
000000000000a0c2	movq	%rbx, %rdi
000000000000a0c5	movq	%r14, %rax
000000000000a0c8	popq	%rbx
000000000000a0c9	popq	%r14
000000000000a0cb	popq	%rbp
000000000000a0cc	jmpq	*%rax
000000000000a0ce	pushq	%rbp
000000000000a0cf	movq	%rsp, %rbp
000000000000a0d2	pushq	%r14
000000000000a0d4	pushq	%rbx
000000000000a0d5	movq	%rdi, %rbx
000000000000a0d8	movq	0x2a641(%rip), %rsi     ## Objc selector ref: stopListeningForChanges
000000000000a0df	movq	0x1f31a(%rip), %r14     ## Objc message: -[%rdi stopListeningForChanges]
000000000000a0e6	callq	*%r14
000000000000a0e9	movq	_OBJC_IVAR_$_UAPDisplayViewController._reduceTransparencyCheckbox(%rip), %rax
000000000000a0f0	movq	(%rbx,%rax), %rdi
000000000000a0f4	movq	0x2a5ad(%rip), %rsi     ## Objc selector ref: state
000000000000a0fb	callq	*%r14
000000000000a0fe	movq	%rax, %r14
000000000000a101	xorl	%eax, %eax
000000000000a103	callq	0x1e90a                 ## symbol stub for: __AXInterfaceGetIncreaseContrastEnabled
000000000000a108	testb	%al, %al
000000000000a10a	je	0xa112
000000000000a10c	cmpq	$0x1, %r14
000000000000a110	jne	0xa121
000000000000a112	cmpq	$0x1, %r14
000000000000a116	sete	%al
000000000000a119	movzbl	%al, %edi
000000000000a11c	callq	0x1e922                 ## symbol stub for: __AXInterfaceSetReduceTransparencyEnabled
000000000000a121	movq	0x2a600(%rip), %rsi     ## Objc selector ref: startListeningForChanges
000000000000a128	movq	%rbx, %rdi
000000000000a12b	popq	%rbx
000000000000a12c	popq	%r14
000000000000a12e	popq	%rbp
000000000000a12f	jmpq	*0x1f2cb(%rip)          ## Objc message: -[%rdi startListeningForChanges]
000000000000a135	pushq	%rbp
000000000000a136	movq	%rsp, %rbp
000000000000a139	pushq	%r15
000000000000a13b	pushq	%r14
000000000000a13d	pushq	%r12
000000000000a13f	pushq	%rbx
000000000000a140	movq	%rdi, %r14
000000000000a143	movq	0x2a5d6(%rip), %rsi     ## Objc selector ref: stopListeningForChanges
000000000000a14a	movq	0x1f2af(%rip), %r15     ## Objc message: -[%rdi stopListeningForChanges]
000000000000a151	callq	*%r15
000000000000a154	movq	_OBJC_IVAR_$_UAPDisplayViewController._increaseContrastCheckbox(%rip), %rax
000000000000a15b	movq	(%r14,%rax), %rdi
000000000000a15f	movq	0x2a542(%rip), %rsi     ## Objc selector ref: state
000000000000a166	callq	*%r15
000000000000a169	movq	%rax, %rbx
000000000000a16c	cmpq	$0x1, %rbx
000000000000a170	sete	%al
000000000000a173	movzbl	%al, %r12d
000000000000a177	xorl	%eax, %eax
000000000000a179	callq	0x1e90a                 ## symbol stub for: __AXInterfaceGetIncreaseContrastEnabled
000000000000a17e	movzbl	%al, %eax
000000000000a181	cmpl	%eax, %r12d
000000000000a184	je	0xa287
000000000000a18a	cmpq	$0x1, %rbx
000000000000a18e	sete	%al
000000000000a191	movzbl	%al, %edi
000000000000a194	callq	0x1e91c                 ## symbol stub for: __AXInterfaceSetIncreaseContrastEnabled
000000000000a199	cmpq	$0x1, %rbx
000000000000a19d	jne	0xa20d
000000000000a19f	movq	0x2b3ba(%rip), %rbx     ## Objc class ref: _OBJC_CLASS_$_NSNumber
000000000000a1a6	xorl	%eax, %eax
000000000000a1a8	callq	0x1e910                 ## symbol stub for: __AXInterfaceGetReduceTransparencyEnabled
000000000000a1ad	movq	0x2a5d4(%rip), %rsi     ## Objc selector ref: numberWithBool:
000000000000a1b4	movsbl	%al, %edx
000000000000a1b7	movq	%rbx, %rdi
000000000000a1ba	callq	*%r15
000000000000a1bd	movq	0x2a5cc(%rip), %rsi     ## Objc selector ref: setOldReduceTransparencyValue:
000000000000a1c4	movq	%r14, %rdi
000000000000a1c7	movq	%rax, %rdx
000000000000a1ca	callq	*%r15
000000000000a1cd	movl	$0x1, %edi
000000000000a1d2	callq	0x1e922                 ## symbol stub for: __AXInterfaceSetReduceTransparencyEnabled
000000000000a1d7	movq	0x2a56a(%rip), %rsi     ## Objc selector ref: validateControls
000000000000a1de	movq	%r14, %rdi
000000000000a1e1	callq	*%r15
000000000000a1e4	movq	_OBJC_IVAR_$_UAPDisplayViewController._reduceTransparencyCheckbox(%rip), %rax
000000000000a1eb	movq	(%r14,%rax), %rbx
000000000000a1ef	xorl	%eax, %eax
000000000000a1f1	callq	0x1e910                 ## symbol stub for: __AXInterfaceGetReduceTransparencyEnabled
000000000000a1f6	testb	%al, %al
000000000000a1f8	setne	%al
000000000000a1fb	movzbl	%al, %edx
000000000000a1fe	movq	0x2a23b(%rip), %rsi     ## Objc selector ref: setState:
000000000000a205	movq	%rbx, %rdi
000000000000a208	callq	*%r15
000000000000a20b	jmp	0xa287
000000000000a20d	movq	0x2a534(%rip), %rsi     ## Objc selector ref: validateControls
000000000000a214	movq	%r14, %rdi
000000000000a217	callq	*%r15
000000000000a21a	movq	0x2a577(%rip), %rsi     ## Objc selector ref: oldReduceTransparencyValue
000000000000a221	movq	%r14, %rdi
000000000000a224	callq	*%r15
000000000000a227	testq	%rax, %rax
000000000000a22a	je	0xa275
000000000000a22c	movq	0x2a565(%rip), %rsi     ## Objc selector ref: oldReduceTransparencyValue
000000000000a233	movq	%r14, %rdi
000000000000a236	callq	*%r15
000000000000a239	movq	0x2a560(%rip), %rsi     ## Objc selector ref: boolValue
000000000000a240	movq	%rax, %rdi
000000000000a243	callq	*%r15
000000000000a246	movzbl	%al, %edi
000000000000a249	callq	0x1e922                 ## symbol stub for: __AXInterfaceSetReduceTransparencyEnabled
000000000000a24e	movq	_OBJC_IVAR_$_UAPDisplayViewController._reduceTransparencyCheckbox(%rip), %rax
000000000000a255	movq	(%r14,%rax), %rbx
000000000000a259	xorl	%eax, %eax
000000000000a25b	callq	0x1e910                 ## symbol stub for: __AXInterfaceGetReduceTransparencyEnabled
000000000000a260	testb	%al, %al
000000000000a262	setne	%al
000000000000a265	movzbl	%al, %edx
000000000000a268	movq	0x2a1d1(%rip), %rsi     ## Objc selector ref: setState:
000000000000a26f	movq	%rbx, %rdi
000000000000a272	callq	*%r15
000000000000a275	movq	0x2a514(%rip), %rsi     ## Objc selector ref: setOldReduceTransparencyValue:
000000000000a27c	xorl	%edx, %edx
000000000000a27e	movq	%r14, %rdi
000000000000a281	callq	*0x1f179(%rip)          ## Objc message: +[NSNumber setOldReduceTransparencyValue:]
000000000000a287	movq	0x2a49a(%rip), %rsi     ## Objc selector ref: startListeningForChanges
000000000000a28e	movq	%r14, %rdi
000000000000a291	popq	%rbx
000000000000a292	popq	%r12
000000000000a294	popq	%r14
000000000000a296	popq	%r15
000000000000a298	popq	%rbp
000000000000a299	jmpq	*0x1f161(%rip)          ## Objc message: -[%rdi startListeningForChanges]
000000000000a29f	pushq	%rbp
000000000000a2a0	movq	%rsp, %rbp
000000000000a2a3	pushq	%r14
000000000000a2a5	pushq	%rbx
000000000000a2a6	movq	%rdi, %rbx
000000000000a2a9	movq	0x2a470(%rip), %rsi     ## Objc selector ref: stopListeningForChanges
000000000000a2b0	movq	0x1f149(%rip), %r14     ## Objc message: -[%rdi stopListeningForChanges]
000000000000a2b7	callq	*%r14
000000000000a2ba	movq	_OBJC_IVAR_$_UAPDisplayViewController._invertColorCheckbox(%rip), %rax
000000000000a2c1	movq	(%rbx,%rax), %rdi
000000000000a2c5	movq	0x2a3dc(%rip), %rsi     ## Objc selector ref: state
000000000000a2cc	callq	*%r14
000000000000a2cf	cmpq	$0x1, %rax
000000000000a2d3	sete	%al
000000000000a2d6	movzbl	%al, %edi
000000000000a2d9	callq	0x1e7d2                 ## symbol stub for: _UAWhiteOnBlackSetEnabled
000000000000a2de	movq	0x2a443(%rip), %rsi     ## Objc selector ref: startListeningForChanges
000000000000a2e5	movq	%rbx, %rdi
000000000000a2e8	callq	*%r14
000000000000a2eb	movq	0x2b256(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_NSNotificationCenter
000000000000a2f2	movq	0x2a037(%rip), %rsi     ## Objc selector ref: defaultCenter
000000000000a2f9	callq	*%r14
000000000000a2fc	movq	0x2a4a5(%rip), %rsi     ## Objc selector ref: postNotificationName:object:userInfo:
000000000000a303	leaq	0x205c6(%rip), %rdx     ## Objc cfstring ref: @"UAApplyMacManagerSettingsNotification"
000000000000a30a	xorl	%ecx, %ecx
000000000000a30c	xorl	%r8d, %r8d
000000000000a30f	movq	%rax, %rdi
000000000000a312	movq	%r14, %rax
000000000000a315	popq	%rbx
000000000000a316	popq	%r14
000000000000a318	popq	%rbp
000000000000a319	jmpq	*%rax
000000000000a31b	pushq	%rbp
000000000000a31c	movq	%rsp, %rbp
000000000000a31f	pushq	%r14
000000000000a321	pushq	%rbx
000000000000a322	movq	%rdi, %rbx
000000000000a325	movq	0x2a3f4(%rip), %rsi     ## Objc selector ref: stopListeningForChanges
000000000000a32c	movq	0x1f0cd(%rip), %r14     ## Objc message: +[NSNotificationCenter stopListeningForChanges]
000000000000a333	callq	*%r14
000000000000a336	movq	_OBJC_IVAR_$_UAPDisplayViewController._grayscaleCheckbox(%rip), %rax
000000000000a33d	movq	(%rbx,%rax), %rdi
000000000000a341	movq	0x2a360(%rip), %rsi     ## Objc selector ref: state
000000000000a348	callq	*%r14
000000000000a34b	cmpq	$0x1, %rax
000000000000a34f	sete	%al
000000000000a352	movzbl	%al, %edi
000000000000a355	callq	0x1e5ec                 ## symbol stub for: _UAGrayscaleSetEnabled
000000000000a35a	movq	0x2a3c7(%rip), %rsi     ## Objc selector ref: startListeningForChanges
000000000000a361	movq	%rbx, %rdi
000000000000a364	movq	%r14, %rax
000000000000a367	popq	%rbx
000000000000a368	popq	%r14
000000000000a36a	popq	%rbp
000000000000a36b	jmpq	*%rax
000000000000a36d	pushq	%rbp
000000000000a36e	movq	%rsp, %rbp
000000000000a371	pushq	%r14
000000000000a373	pushq	%rbx
000000000000a374	movq	%rdi, %rbx
000000000000a377	movq	0x2a3a2(%rip), %rsi     ## Objc selector ref: stopListeningForChanges
000000000000a37e	movq	0x1f07b(%rip), %r14     ## Objc message: -[%rdi stopListeningForChanges]
000000000000a385	callq	*%r14
000000000000a388	movq	_OBJC_IVAR_$_UAPDisplayViewController._enhanceContrastSlider(%rip), %rax
000000000000a38f	movq	(%rbx,%rax), %rdi
000000000000a393	movq	0x2a10e(%rip), %rsi     ## Objc selector ref: floatValue
000000000000a39a	callq	*%r14
000000000000a39d	callq	0x1e5d4                 ## symbol stub for: _UAEnhanceContrastSetLevel
000000000000a3a2	movq	0x2a37f(%rip), %rsi     ## Objc selector ref: startListeningForChanges
000000000000a3a9	movq	%rbx, %rdi
000000000000a3ac	movq	%r14, %rax
000000000000a3af	popq	%rbx
000000000000a3b0	popq	%r14
000000000000a3b2	popq	%rbp
000000000000a3b3	jmpq	*%rax
000000000000a3b5	pushq	%rbp
000000000000a3b6	movq	%rsp, %rbp
000000000000a3b9	pushq	%r14
000000000000a3bb	pushq	%rbx
000000000000a3bc	movq	%rdi, %rbx
000000000000a3bf	movq	0x2a35a(%rip), %rsi     ## Objc selector ref: stopListeningForChanges
000000000000a3c6	movq	0x1f033(%rip), %r14     ## Objc message: -[%rdi stopListeningForChanges]
000000000000a3cd	callq	*%r14
000000000000a3d0	movq	_OBJC_IVAR_$_UAPDisplayViewController._cursorSizeSlider(%rip), %rax
000000000000a3d7	movq	(%rbx,%rax), %rdi
000000000000a3db	movq	0x2a0c6(%rip), %rsi     ## Objc selector ref: floatValue
000000000000a3e2	callq	*%r14
000000000000a3e5	callq	0x1e5c8                 ## symbol stub for: _UACursorSetScale
000000000000a3ea	movq	0x2a337(%rip), %rsi     ## Objc selector ref: startListeningForChanges
000000000000a3f1	movq	%rbx, %rdi
000000000000a3f4	movq	%r14, %rax
000000000000a3f7	popq	%rbx
000000000000a3f8	popq	%r14
000000000000a3fa	popq	%rbp
000000000000a3fb	jmpq	*%rax
000000000000a3fd	pushq	%rbp
000000000000a3fe	movq	%rsp, %rbp
000000000000a401	movq	0x2a328(%rip), %rsi     ## Objc selector ref: switchToPanel:
000000000000a408	leaq	0x204e1(%rip), %rdx     ## Objc cfstring ref: @"Displays"
000000000000a40f	popq	%rbp
000000000000a410	jmpq	*0x1efea(%rip)          ## Objc message: -[%rdi switchToPanel:]
000000000000a416	pushq	%rbp
000000000000a417	movq	%rsp, %rbp
000000000000a41a	pushq	%r15
000000000000a41c	pushq	%r14
000000000000a41e	pushq	%rbx
000000000000a41f	subq	$0x18, %rsp
000000000000a423	movq	%rdi, %rbx
000000000000a426	movq	%rbx, -0x28(%rbp)
000000000000a42a	movq	0x2b307(%rip), %rax     ## Objc class ref: UAPDisplayViewController
000000000000a431	movq	%rax, -0x20(%rbp)
000000000000a435	movq	0x2a2fc(%rip), %rsi     ## Objc selector ref: readPreferences:
000000000000a43c	leaq	-0x28(%rbp), %rdi
000000000000a440	callq	0x1e88c                 ## Objc message: -[[%rdi super] readPreferences:]
000000000000a445	movq	_OBJC_IVAR_$_UAPDisplayViewController._cursorSizeSlider(%rip), %rax
000000000000a44c	movq	(%rbx,%rax), %r14
000000000000a450	callq	0x1e5b6                 ## symbol stub for: _UACursorGetScale
000000000000a455	cvtss2sd	%xmm0, %xmm0
000000000000a459	movq	0x2a350(%rip), %rsi     ## Objc selector ref: setDoubleValue:
000000000000a460	movq	0x1ef99(%rip), %r15     ## Objc message: -[%rdi setDoubleValue:]
000000000000a467	movq	%r14, %rdi
000000000000a46a	callq	*%r15
000000000000a46d	movq	_OBJC_IVAR_$_UAPDisplayViewController._invertColorCheckbox(%rip), %rax
000000000000a474	movq	(%rbx,%rax), %r14
000000000000a478	callq	0x1e7cc                 ## symbol stub for: _UAWhiteOnBlackIsEnabled
000000000000a47d	testb	%al, %al
000000000000a47f	setne	%al
000000000000a482	movzbl	%al, %edx
000000000000a485	movq	0x29fb4(%rip), %rsi     ## Objc selector ref: setState:
000000000000a48c	movq	%r14, %rdi
000000000000a48f	callq	*%r15
000000000000a492	movq	_OBJC_IVAR_$_UAPDisplayViewController._grayscaleCheckbox(%rip), %rax
000000000000a499	movq	(%rbx,%rax), %r14
000000000000a49d	callq	0x1e5e6                 ## symbol stub for: _UAGrayscaleIsEnabled
000000000000a4a2	testb	%al, %al
000000000000a4a4	setne	%al
000000000000a4a7	movzbl	%al, %edx
000000000000a4aa	movq	0x29f8f(%rip), %rsi     ## Objc selector ref: setState:
000000000000a4b1	movq	%r14, %rdi
000000000000a4b4	callq	*%r15
000000000000a4b7	movq	_OBJC_IVAR_$_UAPDisplayViewController._enhanceContrastSlider(%rip), %rax
000000000000a4be	movq	(%rbx,%rax), %r14
000000000000a4c2	callq	0x1e5ce                 ## symbol stub for: _UAEnhanceContrastLevel
000000000000a4c7	movq	0x2a2ea(%rip), %rsi     ## Objc selector ref: setFloatValue:
000000000000a4ce	movq	%r14, %rdi
000000000000a4d1	callq	*%r15
000000000000a4d4	movq	_OBJC_IVAR_$_UAPDisplayViewController._reduceTransparencyCheckbox(%rip), %rax
000000000000a4db	movq	(%rbx,%rax), %r14
000000000000a4df	xorl	%eax, %eax
000000000000a4e1	callq	0x1e910                 ## symbol stub for: __AXInterfaceGetReduceTransparencyEnabled
000000000000a4e6	testb	%al, %al
000000000000a4e8	setne	%al
000000000000a4eb	movzbl	%al, %edx
000000000000a4ee	movq	0x29f4b(%rip), %rsi     ## Objc selector ref: setState:
000000000000a4f5	movq	%r14, %rdi
000000000000a4f8	callq	*%r15
000000000000a4fb	movq	_OBJC_IVAR_$_UAPDisplayViewController._increaseContrastCheckbox(%rip), %rax
000000000000a502	movq	(%rbx,%rax), %r14
000000000000a506	xorl	%eax, %eax
000000000000a508	callq	0x1e90a                 ## symbol stub for: __AXInterfaceGetIncreaseContrastEnabled
000000000000a50d	testb	%al, %al
000000000000a50f	setne	%al
000000000000a512	movzbl	%al, %edx
000000000000a515	movq	0x29f24(%rip), %rsi     ## Objc selector ref: setState:
000000000000a51c	movq	%r14, %rdi
000000000000a51f	callq	*%r15
000000000000a522	movq	_OBJC_IVAR_$_UAPDisplayViewController._differentiateWithoutColorCheckbox(%rip), %rax
000000000000a529	movq	(%rbx,%rax), %rbx
000000000000a52d	xorl	%eax, %eax
000000000000a52f	callq	0x1e904                 ## symbol stub for: __AXInterfaceGetDifferentiateWithoutColorEnabled
000000000000a534	testb	%al, %al
000000000000a536	setne	%al
000000000000a539	movzbl	%al, %edx
000000000000a53c	movq	0x29efd(%rip), %rsi     ## Objc selector ref: setState:
000000000000a543	movq	%rbx, %rdi
000000000000a546	callq	*%r15
000000000000a549	addq	$0x18, %rsp
000000000000a54d	popq	%rbx
000000000000a54e	popq	%r14
000000000000a550	popq	%r15
000000000000a552	popq	%rbp
000000000000a553	retq
000000000000a554	pushq	%rbp
000000000000a555	movq	%rsp, %rbp
000000000000a558	pushq	%r15
000000000000a55a	pushq	%r14
000000000000a55c	pushq	%rbx
000000000000a55d	subq	$0x18, %rsp
000000000000a561	movq	%rdi, %r14
000000000000a564	movq	_OBJC_IVAR_$_UAPDisplayViewController._invertColorCheckbox(%rip), %rax
000000000000a56b	movq	(%r14,%rax), %rbx
000000000000a56f	movq	0x1ed92(%rip), %rax     ## literal pool symbol address: _UAWhiteOnBlackKey
000000000000a576	movq	(%rax), %rdi
000000000000a579	callq	0x1e4cc                 ## symbol stub for: _UAPreferenceIsForced
000000000000a57e	testb	%al, %al
000000000000a580	sete	%al
000000000000a583	movq	0x2a1b6(%rip), %rsi     ## Objc selector ref: setEnabled:
000000000000a58a	movzbl	%al, %edx
000000000000a58d	movq	0x1ee6c(%rip), %r15     ## Objc message: -[%rdi setEnabled:]
000000000000a594	movq	%rbx, %rdi
000000000000a597	callq	*%r15
000000000000a59a	movq	_OBJC_IVAR_$_UAPDisplayViewController._grayscaleCheckbox(%rip), %rax
000000000000a5a1	movq	(%r14,%rax), %rbx
000000000000a5a5	movq	0x1ebec(%rip), %rax     ## literal pool symbol address: _UAGrayscaleKey
000000000000a5ac	movq	(%rax), %rdi
000000000000a5af	callq	0x1e4cc                 ## symbol stub for: _UAPreferenceIsForced
000000000000a5b4	testb	%al, %al
000000000000a5b6	sete	%al
000000000000a5b9	movq	0x2a180(%rip), %rsi     ## Objc selector ref: setEnabled:
000000000000a5c0	movzbl	%al, %edx
000000000000a5c3	movq	%rbx, %rdi
000000000000a5c6	callq	*%r15
000000000000a5c9	movq	_OBJC_IVAR_$_UAPDisplayViewController._enhanceContrastSlider(%rip), %rax
000000000000a5d0	movq	(%r14,%rax), %rbx
000000000000a5d4	movq	0x1eb75(%rip), %rax     ## literal pool symbol address: _UAContrastKey
000000000000a5db	movq	(%rax), %rdi
000000000000a5de	callq	0x1e4cc                 ## symbol stub for: _UAPreferenceIsForced
000000000000a5e3	testb	%al, %al
000000000000a5e5	sete	%al
000000000000a5e8	movq	0x2a151(%rip), %rsi     ## Objc selector ref: setEnabled:
000000000000a5ef	movzbl	%al, %edx
000000000000a5f2	movq	%rbx, %rdi
000000000000a5f5	callq	*%r15
000000000000a5f8	movq	_OBJC_IVAR_$_UAPDisplayViewController._cursorSizeSlider(%rip), %rax
000000000000a5ff	movq	(%r14,%rax), %rbx
000000000000a603	movq	0x1eb4e(%rip), %rax     ## literal pool symbol address: _UACursorScaleKey
000000000000a60a	movq	(%rax), %rdi
000000000000a60d	callq	0x1e4cc                 ## symbol stub for: _UAPreferenceIsForced
000000000000a612	testb	%al, %al
000000000000a614	sete	%al
000000000000a617	movq	0x2a122(%rip), %rsi     ## Objc selector ref: setEnabled:
000000000000a61e	movzbl	%al, %edx
000000000000a621	movq	%rbx, %rdi
000000000000a624	callq	*%r15
000000000000a627	movq	_OBJC_IVAR_$_UAPDisplayViewController._increaseContrastCheckbox(%rip), %rax
000000000000a62e	movq	(%r14,%rax), %rbx
000000000000a632	movq	0x1ed37(%rip), %rax     ## literal pool symbol address: _kAXInterfaceIncreaseContrastKey
000000000000a639	movq	(%rax), %rdi
000000000000a63c	callq	0x1e4cc                 ## symbol stub for: _UAPreferenceIsForced
000000000000a641	testb	%al, %al
000000000000a643	sete	%al
000000000000a646	movq	0x2a0f3(%rip), %rsi     ## Objc selector ref: setEnabled:
000000000000a64d	movzbl	%al, %edx
000000000000a650	movq	%rbx, %rdi
000000000000a653	callq	*%r15
000000000000a656	movq	_OBJC_IVAR_$_UAPDisplayViewController._differentiateWithoutColorCheckbox(%rip), %rax
000000000000a65d	movq	(%r14,%rax), %rbx
000000000000a661	movq	0x1ed00(%rip), %rax     ## literal pool symbol address: _kAXInterfaceDifferentiateWithoutColorKey
000000000000a668	movq	(%rax), %rdi
000000000000a66b	callq	0x1e4cc                 ## symbol stub for: _UAPreferenceIsForced
000000000000a670	testb	%al, %al
000000000000a672	sete	%al
000000000000a675	movq	0x2a0c4(%rip), %rsi     ## Objc selector ref: setEnabled:
000000000000a67c	movzbl	%al, %edx
000000000000a67f	movq	%rbx, %rdi
000000000000a682	callq	*%r15
000000000000a685	xorl	%eax, %eax
000000000000a687	callq	0x1e90a                 ## symbol stub for: __AXInterfaceGetIncreaseContrastEnabled
000000000000a68c	testb	%al, %al
000000000000a68e	je	0xa6d3
000000000000a690	movl	$0x1, %edi
000000000000a695	callq	0x1e922                 ## symbol stub for: __AXInterfaceSetReduceTransparencyEnabled
000000000000a69a	movq	_OBJC_IVAR_$_UAPDisplayViewController._reduceTransparencyCheckbox(%rip), %rbx
000000000000a6a1	movq	(%r14,%rbx), %rdi
000000000000a6a5	movq	0x2a094(%rip), %rsi     ## Objc selector ref: setEnabled:
000000000000a6ac	xorl	%edx, %edx
000000000000a6ae	callq	*%r15
000000000000a6b1	movq	(%r14,%rbx), %rbx
000000000000a6b5	xorl	%eax, %eax
000000000000a6b7	callq	0x1e910                 ## symbol stub for: __AXInterfaceGetReduceTransparencyEnabled
000000000000a6bc	testb	%al, %al
000000000000a6be	setne	%al
000000000000a6c1	movzbl	%al, %edx
000000000000a6c4	movq	0x29d75(%rip), %rsi     ## Objc selector ref: setState:
000000000000a6cb	movq	%rbx, %rdi
000000000000a6ce	callq	*%r15
000000000000a6d1	jmp	0xa705
000000000000a6d3	movq	_OBJC_IVAR_$_UAPDisplayViewController._reduceTransparencyCheckbox(%rip), %rax
000000000000a6da	movq	(%r14,%rax), %rbx
000000000000a6de	movq	0x1ec9b(%rip), %rax     ## literal pool symbol address: _kAXInterfaceReduceTransparencyKey
000000000000a6e5	movq	(%rax), %rdi
000000000000a6e8	callq	0x1e4cc                 ## symbol stub for: _UAPreferenceIsForced
000000000000a6ed	testb	%al, %al
000000000000a6ef	sete	%al
000000000000a6f2	movq	0x2a047(%rip), %rsi     ## Objc selector ref: setEnabled:
000000000000a6f9	movzbl	%al, %edx
000000000000a6fc	movq	%rbx, %rdi
000000000000a6ff	callq	*0x1ecfb(%rip)          ## Objc message: -[%rdi setEnabled:]
000000000000a705	movq	%r14, -0x28(%rbp)
000000000000a709	movq	0x2b028(%rip), %rax     ## Objc class ref: UAPDisplayViewController
000000000000a710	movq	%rax, -0x20(%rbp)
000000000000a714	movq	0x2a02d(%rip), %rsi     ## Objc selector ref: validateControls
000000000000a71b	leaq	-0x28(%rbp), %rdi
000000000000a71f	callq	0x1e88c                 ## Objc message: -[[%rdi super] validateControls]
000000000000a724	addq	$0x18, %rsp
000000000000a728	popq	%rbx
000000000000a729	popq	%r14
000000000000a72b	popq	%r15
000000000000a72d	popq	%rbp
000000000000a72e	retq
000000000000a72f	pushq	%rbp
000000000000a730	movq	%rsp, %rbp
000000000000a733	pushq	%rbx
000000000000a734	subq	$0x18, %rsp
000000000000a738	movq	%rdi, %rbx
000000000000a73b	movq	0x2a04e(%rip), %rsi     ## Objc selector ref: setOldReduceTransparencyValue:
000000000000a742	xorl	%edx, %edx
000000000000a744	callq	*0x1ecb6(%rip)          ## Objc message: -[%rdi setOldReduceTransparencyValue:]
000000000000a74a	movq	%rbx, -0x18(%rbp)
000000000000a74e	movq	0x2afe3(%rip), %rax     ## Objc class ref: UAPDisplayViewController
000000000000a755	movq	%rax, -0x10(%rbp)
000000000000a759	movq	0x299f8(%rip), %rsi     ## Objc selector ref: dealloc
000000000000a760	leaq	-0x18(%rbp), %rdi
000000000000a764	callq	0x1e88c                 ## Objc message: -[[%rdi super] dealloc]
000000000000a769	addq	$0x18, %rsp
000000000000a76d	popq	%rbx
000000000000a76e	popq	%rbp
000000000000a76f	retq
000000000000a770	pushq	%rbp
000000000000a771	movq	%rsp, %rbp
000000000000a774	movq	_OBJC_IVAR_$_UAPDisplayViewController._oldReduceTransparencyValue(%rip), %rax
000000000000a77b	movq	(%rdi,%rax), %rax
000000000000a77f	popq	%rbp
000000000000a780	retq
000000000000a781	pushq	%rbp
000000000000a782	movq	%rsp, %rbp
000000000000a785	movq	%rdx, %rax
000000000000a788	movq	_OBJC_IVAR_$_UAPDisplayViewController._oldReduceTransparencyValue(%rip), %rdx
000000000000a78f	xorl	%r8d, %r8d
000000000000a792	xorl	%r9d, %r9d
000000000000a795	movq	%rax, %rcx
000000000000a798	popq	%rbp
000000000000a799	jmp	0x1e89e                 ## symbol stub for: _objc_setProperty
000000000000a79e	nop
000000000000a79f	nop
000000000000a7a0	pushq	%rbp
000000000000a7a1	movq	%rsp, %rbp
000000000000a7a4	pushq	%r15
000000000000a7a6	pushq	%r14
000000000000a7a8	pushq	%rbx
000000000000a7a9	subq	$0x18, %rsp
000000000000a7ad	movq	%rdi, %r14
000000000000a7b0	movq	0x2ad49(%rip), %rbx     ## Objc class ref: _OBJC_CLASS_$_NSBundle
000000000000a7b7	movq	0x2ad4a(%rip), %rdi     ## Objc class ref: UniversalAccessPref
000000000000a7be	movq	0x298fb(%rip), %rsi     ## Objc selector ref: class
000000000000a7c5	movq	0x1ec34(%rip), %r15     ## Objc message: +[UniversalAccessPref class]
000000000000a7cc	callq	*%r15
000000000000a7cf	movq	0x299e2(%rip), %rsi     ## Objc selector ref: bundleForClass:
000000000000a7d6	movq	%rbx, %rdi
000000000000a7d9	movq	%rax, %rdx
000000000000a7dc	callq	*%r15
000000000000a7df	movq	%r14, -0x28(%rbp)
000000000000a7e3	movq	0x2af56(%rip), %rcx     ## Objc class ref: UAPKeyboardViewController
000000000000a7ea	movq	%rcx, -0x20(%rbp)
000000000000a7ee	movq	0x29a53(%rip), %rsi     ## Objc selector ref: initWithNibName:bundle:
000000000000a7f5	leaq	0x20034(%rip), %rdx     ## Objc cfstring ref: @"Keyboard"
000000000000a7fc	leaq	-0x28(%rbp), %rdi
000000000000a800	movq	%rax, %rcx
000000000000a803	callq	0x1e88c                 ## Objc message: -[[%rdi super] initWithNibName:bundle:]
000000000000a808	movq	%rax, %rbx
000000000000a80b	testq	%rbx, %rbx
000000000000a80e	je	0xa82c
000000000000a810	movq	0x1e951(%rip), %rax     ## literal pool symbol address: _UADomainKbdSettingsDidChangeNotification
000000000000a817	movq	(%rax), %rdi
000000000000a81a	leaq	_OBJC_IVAR_$_UAPOptionsViewController._notificationOfInterest(%rip), %rax
000000000000a821	movq	(%rax), %rdx
000000000000a824	movq	%rbx, %rsi
000000000000a827	callq	0x1e868                 ## symbol stub for: _objc_assign_ivar
000000000000a82c	movq	%rbx, %rax
000000000000a82f	addq	$0x18, %rsp
000000000000a833	popq	%rbx
000000000000a834	popq	%r14
000000000000a836	popq	%r15
000000000000a838	popq	%rbp
000000000000a839	retq
000000000000a83a	pushq	%rbp
000000000000a83b	movq	%rsp, %rbp
000000000000a83e	pushq	%r14
000000000000a840	pushq	%rbx
000000000000a841	subq	$0x10, %rsp
000000000000a845	movq	%rdi, %rbx
000000000000a848	movq	%rbx, -0x20(%rbp)
000000000000a84c	movq	0x2aeed(%rip), %rax     ## Objc class ref: UAPKeyboardViewController
000000000000a853	movq	%rax, -0x18(%rbp)
000000000000a857	movq	0x29b62(%rip), %rsi     ## Objc selector ref: view
000000000000a85e	leaq	-0x20(%rbp), %rdi
000000000000a862	callq	0x1e88c                 ## Objc message: -[[%rdi super] view]
000000000000a867	movq	%rax, %r14
000000000000a86a	movq	0x29f4f(%rip), %rsi     ## Objc selector ref: _readPreferences:
000000000000a871	xorl	%edx, %edx
000000000000a873	movq	%rbx, %rdi
000000000000a876	callq	*0x1eb84(%rip)          ## Objc message: -[%rdi _readPreferences:]
000000000000a87c	movq	%r14, %rax
000000000000a87f	addq	$0x10, %rsp
000000000000a883	popq	%rbx
000000000000a884	popq	%r14
000000000000a886	popq	%rbp
000000000000a887	retq
000000000000a888	pushq	%rbp
000000000000a889	movq	%rsp, %rbp
000000000000a88c	pushq	%r14
000000000000a88e	pushq	%rbx
000000000000a88f	subq	$0x20, %rsp
000000000000a893	movq	%rdi, %rbx
000000000000a896	movq	%rbx, -0x20(%rbp)
000000000000a89a	movq	0x2ae9f(%rip), %rax     ## Objc class ref: UAPKeyboardViewController
000000000000a8a1	movq	%rax, -0x18(%rbp)
000000000000a8a5	movq	0x29ec4(%rip), %rsi     ## Objc selector ref: loadView
000000000000a8ac	leaq	-0x20(%rbp), %rdi
000000000000a8b0	callq	0x1e88c                 ## Objc message: -[[%rdi super] loadView]
000000000000a8b5	movq	0x2acf4(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_NSDistributedNotificationCenter
000000000000a8bc	movq	0x29a6d(%rip), %rsi     ## Objc selector ref: defaultCenter
000000000000a8c3	movq	0x1eb36(%rip), %r14     ## Objc message: +[NSDistributedNotificationCenter defaultCenter]
000000000000a8ca	callq	*%r14
000000000000a8cd	movq	0x29e64(%rip), %rcx     ## Objc selector ref: readPreferences:
000000000000a8d4	movq	0x1e8a5(%rip), %rdx     ## literal pool symbol address: _UADomainSwitchSettingsDidChangeNotification
000000000000a8db	movq	(%rdx), %r8
000000000000a8de	movq	0x29e73(%rip), %rsi     ## Objc selector ref: addObserver:selector:name:object:suspensionBehavior:
000000000000a8e5	movq	$0x4, (%rsp)
000000000000a8ed	xorl	%r9d, %r9d
000000000000a8f0	movq	%rax, %rdi
000000000000a8f3	movq	%rbx, %rdx
000000000000a8f6	callq	*%r14
000000000000a8f9	addq	$0x20, %rsp
000000000000a8fd	popq	%rbx
000000000000a8fe	popq	%r14
000000000000a900	popq	%rbp
000000000000a901	retq
000000000000a902	pushq	%rbp
000000000000a903	movq	%rsp, %rbp
000000000000a906	pushq	%r14
000000000000a908	pushq	%rbx
000000000000a909	movq	%rdi, %rbx
000000000000a90c	movq	0x29e0d(%rip), %rsi     ## Objc selector ref: stopListeningForChanges
000000000000a913	movq	0x1eae6(%rip), %r14     ## Objc message: -[%rdi stopListeningForChanges]
000000000000a91a	callq	*%r14
000000000000a91d	movq	_OBJC_IVAR_$_UAPKeyboardViewController._stickyKeysEnableCheckbox(%rip), %rax
000000000000a924	movq	(%rbx,%rax), %rdi
000000000000a928	movq	0x29d79(%rip), %rsi     ## Objc selector ref: state
000000000000a92f	callq	*%r14
000000000000a932	cmpq	$0x1, %rax
000000000000a936	sete	%al
000000000000a939	movzbl	%al, %edi
000000000000a93c	callq	0x1e6c4                 ## symbol stub for: _UAStickyKeysSetEnabled
000000000000a941	movq	0x29de0(%rip), %rsi     ## Objc selector ref: startListeningForChanges
000000000000a948	movq	%rbx, %rdi
000000000000a94b	movq	%r14, %rax
000000000000a94e	popq	%rbx
000000000000a94f	popq	%r14
000000000000a951	popq	%rbp
000000000000a952	jmpq	*%rax
000000000000a954	pushq	%rbp
000000000000a955	movq	%rsp, %rbp
000000000000a958	pushq	%r15
000000000000a95a	pushq	%r14
000000000000a95c	pushq	%r13
000000000000a95e	pushq	%r12
000000000000a960	pushq	%rbx
000000000000a961	pushq	%rax
000000000000a962	movq	%rdi, %r12
000000000000a965	movq	_OBJC_IVAR_$_UAPKeyboardViewController._slowKeysEnableCheckbox(%rip), %rax
000000000000a96c	movq	(%r12,%rax), %rdi
000000000000a970	movq	0x29d31(%rip), %rsi     ## Objc selector ref: state
000000000000a977	movq	0x1ea82(%rip), %r13     ## Objc message: -[%rdi state]
000000000000a97e	callq	*%r13
000000000000a981	movq	%rax, %r14
000000000000a984	movq	_OBJC_IVAR_$_UAPKeyboardViewController._slowKeysAcceptanceDelaySlider(%rip), %rax
000000000000a98b	movq	(%r12,%rax), %rdi
000000000000a98f	movq	0x297a2(%rip), %rsi     ## Objc selector ref: integerValue
000000000000a996	callq	*%r13
000000000000a999	movq	%rax, %r15
000000000000a99c	movq	0x29d7d(%rip), %rsi     ## Objc selector ref: stopListeningForChanges
000000000000a9a3	movq	%r12, %rdi
000000000000a9a6	callq	*%r13
000000000000a9a9	xorl	%ebx, %ebx
000000000000a9ab	cmpq	$0x1, %r14
000000000000a9af	sete	%al
000000000000a9b2	movzbl	%al, %edi
000000000000a9b5	cmoveq	%r15, %rbx
000000000000a9b9	callq	0x1e68e                 ## symbol stub for: _UASlowKeysSetEnabled
000000000000a9be	movq	%rbx, %rdi
000000000000a9c1	callq	0x1e688                 ## symbol stub for: _UASlowKeysSetDelayInterval
000000000000a9c6	movq	0x29d5b(%rip), %rsi     ## Objc selector ref: startListeningForChanges
000000000000a9cd	movq	%r12, %rdi
000000000000a9d0	movq	%r13, %rax
000000000000a9d3	addq	$0x8, %rsp
000000000000a9d7	popq	%rbx
000000000000a9d8	popq	%r12
000000000000a9da	popq	%r13
000000000000a9dc	popq	%r14
000000000000a9de	popq	%r15
000000000000a9e0	popq	%rbp
000000000000a9e1	jmpq	*%rax
000000000000a9e3	pushq	%rbp
000000000000a9e4	movq	%rsp, %rbp
000000000000a9e7	pushq	%r15
000000000000a9e9	pushq	%r14
000000000000a9eb	pushq	%r12
000000000000a9ed	pushq	%rbx
000000000000a9ee	subq	$0x30, %rsp
000000000000a9f2	movq	%rdi, %rbx
000000000000a9f5	movq	0x29dcc(%rip), %rsi     ## Objc selector ref: _readPreferences:cacheSettings:
000000000000a9fc	movq	0x1e9fd(%rip), %r12     ## Objc message: -[%rdi _readPreferences:cacheSettings:]
000000000000aa03	xorl	%edx, %edx
000000000000aa05	movl	$0x1, %ecx
000000000000aa0a	callq	*%r12
000000000000aa0d	movq	0x299ac(%rip), %rsi     ## Objc selector ref: view
000000000000aa14	movq	%rbx, %rdi
000000000000aa17	callq	*%r12
000000000000aa1a	movq	0x299a7(%rip), %rsi     ## Objc selector ref: window
000000000000aa21	movq	%rax, %rdi
000000000000aa24	callq	*%r12
000000000000aa27	movq	%rax, %r14
000000000000aa2a	movq	_OBJC_IVAR_$_UAPKeyboardViewController._slowKeysOptionsSheet(%rip), %rax
000000000000aa31	movq	(%rbx,%rax), %r15
000000000000aa35	movq	0x1e90c(%rip), %rax     ## literal pool symbol address: __NSConcreteStackBlock
000000000000aa3c	movq	%rax, -0x48(%rbp)
000000000000aa40	movl	$0x42000000, -0x40(%rbp) ## imm = 0x42000000
000000000000aa47	movl	$0x0, -0x3c(%rbp)
000000000000aa4e	leaq	0x3c(%rip), %rax
000000000000aa55	movq	%rax, -0x38(%rbp)
000000000000aa59	leaq	0x1f2c0(%rip), %rax
000000000000aa60	movq	%rax, -0x30(%rbp)
000000000000aa64	leaq	-0x28(%rbp), %rsi
000000000000aa68	movq	%rbx, %rdi
000000000000aa6b	callq	0x1e86e                 ## symbol stub for: _objc_assign_strongCast
000000000000aa70	movq	0x29961(%rip), %rsi     ## Objc selector ref: beginSheet:completionHandler:
000000000000aa77	leaq	-0x48(%rbp), %rcx
000000000000aa7b	movq	%r14, %rdi
000000000000aa7e	movq	%r15, %rdx
000000000000aa81	callq	*%r12
000000000000aa84	addq	$0x30, %rsp
000000000000aa88	popq	%rbx
000000000000aa89	popq	%r12
000000000000aa8b	popq	%r14
000000000000aa8d	popq	%r15
000000000000aa8f	popq	%rbp
000000000000aa90	retq
000000000000aa91	pushq	%rbp
000000000000aa92	movq	%rsp, %rbp
000000000000aa95	movq	0x20(%rdi), %rax
000000000000aa99	movq	_OBJC_IVAR_$_UAPKeyboardViewController._slowKeysOptionsSheet(%rip), %rcx
000000000000aaa0	movq	(%rax,%rcx), %rdi
000000000000aaa4	movq	0x29925(%rip), %rsi     ## Objc selector ref: orderOut:
000000000000aaab	xorl	%edx, %edx
000000000000aaad	popq	%rbp
000000000000aaae	jmpq	*0x1e94c(%rip)          ## Objc message: -[%rdi orderOut:]
000000000000aab4	nopw	%cs:(%rax,%rax)
000000000000aac0	pushq	%rbp
000000000000aac1	movq	%rsp, %rbp
000000000000aac4	addq	$0x20, %rdi
000000000000aac8	movq	0x20(%rsi), %rsi
000000000000aacc	movl	$0x3, %edx
000000000000aad1	popq	%rbp
000000000000aad2	jmp	0x1e8a4                 ## symbol stub for: __Block_object_assign
000000000000aad7	nopw	(%rax,%rax)
000000000000aae0	pushq	%rbp
000000000000aae1	movq	%rsp, %rbp
000000000000aae4	movq	0x20(%rdi), %rdi
000000000000aae8	movl	$0x3, %esi
000000000000aaed	popq	%rbp
000000000000aaee	jmp	0x1e8aa                 ## symbol stub for: __Block_object_dispose
000000000000aaf3	pushq	%rbp
000000000000aaf4	movq	%rsp, %rbp
000000000000aaf7	pushq	%r15
000000000000aaf9	pushq	%r14
000000000000aafb	pushq	%r12
000000000000aafd	pushq	%rbx
000000000000aafe	subq	$0x30, %rsp
000000000000ab02	movq	%rdi, %rbx
000000000000ab05	movq	0x29cbc(%rip), %rsi     ## Objc selector ref: _readPreferences:cacheSettings:
000000000000ab0c	movq	0x1e8ed(%rip), %r12     ## Objc message: -[%rdi _readPreferences:cacheSettings:]
000000000000ab13	xorl	%edx, %edx
000000000000ab15	movl	$0x1, %ecx
000000000000ab1a	callq	*%r12
000000000000ab1d	movq	0x2989c(%rip), %rsi     ## Objc selector ref: view
000000000000ab24	movq	%rbx, %rdi
000000000000ab27	callq	*%r12
000000000000ab2a	movq	0x29897(%rip), %rsi     ## Objc selector ref: window
000000000000ab31	movq	%rax, %rdi
000000000000ab34	callq	*%r12
000000000000ab37	movq	%rax, %r14
000000000000ab3a	movq	_OBJC_IVAR_$_UAPKeyboardViewController._stickyKeysOptionsSheet(%rip), %rax
000000000000ab41	movq	(%rbx,%rax), %r15
000000000000ab45	movq	0x1e7fc(%rip), %rax     ## literal pool symbol address: __NSConcreteStackBlock
000000000000ab4c	movq	%rax, -0x48(%rbp)
000000000000ab50	movl	$0x42000000, -0x40(%rbp) ## imm = 0x42000000
000000000000ab57	movl	$0x0, -0x3c(%rbp)
000000000000ab5e	leaq	0x3c(%rip), %rax
000000000000ab65	movq	%rax, -0x38(%rbp)
000000000000ab69	leaq	0x1f1e0(%rip), %rax
000000000000ab70	movq	%rax, -0x30(%rbp)
000000000000ab74	leaq	-0x28(%rbp), %rsi
000000000000ab78	movq	%rbx, %rdi
000000000000ab7b	callq	0x1e86e                 ## symbol stub for: _objc_assign_strongCast
000000000000ab80	movq	0x29851(%rip), %rsi     ## Objc selector ref: beginSheet:completionHandler:
000000000000ab87	leaq	-0x48(%rbp), %rcx
000000000000ab8b	movq	%r14, %rdi
000000000000ab8e	movq	%r15, %rdx
000000000000ab91	callq	*%r12
000000000000ab94	addq	$0x30, %rsp
000000000000ab98	popq	%rbx
000000000000ab99	popq	%r12
000000000000ab9b	popq	%r14
000000000000ab9d	popq	%r15
000000000000ab9f	popq	%rbp
000000000000aba0	retq
000000000000aba1	pushq	%rbp
000000000000aba2	movq	%rsp, %rbp
000000000000aba5	movq	0x20(%rdi), %rax
000000000000aba9	movq	_OBJC_IVAR_$_UAPKeyboardViewController._stickyKeysOptionsSheet(%rip), %rcx
000000000000abb0	movq	(%rax,%rcx), %rdi
000000000000abb4	movq	0x29815(%rip), %rsi     ## Objc selector ref: orderOut:
000000000000abbb	xorl	%edx, %edx
000000000000abbd	popq	%rbp
000000000000abbe	jmpq	*0x1e83c(%rip)          ## Objc message: -[%rdi orderOut:]
000000000000abc4	nopw	%cs:(%rax,%rax)
000000000000abd0	pushq	%rbp
000000000000abd1	movq	%rsp, %rbp
000000000000abd4	addq	$0x20, %rdi
000000000000abd8	movq	0x20(%rsi), %rsi
000000000000abdc	movl	$0x3, %edx
000000000000abe1	popq	%rbp
000000000000abe2	jmp	0x1e8a4                 ## symbol stub for: __Block_object_assign
000000000000abe7	nopw	(%rax,%rax)
000000000000abf0	pushq	%rbp
000000000000abf1	movq	%rsp, %rbp
000000000000abf4	movq	0x20(%rdi), %rdi
000000000000abf8	movl	$0x3, %esi
000000000000abfd	popq	%rbp
000000000000abfe	jmp	0x1e8aa                 ## symbol stub for: __Block_object_dispose
000000000000ac03	pushq	%rbp
000000000000ac04	movq	%rsp, %rbp
000000000000ac07	movq	0x29b22(%rip), %rsi     ## Objc selector ref: switchToPanel:
000000000000ac0e	leaq	0x1fc1b(%rip), %rdx     ## Objc cfstring ref: @"Keyboard"
000000000000ac15	popq	%rbp
000000000000ac16	jmpq	*0x1e7e4(%rip)          ## Objc message: -[%rdi switchToPanel:]
000000000000ac1c	pushq	%rbp
000000000000ac1d	movq	%rsp, %rbp
000000000000ac20	pushq	%r14
000000000000ac22	pushq	%rbx
000000000000ac23	movq	%rdi, %rbx
000000000000ac26	movq	0x29af3(%rip), %rsi     ## Objc selector ref: stopListeningForChanges
000000000000ac2d	movq	0x1e7cc(%rip), %r14     ## Objc message: -[%rdi stopListeningForChanges]
000000000000ac34	callq	*%r14
000000000000ac37	movq	_OBJC_IVAR_$_UAPKeyboardViewController._stickyKeysEnableKeyboardShortcutCheckbox(%rip), %rax
000000000000ac3e	movq	(%rbx,%rax), %rdi
000000000000ac42	movq	0x29a5f(%rip), %rsi     ## Objc selector ref: state
000000000000ac49	callq	*%r14
000000000000ac4c	cmpq	$0x1, %rax
000000000000ac50	sete	%al
000000000000ac53	movzbl	%al, %edi
000000000000ac56	callq	0x1e6a6                 ## symbol stub for: _UAStickyKeysEnableWithShiftKeySetEnabled
000000000000ac5b	movq	0x29ac6(%rip), %rsi     ## Objc selector ref: startListeningForChanges
000000000000ac62	movq	%rbx, %rdi
000000000000ac65	movq	%r14, %rax
000000000000ac68	popq	%rbx
000000000000ac69	popq	%r14
000000000000ac6b	popq	%rbp
000000000000ac6c	jmpq	*%rax
000000000000ac6e	pushq	%rbp
000000000000ac6f	movq	%rsp, %rbp
000000000000ac72	pushq	%r14
000000000000ac74	pushq	%rbx
000000000000ac75	movq	%rdi, %rbx
000000000000ac78	movq	0x29aa1(%rip), %rsi     ## Objc selector ref: stopListeningForChanges
000000000000ac7f	movq	0x1e77a(%rip), %r14     ## Objc message: -[%rdi stopListeningForChanges]
000000000000ac86	callq	*%r14
000000000000ac89	movq	_OBJC_IVAR_$_UAPKeyboardViewController._stickyKeysBeepOnModifierCheckbox(%rip), %rax
000000000000ac90	movq	(%rbx,%rax), %rdi
000000000000ac94	movq	0x29a0d(%rip), %rsi     ## Objc selector ref: state
000000000000ac9b	callq	*%r14
000000000000ac9e	cmpq	$0x1, %rax
000000000000aca2	sete	%al
000000000000aca5	movzbl	%al, %edi
000000000000aca8	callq	0x1e6b8                 ## symbol stub for: _UAStickyKeysPlaySoundForModifierSetEnabled
000000000000acad	movq	0x29a74(%rip), %rsi     ## Objc selector ref: startListeningForChanges
000000000000acb4	movq	%rbx, %rdi
000000000000acb7	movq	%r14, %rax
000000000000acba	popq	%rbx
000000000000acbb	popq	%r14
000000000000acbd	popq	%rbp
000000000000acbe	jmpq	*%rax
000000000000acc0	pushq	%rbp
000000000000acc1	movq	%rsp, %rbp
000000000000acc4	pushq	%r14
000000000000acc6	pushq	%rbx
000000000000acc7	movq	%rdi, %rbx
000000000000acca	movq	0x29a4f(%rip), %rsi     ## Objc selector ref: stopListeningForChanges
000000000000acd1	movq	0x1e728(%rip), %r14     ## Objc message: -[%rdi stopListeningForChanges]
000000000000acd8	callq	*%r14
000000000000acdb	movq	_OBJC_IVAR_$_UAPKeyboardViewController._stickyKeysDisplayLocationPopup(%rip), %rax
000000000000ace2	movq	(%rbx,%rax), %rdi
000000000000ace6	movq	0x29ae3(%rip), %rsi     ## Objc selector ref: selectedTag
000000000000aced	callq	*%r14
000000000000acf0	movl	%eax, %edi
000000000000acf2	callq	0x1e6ca                 ## symbol stub for: _UAStickyKeysSetScreenLoctaion
000000000000acf7	movq	0x29a2a(%rip), %rsi     ## Objc selector ref: startListeningForChanges
000000000000acfe	movq	%rbx, %rdi
000000000000ad01	movq	%r14, %rax
000000000000ad04	popq	%rbx
000000000000ad05	popq	%r14
000000000000ad07	popq	%rbp
000000000000ad08	jmpq	*%rax
000000000000ad0a	pushq	%rbp
000000000000ad0b	movq	%rsp, %rbp
000000000000ad0e	pushq	%r14
000000000000ad10	pushq	%rbx
000000000000ad11	movq	%rdi, %rbx
000000000000ad14	movq	0x29a05(%rip), %rsi     ## Objc selector ref: stopListeningForChanges
000000000000ad1b	movq	0x1e6de(%rip), %r14     ## Objc message: -[%rdi stopListeningForChanges]
000000000000ad22	callq	*%r14
000000000000ad25	movq	_OBJC_IVAR_$_UAPKeyboardViewController._stickyKeysDisplayOnScreenCheckobx(%rip), %rax
000000000000ad2c	movq	(%rbx,%rax), %rdi
000000000000ad30	movq	0x29971(%rip), %rsi     ## Objc selector ref: state
000000000000ad37	callq	*%r14
000000000000ad3a	cmpq	$0x1, %rax
000000000000ad3e	sete	%al
000000000000ad41	movzbl	%al, %edi
000000000000ad44	callq	0x1e69a                 ## symbol stub for: _UAStickyKeysDisplayModifierSetEnabled
000000000000ad49	movq	0x299d8(%rip), %rsi     ## Objc selector ref: startListeningForChanges
000000000000ad50	movq	%rbx, %rdi
000000000000ad53	movq	%r14, %rax
000000000000ad56	popq	%rbx
000000000000ad57	popq	%r14
000000000000ad59	popq	%rbp
000000000000ad5a	jmpq	*%rax
000000000000ad5c	pushq	%rbp
000000000000ad5d	movq	%rsp, %rbp
000000000000ad60	pushq	%r14
000000000000ad62	pushq	%rbx
000000000000ad63	movq	%rdi, %rbx
000000000000ad66	movq	0x299b3(%rip), %rsi     ## Objc selector ref: stopListeningForChanges
000000000000ad6d	movq	0x1e68c(%rip), %r14     ## Objc message: -[%rdi stopListeningForChanges]
000000000000ad74	callq	*%r14
000000000000ad77	movq	_OBJC_IVAR_$_UAPKeyboardViewController._slowKeysEnableClickSoundCheckbox(%rip), %rax
000000000000ad7e	movq	(%rbx,%rax), %rdi
000000000000ad82	movq	0x2991f(%rip), %rsi     ## Objc selector ref: state
000000000000ad89	callq	*%r14
000000000000ad8c	cmpq	$0x1, %rax
000000000000ad90	sete	%al
000000000000ad93	movzbl	%al, %edi
000000000000ad96	callq	0x1e682                 ## symbol stub for: _UASlowKeysPlaySoundForKeySetEnabled
000000000000ad9b	movq	0x29986(%rip), %rsi     ## Objc selector ref: startListeningForChanges
000000000000ada2	movq	%rbx, %rdi
000000000000ada5	movq	%r14, %rax
000000000000ada8	popq	%rbx
000000000000ada9	popq	%r14
000000000000adab	popq	%rbp
000000000000adac	jmpq	*%rax
000000000000adae	pushq	%rbp
000000000000adaf	movq	%rsp, %rbp
000000000000adb2	pushq	%r14
000000000000adb4	pushq	%rbx
000000000000adb5	movq	%rdi, %rbx
000000000000adb8	movq	0x29961(%rip), %rsi     ## Objc selector ref: stopListeningForChanges
000000000000adbf	movq	0x1e63a(%rip), %r14     ## Objc message: -[%rdi stopListeningForChanges]
000000000000adc6	callq	*%r14
000000000000adc9	movq	_OBJC_IVAR_$_UAPKeyboardViewController._slowKeysAcceptanceDelaySlider(%rip), %rax
000000000000add0	movq	(%rbx,%rax), %rdi
000000000000add4	movq	0x2935d(%rip), %rsi     ## Objc selector ref: integerValue
000000000000addb	callq	*%r14
000000000000adde	movq	%rax, %rdi
000000000000ade1	callq	0x1e688                 ## symbol stub for: _UASlowKeysSetDelayInterval
000000000000ade6	movq	0x2993b(%rip), %rsi     ## Objc selector ref: startListeningForChanges
000000000000aded	movq	%rbx, %rdi
000000000000adf0	movq	%r14, %rax
000000000000adf3	popq	%rbx
000000000000adf4	popq	%r14
000000000000adf6	popq	%rbp
000000000000adf7	jmpq	*%rax
000000000000adf9	pushq	%rbp
000000000000adfa	movq	%rsp, %rbp
000000000000adfd	pushq	%r15
000000000000adff	pushq	%r14
000000000000ae01	pushq	%rbx
000000000000ae02	pushq	%rax
000000000000ae03	movq	%rdx, %rbx
000000000000ae06	movq	0x295bb(%rip), %rsi     ## Objc selector ref: window
000000000000ae0d	movq	0x1e5ec(%rip), %r15     ## Objc message: -[%rdi window]
000000000000ae14	movq	%rbx, %rdi
000000000000ae17	callq	*%r15
000000000000ae1a	movq	0x295af(%rip), %rsi     ## Objc selector ref: orderOut:
000000000000ae21	xorl	%edx, %edx
000000000000ae23	movq	%rax, %rdi
000000000000ae26	callq	*%r15
000000000000ae29	movq	0x1e2b0(%rip), %rax     ## literal pool symbol address: _NSApp
000000000000ae30	movq	(%rax), %r14
000000000000ae33	movq	0x2958e(%rip), %rsi     ## Objc selector ref: window
000000000000ae3a	movq	%rbx, %rdi
000000000000ae3d	callq	*%r15
000000000000ae40	movq	0x297e1(%rip), %rsi     ## Objc selector ref: endSheet:
000000000000ae47	movq	%r14, %rdi
000000000000ae4a	movq	%rax, %rdx
000000000000ae4d	movq	%r15, %rax
000000000000ae50	addq	$0x8, %rsp
000000000000ae54	popq	%rbx
000000000000ae55	popq	%r14
000000000000ae57	popq	%r15
000000000000ae59	popq	%rbp
000000000000ae5a	jmpq	*%rax
000000000000ae5c	pushq	%rbp
000000000000ae5d	movq	%rsp, %rbp
000000000000ae60	pushq	%r15
000000000000ae62	pushq	%r14
000000000000ae64	pushq	%rbx
000000000000ae65	pushq	%rax
000000000000ae66	movq	%rdx, %r14
000000000000ae69	movq	%rdi, %rbx
000000000000ae6c	movq	0x29555(%rip), %rsi     ## Objc selector ref: window
000000000000ae73	movq	%r14, %rdi
000000000000ae76	callq	*0x1e584(%rip)          ## Objc message: -[%rdi window]
000000000000ae7c	movq	_OBJC_IVAR_$_UAPKeyboardViewController._stickyKeysOptionsSheet(%rip), %rcx
000000000000ae83	cmpq	(%rbx,%rcx), %rax
000000000000ae87	je	0xaf48
000000000000ae8d	movq	0x29534(%rip), %rsi     ## Objc selector ref: window
000000000000ae94	movq	%r14, %rdi
000000000000ae97	callq	*0x1e563(%rip)          ## Objc message: -[%rdi window]
000000000000ae9d	movq	_OBJC_IVAR_$_UAPKeyboardViewController._slowKeysOptionsSheet(%rip), %rcx
000000000000aea4	cmpq	(%rbx,%rcx), %rax
000000000000aea8	jne	0xb07c
000000000000aeae	movq	_OBJC_IVAR_$_UAPKeyboardViewController._slowKeysEnableClickSoundCheckbox(%rip), %r15
000000000000aeb5	movq	(%rbx,%r15), %rdi
000000000000aeb9	movq	0x297e8(%rip), %rsi     ## Objc selector ref: state
000000000000aec0	callq	*0x1e53a(%rip)          ## Objc message: -[%rdi state]
000000000000aec6	movq	_OBJC_IVAR_$_UAPKeyboardViewController._cachedSlowKeysEnableClickSoundCheckboxState(%rip), %rcx
000000000000aecd	movq	(%rbx,%rcx), %rdx
000000000000aed1	cmpq	%rdx, %rax
000000000000aed4	je	0xaefb
000000000000aed6	movq	(%rbx,%r15), %rdi
000000000000aeda	movq	0x2955f(%rip), %rsi     ## Objc selector ref: setState:
000000000000aee1	movq	0x1e518(%rip), %r15     ## Objc message: -[%rdi setState:]
000000000000aee8	callq	*%r15
000000000000aeeb	movq	0x29906(%rip), %rsi     ## Objc selector ref: slowKeysEnableClickSounds:
000000000000aef2	movq	%rbx, %rdi
000000000000aef5	movq	%rbx, %rdx
000000000000aef8	callq	*%r15
000000000000aefb	movq	_OBJC_IVAR_$_UAPKeyboardViewController._slowKeysAcceptanceDelaySlider(%rip), %r15
000000000000af02	movq	(%rbx,%r15), %rdi
000000000000af06	movq	0x2922b(%rip), %rsi     ## Objc selector ref: integerValue
000000000000af0d	callq	*0x1e4ed(%rip)          ## Objc message: -[%rdi integerValue]
000000000000af13	movq	_OBJC_IVAR_$_UAPKeyboardViewController._cachedSlowKeysAcceptanceDelaySliderIntegerValue(%rip), %rcx
000000000000af1a	movq	(%rbx,%rcx), %rdx
000000000000af1e	cmpq	%rdx, %rax
000000000000af21	je	0xb07c
000000000000af27	movq	(%rbx,%r15), %rdi
000000000000af2b	movq	0x298ce(%rip), %rsi     ## Objc selector ref: setIntValue:
000000000000af32	movq	0x1e4c7(%rip), %r15     ## Objc message: -[%rdi setIntValue:]
000000000000af39	callq	*%r15
000000000000af3c	movq	0x298c5(%rip), %rsi     ## Objc selector ref: slowKeysChangeAcceptanceDelaySlider:
000000000000af43	jmp	0xb073
000000000000af48	movq	_OBJC_IVAR_$_UAPKeyboardViewController._stickyKeysEnableKeyboardShortcutCheckbox(%rip), %r15
000000000000af4f	movq	(%rbx,%r15), %rdi
000000000000af53	movq	0x2974e(%rip), %rsi     ## Objc selector ref: state
000000000000af5a	callq	*0x1e4a0(%rip)          ## Objc message: -[%rdi state]
000000000000af60	movq	_OBJC_IVAR_$_UAPKeyboardViewController._cachedStickyKeysEnableKeyboardShortcutCheckboxState(%rip), %rcx
000000000000af67	movq	(%rbx,%rcx), %rdx
000000000000af6b	cmpq	%rdx, %rax
000000000000af6e	je	0xaf95
000000000000af70	movq	(%rbx,%r15), %rdi
000000000000af74	movq	0x294c5(%rip), %rsi     ## Objc selector ref: setState:
000000000000af7b	movq	0x1e47e(%rip), %r15     ## Objc message: -[%rdi setState:]
000000000000af82	callq	*%r15
000000000000af85	movq	0x2984c(%rip), %rsi     ## Objc selector ref: stickyKeysEnableKeyboardShortcut:
000000000000af8c	movq	%rbx, %rdi
000000000000af8f	movq	%rbx, %rdx
000000000000af92	callq	*%r15
000000000000af95	movq	_OBJC_IVAR_$_UAPKeyboardViewController._stickyKeysBeepOnModifierCheckbox(%rip), %r15
000000000000af9c	movq	(%rbx,%r15), %rdi
000000000000afa0	movq	0x29701(%rip), %rsi     ## Objc selector ref: state
000000000000afa7	callq	*0x1e453(%rip)          ## Objc message: -[%rdi state]
000000000000afad	movq	_OBJC_IVAR_$_UAPKeyboardViewController._cachedStickyKeysBeepOnModifierCheckboxState(%rip), %rcx
000000000000afb4	movq	(%rbx,%rcx), %rdx
000000000000afb8	cmpq	%rdx, %rax
000000000000afbb	je	0xafe2
000000000000afbd	movq	(%rbx,%r15), %rdi
000000000000afc1	movq	0x29478(%rip), %rsi     ## Objc selector ref: setState:
000000000000afc8	movq	0x1e431(%rip), %r15     ## Objc message: -[%rdi setState:]
000000000000afcf	callq	*%r15
000000000000afd2	movq	0x29807(%rip), %rsi     ## Objc selector ref: stickyKeysBeepOnModifier:
000000000000afd9	movq	%rbx, %rdi
000000000000afdc	movq	%rbx, %rdx
000000000000afdf	callq	*%r15
000000000000afe2	movq	_OBJC_IVAR_$_UAPKeyboardViewController._stickyKeysDisplayOnScreenCheckobx(%rip), %r15
000000000000afe9	movq	(%rbx,%r15), %rdi
000000000000afed	movq	0x296b4(%rip), %rsi     ## Objc selector ref: state
000000000000aff4	callq	*0x1e406(%rip)          ## Objc message: -[%rdi state]
000000000000affa	movq	_OBJC_IVAR_$_UAPKeyboardViewController._cachedStickyKeysDisplayOnScreenCheckobxState(%rip), %rcx
000000000000b001	movq	(%rbx,%rcx), %rdx
000000000000b005	cmpq	%rdx, %rax
000000000000b008	je	0xb02f
000000000000b00a	movq	(%rbx,%r15), %rdi
000000000000b00e	movq	0x2942b(%rip), %rsi     ## Objc selector ref: setState:
000000000000b015	movq	0x1e3e4(%rip), %r15     ## Objc message: -[%rdi setState:]
000000000000b01c	callq	*%r15
000000000000b01f	movq	0x297c2(%rip), %rsi     ## Objc selector ref: stickyKeysDisplayOnScreenCheckobx:
000000000000b026	movq	%rbx, %rdi
000000000000b029	movq	%rbx, %rdx
000000000000b02c	callq	*%r15
000000000000b02f	movq	_OBJC_IVAR_$_UAPKeyboardViewController._stickyKeysDisplayLocationPopup(%rip), %r15
000000000000b036	movq	(%rbx,%r15), %rdi
000000000000b03a	movq	0x2978f(%rip), %rsi     ## Objc selector ref: selectedTag
000000000000b041	callq	*0x1e3b9(%rip)          ## Objc message: -[%rdi selectedTag]
000000000000b047	movq	_OBJC_IVAR_$_UAPKeyboardViewController._cachedStickyKeysDisplayLocationPopupSelectedTag(%rip), %rcx
000000000000b04e	movq	(%rbx,%rcx), %rdx
000000000000b052	cmpq	%rdx, %rax
000000000000b055	je	0xb07c
000000000000b057	movq	(%rbx,%r15), %rdi
000000000000b05b	movq	0x29416(%rip), %rsi     ## Objc selector ref: selectItemWithTag:
000000000000b062	movq	0x1e397(%rip), %r15     ## Objc message: -[%rdi selectItemWithTag:]
000000000000b069	callq	*%r15
000000000000b06c	movq	0x2977d(%rip), %rsi     ## Objc selector ref: stickyKeysSelectDisplayLocation:
000000000000b073	movq	%rbx, %rdi
000000000000b076	movq	%rbx, %rdx
000000000000b079	callq	*%r15
000000000000b07c	movq	0x29345(%rip), %rsi     ## Objc selector ref: window
000000000000b083	movq	0x1e376(%rip), %r15     ## Objc message: -[%rdi window]
000000000000b08a	movq	%r14, %rdi
000000000000b08d	callq	*%r15
000000000000b090	movq	0x29339(%rip), %rsi     ## Objc selector ref: orderOut:
000000000000b097	xorl	%edx, %edx
000000000000b099	movq	%rax, %rdi
000000000000b09c	callq	*%r15
000000000000b09f	movq	0x1e03a(%rip), %rax     ## literal pool symbol address: _NSApp
000000000000b0a6	movq	(%rax), %rbx
000000000000b0a9	movq	0x29318(%rip), %rsi     ## Objc selector ref: window
000000000000b0b0	movq	%r14, %rdi
000000000000b0b3	callq	*%r15
000000000000b0b6	movq	0x2956b(%rip), %rsi     ## Objc selector ref: endSheet:
000000000000b0bd	movq	%rbx, %rdi
000000000000b0c0	movq	%rax, %rdx
000000000000b0c3	movq	%r15, %rax
000000000000b0c6	addq	$0x8, %rsp
000000000000b0ca	popq	%rbx
000000000000b0cb	popq	%r14
000000000000b0cd	popq	%r15
000000000000b0cf	popq	%rbp
000000000000b0d0	jmpq	*%rax
000000000000b0d2	pushq	%rbp
000000000000b0d3	movq	%rsp, %rbp
000000000000b0d6	movq	0x296eb(%rip), %rsi     ## Objc selector ref: _readPreferences:cacheSettings:
000000000000b0dd	xorl	%ecx, %ecx
000000000000b0df	popq	%rbp
000000000000b0e0	jmpq	*0x1e31a(%rip)          ## Objc message: -[%rdi _readPreferences:cacheSettings:]
000000000000b0e6	pushq	%rbp
000000000000b0e7	movq	%rsp, %rbp
000000000000b0ea	pushq	%r15
000000000000b0ec	pushq	%r14
000000000000b0ee	pushq	%r13
000000000000b0f0	pushq	%r12
000000000000b0f2	pushq	%rbx
000000000000b0f3	pushq	%rax
000000000000b0f4	movl	%ecx, -0x2c(%rbp)
000000000000b0f7	movq	%rdi, %rbx
000000000000b0fa	movq	_OBJC_IVAR_$_UAPKeyboardViewController._stickyKeysEnableCheckbox(%rip), %r14
000000000000b101	movq	(%rbx,%r14), %r15
000000000000b105	movq	0x1e114(%rip), %rax     ## literal pool symbol address: _UAStickyKeysEnabledKey
000000000000b10c	movq	(%rax), %rdi
000000000000b10f	callq	0x1e4cc                 ## symbol stub for: _UAPreferenceIsForced
000000000000b114	testb	%al, %al
000000000000b116	je	0xb11c
000000000000b118	xorl	%eax, %eax
000000000000b11a	jmp	0xb126
000000000000b11c	callq	0x1e742                 ## symbol stub for: _UASwitchIsEnabled
000000000000b121	testb	%al, %al
000000000000b123	sete	%al
000000000000b126	movq	0x29613(%rip), %rsi     ## Objc selector ref: setEnabled:
000000000000b12d	movzbl	%al, %edx
000000000000b130	movq	0x1e2c9(%rip), %r12     ## Objc message: -[%rdi setEnabled:]
000000000000b137	movq	%r15, %rdi
000000000000b13a	callq	*%r12
000000000000b13d	movq	(%rbx,%r14), %r15
000000000000b141	callq	0x1e6ac                 ## symbol stub for: _UAStickyKeysIsEnabled
000000000000b146	testb	%al, %al
000000000000b148	setne	%al
000000000000b14b	movzbl	%al, %edx
000000000000b14e	movq	0x292eb(%rip), %rsi     ## Objc selector ref: setState:
000000000000b155	movq	%r15, %rdi
000000000000b158	callq	*%r12
000000000000b15b	movq	_OBJC_IVAR_$_UAPKeyboardViewController._stickyKeysEnableKeyboardShortcutCheckbox(%rip), %rax
000000000000b162	movq	(%rbx,%rax), %r15
000000000000b166	callq	0x1e6a0                 ## symbol stub for: _UAStickyKeysEnableWithShiftKeyIsEnabled
000000000000b16b	testb	%al, %al
000000000000b16d	setne	%al
000000000000b170	movzbl	%al, %edx
000000000000b173	movq	0x292c6(%rip), %rsi     ## Objc selector ref: setState:
000000000000b17a	movq	%r15, %rdi
000000000000b17d	callq	*%r12
000000000000b180	movq	_OBJC_IVAR_$_UAPKeyboardViewController._stickyKeysBeepOnModifierCheckbox(%rip), %rax
000000000000b187	movq	(%rbx,%rax), %r15
000000000000b18b	callq	0x1e6b2                 ## symbol stub for: _UAStickyKeysPlaySoundForModifierIsEnabled
000000000000b190	testb	%al, %al
000000000000b192	setne	%al
000000000000b195	movzbl	%al, %edx
000000000000b198	movq	0x292a1(%rip), %rsi     ## Objc selector ref: setState:
000000000000b19f	movq	%r15, %rdi
000000000000b1a2	callq	*%r12
000000000000b1a5	callq	0x1e694                 ## symbol stub for: _UAStickyKeysDisplayModifierIsEnabled
000000000000b1aa	movb	%al, %r15b
000000000000b1ad	movq	_OBJC_IVAR_$_UAPKeyboardViewController._stickyKeysDisplayOnScreenCheckobx(%rip), %rax
000000000000b1b4	movq	(%rbx,%rax), %rdi
000000000000b1b8	testb	%r15b, %r15b
000000000000b1bb	setne	%al
000000000000b1be	movzbl	%al, %edx
000000000000b1c1	movq	0x29278(%rip), %rsi     ## Objc selector ref: setState:
000000000000b1c8	callq	*%r12
000000000000b1cb	movq	_OBJC_IVAR_$_UAPKeyboardViewController._stickyKeysDisplayLocationPopup(%rip), %r14
000000000000b1d2	movq	(%rbx,%r14), %rdi
000000000000b1d6	movq	0x29563(%rip), %rsi     ## Objc selector ref: setEnabled:
000000000000b1dd	movsbl	%r15b, %edx
000000000000b1e1	callq	*%r12
000000000000b1e4	movq	(%rbx,%r14), %r15
000000000000b1e8	callq	0x1e6be                 ## symbol stub for: _UAStickyKeysScreenLocation
000000000000b1ed	movl	%eax, %edx
000000000000b1ef	movq	0x29282(%rip), %rsi     ## Objc selector ref: selectItemWithTag:
000000000000b1f6	movq	%r15, %rdi
000000000000b1f9	callq	*%r12
000000000000b1fc	movq	_OBJC_IVAR_$_UAPKeyboardViewController._slowKeysEnableCheckbox(%rip), %rax
000000000000b203	movq	(%rbx,%rax), %r15
000000000000b207	callq	0x1e676                 ## symbol stub for: _UASlowKeysIsEnabled
000000000000b20c	testb	%al, %al
000000000000b20e	setne	%al
000000000000b211	movzbl	%al, %edx
000000000000b214	movq	0x29225(%rip), %rsi     ## Objc selector ref: setState:
000000000000b21b	movq	%r15, %rdi
000000000000b21e	callq	*%r12
000000000000b221	movq	_OBJC_IVAR_$_UAPKeyboardViewController._slowKeysEnableClickSoundCheckbox(%rip), %r13
000000000000b228	movq	(%rbx,%r13), %r15
000000000000b22c	callq	0x1e67c                 ## symbol stub for: _UASlowKeysPlaySoundForKeyIsEnabled
000000000000b231	testb	%al, %al
000000000000b233	setne	%al
000000000000b236	movzbl	%al, %edx
000000000000b239	movq	0x29200(%rip), %rsi     ## Objc selector ref: setState:
000000000000b240	movq	%r15, %rdi
000000000000b243	callq	*%r12
000000000000b246	movq	_OBJC_IVAR_$_UAPKeyboardViewController._slowKeysAcceptanceDelaySlider(%rip), %r14
000000000000b24d	movq	(%rbx,%r14), %r15
000000000000b251	callq	0x1e670                 ## symbol stub for: _UASlowKeysDelayInterval
000000000000b256	movq	0x295a3(%rip), %rsi     ## Objc selector ref: setIntValue:
000000000000b25d	movq	%r15, %rdi
000000000000b260	movl	%eax, %edx
000000000000b262	callq	*%r12
000000000000b265	movl	-0x2c(%rbp), %eax
000000000000b268	testb	%al, %al
000000000000b26a	je	0xb322
000000000000b270	movq	_OBJC_IVAR_$_UAPKeyboardViewController._stickyKeysEnableKeyboardShortcutCheckbox(%rip), %rax
000000000000b277	movq	(%rbx,%rax), %rdi
000000000000b27b	movq	0x29426(%rip), %rsi     ## Objc selector ref: state
000000000000b282	callq	*%r12
000000000000b285	movq	_OBJC_IVAR_$_UAPKeyboardViewController._cachedStickyKeysEnableKeyboardShortcutCheckboxState(%rip), %rcx
000000000000b28c	movq	%rax, (%rbx,%rcx)
000000000000b290	movq	_OBJC_IVAR_$_UAPKeyboardViewController._stickyKeysBeepOnModifierCheckbox(%rip), %rax
000000000000b297	movq	(%rbx,%rax), %rdi
000000000000b29b	movq	0x29406(%rip), %rsi     ## Objc selector ref: state
000000000000b2a2	callq	*%r12
000000000000b2a5	movq	_OBJC_IVAR_$_UAPKeyboardViewController._cachedStickyKeysBeepOnModifierCheckboxState(%rip), %rcx
000000000000b2ac	movq	%rax, (%rbx,%rcx)
000000000000b2b0	movq	_OBJC_IVAR_$_UAPKeyboardViewController._stickyKeysDisplayOnScreenCheckobx(%rip), %rax
000000000000b2b7	movq	(%rbx,%rax), %rdi
000000000000b2bb	movq	0x293e6(%rip), %rsi     ## Objc selector ref: state
000000000000b2c2	callq	*%r12
000000000000b2c5	movq	_OBJC_IVAR_$_UAPKeyboardViewController._cachedStickyKeysDisplayOnScreenCheckobxState(%rip), %rcx
000000000000b2cc	movq	%rax, (%rbx,%rcx)
000000000000b2d0	movq	_OBJC_IVAR_$_UAPKeyboardViewController._stickyKeysDisplayLocationPopup(%rip), %rax
000000000000b2d7	movq	(%rbx,%rax), %rdi
000000000000b2db	movq	0x294ee(%rip), %rsi     ## Objc selector ref: selectedTag
000000000000b2e2	callq	*%r12
000000000000b2e5	movq	_OBJC_IVAR_$_UAPKeyboardViewController._cachedStickyKeysDisplayLocationPopupSelectedTag(%rip), %rcx
000000000000b2ec	movq	%rax, (%rbx,%rcx)
000000000000b2f0	movq	(%rbx,%r13), %rdi
000000000000b2f4	movq	0x293ad(%rip), %rsi     ## Objc selector ref: state
000000000000b2fb	callq	*%r12
000000000000b2fe	movq	_OBJC_IVAR_$_UAPKeyboardViewController._cachedSlowKeysEnableClickSoundCheckboxState(%rip), %rcx
000000000000b305	movq	%rax, (%rbx,%rcx)
000000000000b309	movq	(%rbx,%r14), %rdi
000000000000b30d	movq	0x28e24(%rip), %rsi     ## Objc selector ref: integerValue
000000000000b314	callq	*%r12
000000000000b317	movq	_OBJC_IVAR_$_UAPKeyboardViewController._cachedSlowKeysAcceptanceDelaySliderIntegerValue(%rip), %rcx
000000000000b31e	movq	%rax, (%rbx,%rcx)
000000000000b322	addq	$0x8, %rsp
000000000000b326	popq	%rbx
000000000000b327	popq	%r12
000000000000b329	popq	%r13
000000000000b32b	popq	%r14
000000000000b32d	popq	%r15
000000000000b32f	popq	%rbp
000000000000b330	retq
000000000000b331	pushq	%rbp
000000000000b332	movq	%rsp, %rbp
000000000000b335	pushq	%r14
000000000000b337	pushq	%rbx
000000000000b338	subq	$0x10, %rsp
000000000000b33c	movq	%rdx, %r14
000000000000b33f	movq	%rdi, %rbx
000000000000b342	movq	%rbx, -0x20(%rbp)
000000000000b346	movq	0x2a3f3(%rip), %rax     ## Objc class ref: UAPKeyboardViewController
000000000000b34d	movq	%rax, -0x18(%rbp)
000000000000b351	movq	0x293e0(%rip), %rsi     ## Objc selector ref: readPreferences:
000000000000b358	leaq	-0x20(%rbp), %rdi
000000000000b35c	callq	0x1e88c                 ## Objc message: -[[%rdi super] readPreferences:]
000000000000b361	movq	0x29458(%rip), %rdx     ## Objc selector ref: _readPreferences:
000000000000b368	movq	0x294a1(%rip), %rsi     ## Objc selector ref: performSelector:withObject:afterDelay:
000000000000b36f	movsd	0x1cfb9(%rip), %xmm0
000000000000b377	movq	%rbx, %rdi
000000000000b37a	movq	%r14, %rcx
000000000000b37d	callq	*0x1e07d(%rip)          ## Objc message: -[%rdi performSelector:withObject:afterDelay:]
000000000000b383	addq	$0x10, %rsp
000000000000b387	popq	%rbx
000000000000b388	popq	%r14
000000000000b38a	popq	%rbp
000000000000b38b	retq
000000000000b38c	pushq	%rbp
000000000000b38d	movq	%rsp, %rbp
000000000000b390	pushq	%r15
000000000000b392	pushq	%r14
000000000000b394	pushq	%r12
000000000000b396	pushq	%rbx
000000000000b397	subq	$0x10, %rsp
000000000000b39b	movq	%rdi, %r15
000000000000b39e	movq	_OBJC_IVAR_$_UAPKeyboardViewController._stickyKeysEnableCheckbox(%rip), %rax
000000000000b3a5	movq	(%r15,%rax), %r14
000000000000b3a9	movq	0x1de70(%rip), %rax     ## literal pool symbol address: _UAStickyKeysEnabledKey
000000000000b3b0	movq	(%rax), %rdi
000000000000b3b3	callq	0x1e4cc                 ## symbol stub for: _UAPreferenceIsForced
000000000000b3b8	testb	%al, %al
000000000000b3ba	je	0xb3c0
000000000000b3bc	xorl	%eax, %eax
000000000000b3be	jmp	0xb3ca
000000000000b3c0	callq	0x1e742                 ## symbol stub for: _UASwitchIsEnabled
000000000000b3c5	testb	%al, %al
000000000000b3c7	sete	%al
000000000000b3ca	movq	0x2936f(%rip), %rsi     ## Objc selector ref: setEnabled:
000000000000b3d1	movzbl	%al, %edx
000000000000b3d4	movq	0x1e025(%rip), %r12     ## Objc message: -[%rdi setEnabled:]
000000000000b3db	movq	%r14, %rdi
000000000000b3de	callq	*%r12
000000000000b3e1	movq	_OBJC_IVAR_$_UAPKeyboardViewController._stickyKeysEnableKeyboardShortcutCheckbox(%rip), %rax
000000000000b3e8	movq	(%r15,%rax), %rbx
000000000000b3ec	movq	0x1de25(%rip), %rax     ## literal pool symbol address: _UAStickyKeysEnableWithShiftKeyKey
000000000000b3f3	movq	(%rax), %rdi
000000000000b3f6	callq	0x1e4cc                 ## symbol stub for: _UAPreferenceIsForced
000000000000b3fb	testb	%al, %al
000000000000b3fd	sete	%al
000000000000b400	movq	0x29339(%rip), %rsi     ## Objc selector ref: setEnabled:
000000000000b407	movzbl	%al, %edx
000000000000b40a	movq	%rbx, %rdi
000000000000b40d	callq	*%r12
000000000000b410	movq	_OBJC_IVAR_$_UAPKeyboardViewController._stickyKeysBeepOnModifierCheckbox(%rip), %rax
000000000000b417	movq	(%r15,%rax), %rbx
000000000000b41b	movq	0x1de06(%rip), %rax     ## literal pool symbol address: _UAStickyKeysPlaySoundForModifierKey
000000000000b422	movq	(%rax), %rdi
000000000000b425	callq	0x1e4cc                 ## symbol stub for: _UAPreferenceIsForced
000000000000b42a	testb	%al, %al
000000000000b42c	sete	%al
000000000000b42f	movq	0x2930a(%rip), %rsi     ## Objc selector ref: setEnabled:
000000000000b436	movzbl	%al, %edx
000000000000b439	movq	%rbx, %rdi
000000000000b43c	callq	*%r12
000000000000b43f	movq	_OBJC_IVAR_$_UAPKeyboardViewController._stickyKeysDisplayOnScreenCheckobx(%rip), %rax
000000000000b446	movq	(%r15,%rax), %rbx
000000000000b44a	movq	0x1ddbf(%rip), %rax     ## literal pool symbol address: _UAStickyKeysDisplayModifiersKey
000000000000b451	movq	(%rax), %rdi
000000000000b454	callq	0x1e4cc                 ## symbol stub for: _UAPreferenceIsForced
000000000000b459	testb	%al, %al
000000000000b45b	sete	%al
000000000000b45e	movq	0x292db(%rip), %rsi     ## Objc selector ref: setEnabled:
000000000000b465	movzbl	%al, %edx
000000000000b468	movq	%rbx, %rdi
000000000000b46b	callq	*%r12
000000000000b46e	movq	_OBJC_IVAR_$_UAPKeyboardViewController._slowKeysEnableCheckbox(%rip), %rax
000000000000b475	movq	(%r15,%rax), %rbx
000000000000b479	movq	0x1dd80(%rip), %rax     ## literal pool symbol address: _UASlowKeysEnabledKey
000000000000b480	movq	(%rax), %rdi
000000000000b483	callq	0x1e4cc                 ## symbol stub for: _UAPreferenceIsForced
000000000000b488	testb	%al, %al
000000000000b48a	sete	%al
000000000000b48d	movq	0x292ac(%rip), %rsi     ## Objc selector ref: setEnabled:
000000000000b494	movzbl	%al, %edx
000000000000b497	movq	%rbx, %rdi
000000000000b49a	callq	*%r12
000000000000b49d	movq	_OBJC_IVAR_$_UAPKeyboardViewController._slowKeysEnableClickSoundCheckbox(%rip), %rax
000000000000b4a4	movq	(%r15,%rax), %rbx
000000000000b4a8	movq	0x1dd59(%rip), %rax     ## literal pool symbol address: _UASlowKeysPlaySoundForKeyKey
000000000000b4af	movq	(%rax), %rdi
000000000000b4b2	callq	0x1e4cc                 ## symbol stub for: _UAPreferenceIsForced
000000000000b4b7	testb	%al, %al
000000000000b4b9	sete	%al
000000000000b4bc	movq	0x2927d(%rip), %rsi     ## Objc selector ref: setEnabled:
000000000000b4c3	movzbl	%al, %edx
000000000000b4c6	movq	%rbx, %rdi
000000000000b4c9	callq	*%r12
000000000000b4cc	movq	_OBJC_IVAR_$_UAPKeyboardViewController._slowKeysAcceptanceDelaySlider(%rip), %rax
000000000000b4d3	movq	(%r15,%rax), %rbx
000000000000b4d7	movq	0x1dd1a(%rip), %rax     ## literal pool symbol address: _UASlowKeysDelayIntervalKey
000000000000b4de	movq	(%rax), %rdi
000000000000b4e1	callq	0x1e4cc                 ## symbol stub for: _UAPreferenceIsForced
000000000000b4e6	testb	%al, %al
000000000000b4e8	sete	%al
000000000000b4eb	movq	0x2924e(%rip), %rsi     ## Objc selector ref: setEnabled:
000000000000b4f2	movzbl	%al, %edx
000000000000b4f5	movq	%rbx, %rdi
000000000000b4f8	callq	*%r12
000000000000b4fb	movq	%r15, -0x30(%rbp)
000000000000b4ff	movq	0x2a23a(%rip), %rax     ## Objc class ref: UAPKeyboardViewController
000000000000b506	movq	%rax, -0x28(%rbp)
000000000000b50a	movq	0x29237(%rip), %rsi     ## Objc selector ref: validateControls
000000000000b511	leaq	-0x30(%rbp), %rdi
000000000000b515	callq	0x1e88c                 ## Objc message: -[[%rdi super] validateControls]
000000000000b51a	addq	$0x10, %rsp
000000000000b51e	popq	%rbx
000000000000b51f	popq	%r12
000000000000b521	popq	%r14
000000000000b523	popq	%r15
000000000000b525	popq	%rbp
000000000000b526	retq
000000000000b527	nop
000000000000b528	nop
000000000000b529	nop
000000000000b52a	nop
000000000000b52b	nop
000000000000b52c	nop
000000000000b52d	nop
000000000000b52e	nop
000000000000b52f	nop
000000000000b530	pushq	%rbp
000000000000b531	movq	%rsp, %rbp
000000000000b534	pushq	%r15
000000000000b536	pushq	%r14
000000000000b538	pushq	%r13
000000000000b53a	pushq	%r12
000000000000b53c	pushq	%rbx
000000000000b53d	subq	$0x18, %rsp
000000000000b541	movq	%rdi, %r14
000000000000b544	movq	0x29fb5(%rip), %rbx     ## Objc class ref: _OBJC_CLASS_$_NSBundle
000000000000b54b	movq	0x29fb6(%rip), %rdi     ## Objc class ref: UniversalAccessPref
000000000000b552	movq	0x28b67(%rip), %rsi     ## Objc selector ref: class
000000000000b559	movq	0x1dea0(%rip), %r13     ## Objc message: +[UniversalAccessPref class]
000000000000b560	callq	*%r13
000000000000b563	movq	0x28c4e(%rip), %rsi     ## Objc selector ref: bundleForClass:
000000000000b56a	movq	%rbx, %rdi
000000000000b56d	movq	%rax, %rdx
000000000000b570	callq	*%r13
000000000000b573	movq	%r14, -0x38(%rbp)
000000000000b577	movq	0x2a1ca(%rip), %rcx     ## Objc class ref: UAPSwitchViewController
000000000000b57e	movq	%rcx, -0x30(%rbp)
000000000000b582	movq	0x28cbf(%rip), %rsi     ## Objc selector ref: initWithNibName:bundle:
000000000000b589	leaq	0x1f380(%rip), %rdx     ## Objc cfstring ref: @"Switch"
000000000000b590	leaq	-0x38(%rbp), %rdi
000000000000b594	movq	%rax, %rcx
000000000000b597	callq	0x1e88c                 ## Objc message: -[[%rdi super] initWithNibName:bundle:]
000000000000b59c	movq	%rax, %rbx
000000000000b59f	testq	%rbx, %rbx
000000000000b5a2	je	0xb870
000000000000b5a8	movq	0x1dbd1(%rip), %rax     ## literal pool symbol address: _UADomainSwitchSettingsDidChangeNotification
000000000000b5af	movq	(%rax), %r14
000000000000b5b2	leaq	_OBJC_IVAR_$_UAPOptionsViewController._notificationOfInterest(%rip), %rax
000000000000b5b9	movq	(%rax), %rdx
000000000000b5bc	movq	%r14, %rdi
000000000000b5bf	movq	%rbx, %rsi
000000000000b5c2	callq	0x1e868                 ## symbol stub for: _objc_assign_ivar
000000000000b5c7	movq	0x29fe2(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_NSDistributedNotificationCenter
000000000000b5ce	movq	0x28d5b(%rip), %rsi     ## Objc selector ref: defaultCenter
000000000000b5d5	callq	*%r13
000000000000b5d8	movq	0x29239(%rip), %rcx     ## Objc selector ref: _switchSettingsDidChange:
000000000000b5df	movq	0x29172(%rip), %rsi     ## Objc selector ref: addObserver:selector:name:object:suspensionBehavior:
000000000000b5e6	movq	$0x4, (%rsp)
000000000000b5ee	xorl	%r9d, %r9d
000000000000b5f1	movq	%rax, %rdi
000000000000b5f4	movq	%rbx, %rdx
000000000000b5f7	movq	%r14, %r8
000000000000b5fa	callq	*%r13
000000000000b5fd	movq	0x29fb4(%rip), %rdi     ## Objc class ref: UASwitchInputEntity
000000000000b604	movq	0x28b5d(%rip), %rsi     ## Objc selector ref: alloc
000000000000b60b	callq	*%r13
000000000000b60e	movq	0x2920b(%rip), %rsi     ## Objc selector ref: initWithIndex:actionKey:
000000000000b615	movq	$-0x1, %rdx
000000000000b61c	xorl	%ecx, %ecx
000000000000b61e	movq	%rax, %rdi
000000000000b621	callq	*%r13
000000000000b624	movq	_OBJC_IVAR_$_UAPSwitchViewController._editingSwitchInputEntity(%rip), %rdx
000000000000b62b	movq	%rax, %rdi
000000000000b62e	movq	%rbx, %rsi
000000000000b631	callq	0x1e868                 ## symbol stub for: _objc_assign_ivar
000000000000b636	movq	0x29f1b(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_NSMutableArray
000000000000b63d	movq	0x28b24(%rip), %rsi     ## Objc selector ref: alloc
000000000000b644	callq	*%r13
000000000000b647	movq	0x28c22(%rip), %rsi     ## Objc selector ref: init
000000000000b64e	movq	%rax, %rdi
000000000000b651	callq	*%r13
000000000000b654	movq	_OBJC_IVAR_$_UAPSwitchViewController._defaultSwitchNames(%rip), %rdx
000000000000b65b	movq	%rax, %rdi
000000000000b65e	movq	%rbx, %rsi
000000000000b661	callq	0x1e868                 ## symbol stub for: _objc_assign_ivar
000000000000b666	movq	0x29f53(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_NSNumberFormatter
000000000000b66d	movq	0x28af4(%rip), %rsi     ## Objc selector ref: alloc
000000000000b674	callq	*%r13
000000000000b677	movq	0x28bf2(%rip), %rsi     ## Objc selector ref: init
000000000000b67e	movq	%rax, %rdi
000000000000b681	callq	*%r13
000000000000b684	movq	_OBJC_IVAR_$_UAPSwitchViewController._secondsFormatter(%rip), %r14
000000000000b68b	movq	%rax, %rdi
000000000000b68e	movq	%rbx, %rsi
000000000000b691	movq	%r14, %rdx
000000000000b694	callq	0x1e868                 ## symbol stub for: _objc_assign_ivar
000000000000b699	movq	(%rbx,%r14), %rdi
000000000000b69d	movq	0x29184(%rip), %rsi     ## Objc selector ref: setNumberStyle:
000000000000b6a4	movl	$0x1, %edx
000000000000b6a9	callq	*%r13
000000000000b6ac	movq	(%rbx,%r14), %r15
000000000000b6b0	movq	0x29e49(%rip), %r12     ## Objc class ref: _OBJC_CLASS_$_NSBundle
000000000000b6b7	movq	0x29e4a(%rip), %rdi     ## Objc class ref: UniversalAccessPref
000000000000b6be	movq	0x289fb(%rip), %rsi     ## Objc selector ref: class
000000000000b6c5	callq	*%r13
000000000000b6c8	movq	0x28ae9(%rip), %rsi     ## Objc selector ref: bundleForClass:
000000000000b6cf	movq	%r12, %rdi
000000000000b6d2	movq	%rax, %rdx
000000000000b6d5	callq	*%r13
000000000000b6d8	movq	0x28ae1(%rip), %rsi     ## Objc selector ref: localizedStringForKey:value:table:
000000000000b6df	leaq	0x1f24a(%rip), %rdx     ## Objc cfstring ref: @"switch.durationFormatter.secondsSuffix"
000000000000b6e6	leaq	0x1ea23(%rip), %rcx     ## Objc cfstring ref: @""
000000000000b6ed	xorl	%r8d, %r8d
000000000000b6f0	movq	%rax, %rdi
000000000000b6f3	callq	*%r13
000000000000b6f6	movq	0x29133(%rip), %rsi     ## Objc selector ref: setPositiveSuffix:
000000000000b6fd	movq	%r15, %rdi
000000000000b700	movq	%rax, %rdx
000000000000b703	callq	*%r13
000000000000b706	movq	(%rbx,%r14), %rdi
000000000000b70a	movq	0x29127(%rip), %rsi     ## Objc selector ref: setMinimumIntegerDigits:
000000000000b711	movl	$0x1, %edx
000000000000b716	callq	*%r13
000000000000b719	movq	(%rbx,%r14), %rdi
000000000000b71d	movq	0x2911c(%rip), %rsi     ## Objc selector ref: setMaximumIntegerDigits:
000000000000b724	movl	$0x2, %edx
000000000000b729	callq	*%r13
000000000000b72c	movq	(%rbx,%r14), %rdi
000000000000b730	movq	0x29111(%rip), %rsi     ## Objc selector ref: setMinimumFractionDigits:
000000000000b737	movl	$0x2, %edx
000000000000b73c	callq	*%r13
000000000000b73f	movq	(%rbx,%r14), %rdi
000000000000b743	movq	0x29106(%rip), %rsi     ## Objc selector ref: setMaximumFractionDigits:
000000000000b74a	movl	$0x2, %edx
000000000000b74f	callq	*%r13
000000000000b752	movq	0x29e67(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_NSNumberFormatter
000000000000b759	movq	0x28a08(%rip), %rsi     ## Objc selector ref: alloc
000000000000b760	callq	*%r13
000000000000b763	movq	0x28b06(%rip), %rsi     ## Objc selector ref: init
000000000000b76a	movq	%rax, %rdi
000000000000b76d	callq	*%r13
000000000000b770	movq	_OBJC_IVAR_$_UAPSwitchViewController._floatFormatter(%rip), %r14
000000000000b777	movq	%rax, %rdi
000000000000b77a	movq	%rbx, %rsi
000000000000b77d	movq	%r14, %rdx
000000000000b780	callq	0x1e868                 ## symbol stub for: _objc_assign_ivar
000000000000b785	movq	(%rbx,%r14), %rdi
000000000000b789	movq	0x29098(%rip), %rsi     ## Objc selector ref: setNumberStyle:
000000000000b790	movl	$0x1, %edx
000000000000b795	callq	*%r13
000000000000b798	movq	(%rbx,%r14), %rdi
000000000000b79c	movq	0x29095(%rip), %rsi     ## Objc selector ref: setMinimumIntegerDigits:
000000000000b7a3	movl	$0x1, %edx
000000000000b7a8	callq	*%r13
000000000000b7ab	movq	(%rbx,%r14), %rdi
000000000000b7af	movq	0x2908a(%rip), %rsi     ## Objc selector ref: setMaximumIntegerDigits:
000000000000b7b6	movl	$0x3, %edx
000000000000b7bb	callq	*%r13
000000000000b7be	movq	(%rbx,%r14), %rdi
000000000000b7c2	movq	0x2907f(%rip), %rsi     ## Objc selector ref: setMinimumFractionDigits:
000000000000b7c9	movl	$0x2, %edx
000000000000b7ce	callq	*%r13
000000000000b7d1	movq	(%rbx,%r14), %rdi
000000000000b7d5	movq	0x29074(%rip), %rsi     ## Objc selector ref: setMaximumFractionDigits:
000000000000b7dc	movl	$0x2, %edx
000000000000b7e1	callq	*%r13
000000000000b7e4	movq	0x29dd5(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_NSNumberFormatter
000000000000b7eb	movq	0x28976(%rip), %rsi     ## Objc selector ref: alloc
000000000000b7f2	callq	*%r13
000000000000b7f5	movq	0x28a74(%rip), %rsi     ## Objc selector ref: init
000000000000b7fc	movq	%rax, %rdi
000000000000b7ff	callq	*%r13
000000000000b802	movq	_OBJC_IVAR_$_UAPSwitchViewController._intFormatter(%rip), %r14
000000000000b809	movq	%rax, %rdi
000000000000b80c	movq	%rbx, %rsi
000000000000b80f	movq	%r14, %rdx
000000000000b812	callq	0x1e868                 ## symbol stub for: _objc_assign_ivar
000000000000b817	movq	(%rbx,%r14), %rdi
000000000000b81b	movq	0x29006(%rip), %rsi     ## Objc selector ref: setNumberStyle:
000000000000b822	movl	$0x1, %edx
000000000000b827	callq	*%r13
000000000000b82a	movq	(%rbx,%r14), %rdi
000000000000b82e	movq	0x29003(%rip), %rsi     ## Objc selector ref: setMinimumIntegerDigits:
000000000000b835	movl	$0x1, %edx
000000000000b83a	callq	*%r13
000000000000b83d	movq	(%rbx,%r14), %rdi
000000000000b841	movq	0x28ff8(%rip), %rsi     ## Objc selector ref: setMaximumIntegerDigits:
000000000000b848	movl	$0x3, %edx
000000000000b84d	callq	*%r13
000000000000b850	movq	(%rbx,%r14), %rdi
000000000000b854	movq	0x28fed(%rip), %rsi     ## Objc selector ref: setMinimumFractionDigits:
000000000000b85b	xorl	%edx, %edx
000000000000b85d	callq	*%r13
000000000000b860	movq	(%rbx,%r14), %rdi
000000000000b864	movq	0x28fe5(%rip), %rsi     ## Objc selector ref: setMaximumFractionDigits:
000000000000b86b	xorl	%edx, %edx
000000000000b86d	callq	*%r13
000000000000b870	movq	%rbx, %rax
000000000000b873	addq	$0x18, %rsp
000000000000b877	popq	%rbx
000000000000b878	popq	%r12
000000000000b87a	popq	%r13
000000000000b87c	popq	%r14
000000000000b87e	popq	%r15
000000000000b880	popq	%rbp
000000000000b881	retq
000000000000b882	pushq	%rbp
000000000000b883	movq	%rsp, %rbp
000000000000b886	pushq	%r14
000000000000b888	pushq	%rbx
000000000000b889	subq	$0x10, %rsp
000000000000b88d	movq	%rdi, %rbx
000000000000b890	movq	0x28fc1(%rip), %rsi     ## Objc selector ref: _hideOpenCustomActionFilePanel
000000000000b897	movq	0x1db62(%rip), %r14     ## Objc message: +[NSNumberFormatter _hideOpenCustomActionFilePanel]
000000000000b89e	callq	*%r14
000000000000b8a1	movq	_OBJC_IVAR_$_UAPSwitchViewController._secondsFormatter(%rip), %rax
000000000000b8a8	movq	(%rbx,%rax), %rdi
000000000000b8ac	movq	0x2889d(%rip), %rsi     ## Objc selector ref: release
000000000000b8b3	callq	*%r14
000000000000b8b6	movq	_OBJC_IVAR_$_UAPSwitchViewController._floatFormatter(%rip), %rax
000000000000b8bd	movq	(%rbx,%rax), %rdi
000000000000b8c1	movq	0x28888(%rip), %rsi     ## Objc selector ref: release
000000000000b8c8	callq	*%r14
000000000000b8cb	movq	_OBJC_IVAR_$_UAPSwitchViewController._intFormatter(%rip), %rax
000000000000b8d2	movq	(%rbx,%rax), %rdi
000000000000b8d6	movq	0x28873(%rip), %rsi     ## Objc selector ref: release
000000000000b8dd	callq	*%r14
000000000000b8e0	movq	_OBJC_IVAR_$_UAPSwitchViewController._switchInputs(%rip), %rax
000000000000b8e7	movq	(%rbx,%rax), %rdi
000000000000b8eb	movq	0x2885e(%rip), %rsi     ## Objc selector ref: release
000000000000b8f2	callq	*%r14
000000000000b8f5	movq	_OBJC_IVAR_$_UAPSwitchViewController._editingSwitchInputEntity(%rip), %rax
000000000000b8fc	movq	(%rbx,%rax), %rdi
000000000000b900	movq	0x28849(%rip), %rsi     ## Objc selector ref: release
000000000000b907	callq	*%r14
000000000000b90a	movq	_OBJC_IVAR_$_UAPSwitchViewController._defaultSwitchNames(%rip), %rax
000000000000b911	movq	(%rbx,%rax), %rdi
000000000000b915	movq	0x28834(%rip), %rsi     ## Objc selector ref: release
000000000000b91c	callq	*%r14
000000000000b91f	movq	%rbx, -0x20(%rbp)
000000000000b923	movq	0x29e1e(%rip), %rax     ## Objc class ref: UAPSwitchViewController
000000000000b92a	movq	%rax, -0x18(%rbp)
000000000000b92e	movq	0x28823(%rip), %rsi     ## Objc selector ref: dealloc
000000000000b935	leaq	-0x20(%rbp), %rdi
000000000000b939	callq	0x1e88c                 ## Objc message: -[[%rdi super] dealloc]
000000000000b93e	addq	$0x10, %rsp
000000000000b942	popq	%rbx
000000000000b943	popq	%r14
000000000000b945	popq	%rbp
000000000000b946	retq
000000000000b947	pushq	%rbp
000000000000b948	movq	%rsp, %rbp
000000000000b94b	movq	0x28de6(%rip), %rsi     ## Objc selector ref: readPreferences:
000000000000b952	popq	%rbp
000000000000b953	jmpq	*0x1daa7(%rip)          ## Objc message: -[%rdi readPreferences:]
000000000000b959	pushq	%rbp
000000000000b95a	movq	%rsp, %rbp
000000000000b95d	pushq	%r15
000000000000b95f	pushq	%r14
000000000000b961	pushq	%rbx
000000000000b962	pushq	%rax
000000000000b963	movq	%rdi, %rbx
000000000000b966	movq	_OBJC_IVAR_$_UAPSwitchViewController._switchAssignDeviceInputStackView(%rip), %r14
000000000000b96d	movq	(%rbx,%r14), %rdi
000000000000b971	movq	0x28940(%rip), %rsi     ## Objc selector ref: setTranslatesAutoresizingMaskIntoConstraints:
000000000000b978	movq	0x1da81(%rip), %r15     ## Objc message: -[%rdi setTranslatesAutoresizingMaskIntoConstraints:]
000000000000b97f	xorl	%edx, %edx
000000000000b981	callq	*%r15
000000000000b984	movq	(%rbx,%r14), %rdi
000000000000b988	movq	0x28ed1(%rip), %rsi     ## Objc selector ref: setHuggingPriority:forOrientation:
000000000000b98f	movss	0x1c9a1(%rip), %xmm0
000000000000b997	xorl	%edx, %edx
000000000000b999	callq	*%r15
000000000000b99c	movq	(%rbx,%r14), %rdi
000000000000b9a0	movq	0x28eb9(%rip), %rsi     ## Objc selector ref: setHuggingPriority:forOrientation:
000000000000b9a7	movl	$0x1, %edx
000000000000b9ac	movss	0x1c984(%rip), %xmm0
000000000000b9b4	movq	%r15, %rax
000000000000b9b7	addq	$0x8, %rsp
000000000000b9bb	popq	%rbx
000000000000b9bc	popq	%r14
000000000000b9be	popq	%r15
000000000000b9c0	popq	%rbp
000000000000b9c1	jmpq	*%rax
000000000000b9c3	pushq	%rbp
000000000000b9c4	movq	%rsp, %rbp
000000000000b9c7	pushq	%r15
000000000000b9c9	pushq	%r14
000000000000b9cb	pushq	%r13
000000000000b9cd	pushq	%r12
000000000000b9cf	pushq	%rbx
000000000000b9d0	subq	$0x18, %rsp
000000000000b9d4	movq	%rdi, %rbx
000000000000b9d7	movq	%rbx, -0x38(%rbp)
000000000000b9db	movq	0x29d66(%rip), %rax     ## Objc class ref: UAPSwitchViewController
000000000000b9e2	movq	%rax, -0x30(%rbp)
000000000000b9e6	movq	0x28d83(%rip), %rsi     ## Objc selector ref: loadView
000000000000b9ed	leaq	-0x38(%rbp), %rdi
000000000000b9f1	callq	0x1e88c                 ## Objc message: -[[%rdi super] loadView]
000000000000b9f6	movq	0x289c3(%rip), %rsi     ## Objc selector ref: view
000000000000b9fd	movq	0x1d9fc(%rip), %r14     ## Objc message: -[%rdi view]
000000000000ba04	movq	%rbx, %rdi
000000000000ba07	callq	*%r14
000000000000ba0a	movq	0x28e57(%rip), %rsi     ## Objc selector ref: _initializeRepeatCycleMenu
000000000000ba11	movq	%rbx, %rdi
000000000000ba14	callq	*%r14
000000000000ba17	movq	0x28e52(%rip), %rsi     ## Objc selector ref: _initializeActionsMenu
000000000000ba1e	movq	%rbx, %rdi
000000000000ba21	callq	*%r14
000000000000ba24	movq	0x28e4d(%rip), %rsi     ## Objc selector ref: _initializeElementRestartOptionMenu
000000000000ba2b	movq	%rbx, %rdi
000000000000ba2e	callq	*%r14
000000000000ba31	movq	0x28e48(%rip), %rsi     ## Objc selector ref: _initializeStackView
000000000000ba38	movq	%rbx, %rdi
000000000000ba3b	callq	*%r14
000000000000ba3e	movq	0x28e43(%rip), %rsi     ## Objc selector ref: _updateUIForSelection
000000000000ba45	movq	%rbx, %rdi
000000000000ba48	callq	*%r14
000000000000ba4b	movq	_OBJC_IVAR_$_UAPSwitchViewController._primaryTabView(%rip), %rax
000000000000ba52	movq	(%rbx,%rax), %rdi
000000000000ba56	movq	0x28e33(%rip), %rsi     ## Objc selector ref: selectTabViewItemWithIdentifier:
000000000000ba5d	leaq	0x1eeec(%rip), %rdx     ## Objc cfstring ref: @"mh43181"
000000000000ba64	callq	*%r14
000000000000ba67	movq	_OBJC_IVAR_$_UAPSwitchViewController._addRemoveSwitchBar(%rip), %rax
000000000000ba6e	movq	(%rbx,%rax), %rax
000000000000ba72	movq	%rax, -0x40(%rbp)
000000000000ba76	movq	0x29a83(%rip), %rbx     ## Objc class ref: _OBJC_CLASS_$_NSBundle
000000000000ba7d	movq	0x29a84(%rip), %rdi     ## Objc class ref: UniversalAccessPref
000000000000ba84	movq	0x28635(%rip), %rsi     ## Objc selector ref: class
000000000000ba8b	callq	*%r14
000000000000ba8e	movq	0x28723(%rip), %rsi     ## Objc selector ref: bundleForClass:
000000000000ba95	movq	%rbx, %rdi
000000000000ba98	movq	%rax, %rdx
000000000000ba9b	callq	*%r14
000000000000ba9e	movq	0x2871b(%rip), %rsi     ## Objc selector ref: localizedStringForKey:value:table:
000000000000baa5	leaq	0x1eec4(%rip), %rdx     ## Objc cfstring ref: @"switch.addSwitch"
000000000000baac	leaq	0x1e65d(%rip), %r12     ## Objc cfstring ref: @""
000000000000bab3	xorl	%r8d, %r8d
000000000000bab6	movq	%rax, %rdi
000000000000bab9	movq	%r12, %rcx
000000000000babc	callq	*%r14
000000000000babf	movq	%rax, %r15
000000000000bac2	movq	0x29a37(%rip), %rbx     ## Objc class ref: _OBJC_CLASS_$_NSBundle
000000000000bac9	movq	0x29a38(%rip), %rdi     ## Objc class ref: UniversalAccessPref
000000000000bad0	movq	0x285e9(%rip), %rsi     ## Objc selector ref: class
000000000000bad7	callq	*%r14
000000000000bada	movq	0x286d7(%rip), %rsi     ## Objc selector ref: bundleForClass:
000000000000bae1	movq	%rbx, %rdi
000000000000bae4	movq	%rax, %rdx
000000000000bae7	callq	*%r14
000000000000baea	movq	0x286cf(%rip), %rsi     ## Objc selector ref: localizedStringForKey:value:table:
000000000000baf1	leaq	0x1ee98(%rip), %rdx     ## Objc cfstring ref: @"switch.removeSwitch"
000000000000baf8	xorl	%r8d, %r8d
000000000000bafb	movq	%rax, %rdi
000000000000bafe	movq	%r12, %rcx
000000000000bb01	callq	*%r14
000000000000bb04	movq	%rax, %r13
000000000000bb07	movq	0x299f2(%rip), %rbx     ## Objc class ref: _OBJC_CLASS_$_NSBundle
000000000000bb0e	movq	0x299f3(%rip), %rdi     ## Objc class ref: UniversalAccessPref
000000000000bb15	movq	0x285a4(%rip), %rsi     ## Objc selector ref: class
000000000000bb1c	callq	*%r14
000000000000bb1f	movq	0x28692(%rip), %rsi     ## Objc selector ref: bundleForClass:
000000000000bb26	movq	%rbx, %rdi
000000000000bb29	movq	%rax, %rdx
000000000000bb2c	callq	*%r14
000000000000bb2f	movq	0x2868a(%rip), %rsi     ## Objc selector ref: localizedStringForKey:value:table:
000000000000bb36	leaq	0x1ee73(%rip), %rdx     ## Objc cfstring ref: @"switch.editSwitch"
000000000000bb3d	xorl	%r8d, %r8d
000000000000bb40	movq	%rax, %rdi
000000000000bb43	movq	%r12, %rcx
000000000000bb46	callq	*%r14
000000000000bb49	movq	%rax, %rcx
000000000000bb4c	xorl	%r8d, %r8d
000000000000bb4f	xorl	%eax, %eax
000000000000bb51	movq	-0x40(%rbp), %rdi
000000000000bb55	movq	%r15, %rsi
000000000000bb58	movq	%r13, %rdx
000000000000bb5b	callq	0xbb6f
000000000000bb60	addq	$0x18, %rsp
000000000000bb64	popq	%rbx
000000000000bb65	popq	%r12
000000000000bb67	popq	%r13
000000000000bb69	popq	%r14
000000000000bb6b	popq	%r15
000000000000bb6d	popq	%rbp
000000000000bb6e	retq
000000000000bb6f	pushq	%rbp
000000000000bb70	movq	%rsp, %rbp
000000000000bb73	pushq	%r15
000000000000bb75	pushq	%r14
000000000000bb77	pushq	%r13
000000000000bb79	pushq	%r12
000000000000bb7b	pushq	%rbx
000000000000bb7c	subq	$0x1a8, %rsp            ## imm = 0x1A8
000000000000bb83	movq	%rsi, %rbx
000000000000bb86	testb	%al, %al
000000000000bb88	je	0xbbc2
000000000000bb8a	movaps	%xmm0, -0x190(%rbp)
000000000000bb91	movaps	%xmm1, -0x180(%rbp)
000000000000bb98	movaps	%xmm2, -0x170(%rbp)
000000000000bb9f	movaps	%xmm3, -0x160(%rbp)
000000000000bba6	movaps	%xmm4, -0x150(%rbp)
000000000000bbad	movaps	%xmm5, -0x140(%rbp)
000000000000bbb4	movaps	%xmm6, -0x130(%rbp)
000000000000bbbb	movaps	%xmm7, -0x120(%rbp)
000000000000bbc2	movq	%r9, -0x198(%rbp)
000000000000bbc9	movq	%r8, -0x1a0(%rbp)
000000000000bbd0	movq	%rcx, -0x1a8(%rbp)
000000000000bbd7	movq	%rdx, -0x1b0(%rbp)
000000000000bbde	movq	0x1d773(%rip), %rax     ## literal pool symbol address: ___stack_chk_guard
000000000000bbe5	movq	(%rax), %rax
000000000000bbe8	movq	%rax, -0x30(%rbp)
000000000000bbec	callq	0x1e8e6                 ## symbol stub for: _NSAccessibilityUnignoredDescendant
000000000000bbf1	movq	0x1d4d0(%rip), %rcx     ## literal pool symbol address: _NSAccessibilityChildrenAttribute
000000000000bbf8	movq	(%rcx), %rdx
000000000000bbfb	movq	0x284e6(%rip), %rsi     ## Objc selector ref: accessibilityAttributeValue:
000000000000bc02	movq	0x1d7f7(%rip), %r14     ## Objc message: +[UniversalAccessPref accessibilityAttributeValue:]
000000000000bc09	movq	%rax, %rdi
000000000000bc0c	callq	*%r14
000000000000bc0f	movq	%rax, -0x1c8(%rbp)
000000000000bc16	leaq	-0x1c0(%rbp), %rcx
000000000000bc1d	movq	%rcx, -0x40(%rbp)
000000000000bc21	leaq	0x10(%rbp), %rcx
000000000000bc25	movq	%rcx, -0x48(%rbp)
000000000000bc29	movl	$0x30, -0x4c(%rbp)
000000000000bc30	movl	$0x10, -0x50(%rbp)
000000000000bc37	xorps	%xmm0, %xmm0
000000000000bc3a	movaps	%xmm0, -0xe0(%rbp)
000000000000bc41	movaps	%xmm0, -0xf0(%rbp)
000000000000bc48	movaps	%xmm0, -0x100(%rbp)
000000000000bc4f	movaps	%xmm0, -0x110(%rbp)
000000000000bc56	movq	0x284b3(%rip), %rsi     ## Objc selector ref: countByEnumeratingWithState:objects:count:
000000000000bc5d	leaq	-0x110(%rbp), %rdx
000000000000bc64	leaq	-0xd0(%rbp), %rcx
000000000000bc6b	movl	$0x10, %r8d
000000000000bc71	movq	%rax, %rdi
000000000000bc74	callq	*%r14
000000000000bc77	movq	%rax, %r13
000000000000bc7a	testq	%r13, %r13
000000000000bc7d	je	0xbd3d
000000000000bc83	movq	-0x100(%rbp), %rax
000000000000bc8a	movq	(%rax), %r14
000000000000bc8d	movq	0x1d43c(%rip), %rax     ## literal pool symbol address: _NSAccessibilityDescriptionAttribute
000000000000bc94	movq	(%rax), %r15
000000000000bc97	xorl	%r12d, %r12d
000000000000bc9a	movq	-0x100(%rbp), %rax
000000000000bca1	cmpq	%r14, (%rax)
000000000000bca4	je	0xbcb2
000000000000bca6	movq	-0x1c8(%rbp), %rdi
000000000000bcad	callq	0x1e886                 ## symbol stub for: _objc_enumerationMutation
000000000000bcb2	testq	%rbx, %rbx
000000000000bcb5	je	0xbd3d
000000000000bcbb	movq	-0x108(%rbp), %rax
000000000000bcc2	movq	(%rax,%r12,8), %rdi
000000000000bcc6	movq	0x28ffb(%rip), %rsi     ## Objc selector ref: accessibilitySetOverrideValue:forAttribute:
000000000000bccd	movq	%rbx, %rdx
000000000000bcd0	movq	%r15, %rcx
000000000000bcd3	callq	*0x1d727(%rip)          ## Objc message: -[%rdi accessibilitySetOverrideValue:forAttribute:]
000000000000bcd9	movslq	-0x50(%rbp), %rcx
000000000000bcdd	cmpq	$0x28, %rcx
000000000000bce1	ja	0xbcf2
000000000000bce3	movq	%rcx, %rax
000000000000bce6	addq	-0x40(%rbp), %rax
000000000000bcea	leal	0x8(%rcx), %ecx
000000000000bced	movl	%ecx, -0x50(%rbp)
000000000000bcf0	jmp	0xbcfe
000000000000bcf2	movq	-0x48(%rbp), %rax
000000000000bcf6	leaq	0x8(%rax), %rcx
000000000000bcfa	movq	%rcx, -0x48(%rbp)
000000000000bcfe	movq	(%rax), %rbx
000000000000bd01	incq	%r12
000000000000bd04	cmpq	%r13, %r12
000000000000bd07	jb	0xbc9a
000000000000bd09	movl	$0x10, %r8d
000000000000bd0f	movq	-0x1c8(%rbp), %rdi
000000000000bd16	movq	0x283f3(%rip), %rsi     ## Objc selector ref: countByEnumeratingWithState:objects:count:
000000000000bd1d	leaq	-0x110(%rbp), %rdx
000000000000bd24	leaq	-0xd0(%rbp), %rcx
000000000000bd2b	callq	*0x1d6cf(%rip)          ## Objc message: -[%rdi countByEnumeratingWithState:objects:count:]
000000000000bd31	movq	%rax, %r13
000000000000bd34	testq	%r13, %r13
000000000000bd37	jne	0xbc97
000000000000bd3d	movq	0x1d614(%rip), %rax     ## literal pool symbol address: ___stack_chk_guard
000000000000bd44	movq	(%rax), %rax
000000000000bd47	cmpq	-0x30(%rbp), %rax
000000000000bd4b	jne	0xbd5f
000000000000bd4d	addq	$0x1a8, %rsp            ## imm = 0x1A8
000000000000bd54	popq	%rbx
000000000000bd55	popq	%r12
000000000000bd57	popq	%r13
000000000000bd59	popq	%r14
000000000000bd5b	popq	%r15
000000000000bd5d	popq	%rbp
000000000000bd5e	retq
000000000000bd5f	callq	0x1e8b6                 ## symbol stub for: ___stack_chk_fail
000000000000bd64	pushq	%rbp
000000000000bd65	movq	%rsp, %rbp
000000000000bd68	pushq	%rbx
000000000000bd69	pushq	%rax
000000000000bd6a	movq	%rdi, %rbx
000000000000bd6d	callq	0x1e82c                 ## symbol stub for: _AuthorizationDismiss
000000000000bd72	movq	_OBJC_IVAR_$_UAPSwitchViewController._primaryTabView(%rip), %rax
000000000000bd79	movq	(%rbx,%rax), %rdi
000000000000bd7d	movq	0x28b14(%rip), %rsi     ## Objc selector ref: selectedTabViewItem
000000000000bd84	movq	0x1d675(%rip), %rbx     ## Objc message: -[%rdi selectedTabViewItem]
000000000000bd8b	callq	*%rbx
000000000000bd8d	movq	0x28b0c(%rip), %rsi     ## Objc selector ref: identifier
000000000000bd94	movq	%rax, %rdi
000000000000bd97	movq	%rbx, %rax
000000000000bd9a	addq	$0x8, %rsp
000000000000bd9e	popq	%rbx
000000000000bd9f	popq	%rbp
000000000000bda0	jmpq	*%rax
000000000000bda2	pushq	%rbp
000000000000bda3	movq	%rsp, %rbp
000000000000bda6	pushq	%r15
000000000000bda8	pushq	%r14
000000000000bdaa	pushq	%r13
000000000000bdac	pushq	%r12
000000000000bdae	pushq	%rbx
000000000000bdaf	subq	$0x18, %rsp
000000000000bdb3	movq	%rdi, %r12
000000000000bdb6	movq	%r12, -0x38(%rbp)
000000000000bdba	movq	0x29987(%rip), %rax     ## Objc class ref: UAPSwitchViewController
000000000000bdc1	movq	%rax, -0x30(%rbp)
000000000000bdc5	movq	0x2896c(%rip), %rsi     ## Objc selector ref: readPreferences:
000000000000bdcc	leaq	-0x38(%rbp), %rdi
000000000000bdd0	callq	0x1e88c                 ## Objc message: -[[%rdi super] readPreferences:]
000000000000bdd5	movq	_OBJC_IVAR_$_UAPSwitchViewController._enableSwitchCheckbox(%rip), %rbx
000000000000bddc	movq	(%r12,%rbx), %rdi
000000000000bde0	movq	0x28959(%rip), %rsi     ## Objc selector ref: setEnabled:
000000000000bde7	movq	0x1d612(%rip), %r13     ## Objc message: -[%rdi setEnabled:]
000000000000bdee	movl	$0x1, %edx
000000000000bdf3	callq	*%r13
000000000000bdf6	movq	(%r12,%rbx), %r14
000000000000bdfa	callq	0x1e742                 ## symbol stub for: _UASwitchIsEnabled
000000000000bdff	testb	%al, %al
000000000000be01	setne	%al
000000000000be04	movzbl	%al, %edx
000000000000be07	movq	0x28632(%rip), %rsi     ## Objc selector ref: setState:
000000000000be0e	movq	%r14, %rdi
000000000000be11	callq	*%r13
000000000000be14	callq	0x1e6dc                 ## symbol stub for: _UASwitchAutoScanEnabled
000000000000be19	movq	_OBJC_IVAR_$_UAPSwitchViewController._autoScanEnableCheckbox(%rip), %rcx
000000000000be20	movq	(%r12,%rcx), %rdi
000000000000be24	testb	%al, %al
000000000000be26	setne	%al
000000000000be29	movzbl	%al, %edx
000000000000be2c	movq	0x2860d(%rip), %rsi     ## Objc selector ref: setState:
000000000000be33	callq	*%r13
000000000000be36	movq	_OBJC_IVAR_$_UAPSwitchViewController._autoScanCyclePopupButton(%rip), %rax
000000000000be3d	movq	(%r12,%rax), %r14
000000000000be41	callq	0x1e6d0                 ## symbol stub for: _UASwitchAutoScanCycleCount
000000000000be46	leaq	-0x1(%rax), %rdx
000000000000be4a	movq	0x28647(%rip), %rsi     ## Objc selector ref: selectItemAtIndex:
000000000000be51	movq	%r14, %rdi
000000000000be54	callq	*%r13
000000000000be57	movq	_OBJC_IVAR_$_UAPSwitchViewController._cursorSizePopupButton(%rip), %rax
000000000000be5e	movq	(%r12,%rax), %r14
000000000000be62	callq	0x1e724                 ## symbol stub for: _UASwitchGetCursorSize
000000000000be67	movq	0x2860a(%rip), %rsi     ## Objc selector ref: selectItemWithTag:
000000000000be6e	movq	%r14, %rdi
000000000000be71	movq	%rax, %rdx
000000000000be74	callq	*%r13
000000000000be77	movq	_OBJC_IVAR_$_UAPSwitchViewController._mouseMoveStylePopupButton(%rip), %rax
000000000000be7e	movq	(%r12,%rax), %r14
000000000000be82	callq	0x1e72a                 ## symbol stub for: _UASwitchGetMouseMoveStyle
000000000000be87	movq	0x285ea(%rip), %rsi     ## Objc selector ref: selectItemWithTag:
000000000000be8e	movq	%r14, %rdi
000000000000be91	movq	%rax, %rdx
000000000000be94	callq	*%r13
000000000000be97	movq	_OBJC_IVAR_$_UAPSwitchViewController._autoScanRestartOptionPopupButton(%rip), %rax
000000000000be9e	movq	(%r12,%rax), %r14
000000000000bea2	callq	0x1e712                 ## symbol stub for: _UASwitchElementRestartOption
000000000000bea7	movq	0x285ca(%rip), %rsi     ## Objc selector ref: selectItemWithTag:
000000000000beae	movq	%r14, %rdi
000000000000beb1	movq	%rax, %rdx
000000000000beb4	callq	*%r13
000000000000beb7	movq	_OBJC_IVAR_$_UAPSwitchViewController._resumeAutoScanningAfterSelectPopupButton(%rip), %rax
000000000000bebe	movq	(%r12,%rax), %r14
000000000000bec2	callq	0x1e75a                 ## symbol stub for: _UASwitchResumeAutoScanningAfterSelectEnabled
000000000000bec7	testb	%al, %al
000000000000bec9	setne	%al
000000000000becc	movzbl	%al, %edx
000000000000becf	movq	0x285a2(%rip), %rsi     ## Objc selector ref: selectItemWithTag:
000000000000bed6	movq	%r14, %rdi
000000000000bed9	callq	*%r13
000000000000bedc	movq	_OBJC_IVAR_$_UAPSwitchViewController._mouseCursorActionWhenReachingEdgePopupButton(%rip), %rax
000000000000bee3	movq	(%r12,%rax), %r14
000000000000bee7	callq	0x1e760                 ## symbol stub for: _UASwitchReverseMouseWhenReachingScreenEdgeEnabled
000000000000beec	testb	%al, %al
000000000000beee	setne	%al
000000000000bef1	movzbl	%al, %edx
000000000000bef4	movq	0x2857d(%rip), %rsi     ## Objc selector ref: selectItemWithTag:
000000000000befb	movq	%r14, %rdi
000000000000befe	callq	*%r13
000000000000bf01	callq	0x1e7b4                 ## symbol stub for: _UASwitchSpeakSelectedElement
000000000000bf06	movb	%al, %r15b
000000000000bf09	callq	0x1e754                 ## symbol stub for: _UASwitchPlaySounds
000000000000bf0e	movb	%al, %r14b
000000000000bf11	movq	_OBJC_IVAR_$_UAPSwitchViewController._navigationFeedbackPopupButton(%rip), %rbx
000000000000bf18	movq	(%r12,%rbx), %rdi
000000000000bf1c	movq	0x28575(%rip), %rsi     ## Objc selector ref: selectItemAtIndex:
000000000000bf23	movabsq	$0x7fffffffffffffff, %rdx ## imm = 0x7FFFFFFFFFFFFFFF
000000000000bf2d	callq	*%r13
000000000000bf30	testb	%r15b, %r15b
000000000000bf33	movq	(%r12,%rbx), %rdi
000000000000bf37	movq	0x2853a(%rip), %rsi     ## Objc selector ref: selectItemWithTag:
000000000000bf3e	je	0xbf4c
000000000000bf40	testb	%r14b, %r14b
000000000000bf43	je	0xbf4c
000000000000bf45	movl	$0x3, %edx
000000000000bf4a	jmp	0xbf66
000000000000bf4c	testb	%r15b, %r15b
000000000000bf4f	je	0xbf58
000000000000bf51	movl	$0x1, %edx
000000000000bf56	jmp	0xbf66
000000000000bf58	testb	%r14b, %r14b
000000000000bf5b	je	0xbf64
000000000000bf5d	movl	$0x2, %edx
000000000000bf62	jmp	0xbf66
000000000000bf64	xorl	%edx, %edx
000000000000bf66	callq	*0x1d494(%rip)          ## Objc message: -[%rdi selectItemWithTag:]
000000000000bf6c	callq	0x1e730                 ## symbol stub for: _UASwitchHideUIEnabled
000000000000bf71	movb	%al, %r14b
000000000000bf74	movq	_OBJC_IVAR_$_UAPSwitchViewController._hideAfterDelayCheckbox(%rip), %rax
000000000000bf7b	movq	(%r12,%rax), %rdi
000000000000bf7f	testb	%r14b, %r14b
000000000000bf82	setne	%al
000000000000bf85	movzbl	%al, %edx
000000000000bf88	movq	0x284b1(%rip), %rsi     ## Objc selector ref: setState:
000000000000bf8f	callq	*%r13
000000000000bf92	movq	_OBJC_IVAR_$_UAPSwitchViewController._hideAfterDelayTextField(%rip), %rax
000000000000bf99	movq	(%r12,%rax), %rdi
000000000000bf9d	movq	0x2879c(%rip), %rsi     ## Objc selector ref: setEnabled:
000000000000bfa4	movsbl	%r14b, %ebx
000000000000bfa8	movl	%ebx, %edx
000000000000bfaa	callq	*%r13
000000000000bfad	movq	_OBJC_IVAR_$_UAPSwitchViewController._hideAfterDelayStepper(%rip), %r14
000000000000bfb4	movq	(%r12,%r14), %rdi
000000000000bfb8	movq	0x28781(%rip), %rsi     ## Objc selector ref: setEnabled:
000000000000bfbf	movl	%ebx, %edx
000000000000bfc1	callq	*%r13
000000000000bfc4	movq	(%r12,%r14), %rdi
000000000000bfc8	movq	0x287a9(%rip), %rsi     ## Objc selector ref: setMinValue:
000000000000bfcf	movsd	0x1c381(%rip), %xmm0
000000000000bfd7	callq	*%r13
000000000000bfda	movq	(%r12,%r14), %rdi
000000000000bfde	movq	0x2879b(%rip), %rsi     ## Objc selector ref: setMaxValue:
000000000000bfe5	movsd	0x1c373(%rip), %xmm0
000000000000bfed	callq	*%r13
000000000000bff0	movq	(%r12,%r14), %rdi
000000000000bff4	movq	0x288ad(%rip), %rsi     ## Objc selector ref: setIncrement:
000000000000bffb	movsd	0x1c355(%rip), %xmm0
000000000000c003	callq	*%r13
000000000000c006	callq	0x1e736                 ## symbol stub for: _UASwitchHideUITimeout
000000000000c00b	cvtss2sd	%xmm0, %xmm0
000000000000c00f	movq	0x2889a(%rip), %rsi     ## Objc selector ref: setHideAfterDelay:
000000000000c016	movq	%r12, %rdi
000000000000c019	callq	*%r13
000000000000c01c	movq	_OBJC_IVAR_$_UAPSwitchViewController._minimumPressDurationStepper(%rip), %rbx
000000000000c023	movq	(%r12,%rbx), %rdi
000000000000c027	movq	0x2874a(%rip), %rsi     ## Objc selector ref: setMinValue:
000000000000c02e	xorps	%xmm0, %xmm0
000000000000c031	callq	*%r13
000000000000c034	movq	(%r12,%rbx), %rdi
000000000000c038	movq	0x28741(%rip), %rsi     ## Objc selector ref: setMaxValue:
000000000000c03f	movsd	0x1c321(%rip), %xmm0
000000000000c047	callq	*%r13
000000000000c04a	movq	(%r12,%rbx), %rdi
000000000000c04e	movq	0x28853(%rip), %rsi     ## Objc selector ref: setIncrement:
000000000000c055	movsd	0x1c283(%rip), %xmm0
000000000000c05d	callq	*%r13
000000000000c060	movq	_OBJC_IVAR_$_UAPSwitchViewController._coalesceIntervalStepper(%rip), %rbx
000000000000c067	movq	(%r12,%rbx), %rdi
000000000000c06b	movq	0x28706(%rip), %rsi     ## Objc selector ref: setMinValue:
000000000000c072	xorps	%xmm0, %xmm0
000000000000c075	callq	*%r13
000000000000c078	movq	(%r12,%rbx), %rdi
000000000000c07c	movq	0x286fd(%rip), %rsi     ## Objc selector ref: setMaxValue:
000000000000c083	movsd	0x1c2dd(%rip), %xmm0
000000000000c08b	callq	*%r13
000000000000c08e	movq	(%r12,%rbx), %rdi
000000000000c092	movq	0x2880f(%rip), %rsi     ## Objc selector ref: setIncrement:
000000000000c099	movsd	0x1c23f(%rip), %xmm0
000000000000c0a1	callq	*%r13
000000000000c0a4	movq	_OBJC_IVAR_$_UAPSwitchViewController._firstItemDelayStepper(%rip), %rbx
000000000000c0ab	movq	(%r12,%rbx), %rdi
000000000000c0af	movq	0x286c2(%rip), %rsi     ## Objc selector ref: setMinValue:
000000000000c0b6	xorps	%xmm0, %xmm0
000000000000c0b9	callq	*%r13
000000000000c0bc	movq	(%r12,%rbx), %rdi
000000000000c0c0	movq	0x286b9(%rip), %rsi     ## Objc selector ref: setMaxValue:
000000000000c0c7	movsd	0x1c299(%rip), %xmm0
000000000000c0cf	callq	*%r13
000000000000c0d2	movq	(%r12,%rbx), %rdi
000000000000c0d6	movq	0x287cb(%rip), %rsi     ## Objc selector ref: setIncrement:
000000000000c0dd	movsd	0x1c1fb(%rip), %xmm0
000000000000c0e5	callq	*%r13
000000000000c0e8	movq	_OBJC_IVAR_$_UAPSwitchViewController._autoScanPanelSpeedStepper(%rip), %rbx
000000000000c0ef	movq	(%r12,%rbx), %rdi
000000000000c0f3	movq	0x2867e(%rip), %rsi     ## Objc selector ref: setMinValue:
000000000000c0fa	movsd	0x1c26e(%rip), %xmm0
000000000000c102	callq	*%r13
000000000000c105	movq	(%r12,%rbx), %rdi
000000000000c109	movq	0x28670(%rip), %rsi     ## Objc selector ref: setMaxValue:
000000000000c110	movsd	0x1c260(%rip), %xmm0
000000000000c118	callq	*%r13
000000000000c11b	movq	(%r12,%rbx), %rdi
000000000000c11f	movq	0x28782(%rip), %rsi     ## Objc selector ref: setIncrement:
000000000000c126	movsd	0x1c242(%rip), %xmm0
000000000000c12e	callq	*%r13
000000000000c131	movq	_OBJC_IVAR_$_UAPSwitchViewController._autoScanElementSpeedStepper(%rip), %rbx
000000000000c138	movq	(%r12,%rbx), %rdi
000000000000c13c	movq	0x28635(%rip), %rsi     ## Objc selector ref: setMinValue:
000000000000c143	movsd	0x1c225(%rip), %xmm0
000000000000c14b	callq	*%r13
000000000000c14e	movq	(%r12,%rbx), %rdi
000000000000c152	movq	0x28627(%rip), %rsi     ## Objc selector ref: setMaxValue:
000000000000c159	movsd	0x1c217(%rip), %xmm0
000000000000c161	callq	*%r13
000000000000c164	movq	(%r12,%rbx), %rdi
000000000000c168	movq	0x28739(%rip), %rsi     ## Objc selector ref: setIncrement:
000000000000c16f	movsd	0x1c1f9(%rip), %xmm0
000000000000c177	callq	*%r13
000000000000c17a	movq	_OBJC_IVAR_$_UAPSwitchViewController._sweepingCursorSpeedStepper(%rip), %rbx
000000000000c181	movq	(%r12,%rbx), %rdi
000000000000c185	movq	0x285ec(%rip), %rsi     ## Objc selector ref: setMinValue:
000000000000c18c	xorps	%xmm0, %xmm0
000000000000c18f	callq	*%r13
000000000000c192	movq	(%r12,%rbx), %rdi
000000000000c196	movq	0x285e3(%rip), %rsi     ## Objc selector ref: setMaxValue:
000000000000c19d	movsd	0x1c1db(%rip), %xmm0
000000000000c1a5	callq	*%r13
000000000000c1a8	movq	(%r12,%rbx), %rdi
000000000000c1ac	movq	0x286f5(%rip), %rsi     ## Objc selector ref: setIncrement:
000000000000c1b3	movsd	0x1c135(%rip), %xmm0
000000000000c1bb	callq	*%r13
000000000000c1be	movq	_OBJC_IVAR_$_UAPSwitchViewController._holdBeforeRepeatDurationStepper(%rip), %rbx
000000000000c1c5	movq	(%r12,%rbx), %rdi
000000000000c1c9	movq	0x285a8(%rip), %rsi     ## Objc selector ref: setMinValue:
000000000000c1d0	movsd	0x1c158(%rip), %xmm0
000000000000c1d8	callq	*%r13
000000000000c1db	movq	(%r12,%rbx), %rdi
000000000000c1df	movq	0x2859a(%rip), %rsi     ## Objc selector ref: setMaxValue:
000000000000c1e6	movsd	0x1c19a(%rip), %xmm0
000000000000c1ee	callq	*%r13
000000000000c1f1	movq	(%r12,%rbx), %rdi
000000000000c1f5	movq	0x286ac(%rip), %rsi     ## Objc selector ref: setIncrement:
000000000000c1fc	movsd	0x1c0dc(%rip), %xmm0
000000000000c204	callq	*%r13
000000000000c207	callq	0x1e700                 ## symbol stub for: _UASwitchCoalescePressesDuration
000000000000c20c	cvtss2sd	%xmm0, %xmm0
000000000000c210	movq	0x286a1(%rip), %rsi     ## Objc selector ref: setCoalesceInterval:
000000000000c217	movq	%r12, %rdi
000000000000c21a	callq	*%r13
000000000000c21d	callq	0x1e748                 ## symbol stub for: _UASwitchMinimumPressDuration
000000000000c222	cvtss2sd	%xmm0, %xmm0
000000000000c226	movq	0x28693(%rip), %rsi     ## Objc selector ref: setMinimumPressDuration:
000000000000c22d	movq	%r12, %rdi
000000000000c230	callq	*%r13
000000000000c233	callq	0x1e718                 ## symbol stub for: _UASwitchFirstElementDelay
000000000000c238	cvtss2sd	%xmm0, %xmm0
000000000000c23c	movq	0x28685(%rip), %rsi     ## Objc selector ref: setFirstItemDelay:
000000000000c243	movq	%r12, %rdi
000000000000c246	callq	*%r13
000000000000c249	callq	0x1e6d6                 ## symbol stub for: _UASwitchAutoScanElementInterval
000000000000c24e	cvtss2sd	%xmm0, %xmm0
000000000000c252	movq	0x28677(%rip), %rsi     ## Objc selector ref: setAutoScanElementStepInterval:
000000000000c259	movq	%r12, %rdi
000000000000c25c	callq	*%r13
000000000000c25f	callq	0x1e6e2                 ## symbol stub for: _UASwitchAutoScanPanelInterval
000000000000c264	cvtss2sd	%xmm0, %xmm0
000000000000c268	movq	0x28669(%rip), %rsi     ## Objc selector ref: setAutoScanPanelStepInterval:
000000000000c26f	movq	%r12, %rdi
000000000000c272	callq	*%r13
000000000000c275	callq	0x1e7ba                 ## symbol stub for: _UASwitchSweepingCursorSpeed
000000000000c27a	cvtss2sd	%xmm0, %xmm0
000000000000c27e	movq	0x2865b(%rip), %rsi     ## Objc selector ref: setSweepingCursorSpeed:
000000000000c285	movq	%r12, %rdi
000000000000c288	callq	*%r13
000000000000c28b	callq	0x1e73c                 ## symbol stub for: _UASwitchHoldBeforeRepeatDuration
000000000000c290	cvtss2sd	%xmm0, %xmm0
000000000000c294	movq	0x2864d(%rip), %rsi     ## Objc selector ref: setMinimumPressBeforeRepeatDuration:
000000000000c29b	movq	%r12, %rdi
000000000000c29e	callq	*%r13
000000000000c2a1	movq	0x28648(%rip), %rsi     ## Objc selector ref: willChangeValueForKey:
000000000000c2a8	leaq	0x1e721(%rip), %rdx     ## Objc cfstring ref: @"switchInputs"
000000000000c2af	movq	%r12, %rdi
000000000000c2b2	callq	*%r13
000000000000c2b5	callq	0x1e70c                 ## symbol stub for: _UASwitchCopyDeviceInputs
000000000000c2ba	movq	%rax, %r14
000000000000c2bd	testq	%r14, %r14
000000000000c2c0	je	0xc300
000000000000c2c2	movq	_OBJC_IVAR_$_UAPSwitchViewController._switchInputs(%rip), %rax
000000000000c2c9	movq	(%r12,%rax), %rdi
000000000000c2cd	movq	0x27e7c(%rip), %rsi     ## Objc selector ref: release
000000000000c2d4	callq	*%r13
000000000000c2d7	movq	0x2807a(%rip), %rsi     ## Objc selector ref: mutableCopy
000000000000c2de	movq	%r14, %rdi
000000000000c2e1	callq	*%r13
000000000000c2e4	movq	_OBJC_IVAR_$_UAPSwitchViewController._switchInputs(%rip), %rdx
000000000000c2eb	movq	%rax, %rdi
000000000000c2ee	movq	%r12, %rsi
000000000000c2f1	callq	0x1e868                 ## symbol stub for: _objc_assign_ivar
000000000000c2f6	movq	%r14, %rdi
000000000000c2f9	callq	0x1e562                 ## symbol stub for: _CFRelease
000000000000c2fe	jmp	0xc330
000000000000c300	movq	0x29231(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_NSMutableDictionary
000000000000c307	movq	0x27e5a(%rip), %rsi     ## Objc selector ref: alloc
000000000000c30e	callq	*%r13
000000000000c311	movq	0x27f58(%rip), %rsi     ## Objc selector ref: init
000000000000c318	movq	%rax, %rdi
000000000000c31b	callq	*%r13
000000000000c31e	movq	_OBJC_IVAR_$_UAPSwitchViewController._switchInputs(%rip), %rdx
000000000000c325	movq	%rax, %rdi
000000000000c328	movq	%r12, %rsi
000000000000c32b	callq	0x1e868                 ## symbol stub for: _objc_assign_ivar
000000000000c330	movq	0x285c1(%rip), %rsi     ## Objc selector ref: didChangeValueForKey:
000000000000c337	leaq	0x1e692(%rip), %rdx     ## Objc cfstring ref: @"switchInputs"
000000000000c33e	movq	%r12, %rdi
000000000000c341	callq	*0x1d0b9(%rip)          ## Objc message: +[NSMutableDictionary didChangeValueForKey:]
000000000000c347	movq	_OBJC_IVAR_$_UAPSwitchViewController._switchInputEntities(%rip), %rax
000000000000c34e	cmpq	$0x0, (%r12,%rax)
000000000000c353	jne	0xc365
000000000000c355	movq	0x285a4(%rip), %rsi     ## Objc selector ref: _updateSwitchesTableModel
000000000000c35c	movq	%r12, %rdi
000000000000c35f	callq	*0x1d09b(%rip)          ## Objc message: -[%rdi _updateSwitchesTableModel]
000000000000c365	movq	0x2859c(%rip), %rsi     ## Objc selector ref: _initializeDefaultSwitchNames
000000000000c36c	movq	%r12, %rdi
000000000000c36f	callq	*0x1d08b(%rip)          ## Objc message: -[%rdi _initializeDefaultSwitchNames]
000000000000c375	addq	$0x18, %rsp
000000000000c379	popq	%rbx
000000000000c37a	popq	%r12
000000000000c37c	popq	%r13
000000000000c37e	popq	%r14
000000000000c380	popq	%r15
000000000000c382	popq	%rbp
000000000000c383	retq
000000000000c384	pushq	%rbp
000000000000c385	movq	%rsp, %rbp
000000000000c388	pushq	%r15
000000000000c38a	pushq	%r14
000000000000c38c	pushq	%r13
000000000000c38e	pushq	%r12
000000000000c390	pushq	%rbx
000000000000c391	subq	$0x1c8, %rsp            ## imm = 0x1C8
000000000000c398	movq	%rdi, -0x1b8(%rbp)
000000000000c39f	movq	0x1cfb2(%rip), %rax     ## literal pool symbol address: ___stack_chk_guard
000000000000c3a6	movq	(%rax), %rax
000000000000c3a9	movq	%rax, -0x30(%rbp)
000000000000c3ad	movq	_OBJC_IVAR_$_UAPSwitchViewController._defaultSwitchNames(%rip), %rax
000000000000c3b4	movq	(%rdi,%rax), %rdi
000000000000c3b8	movq	0x27fa9(%rip), %rsi     ## Objc selector ref: count
000000000000c3bf	callq	*0x1d03b(%rip)          ## Objc message: -[%rdi count]
000000000000c3c5	testq	%rax, %rax
000000000000c3c8	jne	0xc601
000000000000c3ce	xorps	%xmm0, %xmm0
000000000000c3d1	movaps	%xmm0, -0x140(%rbp)
000000000000c3d8	movaps	%xmm0, -0x150(%rbp)
000000000000c3df	movaps	%xmm0, -0x160(%rbp)
000000000000c3e6	movaps	%xmm0, -0x170(%rbp)
000000000000c3ed	movq	_OBJC_IVAR_$_UAPSwitchViewController._switchInputs(%rip), %rcx
000000000000c3f4	movq	-0x1b8(%rbp), %rax
000000000000c3fb	movq	(%rax,%rcx), %rdi
000000000000c3ff	movq	%rdi, -0x1e8(%rbp)
000000000000c406	movq	0x27d03(%rip), %rsi     ## Objc selector ref: countByEnumeratingWithState:objects:count:
000000000000c40d	leaq	-0x170(%rbp), %rdx
000000000000c414	leaq	-0xb0(%rbp), %rcx
000000000000c41b	movl	$0x10, %r8d
000000000000c421	callq	*0x1cfd9(%rip)          ## Objc message: -[%rdi countByEnumeratingWithState:objects:count:]
000000000000c427	movq	%rax, -0x1d8(%rbp)
000000000000c42e	testq	%rax, %rax
000000000000c431	je	0xc601
000000000000c437	movq	-0x160(%rbp), %rax
000000000000c43e	movq	(%rax), %rax
000000000000c441	movq	%rax, -0x1e0(%rbp)
000000000000c448	movq	0x27cc1(%rip), %rax     ## Objc selector ref: countByEnumeratingWithState:objects:count:
000000000000c44f	movq	%rax, -0x1c8(%rbp)
000000000000c456	movq	0x1cfa3(%rip), %r15     ## Objc message: -[%rdi countByEnumeratingWithState:objects:count:]
000000000000c45d	xorl	%ebx, %ebx
000000000000c45f	movq	-0x160(%rbp), %rax
000000000000c466	movq	-0x1e0(%rbp), %rcx
000000000000c46d	cmpq	%rcx, (%rax)
000000000000c470	je	0xc47e
000000000000c472	movq	-0x1e8(%rbp), %rdi
000000000000c479	callq	0x1e886                 ## symbol stub for: _objc_enumerationMutation
000000000000c47e	movq	-0x168(%rbp), %rax
000000000000c485	movq	(%rax,%rbx,8), %rdx
000000000000c489	movq	%rbx, -0x1d0(%rbp)
000000000000c490	movq	-0x1b8(%rbp), %rax
000000000000c497	movq	_OBJC_IVAR_$_UAPSwitchViewController._switchInputs(%rip), %rcx
000000000000c49e	movq	(%rax,%rcx), %rdi
000000000000c4a2	movq	0x27d1f(%rip), %rsi     ## Objc selector ref: objectForKey:
000000000000c4a9	callq	*%r15
000000000000c4ac	movq	%rax, -0x1c0(%rbp)
000000000000c4b3	xorps	%xmm0, %xmm0
000000000000c4b6	movaps	%xmm0, -0x180(%rbp)
000000000000c4bd	movaps	%xmm0, -0x190(%rbp)
000000000000c4c4	movaps	%xmm0, -0x1a0(%rbp)
000000000000c4cb	movaps	%xmm0, -0x1b0(%rbp)
000000000000c4d2	movl	$0x10, %r8d
000000000000c4d8	movq	%rax, %rdi
000000000000c4db	movq	-0x1c8(%rbp), %rsi
000000000000c4e2	leaq	-0x1b0(%rbp), %rdx
000000000000c4e9	leaq	-0x130(%rbp), %rcx
000000000000c4f0	callq	*%r15
000000000000c4f3	movq	%rax, %r13
000000000000c4f6	testq	%r13, %r13
000000000000c4f9	je	0xc5b2
000000000000c4ff	movq	-0x1a0(%rbp), %rax
000000000000c506	movq	(%rax), %r12
000000000000c509	xorl	%r14d, %r14d
000000000000c50c	movq	-0x1a0(%rbp), %rax
000000000000c513	cmpq	%r12, (%rax)
000000000000c516	je	0xc524
000000000000c518	movq	-0x1c0(%rbp), %rdi
000000000000c51f	callq	0x1e886                 ## symbol stub for: _objc_enumerationMutation
000000000000c524	movq	-0x1a8(%rbp), %rax
000000000000c52b	movq	(%rax,%r14,8), %rdi
000000000000c52f	movq	0x27c52(%rip), %rsi     ## Objc selector ref: nickname
000000000000c536	callq	*%r15
000000000000c539	movq	%rax, %rbx
000000000000c53c	movq	%rbx, %rdi
000000000000c53f	movq	0x283ca(%rip), %rsi     ## Objc selector ref: hasPrefix:
000000000000c546	leaq	0x1e3c3(%rip), %rdx     ## Objc cfstring ref: @"Switch"
000000000000c54d	callq	*%r15
000000000000c550	testb	%al, %al
000000000000c552	je	0xc576
000000000000c554	movq	-0x1b8(%rbp), %rax
000000000000c55b	movq	_OBJC_IVAR_$_UAPSwitchViewController._defaultSwitchNames(%rip), %rcx
000000000000c562	movq	(%rax,%rcx), %rdi
000000000000c566	movq	0x27e13(%rip), %rsi     ## Objc selector ref: addObject:
000000000000c56d	movq	%rbx, %rdx
000000000000c570	callq	*0x1ce8a(%rip)          ## Objc message: -[%rdi addObject:]
000000000000c576	incq	%r14
000000000000c579	cmpq	%r13, %r14
000000000000c57c	jb	0xc50c
000000000000c57e	movl	$0x10, %r8d
000000000000c584	movq	-0x1c0(%rbp), %rdi
000000000000c58b	movq	-0x1c8(%rbp), %rsi
000000000000c592	leaq	-0x1b0(%rbp), %rdx
000000000000c599	leaq	-0x130(%rbp), %rcx
000000000000c5a0	callq	*0x1ce5a(%rip)          ## Objc message: -[%rdi addObject:]
000000000000c5a6	movq	%rax, %r13
000000000000c5a9	testq	%r13, %r13
000000000000c5ac	jne	0xc509
000000000000c5b2	movq	-0x1d0(%rbp), %rbx
000000000000c5b9	incq	%rbx
000000000000c5bc	cmpq	-0x1d8(%rbp), %rbx
000000000000c5c3	jb	0xc45f
000000000000c5c9	movl	$0x10, %r8d
000000000000c5cf	movq	-0x1e8(%rbp), %rdi
000000000000c5d6	movq	-0x1c8(%rbp), %rsi
000000000000c5dd	leaq	-0x170(%rbp), %rdx
000000000000c5e4	leaq	-0xb0(%rbp), %rcx
000000000000c5eb	callq	*0x1ce0f(%rip)          ## Objc message: -[%rdi addObject:]
000000000000c5f1	movq	%rax, -0x1d8(%rbp)
000000000000c5f8	testq	%rax, %rax
000000000000c5fb	jne	0xc45d
000000000000c601	movq	0x1cd50(%rip), %rax     ## literal pool symbol address: ___stack_chk_guard
000000000000c608	movq	(%rax), %rax
000000000000c60b	cmpq	-0x30(%rbp), %rax
000000000000c60f	jne	0xc623
000000000000c611	addq	$0x1c8, %rsp            ## imm = 0x1C8
000000000000c618	popq	%rbx
000000000000c619	popq	%r12
000000000000c61b	popq	%r13
000000000000c61d	popq	%r14
000000000000c61f	popq	%r15
000000000000c621	popq	%rbp
000000000000c622	retq
000000000000c623	callq	0x1e8b6                 ## symbol stub for: ___stack_chk_fail
000000000000c628	pushq	%rbp
000000000000c629	movq	%rsp, %rbp
000000000000c62c	pushq	%r15
000000000000c62e	pushq	%r14
000000000000c630	pushq	%r13
000000000000c632	pushq	%r12
000000000000c634	pushq	%rbx
000000000000c635	pushq	%rax
000000000000c636	movq	%rdi, %r14
000000000000c639	movq	_OBJC_IVAR_$_UAPSwitchViewController._autoScanCyclePopupButton(%rip), %rax
000000000000c640	movq	(%r14,%rax), %rdi
000000000000c644	movq	0x28095(%rip), %rsi     ## Objc selector ref: numberOfItems
000000000000c64b	callq	*0x1cdaf(%rip)          ## Objc message: -[%rdi numberOfItems]
000000000000c651	testq	%rax, %rax
000000000000c654	je	0xc6e9
000000000000c65a	movq	_OBJC_IVAR_$_UAPSwitchViewController._autoScanCyclePopupButton(%rip), %rbx
000000000000c661	xorl	%r12d, %r12d
000000000000c664	movq	0x1cd95(%rip), %r15     ## Objc message: -[%rdi numberOfItems]
000000000000c66b	movq	(%r14,%rbx), %rdi
000000000000c66f	movq	0x27ef2(%rip), %rsi     ## Objc selector ref: itemAtIndex:
000000000000c676	movq	%r12, %rdx
000000000000c679	callq	*%r15
000000000000c67c	movq	%rax, %r13
000000000000c67f	incq	%r12
000000000000c682	movq	%r13, %rdi
000000000000c685	movq	0x27ee4(%rip), %rsi     ## Objc selector ref: setTag:
000000000000c68c	movq	%r12, %rdx
000000000000c68f	callq	*%r15
000000000000c692	movq	_OBJC_IVAR_$_UAPSwitchViewController._intFormatter(%rip), %rax
000000000000c699	movq	(%r14,%rax), %rax
000000000000c69d	movq	%rax, -0x30(%rbp)
000000000000c6a1	movq	0x28eb8(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_NSNumber
000000000000c6a8	movq	0x28021(%rip), %rsi     ## Objc selector ref: numberWithInteger:
000000000000c6af	movq	%r12, %rdx
000000000000c6b2	callq	*%r15
000000000000c6b5	movq	-0x30(%rbp), %rdi
000000000000c6b9	movq	0x28258(%rip), %rsi     ## Objc selector ref: stringFromNumber:
000000000000c6c0	movq	%rax, %rdx
000000000000c6c3	callq	*%r15
000000000000c6c6	movq	%r13, %rdi
000000000000c6c9	movq	0x28250(%rip), %rsi     ## Objc selector ref: setTitle:
000000000000c6d0	movq	%rax, %rdx
000000000000c6d3	callq	*%r15
000000000000c6d6	movq	(%r14,%rbx), %rdi
000000000000c6da	movq	0x27fff(%rip), %rsi     ## Objc selector ref: numberOfItems
000000000000c6e1	callq	*%r15
000000000000c6e4	cmpq	%rax, %r12
000000000000c6e7	jb	0xc66b
000000000000c6e9	addq	$0x8, %rsp
000000000000c6ed	popq	%rbx
000000000000c6ee	popq	%r12
000000000000c6f0	popq	%r13
000000000000c6f2	popq	%r14
000000000000c6f4	popq	%r15
000000000000c6f6	popq	%rbp
000000000000c6f7	retq
000000000000c6f8	pushq	%rbp
000000000000c6f9	movq	%rsp, %rbp
000000000000c6fc	pushq	%r15
000000000000c6fe	pushq	%r14
000000000000c700	pushq	%r13
000000000000c702	pushq	%r12
000000000000c704	pushq	%rbx
000000000000c705	pushq	%rax
000000000000c706	movq	%rdi, %rax
000000000000c709	movq	%rax, -0x30(%rbp)
000000000000c70d	movq	_OBJC_IVAR_$_UAPSwitchViewController._deviceActionPopupButton(%rip), %r13
000000000000c714	movq	(%rax,%r13), %rdi
000000000000c718	movq	%rax, %r12
000000000000c71b	movq	0x27e46(%rip), %rsi     ## Objc selector ref: itemAtIndex:
000000000000c722	movq	0x1ccd7(%rip), %r14     ## Objc message: +[NSNumber itemAtIndex:]
000000000000c729	xorl	%edx, %edx
000000000000c72b	callq	*%r14
000000000000c72e	movq	%rax, %rbx
000000000000c731	movq	0x281e8(%rip), %rsi     ## Objc selector ref: setTitle:
000000000000c738	leaq	0x1d9d1(%rip), %rdx     ## Objc cfstring ref: @""
000000000000c73f	movq	%rbx, %rdi
000000000000c742	movq	%rdx, %r15
000000000000c745	callq	*%r14
000000000000c748	movq	0x27ca9(%rip), %rsi     ## Objc selector ref: setHidden:
000000000000c74f	movl	$0x1, %edx
000000000000c754	movq	%rbx, %rdi
000000000000c757	callq	*%r14
000000000000c75a	movq	(%r12,%r13), %rdi
000000000000c75e	movq	0x27e03(%rip), %rsi     ## Objc selector ref: itemAtIndex:
000000000000c765	movl	$0x1, %edx
000000000000c76a	callq	*%r14
000000000000c76d	movq	%rax, %rbx
000000000000c770	movq	0x28d89(%rip), %r12     ## Objc class ref: _OBJC_CLASS_$_NSBundle
000000000000c777	movq	0x28d8a(%rip), %rdi     ## Objc class ref: UniversalAccessPref
000000000000c77e	movq	0x2793b(%rip), %rsi     ## Objc selector ref: class
000000000000c785	callq	*%r14
000000000000c788	movq	0x27a29(%rip), %rsi     ## Objc selector ref: bundleForClass:
000000000000c78f	movq	%r12, %rdi
000000000000c792	movq	%rax, %rdx
000000000000c795	callq	*%r14
000000000000c798	movq	0x27a21(%rip), %rsi     ## Objc selector ref: localizedStringForKey:value:table:
000000000000c79f	leaq	0x1df2a(%rip), %rdx     ## Objc cfstring ref: @"switch.action.run.displayName"
000000000000c7a6	xorl	%r8d, %r8d
000000000000c7a9	movq	%rax, %rdi
000000000000c7ac	movq	%r15, %rcx
000000000000c7af	callq	*%r14
000000000000c7b2	movq	0x28167(%rip), %rsi     ## Objc selector ref: setTitle:
000000000000c7b9	movq	%rbx, %rdi
000000000000c7bc	movq	%rax, %rdx
000000000000c7bf	callq	*%r14
000000000000c7c2	leaq	_kActionRunKey(%rip), %rax
000000000000c7c9	movq	(%rax), %rdx
000000000000c7cc	movq	0x27ded(%rip), %rsi     ## Objc selector ref: setRepresentedObject:
000000000000c7d3	movq	%rbx, %rdi
000000000000c7d6	callq	*%r14
000000000000c7d9	movq	0x28148(%rip), %rdx     ## Objc selector ref: _selectAction
000000000000c7e0	movq	0x28149(%rip), %rsi     ## Objc selector ref: setAction:
000000000000c7e7	movq	%rbx, %rdi
000000000000c7ea	callq	*%r14
000000000000c7ed	movq	0x27b0c(%rip), %rsi     ## Objc selector ref: setTarget:
000000000000c7f4	movq	%rbx, %rdi
000000000000c7f7	movq	-0x30(%rbp), %rbx
000000000000c7fb	movq	%rbx, %rdx
000000000000c7fe	callq	*%r14
000000000000c801	movq	(%rbx,%r13), %rdi
000000000000c805	movq	0x27d5c(%rip), %rsi     ## Objc selector ref: itemAtIndex:
000000000000c80c	movl	$0x2, %edx
000000000000c811	callq	*%r14
000000000000c814	movq	%rax, %rbx
000000000000c817	movq	0x28ce2(%rip), %r12     ## Objc class ref: _OBJC_CLASS_$_NSBundle
000000000000c81e	movq	0x28ce3(%rip), %rdi     ## Objc class ref: UniversalAccessPref
000000000000c825	movq	0x27894(%rip), %rsi     ## Objc selector ref: class
000000000000c82c	callq	*%r14
000000000000c82f	movq	0x27982(%rip), %rsi     ## Objc selector ref: bundleForClass:
000000000000c836	movq	%r12, %rdi
000000000000c839	movq	%rax, %rdx
000000000000c83c	callq	*%r14
000000000000c83f	movq	0x2797a(%rip), %rsi     ## Objc selector ref: localizedStringForKey:value:table:
000000000000c846	leaq	0x1dea3(%rip), %rdx     ## Objc cfstring ref: @"switch.action.select.displayName"
000000000000c84d	xorl	%r8d, %r8d
000000000000c850	movq	%rax, %rdi
000000000000c853	movq	%r15, %rcx
000000000000c856	movq	%r15, %r13
000000000000c859	callq	*%r14
000000000000c85c	movq	0x280bd(%rip), %rsi     ## Objc selector ref: setTitle:
000000000000c863	movq	%rbx, %rdi
000000000000c866	movq	%rax, %rdx
000000000000c869	callq	*%r14
000000000000c86c	leaq	_kActionSelectKey(%rip), %rax
000000000000c873	movq	(%rax), %rdx
000000000000c876	movq	0x27d43(%rip), %rsi     ## Objc selector ref: setRepresentedObject:
000000000000c87d	movq	%rbx, %rdi
000000000000c880	callq	*%r14
000000000000c883	movq	0x2809e(%rip), %rdx     ## Objc selector ref: _selectAction
000000000000c88a	movq	0x2809f(%rip), %rsi     ## Objc selector ref: setAction:
000000000000c891	movq	%rbx, %rdi
000000000000c894	callq	*%r14
000000000000c897	movq	0x27a62(%rip), %rsi     ## Objc selector ref: setTarget:
000000000000c89e	movq	%rbx, %rdi
000000000000c8a1	movq	-0x30(%rbp), %rbx
000000000000c8a5	movq	%rbx, %rdx
000000000000c8a8	callq	*%r14
000000000000c8ab	movq	_OBJC_IVAR_$_UAPSwitchViewController._deviceActionPopupButton(%rip), %r15
000000000000c8b2	movq	(%rbx,%r15), %rdi
000000000000c8b6	movq	0x27cab(%rip), %rsi     ## Objc selector ref: itemAtIndex:
000000000000c8bd	movl	$0x3, %edx
000000000000c8c2	callq	*%r14
000000000000c8c5	movq	%rax, %rbx
000000000000c8c8	movq	0x28c31(%rip), %r12     ## Objc class ref: _OBJC_CLASS_$_NSBundle
000000000000c8cf	movq	0x28c32(%rip), %rdi     ## Objc class ref: UniversalAccessPref
000000000000c8d6	movq	0x277e3(%rip), %rsi     ## Objc selector ref: class
000000000000c8dd	callq	*%r14
000000000000c8e0	movq	0x278d1(%rip), %rsi     ## Objc selector ref: bundleForClass:
000000000000c8e7	movq	%r12, %rdi
000000000000c8ea	movq	%rax, %rdx
000000000000c8ed	callq	*%r14
000000000000c8f0	movq	0x278c9(%rip), %rsi     ## Objc selector ref: localizedStringForKey:value:table:
000000000000c8f7	leaq	0x1de12(%rip), %rdx     ## Objc cfstring ref: @"switch.action.step.displayName"
000000000000c8fe	xorl	%r8d, %r8d
000000000000c901	movq	%rax, %rdi
000000000000c904	movq	%r13, %rcx
000000000000c907	callq	*%r14
000000000000c90a	movq	0x2800f(%rip), %rsi     ## Objc selector ref: setTitle:
000000000000c911	movq	%rbx, %rdi
000000000000c914	movq	%rax, %rdx
000000000000c917	callq	*%r14
000000000000c91a	leaq	_kActionStepKey(%rip), %rax
000000000000c921	movq	(%rax), %rdx
000000000000c924	movq	0x27c95(%rip), %rsi     ## Objc selector ref: setRepresentedObject:
000000000000c92b	movq	%rbx, %rdi
000000000000c92e	callq	*%r14
000000000000c931	movq	0x27ff0(%rip), %rdx     ## Objc selector ref: _selectAction
000000000000c938	movq	0x27ff1(%rip), %rsi     ## Objc selector ref: setAction:
000000000000c93f	movq	%rbx, %rdi
000000000000c942	callq	*%r14
000000000000c945	movq	0x279b4(%rip), %rsi     ## Objc selector ref: setTarget:
000000000000c94c	movq	%rbx, %rdi
000000000000c94f	movq	-0x30(%rbp), %rbx
000000000000c953	movq	%rbx, %rdx
000000000000c956	callq	*%r14
000000000000c959	movq	(%rbx,%r15), %rdi
000000000000c95d	movq	%rbx, %r15
000000000000c960	movq	0x27c01(%rip), %rsi     ## Objc selector ref: itemAtIndex:
000000000000c967	movl	$0x4, %edx
000000000000c96c	callq	*%r14
000000000000c96f	movq	%rax, %rbx
000000000000c972	movq	0x28b87(%rip), %r12     ## Objc class ref: _OBJC_CLASS_$_NSBundle
000000000000c979	movq	0x28b88(%rip), %rdi     ## Objc class ref: UniversalAccessPref
000000000000c980	movq	0x27739(%rip), %rsi     ## Objc selector ref: class
000000000000c987	callq	*%r14
000000000000c98a	movq	0x27827(%rip), %rsi     ## Objc selector ref: bundleForClass:
000000000000c991	movq	%r12, %rdi
000000000000c994	movq	%rax, %rdx
000000000000c997	callq	*%r14
000000000000c99a	movq	0x2781f(%rip), %rsi     ## Objc selector ref: localizedStringForKey:value:table:
000000000000c9a1	leaq	0x1dd88(%rip), %rdx     ## Objc cfstring ref: @"switch.action.stop.displayName"
000000000000c9a8	xorl	%r8d, %r8d
000000000000c9ab	movq	%rax, %rdi
000000000000c9ae	movq	%r13, %rcx
000000000000c9b1	callq	*%r14
000000000000c9b4	movq	0x27f65(%rip), %rsi     ## Objc selector ref: setTitle:
000000000000c9bb	movq	%rbx, %rdi
000000000000c9be	movq	%rax, %rdx
000000000000c9c1	callq	*%r14
000000000000c9c4	leaq	_kActionStopKey(%rip), %rax
000000000000c9cb	movq	(%rax), %rdx
000000000000c9ce	movq	0x27beb(%rip), %rsi     ## Objc selector ref: setRepresentedObject:
000000000000c9d5	movq	%rbx, %rdi
000000000000c9d8	callq	*%r14
000000000000c9db	movq	0x27f46(%rip), %rdx     ## Objc selector ref: _selectAction
000000000000c9e2	movq	0x27f47(%rip), %rsi     ## Objc selector ref: setAction:
000000000000c9e9	movq	%rbx, %rdi
000000000000c9ec	callq	*%r14
000000000000c9ef	movq	0x2790a(%rip), %rsi     ## Objc selector ref: setTarget:
000000000000c9f6	movq	%rbx, %rdi
000000000000c9f9	movq	%r15, %rbx
000000000000c9fc	movq	%rbx, %rdx
000000000000c9ff	callq	*%r14
000000000000ca02	movq	_OBJC_IVAR_$_UAPSwitchViewController._deviceActionPopupButton(%rip), %rax
000000000000ca09	movq	(%rbx,%rax), %rdi
000000000000ca0d	movq	%rbx, %r15
000000000000ca10	movq	0x27b51(%rip), %rsi     ## Objc selector ref: itemAtIndex:
000000000000ca17	movl	$0x5, %edx
000000000000ca1c	callq	*%r14
000000000000ca1f	movq	%rax, %rbx
000000000000ca22	movq	0x28ad7(%rip), %r12     ## Objc class ref: _OBJC_CLASS_$_NSBundle
000000000000ca29	movq	0x28ad8(%rip), %rdi     ## Objc class ref: UniversalAccessPref
000000000000ca30	movq	0x27689(%rip), %rsi     ## Objc selector ref: class
000000000000ca37	callq	*%r14
000000000000ca3a	movq	0x27777(%rip), %rsi     ## Objc selector ref: bundleForClass:
000000000000ca41	movq	%r12, %rdi
000000000000ca44	movq	%rax, %rdx
000000000000ca47	callq	*%r14
000000000000ca4a	movq	0x2776f(%rip), %rsi     ## Objc selector ref: localizedStringForKey:value:table:
000000000000ca51	leaq	0x1dcf8(%rip), %rdx     ## Objc cfstring ref: @"switch.action.custom.displayName.elipsis"
000000000000ca58	xorl	%r8d, %r8d
000000000000ca5b	movq	%rax, %rdi
000000000000ca5e	movq	%r13, %rcx
000000000000ca61	callq	*%r14
000000000000ca64	movq	0x27eb5(%rip), %rsi     ## Objc selector ref: setTitle:
000000000000ca6b	movq	%rbx, %rdi
000000000000ca6e	movq	%rax, %rdx
000000000000ca71	callq	*%r14
000000000000ca74	leaq	_kActionCustomKey(%rip), %rax
000000000000ca7b	movq	(%rax), %rdx
000000000000ca7e	movq	0x27b3b(%rip), %rsi     ## Objc selector ref: setRepresentedObject:
000000000000ca85	movq	%rbx, %rdi
000000000000ca88	callq	*%r14
000000000000ca8b	movq	0x27ea6(%rip), %rdx     ## Objc selector ref: _addCustomAction
000000000000ca92	movq	0x27e97(%rip), %rsi     ## Objc selector ref: setAction:
000000000000ca99	movq	%rbx, %rdi
000000000000ca9c	callq	*%r14
000000000000ca9f	movq	0x2785a(%rip), %rsi     ## Objc selector ref: setTarget:
000000000000caa6	movq	%rbx, %rdi
000000000000caa9	movq	%r15, %rdx
000000000000caac	movq	%r14, %rax
000000000000caaf	addq	$0x8, %rsp
000000000000cab3	popq	%rbx
000000000000cab4	popq	%r12
000000000000cab6	popq	%r13
000000000000cab8	popq	%r14
000000000000caba	popq	%r15
000000000000cabc	popq	%rbp
000000000000cabd	jmpq	*%rax
000000000000cabf	pushq	%rbp
000000000000cac0	movq	%rsp, %rbp
000000000000cac3	pushq	%r15
000000000000cac5	pushq	%r14
000000000000cac7	pushq	%r13
000000000000cac9	pushq	%r12
000000000000cacb	pushq	%rbx
000000000000cacc	pushq	%rax
000000000000cacd	movq	%rdi, %r15
000000000000cad0	movq	_OBJC_IVAR_$_UAPSwitchViewController._autoScanRestartOptionPopupButton(%rip), %rax
000000000000cad7	movq	(%r15,%rax), %rdi
000000000000cadb	movq	%rax, %r13
000000000000cade	movq	0x27a83(%rip), %rsi     ## Objc selector ref: itemAtIndex:
000000000000cae5	movq	0x1c914(%rip), %r14     ## Objc message: +[UniversalAccessPref itemAtIndex:]
000000000000caec	xorl	%edx, %edx
000000000000caee	callq	*%r14
000000000000caf1	movq	%rax, %r12
000000000000caf4	movq	0x28a05(%rip), %rbx     ## Objc class ref: _OBJC_CLASS_$_NSBundle
000000000000cafb	movq	0x28a06(%rip), %rdi     ## Objc class ref: UniversalAccessPref
000000000000cb02	movq	0x275b7(%rip), %rsi     ## Objc selector ref: class
000000000000cb09	callq	*%r14
000000000000cb0c	movq	0x276a5(%rip), %rsi     ## Objc selector ref: bundleForClass:
000000000000cb13	movq	%rbx, %rdi
000000000000cb16	movq	%rax, %rdx
000000000000cb19	callq	*%r14
000000000000cb1c	movq	0x2769d(%rip), %rsi     ## Objc selector ref: localizedStringForKey:value:table:
000000000000cb23	leaq	0x1dec6(%rip), %rdx     ## Objc cfstring ref: @"switch.elementRestartOption.next"
000000000000cb2a	leaq	0x1d5df(%rip), %rcx     ## Objc cfstring ref: @""
000000000000cb31	xorl	%r8d, %r8d
000000000000cb34	movq	%rax, %rdi
000000000000cb37	callq	*%r14
000000000000cb3a	movq	0x27ddf(%rip), %rsi     ## Objc selector ref: setTitle:
000000000000cb41	movq	%r12, %rdi
000000000000cb44	movq	%rax, %rdx
000000000000cb47	callq	*%r14
000000000000cb4a	movq	0x27a1f(%rip), %rsi     ## Objc selector ref: setTag:
000000000000cb51	xorl	%edx, %edx
000000000000cb53	movq	%r12, %rdi
000000000000cb56	callq	*%r14
000000000000cb59	movq	(%r15,%r13), %rdi
000000000000cb5d	movq	0x27a04(%rip), %rsi     ## Objc selector ref: itemAtIndex:
000000000000cb64	movl	$0x1, %edx
000000000000cb69	callq	*%r14
000000000000cb6c	movq	%rax, %r12
000000000000cb6f	movq	0x2898a(%rip), %rbx     ## Objc class ref: _OBJC_CLASS_$_NSBundle
000000000000cb76	movq	0x2898b(%rip), %rdi     ## Objc class ref: UniversalAccessPref
000000000000cb7d	movq	0x2753c(%rip), %rsi     ## Objc selector ref: class
000000000000cb84	callq	*%r14
000000000000cb87	movq	0x2762a(%rip), %rsi     ## Objc selector ref: bundleForClass:
000000000000cb8e	movq	%rbx, %rdi
000000000000cb91	movq	%rax, %rdx
000000000000cb94	callq	*%r14
000000000000cb97	movq	0x27622(%rip), %rsi     ## Objc selector ref: localizedStringForKey:value:table:
000000000000cb9e	leaq	0x1de6b(%rip), %rdx     ## Objc cfstring ref: @"switch.elementRestartOption.startOfCurrentGroup"
000000000000cba5	xorl	%r8d, %r8d
000000000000cba8	movq	%rax, %rdi
000000000000cbab	leaq	0x1d55e(%rip), %r13     ## Objc cfstring ref: @""
000000000000cbb2	movq	%r13, %rcx
000000000000cbb5	callq	*%r14
000000000000cbb8	movq	0x27d61(%rip), %rsi     ## Objc selector ref: setTitle:
000000000000cbbf	movq	%r12, %rdi
000000000000cbc2	movq	%rax, %rdx
000000000000cbc5	callq	*%r14
000000000000cbc8	movq	0x279a1(%rip), %rsi     ## Objc selector ref: setTag:
000000000000cbcf	movl	$0x1, %edx
000000000000cbd4	movq	%r12, %rdi
000000000000cbd7	callq	*%r14
000000000000cbda	movq	_OBJC_IVAR_$_UAPSwitchViewController._autoScanRestartOptionPopupButton(%rip), %rax
000000000000cbe1	movq	(%r15,%rax), %rdi
000000000000cbe5	movq	0x2797c(%rip), %rsi     ## Objc selector ref: itemAtIndex:
000000000000cbec	movl	$0x2, %edx
000000000000cbf1	callq	*%r14
000000000000cbf4	movq	%rax, %r15
000000000000cbf7	movq	0x28902(%rip), %rbx     ## Objc class ref: _OBJC_CLASS_$_NSBundle
000000000000cbfe	movq	0x28903(%rip), %rdi     ## Objc class ref: UniversalAccessPref
000000000000cc05	movq	0x274b4(%rip), %rsi     ## Objc selector ref: class
000000000000cc0c	callq	*%r14
000000000000cc0f	movq	0x275a2(%rip), %rsi     ## Objc selector ref: bundleForClass:
000000000000cc16	movq	%rbx, %rdi
000000000000cc19	movq	%rax, %rdx
000000000000cc1c	callq	*%r14
000000000000cc1f	movq	0x2759a(%rip), %rsi     ## Objc selector ref: localizedStringForKey:value:table:
000000000000cc26	leaq	0x1de03(%rip), %rdx     ## Objc cfstring ref: @"switch.elementRestartOption.top"
000000000000cc2d	xorl	%r8d, %r8d
000000000000cc30	movq	%rax, %rdi
000000000000cc33	movq	%r13, %rcx
000000000000cc36	callq	*%r14
000000000000cc39	movq	0x27ce0(%rip), %rsi     ## Objc selector ref: setTitle:
000000000000cc40	movq	%r15, %rdi
000000000000cc43	movq	%rax, %rdx
000000000000cc46	callq	*%r14
000000000000cc49	movq	0x27920(%rip), %rsi     ## Objc selector ref: setTag:
000000000000cc50	movl	$0x2, %edx
000000000000cc55	movq	%r15, %rdi
000000000000cc58	movq	%r14, %rax
000000000000cc5b	addq	$0x8, %rsp
000000000000cc5f	popq	%rbx
000000000000cc60	popq	%r12
000000000000cc62	popq	%r13
000000000000cc64	popq	%r14
000000000000cc66	popq	%r15
000000000000cc68	popq	%rbp
000000000000cc69	jmpq	*%rax
000000000000cc6b	pushq	%rbp
000000000000cc6c	movq	%rsp, %rbp
000000000000cc6f	pushq	%r15
000000000000cc71	pushq	%r14
000000000000cc73	pushq	%r13
000000000000cc75	pushq	%r12
000000000000cc77	pushq	%rbx
000000000000cc78	subq	$0x208, %rsp            ## imm = 0x208
000000000000cc7f	movq	%rdi, %r12
000000000000cc82	movq	0x1c6cf(%rip), %rax     ## literal pool symbol address: ___stack_chk_guard
000000000000cc89	movq	(%rax), %rax
000000000000cc8c	movq	%rax, -0x30(%rbp)
000000000000cc90	movq	_OBJC_IVAR_$_UAPSwitchViewController._switchInputEntities(%rip), %rax
000000000000cc97	movq	(%r12,%rax), %rdi
000000000000cc9b	testq	%rdi, %rdi
000000000000cc9e	jne	0xcd0f
000000000000cca0	movq	0x288b1(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_NSMutableArray
000000000000cca7	movq	0x274ba(%rip), %rsi     ## Objc selector ref: alloc
000000000000ccae	movq	0x1c74b(%rip), %r14     ## Objc message: +[NSMutableArray alloc]
000000000000ccb5	callq	*%r14
000000000000ccb8	movq	0x275b1(%rip), %rsi     ## Objc selector ref: init
000000000000ccbf	movq	%rax, %rdi
000000000000ccc2	callq	*%r14
000000000000ccc5	movq	_OBJC_IVAR_$_UAPSwitchViewController._switchInputEntities(%rip), %rdx
000000000000cccc	movq	%rax, %rdi
000000000000cccf	movq	%r12, %rsi
000000000000ccd2	callq	0x1e868                 ## symbol stub for: _objc_assign_ivar
000000000000ccd7	movq	_OBJC_IVAR_$_UAPSwitchViewController._switchSwitchesTableView(%rip), %rbx
000000000000ccde	movq	(%r12,%rbx), %rdi
000000000000cce2	movq	0x27617(%rip), %rsi     ## Objc selector ref: setTarget:
000000000000cce9	movq	%r12, %rdx
000000000000ccec	callq	*%r14
000000000000ccef	movq	(%r12,%rbx), %rdi
000000000000ccf3	movq	0x27c46(%rip), %rdx     ## Objc selector ref: _configureSelectedSwitch
000000000000ccfa	movq	0x2760f(%rip), %rsi     ## Objc selector ref: setDoubleAction:
000000000000cd01	callq	*%r14
000000000000cd04	movq	_OBJC_IVAR_$_UAPSwitchViewController._switchInputEntities(%rip), %rax
000000000000cd0b	movq	(%r12,%rax), %rdi
000000000000cd0f	movq	0x27652(%rip), %rsi     ## Objc selector ref: count
000000000000cd16	callq	*0x1c6e4(%rip)          ## Objc message: -[%rdi count]
000000000000cd1c	testq	%rax, %rax
000000000000cd1f	je	0xcd46
000000000000cd21	movq	_OBJC_IVAR_$_UAPSwitchViewController._switchInputEntities(%rip), %rcx
000000000000cd28	movq	(%r12,%rcx), %rdi
000000000000cd2c	decq	%rax
000000000000cd2f	movq	0x27c22(%rip), %rsi     ## Objc selector ref: removeObjectsInRange:
000000000000cd36	movl	$0x1, %edx
000000000000cd3b	movq	%rax, %rcx
000000000000cd3e	callq	*0x1c6bc(%rip)          ## Objc message: -[%rdi removeObjectsInRange:]
000000000000cd44	jmp	0xcdbb
000000000000cd46	movq	0x2886b(%rip), %rdi     ## Objc class ref: UASwitchInputEntity
000000000000cd4d	movq	0x27414(%rip), %rsi     ## Objc selector ref: alloc
000000000000cd54	movq	0x1c6a5(%rip), %r14     ## Objc message: +[UASwitchInputEntity alloc]
000000000000cd5b	callq	*%r14
000000000000cd5e	movq	0x27abb(%rip), %rsi     ## Objc selector ref: initWithIndex:actionKey:
000000000000cd65	xorl	%edx, %edx
000000000000cd67	xorl	%ecx, %ecx
000000000000cd69	movq	%rax, %rdi
000000000000cd6c	callq	*%r14
000000000000cd6f	movq	%rax, %rbx
000000000000cd72	movq	0x27bcf(%rip), %rsi     ## Objc selector ref: setIsHeader:
000000000000cd79	movl	$0x1, %edx
000000000000cd7e	movq	%rbx, %rdi
000000000000cd81	callq	*%r14
000000000000cd84	movq	0x27bc5(%rip), %rsi     ## Objc selector ref: setIsRequired:
000000000000cd8b	movl	$0x1, %edx
000000000000cd90	movq	%rbx, %rdi
000000000000cd93	callq	*%r14
000000000000cd96	movq	_OBJC_IVAR_$_UAPSwitchViewController._switchInputEntities(%rip), %rax
000000000000cd9d	movq	(%r12,%rax), %rdi
000000000000cda1	movq	0x275d8(%rip), %rsi     ## Objc selector ref: addObject:
000000000000cda8	movq	%rbx, %rdx
000000000000cdab	callq	*%r14
000000000000cdae	movq	0x2739b(%rip), %rsi     ## Objc selector ref: release
000000000000cdb5	movq	%rbx, %rdi
000000000000cdb8	callq	*%r14
000000000000cdbb	movq	_OBJC_IVAR_$_UAPSwitchViewController._switchInputs(%rip), %rax
000000000000cdc2	movq	(%r12,%rax), %rdi
000000000000cdc6	movq	0x2758b(%rip), %rsi     ## Objc selector ref: mutableCopy
000000000000cdcd	movq	0x1c62c(%rip), %r14     ## Objc message: -[%rdi mutableCopy]
000000000000cdd4	callq	*%r14
000000000000cdd7	movq	%rax, %rbx
000000000000cdda	movq	%rbx, -0x208(%rbp)
000000000000cde1	callq	0x1e6dc                 ## symbol stub for: _UASwitchAutoScanEnabled
000000000000cde6	movb	%al, -0x1e8(%rbp)
000000000000cdec	leaq	_kActionSelectKey(%rip), %r15
000000000000cdf3	movq	(%r15), %rdx
000000000000cdf6	movq	0x273cb(%rip), %rsi     ## Objc selector ref: objectForKey:
000000000000cdfd	movq	%rbx, %rdi
000000000000ce00	callq	*%r14
000000000000ce03	movq	%rax, %rbx
000000000000ce06	movq	0x2755b(%rip), %rsi     ## Objc selector ref: count
000000000000ce0d	movq	%rbx, %rdi
000000000000ce10	callq	*%r14
000000000000ce13	testq	%rax, %rax
000000000000ce16	je	0xcedf
000000000000ce1c	movq	%rax, -0x1c0(%rbp)
000000000000ce23	movq	0x2878e(%rip), %rdi     ## Objc class ref: UASwitchInputEntity
000000000000ce2a	movq	0x27337(%rip), %rsi     ## Objc selector ref: alloc
000000000000ce31	callq	*%r14
000000000000ce34	movq	(%r15), %rcx
000000000000ce37	movq	0x279e2(%rip), %rsi     ## Objc selector ref: initWithIndex:actionKey:
000000000000ce3e	movl	$0x1, %edx
000000000000ce43	movq	%rax, %rdi
000000000000ce46	callq	*%r14
000000000000ce49	movq	%rax, %r15
000000000000ce4c	movq	0x2751d(%rip), %rsi     ## Objc selector ref: objectAtIndex:
000000000000ce53	xorl	%edx, %edx
000000000000ce55	movq	%rbx, %rdi
000000000000ce58	movq	%rbx, -0x1d0(%rbp)
000000000000ce5f	callq	*%r14
000000000000ce62	movq	%rax, %rbx
000000000000ce65	movq	0x27ae4(%rip), %rsi     ## Objc selector ref: setIsRequired:
000000000000ce6c	movl	$0x1, %edx
000000000000ce71	movq	%r15, %rdi
000000000000ce74	callq	*%r14
000000000000ce77	movq	0x274da(%rip), %rsi     ## Objc selector ref: mutableCopy
000000000000ce7e	movq	%rbx, %rdi
000000000000ce81	callq	*%r14
000000000000ce84	movq	%rax, %rbx
000000000000ce87	movq	0x27ad2(%rip), %rsi     ## Objc selector ref: setDeviceSettings:
000000000000ce8e	movq	%r15, %rdi
000000000000ce91	movq	%rbx, %rdx
000000000000ce94	callq	*%r14
000000000000ce97	movq	0x272b2(%rip), %rsi     ## Objc selector ref: release
000000000000ce9e	movq	%rbx, %rdi
000000000000cea1	callq	*%r14
000000000000cea4	movq	_OBJC_IVAR_$_UAPSwitchViewController._switchInputEntities(%rip), %rax
000000000000ceab	movq	(%r12,%rax), %rdi
000000000000ceaf	movq	0x274ca(%rip), %rsi     ## Objc selector ref: addObject:
000000000000ceb6	movq	%r15, %rdx
000000000000ceb9	callq	*%r14
000000000000cebc	movq	0x2728d(%rip), %rsi     ## Objc selector ref: release
000000000000cec3	movq	%r15, %rdi
000000000000cec6	callq	*%r14
000000000000cec9	movb	$0x1, %al
000000000000cecb	movl	%eax, -0x21c(%rbp)
000000000000ced1	movl	$0x2, %eax
000000000000ced6	movq	%rax, -0x1b8(%rbp)
000000000000cedd	jmp	0xcf03
000000000000cedf	movl	$0x1, %ecx
000000000000cee4	movq	%rcx, -0x1b8(%rbp)
000000000000ceeb	movq	%rax, -0x1c0(%rbp)
000000000000cef2	movq	%rbx, -0x1d0(%rbp)
000000000000cef9	movl	$0x0, -0x21c(%rbp)
000000000000cf03	leaq	_kActionStepKey(%rip), %r15
000000000000cf0a	movq	(%r15), %rdx
000000000000cf0d	movq	0x272b4(%rip), %rsi     ## Objc selector ref: objectForKey:
000000000000cf14	movq	-0x208(%rbp), %rdi
000000000000cf1b	callq	*%r14
000000000000cf1e	movq	%rax, %rbx
000000000000cf21	movq	0x27440(%rip), %rsi     ## Objc selector ref: count
000000000000cf28	movq	%rbx, %rdi
000000000000cf2b	callq	*%r14
000000000000cf2e	cmpb	$0x0, -0x1e8(%rbp)
000000000000cf35	je	0xcf63
000000000000cf37	movq	%rbx, -0x1e0(%rbp)
000000000000cf3e	testq	%rax, %rax
000000000000cf41	movq	%rax, -0x1c8(%rbp)
000000000000cf48	setne	%al
000000000000cf4b	movq	0x27a16(%rip), %rsi     ## Objc selector ref: _setEditableScanMode:
000000000000cf52	movzbl	%al, %edx
000000000000cf55	movq	%r12, %rdi
000000000000cf58	callq	*0x1c4a2(%rip)          ## Objc message: +[UASwitchInputEntity _setEditableScanMode:]
000000000000cf5e	jmp	0xd08d
000000000000cf63	testq	%rax, %rax
000000000000cf66	movq	%rax, -0x1c8(%rbp)
000000000000cf6d	je	0xd04b
000000000000cf73	movq	0x2863e(%rip), %rdi     ## Objc class ref: UASwitchInputEntity
000000000000cf7a	movq	0x271e7(%rip), %rsi     ## Objc selector ref: alloc
000000000000cf81	callq	*%r14
000000000000cf84	movq	(%r15), %rcx
000000000000cf87	movq	0x27892(%rip), %rsi     ## Objc selector ref: initWithIndex:actionKey:
000000000000cf8e	movq	-0x1b8(%rbp), %r13
000000000000cf95	movq	%r13, %rdx
000000000000cf98	leaq	0x1(%r13), %r13
000000000000cf9c	movq	%rax, %rdi
000000000000cf9f	callq	*%r14
000000000000cfa2	movq	%rax, -0x1b8(%rbp)
000000000000cfa9	movq	0x279a0(%rip), %rsi     ## Objc selector ref: setIsRequired:
000000000000cfb0	movl	$0x1, %edx
000000000000cfb5	movq	%rax, %rdi
000000000000cfb8	callq	*%r14
000000000000cfbb	movq	0x273ae(%rip), %rsi     ## Objc selector ref: objectAtIndex:
000000000000cfc2	xorl	%edx, %edx
000000000000cfc4	movq	%rbx, %rdi
000000000000cfc7	movq	%rbx, -0x1e0(%rbp)
000000000000cfce	callq	*%r14
000000000000cfd1	movq	0x27380(%rip), %rsi     ## Objc selector ref: mutableCopy
000000000000cfd8	movq	%rax, %rdi
000000000000cfdb	callq	*%r14
000000000000cfde	movq	%r14, %r15
000000000000cfe1	movq	%rax, %rbx
000000000000cfe4	movq	0x27975(%rip), %rsi     ## Objc selector ref: setDeviceSettings:
000000000000cfeb	movq	-0x1b8(%rbp), %rdi
000000000000cff2	movq	%rbx, %rdx
000000000000cff5	callq	*%r15
000000000000cff8	movq	0x27151(%rip), %rsi     ## Objc selector ref: release
000000000000cfff	movq	%rbx, %rdi
000000000000d002	movq	%r15, %r14
000000000000d005	movq	%r13, %r15
000000000000d008	callq	*%r14
000000000000d00b	movq	_OBJC_IVAR_$_UAPSwitchViewController._switchInputEntities(%rip), %rax
000000000000d012	movq	(%r12,%rax), %rdi
000000000000d016	movq	0x27363(%rip), %rsi     ## Objc selector ref: addObject:
000000000000d01d	movq	-0x1b8(%rbp), %rbx
000000000000d024	movq	%rbx, %rdx
000000000000d027	callq	*%r14
000000000000d02a	movq	0x2711f(%rip), %rsi     ## Objc selector ref: release
000000000000d031	movq	%rbx, %rdi
000000000000d034	callq	*%r14
000000000000d037	movq	0x2792a(%rip), %rsi     ## Objc selector ref: _setEditableScanMode:
000000000000d03e	movl	$0x1, %edx
000000000000d043	movq	%r12, %rdi
000000000000d046	callq	*%r14
000000000000d049	jmp	0xd094
000000000000d04b	movq	%rbx, -0x1e0(%rbp)
000000000000d052	movq	0x276c7(%rip), %rsi     ## Objc selector ref: stopListeningForChanges
000000000000d059	movq	%r12, %rdi
000000000000d05c	callq	*%r14
000000000000d05f	movl	$0x1, %edi
000000000000d064	callq	0x1e6f4                 ## symbol stub for: _UASwitchAutoScanSetEnabled
000000000000d069	movq	0x276b8(%rip), %rsi     ## Objc selector ref: startListeningForChanges
000000000000d070	movq	%r12, %rdi
000000000000d073	callq	*%r14
000000000000d076	movq	_OBJC_IVAR_$_UAPSwitchViewController._autoScanEnableInstruction(%rip), %rax
000000000000d07d	movq	(%r12,%rax), %rdi
000000000000d081	movq	0x27370(%rip), %rsi     ## Objc selector ref: setHidden:
000000000000d088	xorl	%edx, %edx
000000000000d08a	callq	*%r14
000000000000d08d	movq	-0x1b8(%rbp), %r15
000000000000d094	movq	0x2851d(%rip), %rdi     ## Objc class ref: UASwitchInputEntity
000000000000d09b	movq	0x270c6(%rip), %rsi     ## Objc selector ref: alloc
000000000000d0a2	callq	*%r14
000000000000d0a5	movq	0x27774(%rip), %rsi     ## Objc selector ref: initWithIndex:actionKey:
000000000000d0ac	xorl	%ecx, %ecx
000000000000d0ae	movq	%rax, %rdi
000000000000d0b1	movq	%r15, %rdx
000000000000d0b4	callq	*%r14
000000000000d0b7	movq	%rax, %rbx
000000000000d0ba	movq	0x27887(%rip), %rsi     ## Objc selector ref: setIsHeader:
000000000000d0c1	movl	$0x1, %edx
000000000000d0c6	movq	%rbx, %rdi
000000000000d0c9	callq	*%r14
000000000000d0cc	movq	_OBJC_IVAR_$_UAPSwitchViewController._switchInputEntities(%rip), %rax
000000000000d0d3	movq	(%r12,%rax), %rdi
000000000000d0d7	movq	0x272a2(%rip), %rsi     ## Objc selector ref: addObject:
000000000000d0de	movq	%rbx, %rdx
000000000000d0e1	callq	*%r14
000000000000d0e4	movq	0x27065(%rip), %rsi     ## Objc selector ref: release
000000000000d0eb	movq	%rbx, %rdi
000000000000d0ee	movq	%r14, %r13
000000000000d0f1	callq	*%r13
000000000000d0f4	movq	-0x1c0(%rbp), %rax
000000000000d0fb	cmpq	$0x2, %rax
000000000000d0ff	jb	0xd1d9
000000000000d105	leaq	(%rax,%r15), %rax
000000000000d109	movq	%rax, -0x1b8(%rbp)
000000000000d110	movq	%r12, -0x1d8(%rbp)
000000000000d117	movq	%r13, %r12
000000000000d11a	movl	$0x1, %r13d
000000000000d120	movq	0x28491(%rip), %rdi     ## Objc class ref: UASwitchInputEntity
000000000000d127	movq	0x2703a(%rip), %rsi     ## Objc selector ref: alloc
000000000000d12e	callq	*%r12
000000000000d131	leaq	_kActionSelectKey(%rip), %rcx
000000000000d138	movq	(%rcx), %rcx
000000000000d13b	leaq	(%r15,%r13), %rdx
000000000000d13f	movq	%rax, %rdi
000000000000d142	movq	0x276d7(%rip), %rsi     ## Objc selector ref: initWithIndex:actionKey:
000000000000d149	callq	*%r12
000000000000d14c	movq	%rax, %r14
000000000000d14f	movq	-0x1d0(%rbp), %rdi
000000000000d156	movq	0x27213(%rip), %rsi     ## Objc selector ref: objectAtIndex:
000000000000d15d	movq	%r13, %rdx
000000000000d160	callq	*%r12
000000000000d163	movq	%rax, %rdi
000000000000d166	movq	0x271eb(%rip), %rsi     ## Objc selector ref: mutableCopy
000000000000d16d	callq	*%r12
000000000000d170	movq	%r15, %rbx
000000000000d173	movq	%rax, %r15
000000000000d176	movq	%r14, %rdi
000000000000d179	movq	0x277e0(%rip), %rsi     ## Objc selector ref: setDeviceSettings:
000000000000d180	movq	%r15, %rdx
000000000000d183	callq	*%r12
000000000000d186	movq	%r15, %rdi
000000000000d189	movq	%rbx, %r15
000000000000d18c	movq	0x26fbd(%rip), %rbx     ## Objc selector ref: release
000000000000d193	movq	%rbx, %rsi
000000000000d196	callq	*%r12
000000000000d199	movq	-0x1d8(%rbp), %rax
000000000000d1a0	movq	_OBJC_IVAR_$_UAPSwitchViewController._switchInputEntities(%rip), %rcx
000000000000d1a7	movq	(%rax,%rcx), %rdi
000000000000d1ab	movq	0x271ce(%rip), %rsi     ## Objc selector ref: addObject:
000000000000d1b2	movq	%r14, %rdx
000000000000d1b5	callq	*%r12
000000000000d1b8	movq	%r14, %rdi
000000000000d1bb	movq	%rbx, %rsi
000000000000d1be	callq	*%r12
000000000000d1c1	movq	-0x1c0(%rbp), %rax
000000000000d1c8	incq	%r13
000000000000d1cb	cmpq	%r13, %rax
000000000000d1ce	jne	0xd120
000000000000d1d4	movq	%r12, %r13
000000000000d1d7	jmp	0xd1ea
000000000000d1d9	movq	%r12, -0x1d8(%rbp)
000000000000d1e0	incq	%r15
000000000000d1e3	movq	%r15, -0x1b8(%rbp)
000000000000d1ea	cmpb	$0x0, -0x1e8(%rbp)
000000000000d1f1	sete	%al
000000000000d1f4	movzbl	%al, %ecx
000000000000d1f7	movq	-0x1c8(%rbp), %rax
000000000000d1fe	cmpq	%rax, %rcx
000000000000d201	jae	0xd2ed
000000000000d207	movq	-0x1b8(%rbp), %rbx
000000000000d20e	movq	%rcx, -0x1d0(%rbp)
000000000000d215	movq	%rcx, %r12
000000000000d218	movq	0x28399(%rip), %rdi     ## Objc class ref: UASwitchInputEntity
000000000000d21f	movq	0x26f42(%rip), %rsi     ## Objc selector ref: alloc
000000000000d226	callq	*%r13
000000000000d229	leaq	_kActionStepKey(%rip), %rcx
000000000000d230	movq	(%rcx), %rcx
000000000000d233	movq	%rbx, %rdx
000000000000d236	leaq	0x1(%rbx), %rbx
000000000000d23a	movq	%rbx, -0x1c0(%rbp)
000000000000d241	movq	%rax, %rdi
000000000000d244	movq	0x275d5(%rip), %rsi     ## Objc selector ref: initWithIndex:actionKey:
000000000000d24b	callq	*%r13
000000000000d24e	movq	%r13, %rbx
000000000000d251	movq	%rax, %r14
000000000000d254	movq	-0x1e0(%rbp), %rdi
000000000000d25b	movq	0x2710e(%rip), %rsi     ## Objc selector ref: objectAtIndex:
000000000000d262	movq	%r12, %rdx
000000000000d265	callq	*%rbx
000000000000d267	movq	%rax, %rdi
000000000000d26a	movq	0x270e7(%rip), %rsi     ## Objc selector ref: mutableCopy
000000000000d271	callq	*%rbx
000000000000d273	movq	%rax, %r15
000000000000d276	movq	%r14, %rdi
000000000000d279	movq	0x276e0(%rip), %rsi     ## Objc selector ref: setDeviceSettings:
000000000000d280	movq	%r15, %rdx
000000000000d283	callq	*%rbx
000000000000d285	movq	%r15, %rdi
000000000000d288	movq	0x26ec1(%rip), %r15     ## Objc selector ref: release
000000000000d28f	movq	%r15, %rsi
000000000000d292	callq	*%rbx
000000000000d294	movq	-0x1d8(%rbp), %rax
000000000000d29b	movq	_OBJC_IVAR_$_UAPSwitchViewController._switchInputEntities(%rip), %rcx
000000000000d2a2	movq	(%rax,%rcx), %rdi
000000000000d2a6	movq	0x270d3(%rip), %rsi     ## Objc selector ref: addObject:
000000000000d2ad	movq	%r14, %rdx
000000000000d2b0	callq	*%rbx
000000000000d2b2	movq	%r14, %rdi
000000000000d2b5	movq	%rbx, %r13
000000000000d2b8	movq	-0x1c0(%rbp), %rbx
000000000000d2bf	movq	%r15, %rsi
000000000000d2c2	callq	*%r13
000000000000d2c5	movq	-0x1c8(%rbp), %rax
000000000000d2cc	incq	%r12
000000000000d2cf	cmpq	%r12, %rax
000000000000d2d2	jne	0xd218
000000000000d2d8	addq	-0x1b8(%rbp), %rax
000000000000d2df	subq	-0x1d0(%rbp), %rax
000000000000d2e6	movq	%rax, -0x1b8(%rbp)
000000000000d2ed	leaq	_kActionSelectKey(%rip), %rax
000000000000d2f4	movq	(%rax), %rdx
000000000000d2f7	movq	0x26f32(%rip), %rsi     ## Objc selector ref: removeObjectForKey:
000000000000d2fe	movq	-0x208(%rbp), %r14
000000000000d305	movq	%r14, %rdi
000000000000d308	callq	*%r13
000000000000d30b	leaq	_kActionStepKey(%rip), %rax
000000000000d312	movq	(%rax), %rdx
000000000000d315	movq	0x26f14(%rip), %rsi     ## Objc selector ref: removeObjectForKey:
000000000000d31c	movq	%r14, %rdi
000000000000d31f	callq	*%r13
000000000000d322	xorps	%xmm0, %xmm0
000000000000d325	movaps	%xmm0, -0x140(%rbp)
000000000000d32c	movaps	%xmm0, -0x150(%rbp)
000000000000d333	movaps	%xmm0, -0x160(%rbp)
000000000000d33a	movaps	%xmm0, -0x170(%rbp)
000000000000d341	movq	0x27628(%rip), %rsi     ## Objc selector ref: allKeys
000000000000d348	movq	%r14, %rdi
000000000000d34b	callq	*%r13
000000000000d34e	movq	%rax, -0x218(%rbp)
000000000000d355	movq	0x26db4(%rip), %rsi     ## Objc selector ref: countByEnumeratingWithState:objects:count:
000000000000d35c	leaq	-0x170(%rbp), %rdx
000000000000d363	leaq	-0xb0(%rbp), %rcx
000000000000d36a	movl	$0x10, %r8d
000000000000d370	movq	%rax, %rdi
000000000000d373	callq	*%r13
000000000000d376	movq	%rax, -0x200(%rbp)
000000000000d37d	testq	%rax, %rax
000000000000d380	je	0xd5d4
000000000000d386	movq	-0x160(%rbp), %rax
000000000000d38d	movq	(%rax), %rax
000000000000d390	movq	%rax, -0x210(%rbp)
000000000000d397	movq	0x26d72(%rip), %rax     ## Objc selector ref: countByEnumeratingWithState:objects:count:
000000000000d39e	movq	%rax, -0x1f0(%rbp)
000000000000d3a5	xorl	%ebx, %ebx
000000000000d3a7	movq	-0x160(%rbp), %rax
000000000000d3ae	movq	-0x210(%rbp), %rcx
000000000000d3b5	cmpq	%rcx, (%rax)
000000000000d3b8	je	0xd3c6
000000000000d3ba	movq	-0x218(%rbp), %rdi
000000000000d3c1	callq	0x1e886                 ## symbol stub for: _objc_enumerationMutation
000000000000d3c6	movq	-0x168(%rbp), %rax
000000000000d3cd	movq	(%rax,%rbx,8), %rdx
000000000000d3d1	movq	%rdx, -0x1c8(%rbp)
000000000000d3d8	movq	%rbx, -0x1f8(%rbp)
000000000000d3df	movq	-0x208(%rbp), %rdi
000000000000d3e6	movq	0x26ddb(%rip), %rsi     ## Objc selector ref: objectForKey:
000000000000d3ed	callq	*%r13
000000000000d3f0	movq	%rax, -0x1e0(%rbp)
000000000000d3f7	xorps	%xmm0, %xmm0
000000000000d3fa	movaps	%xmm0, -0x180(%rbp)
000000000000d401	movaps	%xmm0, -0x190(%rbp)
000000000000d408	movaps	%xmm0, -0x1a0(%rbp)
000000000000d40f	movaps	%xmm0, -0x1b0(%rbp)
000000000000d416	movl	$0x10, %r8d
000000000000d41c	movq	%rax, %rdi
000000000000d41f	movq	-0x1f0(%rbp), %rsi
000000000000d426	leaq	-0x1b0(%rbp), %rdx
000000000000d42d	leaq	-0x130(%rbp), %rcx
000000000000d434	callq	*%r13
000000000000d437	movq	%rax, %rcx
000000000000d43a	testq	%rcx, %rcx
000000000000d43d	je	0xd585
000000000000d443	movq	-0x1a0(%rbp), %rax
000000000000d44a	movq	(%rax), %rax
000000000000d44d	movq	%rax, -0x1d0(%rbp)
000000000000d454	movq	%rcx, -0x1c0(%rbp)
000000000000d45b	cmpq	$0x1, %rcx
000000000000d45f	movl	$0x1, %eax
000000000000d464	cmovaq	%rcx, %rax
000000000000d468	movq	%rax, -0x1e8(%rbp)
000000000000d46f	xorl	%r12d, %r12d
000000000000d472	movq	-0x1b8(%rbp), %rax
000000000000d479	leaq	(%rax,%r12), %r15
000000000000d47d	movq	-0x1a0(%rbp), %rax
000000000000d484	movq	-0x1d0(%rbp), %rcx
000000000000d48b	cmpq	%rcx, (%rax)
000000000000d48e	je	0xd49c
000000000000d490	movq	-0x1e0(%rbp), %rdi
000000000000d497	callq	0x1e886                 ## symbol stub for: _objc_enumerationMutation
000000000000d49c	movq	-0x1a8(%rbp), %rax
000000000000d4a3	movq	(%rax,%r12,8), %r14
000000000000d4a7	movq	0x2810a(%rip), %rdi     ## Objc class ref: UASwitchInputEntity
000000000000d4ae	movq	0x26cb3(%rip), %rsi     ## Objc selector ref: alloc
000000000000d4b5	callq	*%r13
000000000000d4b8	movq	%rax, %rdi
000000000000d4bb	movq	0x2735e(%rip), %rsi     ## Objc selector ref: initWithIndex:actionKey:
000000000000d4c2	movq	%r15, %rdx
000000000000d4c5	movq	-0x1c8(%rbp), %rcx
000000000000d4cc	callq	*%r13
000000000000d4cf	movq	%rax, %r15
000000000000d4d2	movq	%r14, %rdi
000000000000d4d5	movq	0x26e7c(%rip), %rsi     ## Objc selector ref: mutableCopy
000000000000d4dc	callq	*%r13
000000000000d4df	movq	%r13, %r14
000000000000d4e2	movq	%rax, %rbx
000000000000d4e5	movq	%r15, %rdi
000000000000d4e8	movq	0x27471(%rip), %rsi     ## Objc selector ref: setDeviceSettings:
000000000000d4ef	movq	%rbx, %rdx
000000000000d4f2	callq	*%r14
000000000000d4f5	movq	%rbx, %rdi
000000000000d4f8	movq	%r14, %r13
000000000000d4fb	movq	0x26c4e(%rip), %rbx     ## Objc selector ref: release
000000000000d502	movq	%rbx, %rsi
000000000000d505	callq	*%r13
000000000000d508	movq	-0x1d8(%rbp), %rax
000000000000d50f	movq	_OBJC_IVAR_$_UAPSwitchViewController._switchInputEntities(%rip), %rcx
000000000000d516	movq	(%rax,%rcx), %rdi
000000000000d51a	movq	0x26e5f(%rip), %rsi     ## Objc selector ref: addObject:
000000000000d521	movq	%r15, %rdx
000000000000d524	callq	*%r13
000000000000d527	movq	%r15, %rdi
000000000000d52a	movq	%rbx, %rsi
000000000000d52d	callq	*%r13
000000000000d530	incq	%r12
000000000000d533	movq	-0x1c0(%rbp), %rax
000000000000d53a	cmpq	%rax, %r12
000000000000d53d	jb	0xd472
000000000000d543	movq	-0x1e8(%rbp), %rax
000000000000d54a	addq	%rax, -0x1b8(%rbp)
000000000000d551	movl	$0x10, %r8d
000000000000d557	movq	-0x1e0(%rbp), %rdi
000000000000d55e	movq	-0x1f0(%rbp), %rsi
000000000000d565	leaq	-0x1b0(%rbp), %rdx
000000000000d56c	leaq	-0x130(%rbp), %rcx
000000000000d573	callq	*0x1be87(%rip)          ## Objc message: +[UASwitchInputEntity addObject:]
000000000000d579	movq	%rax, %rcx
000000000000d57c	testq	%rcx, %rcx
000000000000d57f	jne	0xd454
000000000000d585	movq	-0x1f8(%rbp), %rbx
000000000000d58c	incq	%rbx
000000000000d58f	cmpq	-0x200(%rbp), %rbx
000000000000d596	jb	0xd3a7
000000000000d59c	movl	$0x10, %r8d
000000000000d5a2	movq	-0x218(%rbp), %rdi
000000000000d5a9	movq	-0x1f0(%rbp), %rsi
000000000000d5b0	leaq	-0x170(%rbp), %rdx
000000000000d5b7	leaq	-0xb0(%rbp), %rcx
000000000000d5be	callq	*0x1be3c(%rip)          ## Objc message: -[%rdi addObject:]
000000000000d5c4	movq	%rax, -0x200(%rbp)
000000000000d5cb	testq	%rax, %rax
000000000000d5ce	jne	0xd3a5
000000000000d5d4	movq	0x26b75(%rip), %rsi     ## Objc selector ref: release
000000000000d5db	movq	-0x208(%rbp), %rdi
000000000000d5e2	callq	*%r13
000000000000d5e5	movq	_OBJC_IVAR_$_UAPSwitchViewController._switchSwitchesTableView(%rip), %rax
000000000000d5ec	movq	-0x1d8(%rbp), %rcx
000000000000d5f3	movq	(%rcx,%rax), %rdi
000000000000d5f7	movq	0x27022(%rip), %rsi     ## Objc selector ref: reloadData
000000000000d5fe	callq	*%r13
000000000000d601	movq	0x1bd50(%rip), %rax     ## literal pool symbol address: ___stack_chk_guard
000000000000d608	movq	(%rax), %rax
000000000000d60b	cmpq	-0x30(%rbp), %rax
000000000000d60f	jne	0xd62c
000000000000d611	movl	-0x21c(%rbp), %eax
000000000000d617	movzbl	%al, %eax
000000000000d61a	addq	$0x208, %rsp            ## imm = 0x208
000000000000d621	popq	%rbx
000000000000d622	popq	%r12
000000000000d624	popq	%r13
000000000000d626	popq	%r14
000000000000d628	popq	%r15
000000000000d62a	popq	%rbp
000000000000d62b	retq
000000000000d62c	callq	0x1e8b6                 ## symbol stub for: ___stack_chk_fail
000000000000d631	pushq	%rbp
000000000000d632	movq	%rsp, %rbp
000000000000d635	pushq	%r15
000000000000d637	pushq	%r14
000000000000d639	pushq	%rbx
000000000000d63a	pushq	%rax
000000000000d63b	movq	%rdi, %rbx
000000000000d63e	movq	0x27333(%rip), %r14     ## Objc selector ref: _enableIfSecureTapFileExists
000000000000d645	movq	0x27f7c(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_NSObject
000000000000d64c	movq	0x2732d(%rip), %rsi     ## Objc selector ref: cancelPreviousPerformRequestsWithTarget:selector:object:
000000000000d653	movq	0x1bda6(%rip), %r15     ## Objc message: +[NSObject cancelPreviousPerformRequestsWithTarget:selector:object:]
000000000000d65a	xorl	%r8d, %r8d
000000000000d65d	movq	%rbx, %rdx
000000000000d660	movq	%r14, %rcx
000000000000d663	callq	*%r15
000000000000d666	movq	0x2731b(%rip), %rsi     ## Objc selector ref: isSecureTapEnabled
000000000000d66d	movq	%rbx, %rdi
000000000000d670	callq	*%r15
000000000000d673	testb	%al, %al
000000000000d675	je	0xd68f
000000000000d677	movl	$0x0, 0x29897(%rip)
000000000000d681	movq	0x27308(%rip), %rsi     ## Objc selector ref: _enableAssistiveControl:
000000000000d688	movl	$0x1, %edx
000000000000d68d	jmp	0xd6ac
000000000000d68f	movl	0x29883(%rip), %eax
000000000000d695	leal	0x1(%rax), %ecx
000000000000d698	movl	%ecx, 0x2987a(%rip)
000000000000d69e	cmpl	$0x10, %eax
000000000000d6a1	jl	0xd6bf
000000000000d6a3	movq	0x272e6(%rip), %rsi     ## Objc selector ref: _enableAssistiveControl:
000000000000d6aa	xorl	%edx, %edx
000000000000d6ac	movq	%rbx, %rdi
000000000000d6af	addq	$0x8, %rsp
000000000000d6b3	popq	%rbx
000000000000d6b4	popq	%r14
000000000000d6b6	popq	%r15
000000000000d6b8	popq	%rbp
000000000000d6b9	jmpq	*0x1bd41(%rip)          ## Objc message: -[%rdi _enableAssistiveControl:]
000000000000d6bf	movq	0x2714a(%rip), %rsi     ## Objc selector ref: performSelector:withObject:afterDelay:
000000000000d6c6	movsd	0x1ac8a(%rip), %xmm0
000000000000d6ce	xorl	%ecx, %ecx
000000000000d6d0	movq	%rbx, %rdi
000000000000d6d3	movq	%r14, %rdx
000000000000d6d6	addq	$0x8, %rsp
000000000000d6da	popq	%rbx
000000000000d6db	popq	%r14
000000000000d6dd	popq	%r15
000000000000d6df	popq	%rbp
000000000000d6e0	jmpq	*0x1bd1a(%rip)          ## Objc message: -[%rdi performSelector:withObject:afterDelay:]
000000000000d6e6	pushq	%rbp
000000000000d6e7	movq	%rsp, %rbp
000000000000d6ea	pushq	%r14
000000000000d6ec	pushq	%rbx
000000000000d6ed	movq	%rdi, %rbx
000000000000d6f0	movl	$0x0, 0x2981e(%rip)
000000000000d6fa	movq	_OBJC_IVAR_$_UAPSwitchViewController._enableSwitchCheckbox(%rip), %rax
000000000000d701	movq	(%rbx,%rax), %rdi
000000000000d705	movq	0x27034(%rip), %rsi     ## Objc selector ref: setEnabled:
000000000000d70c	movq	0x1bced(%rip), %r14     ## Objc message: -[%rdi setEnabled:]
000000000000d713	xorl	%edx, %edx
000000000000d715	callq	*%r14
000000000000d718	movq	0x27ea9(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_NSObject
000000000000d71f	movq	0x27252(%rip), %rcx     ## Objc selector ref: _enableIfSecureTapFileExists
000000000000d726	movq	0x27253(%rip), %rsi     ## Objc selector ref: cancelPreviousPerformRequestsWithTarget:selector:object:
000000000000d72d	xorl	%r8d, %r8d
000000000000d730	movq	%rbx, %rdx
000000000000d733	callq	*%r14
000000000000d736	movq	0x2723b(%rip), %rsi     ## Objc selector ref: _enableIfSecureTapFileExists
000000000000d73d	movq	%rbx, %rdi
000000000000d740	movq	%r14, %rax
000000000000d743	popq	%rbx
000000000000d744	popq	%r14
000000000000d746	popq	%rbp
000000000000d747	jmpq	*%rax
000000000000d749	pushq	%rbp
000000000000d74a	movq	%rsp, %rbp
000000000000d74d	pushq	%r15
000000000000d74f	pushq	%r14
000000000000d751	pushq	%r12
000000000000d753	pushq	%rbx
000000000000d754	movl	%edx, %r14d
000000000000d757	movq	%rdi, %rbx
000000000000d75a	movq	0x26fbf(%rip), %rsi     ## Objc selector ref: stopListeningForChanges
000000000000d761	movq	0x1bc98(%rip), %r12     ## Objc message: +[NSObject stopListeningForChanges]
000000000000d768	callq	*%r12
000000000000d76b	movzbl	%r14b, %edi
000000000000d76f	callq	0x1e778                 ## symbol stub for: _UASwitchSetEnabled
000000000000d774	movq	0x26fad(%rip), %rsi     ## Objc selector ref: startListeningForChanges
000000000000d77b	movq	%rbx, %rdi
000000000000d77e	callq	*%r12
000000000000d781	movq	0x27210(%rip), %rsi     ## Objc selector ref: preferenceManager
000000000000d788	movq	%rbx, %rdi
000000000000d78b	callq	*%r12
000000000000d78e	movq	0x1ba43(%rip), %rcx     ## literal pool symbol address: _UAPreferencesDomain
000000000000d795	movq	(%rcx), %rdx
000000000000d798	movq	0x27201(%rip), %rsi     ## Objc selector ref: synchronizeDomain:
000000000000d79f	movq	%rax, %rdi
000000000000d7a2	callq	*%r12
000000000000d7a5	movq	_OBJC_IVAR_$_UAPSwitchViewController._enableSwitchCheckbox(%rip), %r15
000000000000d7ac	movq	(%rbx,%r15), %r14
000000000000d7b0	callq	0x1e742                 ## symbol stub for: _UASwitchIsEnabled
000000000000d7b5	testb	%al, %al
000000000000d7b7	setne	%al
000000000000d7ba	movzbl	%al, %edx
000000000000d7bd	movq	0x26c7c(%rip), %rsi     ## Objc selector ref: setState:
000000000000d7c4	movq	%r14, %rdi
000000000000d7c7	callq	*%r12
000000000000d7ca	movq	(%rbx,%r15), %rdi
000000000000d7ce	movq	0x26f6b(%rip), %rsi     ## Objc selector ref: setEnabled:
000000000000d7d5	movl	$0x1, %edx
000000000000d7da	movq	%r12, %rax
000000000000d7dd	popq	%rbx
000000000000d7de	popq	%r12
000000000000d7e0	popq	%r14
000000000000d7e2	popq	%r15
000000000000d7e4	popq	%rbp
000000000000d7e5	jmpq	*%rax
000000000000d7e7	pushq	%rbp
000000000000d7e8	movq	%rsp, %rbp
000000000000d7eb	pushq	%rbx
000000000000d7ec	pushq	%rax
000000000000d7ed	cmpq	$0x3e9, %rcx            ## imm = 0x3E9
000000000000d7f4	jne	0xd824
000000000000d7f6	movq	_OBJC_IVAR_$_UAPSwitchViewController._enableSwitchCheckbox(%rip), %rax
000000000000d7fd	movq	(%rdi,%rax), %rbx
000000000000d801	callq	0x1e742                 ## symbol stub for: _UASwitchIsEnabled
000000000000d806	testb	%al, %al
000000000000d808	setne	%al
000000000000d80b	movzbl	%al, %edx
000000000000d80e	movq	0x26c2b(%rip), %rsi     ## Objc selector ref: setState:
000000000000d815	movq	%rbx, %rdi
000000000000d818	addq	$0x8, %rsp
000000000000d81c	popq	%rbx
000000000000d81d	popq	%rbp
000000000000d81e	jmpq	*0x1bbdc(%rip)          ## Objc message: -[%rdi setState:]
000000000000d824	cmpq	$0x3e8, %rcx            ## imm = 0x3E8
000000000000d82b	jne	0xd842
000000000000d82d	movq	0x2715c(%rip), %rsi     ## Objc selector ref: _enableAssistiveControl:
000000000000d834	xorl	%edx, %edx
000000000000d836	addq	$0x8, %rsp
000000000000d83a	popq	%rbx
000000000000d83b	popq	%rbp
000000000000d83c	jmpq	*0x1bbbe(%rip)          ## Objc message: -[%rdi _enableAssistiveControl:]
000000000000d842	addq	$0x8, %rsp
000000000000d846	popq	%rbx
000000000000d847	popq	%rbp
000000000000d848	retq
000000000000d849	pushq	%rbp
000000000000d84a	movq	%rsp, %rbp
000000000000d84d	pushq	%r15
000000000000d84f	pushq	%r14
000000000000d851	pushq	%r13
000000000000d853	pushq	%r12
000000000000d855	pushq	%rbx
000000000000d856	subq	$0x28, %rsp
000000000000d85a	movq	%rdi, %r14
000000000000d85d	movq	0x27d34(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_NSAlert
000000000000d864	movq	0x268fd(%rip), %rsi     ## Objc selector ref: alloc
000000000000d86b	movq	0x1bb8e(%rip), %r13     ## Objc message: +[NSAlert alloc]
000000000000d872	callq	*%r13
000000000000d875	movq	0x269f4(%rip), %rsi     ## Objc selector ref: init
000000000000d87c	movq	%rax, %rdi
000000000000d87f	callq	*%r13
000000000000d882	movq	0x2687f(%rip), %rsi     ## Objc selector ref: autorelease
000000000000d889	movq	%rax, %rdi
000000000000d88c	callq	*%r13
000000000000d88f	movq	%rax, %r12
000000000000d892	movq	0x27c67(%rip), %rbx     ## Objc class ref: _OBJC_CLASS_$_NSBundle
000000000000d899	movq	0x27c68(%rip), %rdi     ## Objc class ref: UniversalAccessPref
000000000000d8a0	movq	0x26819(%rip), %rsi     ## Objc selector ref: class
000000000000d8a7	callq	*%r13
000000000000d8aa	movq	0x26907(%rip), %rsi     ## Objc selector ref: bundleForClass:
000000000000d8b1	movq	%rbx, %rdi
000000000000d8b4	movq	%rax, %rdx
000000000000d8b7	callq	*%r13
000000000000d8ba	movq	0x268ff(%rip), %rsi     ## Objc selector ref: localizedStringForKey:value:table:
000000000000d8c1	leaq	0x1cd28(%rip), %rdx     ## Objc cfstring ref: @"global.button.ok"
000000000000d8c8	leaq	0x1c841(%rip), %r15     ## Objc cfstring ref: @""
000000000000d8cf	xorl	%r8d, %r8d
000000000000d8d2	movq	%rax, %rdi
000000000000d8d5	movq	%r15, %rcx
000000000000d8d8	callq	*%r13
000000000000d8db	movq	0x26d5e(%rip), %rsi     ## Objc selector ref: addButtonWithTitle:
000000000000d8e2	movq	%r12, %rdi
000000000000d8e5	movq	%rax, %rdx
000000000000d8e8	callq	*%r13
000000000000d8eb	movq	0x27c0e(%rip), %rbx     ## Objc class ref: _OBJC_CLASS_$_NSBundle
000000000000d8f2	movq	0x27c0f(%rip), %rdi     ## Objc class ref: UniversalAccessPref
000000000000d8f9	movq	0x267c0(%rip), %rsi     ## Objc selector ref: class
000000000000d900	callq	*%r13
000000000000d903	movq	0x268ae(%rip), %rsi     ## Objc selector ref: bundleForClass:
000000000000d90a	movq	%rbx, %rdi
000000000000d90d	movq	%rax, %rdx
000000000000d910	callq	*%r13
000000000000d913	movq	0x268a6(%rip), %rsi     ## Objc selector ref: localizedStringForKey:value:table:
000000000000d91a	leaq	0x1cd4f(%rip), %rdx     ## Objc cfstring ref: @"global.button.cancel"
000000000000d921	xorl	%r8d, %r8d
000000000000d924	movq	%rax, %rdi
000000000000d927	movq	%r15, %rcx
000000000000d92a	callq	*%r13
000000000000d92d	movq	0x26d0c(%rip), %rsi     ## Objc selector ref: addButtonWithTitle:
000000000000d934	movq	%r12, %rdi
000000000000d937	movq	%rax, %rdx
000000000000d93a	callq	*%r13
000000000000d93d	movq	0x27bbc(%rip), %rbx     ## Objc class ref: _OBJC_CLASS_$_NSBundle
000000000000d944	movq	0x27bbd(%rip), %rdi     ## Objc class ref: UniversalAccessPref
000000000000d94b	movq	0x2676e(%rip), %rsi     ## Objc selector ref: class
000000000000d952	callq	*%r13
000000000000d955	movq	0x2685c(%rip), %rsi     ## Objc selector ref: bundleForClass:
000000000000d95c	movq	%rbx, %rdi
000000000000d95f	movq	%rax, %rdx
000000000000d962	callq	*%r13
000000000000d965	movq	0x26854(%rip), %rsi     ## Objc selector ref: localizedStringForKey:value:table:
000000000000d96c	leaq	0x1d0dd(%rip), %rdx     ## Objc cfstring ref: @"switch.disableConfirm.message"
000000000000d973	xorl	%r8d, %r8d
000000000000d976	movq	%rax, %rdi
000000000000d979	movq	%r15, %rcx
000000000000d97c	callq	*%r13
000000000000d97f	movq	0x26cb2(%rip), %rsi     ## Objc selector ref: setMessageText:
000000000000d986	movq	%r12, %rdi
000000000000d989	movq	%rax, %rdx
000000000000d98c	callq	*%r13
000000000000d98f	movq	0x27012(%rip), %rsi     ## Objc selector ref: setAlertStyle:
000000000000d996	xorl	%edx, %edx
000000000000d998	movq	%r12, %rdi
000000000000d99b	callq	*%r13
000000000000d99e	movq	_OBJC_IVAR_$_UAPSwitchViewController._enableSwitchCheckbox(%rip), %rax
000000000000d9a5	movq	(%r14,%rax), %rdi
000000000000d9a9	movq	0x26a18(%rip), %rsi     ## Objc selector ref: window
000000000000d9b0	callq	*%r13
000000000000d9b3	movq	%rax, %rbx
000000000000d9b6	movq	0x1b98b(%rip), %rax     ## literal pool symbol address: __NSConcreteStackBlock
000000000000d9bd	movq	%rax, -0x50(%rbp)
000000000000d9c1	movl	$0x42000000, -0x48(%rbp) ## imm = 0x42000000
000000000000d9c8	movl	$0x0, -0x44(%rbp)
000000000000d9cf	leaq	0x3e(%rip), %rax
000000000000d9d6	movq	%rax, -0x40(%rbp)
000000000000d9da	leaq	0x1c39f(%rip), %rax
000000000000d9e1	movq	%rax, -0x38(%rbp)
000000000000d9e5	leaq	-0x30(%rbp), %rsi
000000000000d9e9	movq	%r14, %rdi
000000000000d9ec	callq	0x1e86e                 ## symbol stub for: _objc_assign_strongCast
000000000000d9f1	movq	0x26c60(%rip), %rsi     ## Objc selector ref: beginSheetModalForWindow:completionHandler:
000000000000d9f8	leaq	-0x50(%rbp), %rcx
000000000000d9fc	movq	%r12, %rdi
000000000000d9ff	movq	%rbx, %rdx
000000000000da02	callq	*%r13
000000000000da05	addq	$0x28, %rsp
000000000000da09	popq	%rbx
000000000000da0a	popq	%r12
000000000000da0c	popq	%r13
000000000000da0e	popq	%r14
000000000000da10	popq	%r15
000000000000da12	popq	%rbp
000000000000da13	retq
000000000000da14	pushq	%rbp
000000000000da15	movq	%rsp, %rbp
000000000000da18	pushq	%rbx
000000000000da19	pushq	%rax
000000000000da1a	cmpq	$0x3e9, %rsi            ## imm = 0x3E9
000000000000da21	jne	0xda55
000000000000da23	movq	0x20(%rdi), %rax
000000000000da27	movq	_OBJC_IVAR_$_UAPSwitchViewController._enableSwitchCheckbox(%rip), %rcx
000000000000da2e	movq	(%rax,%rcx), %rbx
000000000000da32	callq	0x1e742                 ## symbol stub for: _UASwitchIsEnabled
000000000000da37	testb	%al, %al
000000000000da39	setne	%al
000000000000da3c	movzbl	%al, %edx
000000000000da3f	movq	0x269fa(%rip), %rsi     ## Objc selector ref: setState:
000000000000da46	movq	%rbx, %rdi
000000000000da49	addq	$0x8, %rsp
000000000000da4d	popq	%rbx
000000000000da4e	popq	%rbp
000000000000da4f	jmpq	*0x1b9ab(%rip)          ## Objc message: +[UniversalAccessPref setState:]
000000000000da55	cmpq	$0x3e8, %rsi            ## imm = 0x3E8
000000000000da5c	jne	0xda77
000000000000da5e	movq	0x20(%rdi), %rdi
000000000000da62	movq	0x26f27(%rip), %rsi     ## Objc selector ref: _enableAssistiveControl:
000000000000da69	xorl	%edx, %edx
000000000000da6b	addq	$0x8, %rsp
000000000000da6f	popq	%rbx
000000000000da70	popq	%rbp
000000000000da71	jmpq	*0x1b989(%rip)          ## Objc message: -[%rdi _enableAssistiveControl:]
000000000000da77	addq	$0x8, %rsp
000000000000da7b	popq	%rbx
000000000000da7c	popq	%rbp
000000000000da7d	retq
000000000000da7e	nop
000000000000da80	pushq	%rbp
000000000000da81	movq	%rsp, %rbp
000000000000da84	addq	$0x20, %rdi
000000000000da88	movq	0x20(%rsi), %rsi
000000000000da8c	movl	$0x3, %edx
000000000000da91	popq	%rbp
000000000000da92	jmp	0x1e8a4                 ## symbol stub for: __Block_object_assign
000000000000da97	nopw	(%rax,%rax)
000000000000daa0	pushq	%rbp
000000000000daa1	movq	%rsp, %rbp
000000000000daa4	movq	0x20(%rdi), %rdi
000000000000daa8	movl	$0x3, %esi
000000000000daad	popq	%rbp
000000000000daae	jmp	0x1e8aa                 ## symbol stub for: __Block_object_dispose
000000000000dab3	pushq	%rbp
000000000000dab4	movq	%rsp, %rbp
000000000000dab7	pushq	%r14
000000000000dab9	pushq	%rbx
000000000000daba	movq	%rdi, %rbx
000000000000dabd	callq	0x1e82c                 ## symbol stub for: _AuthorizationDismiss
000000000000dac2	movq	_OBJC_IVAR_$_UAPSwitchViewController._enableSwitchCheckbox(%rip), %rax
000000000000dac9	movq	(%rbx,%rax), %rdi
000000000000dacd	movq	0x26bd4(%rip), %rsi     ## Objc selector ref: state
000000000000dad4	callq	*0x1b926(%rip)          ## Objc message: -[%rdi state]
000000000000dada	cmpq	$0x1, %rax
000000000000dade	sete	%r14b
000000000000dae2	jne	0xdb10
000000000000dae4	movq	0x26e9d(%rip), %rsi     ## Objc selector ref: isSecureTapEnabled
000000000000daeb	movq	%rbx, %rdi
000000000000daee	callq	*0x1b90c(%rip)          ## Objc message: -[%rdi isSecureTapEnabled]
000000000000daf4	testb	%al, %al
000000000000daf6	je	0xdb19
000000000000daf8	movq	0x26e91(%rip), %rsi     ## Objc selector ref: _enableAssistiveControl:
000000000000daff	movzbl	%r14b, %edx
000000000000db03	movq	%rbx, %rdi
000000000000db06	popq	%rbx
000000000000db07	popq	%r14
000000000000db09	popq	%rbp
000000000000db0a	jmpq	*0x1b8f0(%rip)          ## Objc message: -[%rdi _enableAssistiveControl:]
000000000000db10	movq	0x26ea1(%rip), %rsi     ## Objc selector ref: _confirmTurningOffSwitchControl
000000000000db17	jmp	0xdb20
000000000000db19	movq	0x26e90(%rip), %rsi     ## Objc selector ref: enableSecureTapAndAssistiveControl
000000000000db20	movq	%rbx, %rdi
000000000000db23	popq	%rbx
000000000000db24	popq	%r14
000000000000db26	popq	%rbp
000000000000db27	jmpq	*0x1b8d3(%rip)          ## Objc message: -[%rdi enableSecureTapAndAssistiveControl]
000000000000db2d	pushq	%rbp
000000000000db2e	movq	%rsp, %rbp
000000000000db31	pushq	%r15
000000000000db33	pushq	%r14
000000000000db35	pushq	%rbx
000000000000db36	pushq	%rax
000000000000db37	movq	%rdi, %rbx
000000000000db3a	movq	_OBJC_IVAR_$_UAPSwitchViewController._autoScanEnableCheckbox(%rip), %rax
000000000000db41	movq	(%rbx,%rax), %rdi
000000000000db45	movq	0x26b5c(%rip), %rsi     ## Objc selector ref: state
000000000000db4c	movq	0x1b8ad(%rip), %r15     ## Objc message: -[%rdi state]
000000000000db53	callq	*%r15
000000000000db56	cmpq	$0x1, %rax
000000000000db5a	sete	%r14b
000000000000db5e	movq	0x26bbb(%rip), %rsi     ## Objc selector ref: stopListeningForChanges
000000000000db65	movq	%rbx, %rdi
000000000000db68	callq	*%r15
000000000000db6b	movzbl	%r14b, %edi
000000000000db6f	callq	0x1e6f4                 ## symbol stub for: _UASwitchAutoScanSetEnabled
000000000000db74	movq	0x26bad(%rip), %rsi     ## Objc selector ref: startListeningForChanges
000000000000db7b	movq	%rbx, %rdi
000000000000db7e	callq	*%r15
000000000000db81	movq	0x26d68(%rip), %rsi     ## Objc selector ref: willChangeValueForKey:
000000000000db88	leaq	0x1ce41(%rip), %rdx     ## Objc cfstring ref: @"switchInputs"
000000000000db8f	movq	%rbx, %rdi
000000000000db92	callq	*%r15
000000000000db95	callq	0x1e70c                 ## symbol stub for: _UASwitchCopyDeviceInputs
000000000000db9a	movq	%rax, %r14
000000000000db9d	testq	%r14, %r14
000000000000dba0	je	0xdbe0
000000000000dba2	movq	_OBJC_IVAR_$_UAPSwitchViewController._switchInputs(%rip), %rax
000000000000dba9	movq	(%rbx,%rax), %rdi
000000000000dbad	movq	0x2659c(%rip), %rsi     ## Objc selector ref: release
000000000000dbb4	callq	*%r15
000000000000dbb7	movq	0x2679a(%rip), %rsi     ## Objc selector ref: mutableCopy
000000000000dbbe	movq	%r14, %rdi
000000000000dbc1	callq	*%r15
000000000000dbc4	movq	_OBJC_IVAR_$_UAPSwitchViewController._switchInputs(%rip), %rdx
000000000000dbcb	movq	%rax, %rdi
000000000000dbce	movq	%rbx, %rsi
000000000000dbd1	callq	0x1e868                 ## symbol stub for: _objc_assign_ivar
000000000000dbd6	movq	%r14, %rdi
000000000000dbd9	callq	0x1e562                 ## symbol stub for: _CFRelease
000000000000dbde	jmp	0xdc10
000000000000dbe0	movq	0x27951(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_NSMutableDictionary
000000000000dbe7	movq	0x2657a(%rip), %rsi     ## Objc selector ref: alloc
000000000000dbee	callq	*%r15
000000000000dbf1	movq	0x26678(%rip), %rsi     ## Objc selector ref: init
000000000000dbf8	movq	%rax, %rdi
000000000000dbfb	callq	*%r15
000000000000dbfe	movq	_OBJC_IVAR_$_UAPSwitchViewController._switchInputs(%rip), %rdx
000000000000dc05	movq	%rax, %rdi
000000000000dc08	movq	%rbx, %rsi
000000000000dc0b	callq	0x1e868                 ## symbol stub for: _objc_assign_ivar
000000000000dc10	movq	0x26ce1(%rip), %rsi     ## Objc selector ref: didChangeValueForKey:
000000000000dc17	leaq	0x1cdb2(%rip), %rdx     ## Objc cfstring ref: @"switchInputs"
000000000000dc1e	movq	%rbx, %rdi
000000000000dc21	callq	*%r15
000000000000dc24	movq	0x26cd5(%rip), %rsi     ## Objc selector ref: _updateSwitchesTableModel
000000000000dc2b	movq	%rbx, %rdi
000000000000dc2e	movq	%r15, %rax
000000000000dc31	addq	$0x8, %rsp
000000000000dc35	popq	%rbx
000000000000dc36	popq	%r14
000000000000dc38	popq	%r15
000000000000dc3a	popq	%rbp
000000000000dc3b	jmpq	*%rax
000000000000dc3d	pushq	%rbp
000000000000dc3e	movq	%rsp, %rbp
000000000000dc41	pushq	%r15
000000000000dc43	pushq	%r14
000000000000dc45	pushq	%rbx
000000000000dc46	pushq	%rax
000000000000dc47	movq	%rdx, %r14
000000000000dc4a	movq	%rdi, %rbx
000000000000dc4d	movq	0x26acc(%rip), %rsi     ## Objc selector ref: stopListeningForChanges
000000000000dc54	movq	0x1b7a5(%rip), %r15     ## Objc message: +[NSMutableDictionary stopListeningForChanges]
000000000000dc5b	callq	*%r15
000000000000dc5e	movq	0x26b6b(%rip), %rsi     ## Objc selector ref: selectedTag
000000000000dc65	movq	%r14, %rdi
000000000000dc68	callq	*%r15
000000000000dc6b	movq	%rax, %rdi
000000000000dc6e	callq	0x1e6e8                 ## symbol stub for: _UASwitchAutoScanSetCycleCount
000000000000dc73	movq	0x26aae(%rip), %rsi     ## Objc selector ref: startListeningForChanges
000000000000dc7a	movq	%rbx, %rdi
000000000000dc7d	movq	%r15, %rax
000000000000dc80	addq	$0x8, %rsp
000000000000dc84	popq	%rbx
000000000000dc85	popq	%r14
000000000000dc87	popq	%r15
000000000000dc89	popq	%rbp
000000000000dc8a	jmpq	*%rax
000000000000dc8c	pushq	%rbp
000000000000dc8d	movq	%rsp, %rbp
000000000000dc90	pushq	%r14
000000000000dc92	pushq	%rbx
000000000000dc93	movq	%rdi, %rbx
000000000000dc96	movq	0x26a83(%rip), %rsi     ## Objc selector ref: stopListeningForChanges
000000000000dc9d	movq	0x1b75c(%rip), %r14     ## Objc message: -[%rdi stopListeningForChanges]
000000000000dca4	callq	*%r14
000000000000dca7	movq	_OBJC_IVAR_$_UAPSwitchViewController._autoScanRestartOptionPopupButton(%rip), %rax
000000000000dcae	movq	(%rbx,%rax), %rdi
000000000000dcb2	movq	0x268e7(%rip), %rsi     ## Objc selector ref: selectedItem
000000000000dcb9	callq	*%r14
000000000000dcbc	movq	0x269cd(%rip), %rsi     ## Objc selector ref: tag
000000000000dcc3	movq	%rax, %rdi
000000000000dcc6	callq	*%r14
000000000000dcc9	movq	%rax, %rdi
000000000000dccc	callq	0x1e772                 ## symbol stub for: _UASwitchSetElementRestartOption
000000000000dcd1	movq	0x26a50(%rip), %rsi     ## Objc selector ref: startListeningForChanges
000000000000dcd8	movq	%rbx, %rdi
000000000000dcdb	movq	%r14, %rax
000000000000dcde	popq	%rbx
000000000000dcdf	popq	%r14
000000000000dce1	popq	%rbp
000000000000dce2	jmpq	*%rax
000000000000dce4	pushq	%rbp
000000000000dce5	movq	%rsp, %rbp
000000000000dce8	pushq	%r15
000000000000dcea	pushq	%r14
000000000000dcec	pushq	%rbx
000000000000dced	pushq	%rax
000000000000dcee	movq	%rdi, %r14
000000000000dcf1	movq	0x26a28(%rip), %rsi     ## Objc selector ref: stopListeningForChanges
000000000000dcf8	movq	0x1b701(%rip), %r15     ## Objc message: -[%rdi stopListeningForChanges]
000000000000dcff	callq	*%r15
000000000000dd02	movq	_OBJC_IVAR_$_UAPSwitchViewController._hideAfterDelayCheckbox(%rip), %rax
000000000000dd09	movq	(%r14,%rax), %rdi
000000000000dd0d	movq	0x26994(%rip), %rsi     ## Objc selector ref: state
000000000000dd14	callq	*%r15
000000000000dd17	cmpq	$0x1, %rax
000000000000dd1b	sete	%al
000000000000dd1e	movq	_OBJC_IVAR_$_UAPSwitchViewController._hideAfterDelayTextField(%rip), %rcx
000000000000dd25	movq	(%r14,%rcx), %rdi
000000000000dd29	movq	0x26a10(%rip), %rsi     ## Objc selector ref: setEnabled:
000000000000dd30	movzbl	%al, %ebx
000000000000dd33	movl	%ebx, %edx
000000000000dd35	callq	*%r15
000000000000dd38	movq	_OBJC_IVAR_$_UAPSwitchViewController._hideAfterDelayStepper(%rip), %rax
000000000000dd3f	movq	(%r14,%rax), %rdi
000000000000dd43	movq	0x269f6(%rip), %rsi     ## Objc selector ref: setEnabled:
000000000000dd4a	movl	%ebx, %edx
000000000000dd4c	callq	*%r15
000000000000dd4f	movl	%ebx, %edi
000000000000dd51	callq	0x1e77e                 ## symbol stub for: _UASwitchSetHideUIEnabled
000000000000dd56	movq	0x269cb(%rip), %rsi     ## Objc selector ref: startListeningForChanges
000000000000dd5d	movq	%r14, %rdi
000000000000dd60	movq	%r15, %rax
000000000000dd63	addq	$0x8, %rsp
000000000000dd67	popq	%rbx
000000000000dd68	popq	%r14
000000000000dd6a	popq	%r15
000000000000dd6c	popq	%rbp
000000000000dd6d	jmpq	*%rax
000000000000dd6f	pushq	%rbp
000000000000dd70	movq	%rsp, %rbp
000000000000dd73	callq	0x1e82c                 ## symbol stub for: _AuthorizationDismiss
000000000000dd78	xorl	%eax, %eax
000000000000dd7a	popq	%rbp
000000000000dd7b	jmp	0x1e400                 ## symbol stub for: _ACSHOpenPanelEditor
000000000000dd80	pushq	%rbp
000000000000dd81	movq	%rsp, %rbp
000000000000dd84	pushq	%r14
000000000000dd86	pushq	%rbx
000000000000dd87	movq	%rdi, %r14
000000000000dd8a	movq	0x2698f(%rip), %rsi     ## Objc selector ref: stopListeningForChanges
000000000000dd91	movq	0x1b668(%rip), %rbx     ## Objc message: -[%rdi stopListeningForChanges]
000000000000dd98	callq	*%rbx
000000000000dd9a	movq	_OBJC_IVAR_$_UAPSwitchViewController._navigationFeedbackPopupButton(%rip), %rax
000000000000dda1	movq	(%r14,%rax), %rdi
000000000000dda5	movq	0x267f4(%rip), %rsi     ## Objc selector ref: selectedItem
000000000000ddac	callq	*%rbx
000000000000ddae	movq	0x268db(%rip), %rsi     ## Objc selector ref: tag
000000000000ddb5	movq	%rax, %rdi
000000000000ddb8	callq	*%rbx
000000000000ddba	cmpq	$0x3, %rax
000000000000ddbe	je	0xddca
000000000000ddc0	cmpq	$0x2, %rax
000000000000ddc4	jne	0xdddb
000000000000ddc6	xorl	%edi, %edi
000000000000ddc8	jmp	0xddcf
000000000000ddca	movl	$0x1, %edi
000000000000ddcf	callq	0x1e7a8                 ## symbol stub for: _UASwitchSetSpeakSelectedElement
000000000000ddd4	movl	$0x1, %edi
000000000000ddd9	jmp	0xddf1
000000000000dddb	cmpq	$0x1, %rax
000000000000dddf	jne	0xdde8
000000000000dde1	movl	$0x1, %edi
000000000000dde6	jmp	0xddea
000000000000dde8	xorl	%edi, %edi
000000000000ddea	callq	0x1e7a8                 ## symbol stub for: _UASwitchSetSpeakSelectedElement
000000000000ddef	xorl	%edi, %edi
000000000000ddf1	callq	0x1e796                 ## symbol stub for: _UASwitchSetPlaySounds
000000000000ddf6	movq	0x2692b(%rip), %rsi     ## Objc selector ref: startListeningForChanges
000000000000ddfd	movq	%r14, %rdi
000000000000de00	popq	%rbx
000000000000de01	popq	%r14
000000000000de03	popq	%rbp
000000000000de04	jmpq	*0x1b5f6(%rip)          ## Objc message: -[%rdi startListeningForChanges]
000000000000de0a	pushq	%rbp
000000000000de0b	movq	%rsp, %rbp
000000000000de0e	pushq	%r14
000000000000de10	pushq	%rbx
000000000000de11	movq	%rdi, %rbx
000000000000de14	movq	0x26905(%rip), %rsi     ## Objc selector ref: stopListeningForChanges
000000000000de1b	movq	0x1b5de(%rip), %r14     ## Objc message: -[%rdi stopListeningForChanges]
000000000000de22	callq	*%r14
000000000000de25	movq	_OBJC_IVAR_$_UAPSwitchViewController._cursorSizePopupButton(%rip), %rax
000000000000de2c	movq	(%rbx,%rax), %rdi
000000000000de30	movq	0x26769(%rip), %rsi     ## Objc selector ref: selectedItem
000000000000de37	callq	*%r14
000000000000de3a	movq	0x2684f(%rip), %rsi     ## Objc selector ref: tag
000000000000de41	movq	%rax, %rdi
000000000000de44	callq	*%r14
000000000000de47	movq	%rax, %rdi
000000000000de4a	callq	0x1e766                 ## symbol stub for: _UASwitchSetCursorSize
000000000000de4f	movq	0x268d2(%rip), %rsi     ## Objc selector ref: startListeningForChanges
000000000000de56	movq	%rbx, %rdi
000000000000de59	movq	%r14, %rax
000000000000de5c	popq	%rbx
000000000000de5d	popq	%r14
000000000000de5f	popq	%rbp
000000000000de60	jmpq	*%rax
000000000000de62	pushq	%rbp
000000000000de63	movq	%rsp, %rbp
000000000000de66	pushq	%r14
000000000000de68	pushq	%rbx
000000000000de69	movq	%rdi, %rbx
000000000000de6c	movq	0x268ad(%rip), %rsi     ## Objc selector ref: stopListeningForChanges
000000000000de73	movq	0x1b586(%rip), %r14     ## Objc message: -[%rdi stopListeningForChanges]
000000000000de7a	callq	*%r14
000000000000de7d	movq	_OBJC_IVAR_$_UAPSwitchViewController._mouseMoveStylePopupButton(%rip), %rax
000000000000de84	movq	(%rbx,%rax), %rdi
000000000000de88	movq	0x26711(%rip), %rsi     ## Objc selector ref: selectedItem
000000000000de8f	callq	*%r14
000000000000de92	movq	0x267f7(%rip), %rsi     ## Objc selector ref: tag
000000000000de99	movq	%rax, %rdi
000000000000de9c	callq	*%r14
000000000000de9f	movq	%rax, %rdi
000000000000dea2	callq	0x1e790                 ## symbol stub for: _UASwitchSetMouseMoveStyle
000000000000dea7	movq	0x2687a(%rip), %rsi     ## Objc selector ref: startListeningForChanges
000000000000deae	movq	%rbx, %rdi
000000000000deb1	movq	%r14, %rax
000000000000deb4	popq	%rbx
000000000000deb5	popq	%r14
000000000000deb7	popq	%rbp
000000000000deb8	jmpq	*%rax
000000000000deba	pushq	%rbp
000000000000debb	movq	%rsp, %rbp
000000000000debe	pushq	%r15
000000000000dec0	pushq	%r14
000000000000dec2	pushq	%rbx
000000000000dec3	pushq	%rax
000000000000dec4	movq	%rdi, %rbx
000000000000dec7	movq	0x267ca(%rip), %rsi     ## Objc selector ref: indexOfSelectedItem
000000000000dece	movq	0x1b52b(%rip), %r15     ## Objc message: -[%rdi indexOfSelectedItem]
000000000000ded5	movq	%rdx, %rdi
000000000000ded8	callq	*%r15
000000000000dedb	testq	%rax, %rax
000000000000dede	setg	%r14b
000000000000dee2	movq	0x26837(%rip), %rsi     ## Objc selector ref: stopListeningForChanges
000000000000dee9	movq	%rbx, %rdi
000000000000deec	callq	*%r15
000000000000deef	movzbl	%r14b, %edi
000000000000def3	callq	0x1e79c                 ## symbol stub for: _UASwitchSetResumeAutoScanningAfterSelectEnabled
000000000000def8	movq	0x26829(%rip), %rsi     ## Objc selector ref: startListeningForChanges
000000000000deff	movq	%rbx, %rdi
000000000000df02	movq	%r15, %rax
000000000000df05	addq	$0x8, %rsp
000000000000df09	popq	%rbx
000000000000df0a	popq	%r14
000000000000df0c	popq	%r15
000000000000df0e	popq	%rbp
000000000000df0f	jmpq	*%rax
000000000000df11	pushq	%rbp
000000000000df12	movq	%rsp, %rbp
000000000000df15	pushq	%r15
000000000000df17	pushq	%r14
000000000000df19	pushq	%r12
000000000000df1b	pushq	%rbx
000000000000df1c	subq	$0x10, %rsp
000000000000df20	movq	%rdi, %rbx
000000000000df23	movq	0x1b1b6(%rip), %rax     ## literal pool symbol address: _NSApp
000000000000df2a	movq	(%rax), %r14
000000000000df2d	movq	_OBJC_IVAR_$_UAPSwitchViewController._navigationTimingWindow(%rip), %rax
000000000000df34	movq	(%rbx,%rax), %r15
000000000000df38	movq	0x26481(%rip), %rsi     ## Objc selector ref: view
000000000000df3f	movq	0x1b4ba(%rip), %r12     ## Objc message: -[%rdi view]
000000000000df46	callq	*%r12
000000000000df49	movq	0x26478(%rip), %rsi     ## Objc selector ref: window
000000000000df50	movq	%rax, %rdi
000000000000df53	callq	*%r12
000000000000df56	movq	0x26a63(%rip), %r9      ## Objc selector ref: _genericSheetDidEnd:returnCode:contextInfo:
000000000000df5d	movq	0x26a64(%rip), %rsi     ## Objc selector ref: beginSheet:modalForWindow:modalDelegate:didEndSelector:contextInfo:
000000000000df64	movq	$0x0, (%rsp)
000000000000df6c	movq	%r14, %rdi
000000000000df6f	movq	%r15, %rdx
000000000000df72	movq	%rax, %rcx
000000000000df75	movq	%rbx, %r8
000000000000df78	callq	*%r12
000000000000df7b	addq	$0x10, %rsp
000000000000df7f	popq	%rbx
000000000000df80	popq	%r12
000000000000df82	popq	%r14
000000000000df84	popq	%r15
000000000000df86	popq	%rbp
000000000000df87	retq
000000000000df88	pushq	%rbp
000000000000df89	movq	%rsp, %rbp
000000000000df8c	movq	0x1b14d(%rip), %rax     ## literal pool symbol address: _NSApp
000000000000df93	movq	(%rax), %rax
000000000000df96	movq	_OBJC_IVAR_$_UAPSwitchViewController._navigationTimingWindow(%rip), %rcx
000000000000df9d	movq	(%rdi,%rcx), %rdx
000000000000dfa1	movq	0x26680(%rip), %rsi     ## Objc selector ref: endSheet:
000000000000dfa8	movq	%rax, %rdi
000000000000dfab	popq	%rbp
000000000000dfac	jmpq	*0x1b44e(%rip)          ## Objc message: -[%rdi endSheet:]
000000000000dfb2	pushq	%rbp
000000000000dfb3	movq	%rsp, %rbp
000000000000dfb6	pushq	%r15
000000000000dfb8	pushq	%r14
000000000000dfba	pushq	%rbx
000000000000dfbb	pushq	%rax
000000000000dfbc	movq	%rdi, %rbx
000000000000dfbf	movq	0x266d2(%rip), %rsi     ## Objc selector ref: indexOfSelectedItem
000000000000dfc6	movq	0x1b433(%rip), %r15     ## Objc message: -[%rdi indexOfSelectedItem]
000000000000dfcd	movq	%rdx, %rdi
000000000000dfd0	callq	*%r15
000000000000dfd3	testq	%rax, %rax
000000000000dfd6	setg	%r14b
000000000000dfda	movq	0x2673f(%rip), %rsi     ## Objc selector ref: stopListeningForChanges
000000000000dfe1	movq	%rbx, %rdi
000000000000dfe4	callq	*%r15
000000000000dfe7	movzbl	%r14b, %edi
000000000000dfeb	callq	0x1e7a2                 ## symbol stub for: _UASwitchSetReverseMouseWhenReachingScreenEdgeEnabled
000000000000dff0	movq	0x26731(%rip), %rsi     ## Objc selector ref: startListeningForChanges
000000000000dff7	movq	%rbx, %rdi
000000000000dffa	movq	%r15, %rax
000000000000dffd	addq	$0x8, %rsp
000000000000e001	popq	%rbx
000000000000e002	popq	%r14
000000000000e004	popq	%r15
000000000000e006	popq	%rbp
000000000000e007	jmpq	*%rax
000000000000e009	pushq	%rbp
000000000000e00a	movq	%rsp, %rbp
000000000000e00d	pushq	%r15
000000000000e00f	pushq	%r14
000000000000e011	pushq	%r13
000000000000e013	pushq	%r12
000000000000e015	pushq	%rbx
000000000000e016	pushq	%rax
000000000000e017	movq	%rdx, %r14
000000000000e01a	movq	%rdi, %rbx
000000000000e01d	movq	_OBJC_IVAR_$_UAPSwitchViewController._switchSwitchesTableView(%rip), %rax
000000000000e024	movq	(%rbx,%rax), %rdi
000000000000e028	movq	0x26389(%rip), %rsi     ## Objc selector ref: selectedRow
000000000000e02f	movq	0x1b3ca(%rip), %r12     ## Objc message: -[%rdi selectedRow]
000000000000e036	callq	*%r12
000000000000e039	movq	%rax, %r15
000000000000e03c	movq	0x263ed(%rip), %rsi     ## Objc selector ref: isAddSelected
000000000000e043	movq	%r14, %rdi
000000000000e046	callq	*%r12
000000000000e049	testb	%al, %al
000000000000e04b	je	0xe062
000000000000e04d	movq	0x2697c(%rip), %rsi     ## Objc selector ref: _addNewSwitch
000000000000e054	movq	%rbx, %rdi
000000000000e057	callq	*0x1b3a3(%rip)          ## Objc message: -[%rdi _addNewSwitch]
000000000000e05d	jmp	0xe0f1
000000000000e062	testq	%r15, %r15
000000000000e065	js	0xe0f1
000000000000e06b	movq	_OBJC_IVAR_$_UAPSwitchViewController._switchInputEntities(%rip), %r13
000000000000e072	movq	(%rbx,%r13), %rdi
000000000000e076	movq	0x262eb(%rip), %rsi     ## Objc selector ref: count
000000000000e07d	callq	*0x1b37d(%rip)          ## Objc message: -[%rdi count]
000000000000e083	cmpq	%rax, %r15
000000000000e086	jae	0xe0f1
000000000000e088	movq	(%rbx,%r13), %rdi
000000000000e08c	movq	0x262dd(%rip), %rsi     ## Objc selector ref: objectAtIndex:
000000000000e093	movq	%r15, %rdx
000000000000e096	callq	*%r12
000000000000e099	movq	%rax, %r15
000000000000e09c	movq	0x26935(%rip), %rsi     ## Objc selector ref: isHeader
000000000000e0a3	movq	%r15, %rdi
000000000000e0a6	callq	*%r12
000000000000e0a9	testb	%al, %al
000000000000e0ab	jne	0xe0f1
000000000000e0ad	movq	0x2636c(%rip), %rsi     ## Objc selector ref: isRemoveSelected
000000000000e0b4	movq	%r14, %rdi
000000000000e0b7	callq	*0x1b343(%rip)          ## Objc message: -[%rdi isRemoveSelected]
000000000000e0bd	testb	%al, %al
000000000000e0bf	je	0xe0ca
000000000000e0c1	movq	0x26918(%rip), %rsi     ## Objc selector ref: _removeSwitchEntity:
000000000000e0c8	jmp	0xe0e5
000000000000e0ca	movq	0x26917(%rip), %rsi     ## Objc selector ref: isConfigSelected
000000000000e0d1	movq	%r14, %rdi
000000000000e0d4	callq	*0x1b326(%rip)          ## Objc message: -[%rdi isConfigSelected]
000000000000e0da	testb	%al, %al
000000000000e0dc	je	0xe0f1
000000000000e0de	movq	0x2690b(%rip), %rsi     ## Objc selector ref: _configureDeviceInputsForActionEntity:
000000000000e0e5	movq	%rbx, %rdi
000000000000e0e8	movq	%r15, %rdx
000000000000e0eb	callq	*0x1b30f(%rip)          ## Objc message: -[%rdi _configureDeviceInputsForActionEntity:]
000000000000e0f1	movq	0x26790(%rip), %rsi     ## Objc selector ref: _updateUIForSelection
000000000000e0f8	movq	%rbx, %rdi
000000000000e0fb	addq	$0x8, %rsp
000000000000e0ff	popq	%rbx
000000000000e100	popq	%r12
000000000000e102	popq	%r13
000000000000e104	popq	%r14
000000000000e106	popq	%r15
000000000000e108	popq	%rbp
000000000000e109	jmpq	*0x1b2f1(%rip)          ## Objc message: -[%rdi _updateUIForSelection]
000000000000e10f	pushq	%rbp
000000000000e110	movq	%rsp, %rbp
000000000000e113	pushq	%r15
000000000000e115	pushq	%r14
000000000000e117	pushq	%r13
000000000000e119	pushq	%r12
000000000000e11b	pushq	%rbx
000000000000e11c	pushq	%rax
000000000000e11d	movq	%rdi, %rbx
000000000000e120	movq	_OBJC_IVAR_$_UAPSwitchViewController._editingSwitchInputEntity(%rip), %rax
000000000000e127	movq	(%rbx,%rax), %rdi
000000000000e12b	movq	0x268c6(%rip), %rsi     ## Objc selector ref: deviceSettings
000000000000e132	movq	0x1b2c7(%rip), %r13     ## Objc message: -[%rdi deviceSettings]
000000000000e139	callq	*%r13
000000000000e13c	movq	%rax, %r14
000000000000e13f	movq	_OBJC_IVAR_$_UAPSwitchViewController._deviceAssignmentNicknameField(%rip), %rax
000000000000e146	movq	(%rbx,%rax), %rdi
000000000000e14a	movq	0x264af(%rip), %rsi     ## Objc selector ref: stringValue
000000000000e151	callq	*%r13
000000000000e154	movq	%rax, %r15
000000000000e157	movq	0x268a2(%rip), %rsi     ## Objc selector ref: setNickname:
000000000000e15e	movq	%r14, %rdi
000000000000e161	movq	%r15, %rdx
000000000000e164	callq	*%r13
000000000000e167	movq	_OBJC_IVAR_$_UAPSwitchViewController._devicePressHoldOptionPopupButton(%rip), %rax
000000000000e16e	movq	(%rbx,%rax), %rdi
000000000000e172	movq	0x26657(%rip), %rsi     ## Objc selector ref: selectedTag
000000000000e179	callq	*%r13
000000000000e17c	movq	0x273dd(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_NSNumber
000000000000e183	movq	0x2657e(%rip), %rsi     ## Objc selector ref: numberWithUnsignedInteger:
000000000000e18a	movq	%rax, %rdx
000000000000e18d	callq	*%r13
000000000000e190	movq	0x26871(%rip), %rsi     ## Objc selector ref: setPressHoldOption:
000000000000e197	movq	%r14, %rdi
000000000000e19a	movq	%rax, %rdx
000000000000e19d	callq	*%r13
000000000000e1a0	movq	0x1b119(%rip), %rax     ## literal pool symbol address: _UASwitchNameLocalizedKeyKey
000000000000e1a7	movq	(%rax), %r12
000000000000e1aa	movq	0x25fff(%rip), %rsi     ## Objc selector ref: valueForKey:
000000000000e1b1	movq	%r14, %rdi
000000000000e1b4	movq	%r12, %rdx
000000000000e1b7	callq	*%r13
000000000000e1ba	movq	0x25f2f(%rip), %rsi     ## Objc selector ref: isEqualToString:
000000000000e1c1	movq	%rax, %rdi
000000000000e1c4	movq	%r15, %rdx
000000000000e1c7	callq	*%r13
000000000000e1ca	testb	%al, %al
000000000000e1cc	jne	0xe1e3
000000000000e1ce	movq	0x2683b(%rip), %rsi     ## Objc selector ref: setValue:forKey:
000000000000e1d5	xorl	%edx, %edx
000000000000e1d7	movq	%r14, %rdi
000000000000e1da	movq	%r12, %rcx
000000000000e1dd	callq	*0x1b21d(%rip)          ## Objc message: +[NSNumber setValue:forKey:]
000000000000e1e3	movq	_OBJC_IVAR_$_UAPSwitchViewController._deviceActionPopupButton(%rip), %r14
000000000000e1ea	movq	(%rbx,%r14), %rdi
000000000000e1ee	movq	0x26823(%rip), %rsi     ## Objc selector ref: isHidden
000000000000e1f5	callq	*0x1b205(%rip)          ## Objc message: -[%rdi isHidden]
000000000000e1fb	testb	%al, %al
000000000000e1fd	movq	_OBJC_IVAR_$_UAPSwitchViewController._editingSwitchInputEntity(%rip), %r15
000000000000e204	jne	0xe275
000000000000e206	movq	(%rbx,%r14), %rdi
000000000000e20a	movq	0x2638f(%rip), %rsi     ## Objc selector ref: selectedItem
000000000000e211	callq	*%r13
000000000000e214	movq	0x2626d(%rip), %rsi     ## Objc selector ref: representedObject
000000000000e21b	movq	%rax, %rdi
000000000000e21e	callq	*%r13
000000000000e221	movq	%rax, %r14
000000000000e224	movq	(%rbx,%r15), %rdi
000000000000e228	movq	0x267f1(%rip), %rsi     ## Objc selector ref: setActionKey:
000000000000e22f	movq	%r14, %rdx
000000000000e232	callq	*%r13
000000000000e235	leaq	_kActionCustomKey(%rip), %rax
000000000000e23c	movq	(%rax), %rdx
000000000000e23f	movq	0x25eaa(%rip), %rsi     ## Objc selector ref: isEqualToString:
000000000000e246	movq	%r14, %rdi
000000000000e249	callq	*%r13
000000000000e24c	testb	%al, %al
000000000000e24e	jne	0xe275
000000000000e250	movq	(%rbx,%r15), %rdi
000000000000e254	movq	0x2679d(%rip), %rsi     ## Objc selector ref: deviceSettings
000000000000e25b	callq	*%r13
000000000000e25e	movq	0x1afcb(%rip), %rcx     ## literal pool symbol address: _UASwitchActionURLKey
000000000000e265	movq	(%rcx), %rdx
000000000000e268	movq	0x25fc1(%rip), %rsi     ## Objc selector ref: removeObjectForKey:
000000000000e26f	movq	%rax, %rdi
000000000000e272	callq	*%r13
000000000000e275	movq	(%rbx,%r15), %rdx
000000000000e279	movq	0x267a8(%rip), %rsi     ## Objc selector ref: _saveChangesForEntity:
000000000000e280	movq	%rbx, %rdi
000000000000e283	callq	*%r13
000000000000e286	movq	0x26673(%rip), %rsi     ## Objc selector ref: _updateSwitchesTableModel
000000000000e28d	movq	%rbx, %rdi
000000000000e290	callq	*%r13
000000000000e293	movq	0x1ae46(%rip), %rax     ## literal pool symbol address: _NSApp
000000000000e29a	movq	(%rax), %rdi
000000000000e29d	movq	_OBJC_IVAR_$_UAPSwitchViewController._switchAssignDeviceInputWindow(%rip), %rax
000000000000e2a4	movq	(%rbx,%rax), %rdx
000000000000e2a8	movq	0x26379(%rip), %rsi     ## Objc selector ref: endSheet:
000000000000e2af	movq	%r13, %rax
000000000000e2b2	addq	$0x8, %rsp
000000000000e2b6	popq	%rbx
000000000000e2b7	popq	%r12
000000000000e2b9	popq	%r13
000000000000e2bb	popq	%r14
000000000000e2bd	popq	%r15
000000000000e2bf	popq	%rbp
000000000000e2c0	jmpq	*%rax
000000000000e2c2	pushq	%rbp
000000000000e2c3	movq	%rsp, %rbp
000000000000e2c6	pushq	%r15
000000000000e2c8	pushq	%r14
000000000000e2ca	pushq	%r12
000000000000e2cc	pushq	%rbx
000000000000e2cd	movq	%rdi, %rbx
000000000000e2d0	movq	_OBJC_IVAR_$_UAPSwitchViewController._deviceAssignmentNicknameField(%rip), %rax
000000000000e2d7	movq	(%rbx,%rax), %rdi
000000000000e2db	movq	0x2631e(%rip), %rsi     ## Objc selector ref: stringValue
000000000000e2e2	movq	0x1b117(%rip), %r12     ## Objc message: -[%rdi stringValue]
000000000000e2e9	callq	*%r12
000000000000e2ec	movq	%rax, %r14
000000000000e2ef	movq	_OBJC_IVAR_$_UAPSwitchViewController._defaultSwitchNames(%rip), %r15
000000000000e2f6	movq	(%rbx,%r15), %rdi
000000000000e2fa	movq	0x25e1f(%rip), %rsi     ## Objc selector ref: containsObject:
000000000000e301	movq	%r14, %rdx
000000000000e304	callq	*%r12
000000000000e307	testb	%al, %al
000000000000e309	je	0xe31f
000000000000e30b	movq	(%rbx,%r15), %rdi
000000000000e30f	movq	0x25e1a(%rip), %rsi     ## Objc selector ref: removeObject:
000000000000e316	movq	%r14, %rdx
000000000000e319	callq	*0x1b0e1(%rip)          ## Objc message: -[%rdi removeObject:]
000000000000e31f	movq	0x1adba(%rip), %rax     ## literal pool symbol address: _NSApp
000000000000e326	movq	(%rax), %rdi
000000000000e329	movq	_OBJC_IVAR_$_UAPSwitchViewController._switchAssignDeviceInputWindow(%rip), %rax
000000000000e330	movq	(%rbx,%rax), %rdx
000000000000e334	movq	0x262ed(%rip), %rsi     ## Objc selector ref: endSheet:
000000000000e33b	popq	%rbx
000000000000e33c	popq	%r12
000000000000e33e	popq	%r14
000000000000e340	popq	%r15
000000000000e342	popq	%rbp
000000000000e343	jmpq	*0x1b0b7(%rip)          ## Objc message: -[%rdi endSheet:]
000000000000e349	pushq	%rbp
000000000000e34a	movq	%rsp, %rbp
000000000000e34d	movq	0x266dc(%rip), %rsi     ## Objc selector ref: _resetInputAssignment
000000000000e354	popq	%rbp
000000000000e355	jmpq	*0x1b0a5(%rip)          ## Objc message: -[%rdi _resetInputAssignment]
000000000000e35b	pushq	%rbp
000000000000e35c	movq	%rsp, %rbp
000000000000e35f	pushq	%r15
000000000000e361	pushq	%r14
000000000000e363	pushq	%r13
000000000000e365	pushq	%r12
000000000000e367	pushq	%rbx
000000000000e368	pushq	%rax
000000000000e369	movq	%rdx, %r14
000000000000e36c	movq	%rdi, %r15
000000000000e36f	movq	_OBJC_IVAR_$_UAPSwitchViewController._switchSwitchesTableView(%rip), %rax
000000000000e376	movq	(%r15,%rax), %rdi
000000000000e37a	movq	0x266b7(%rip), %rsi     ## Objc selector ref: rowForView:
000000000000e381	callq	*0x1b079(%rip)          ## Objc message: -[%rdi rowForView:]
000000000000e387	movq	%rax, %rbx
000000000000e38a	testq	%rbx, %rbx
000000000000e38d	js	0xe469
000000000000e393	movq	_OBJC_IVAR_$_UAPSwitchViewController._switchInputEntities(%rip), %r12
000000000000e39a	movq	(%r15,%r12), %rdi
000000000000e39e	movq	0x25fc3(%rip), %rsi     ## Objc selector ref: count
000000000000e3a5	callq	*0x1b055(%rip)          ## Objc message: -[%rdi count]
000000000000e3ab	cmpq	%rax, %rbx
000000000000e3ae	jae	0xe469
000000000000e3b4	movq	0x26245(%rip), %rsi     ## Objc selector ref: stringValue
000000000000e3bb	movq	0x1b03e(%rip), %r13     ## Objc message: -[%rdi stringValue]
000000000000e3c2	movq	%r14, %rdi
000000000000e3c5	callq	*%r13
000000000000e3c8	movq	%rax, %r14
000000000000e3cb	movq	(%r15,%r12), %rdi
000000000000e3cf	movq	0x25f9a(%rip), %rsi     ## Objc selector ref: objectAtIndex:
000000000000e3d6	movq	%rbx, %rdx
000000000000e3d9	callq	*%r13
000000000000e3dc	movq	%rax, %rbx
000000000000e3df	movq	_OBJC_IVAR_$_UAPSwitchViewController._editingSwitchInputEntity(%rip), %r12
000000000000e3e6	movq	(%r15,%r12), %rdi
000000000000e3ea	movq	0x2664f(%rip), %rsi     ## Objc selector ref: clear
000000000000e3f1	callq	*%r13
000000000000e3f4	movq	(%r15,%r12), %rdi
000000000000e3f8	movq	0x26649(%rip), %rsi     ## Objc selector ref: setWithEntity:
000000000000e3ff	movq	%rbx, %rdx
000000000000e402	callq	*%r13
000000000000e405	movq	(%r15,%r12), %rdi
000000000000e409	movq	0x265e8(%rip), %rsi     ## Objc selector ref: deviceSettings
000000000000e410	callq	*%r13
000000000000e413	movq	0x265e6(%rip), %rsi     ## Objc selector ref: setNickname:
000000000000e41a	movq	%rax, %rdi
000000000000e41d	movq	%r14, %rdx
000000000000e420	callq	*%r13
000000000000e423	movq	(%r15,%r12), %rdx
000000000000e427	movq	0x265fa(%rip), %rsi     ## Objc selector ref: _saveChangesForEntity:
000000000000e42e	movq	%r15, %rdi
000000000000e431	callq	*%r13
000000000000e434	movq	0x264c5(%rip), %rsi     ## Objc selector ref: _updateSwitchesTableModel
000000000000e43b	movq	%r15, %rdi
000000000000e43e	callq	*%r13
000000000000e441	movq	_OBJC_IVAR_$_UAPSwitchViewController._defaultSwitchNames(%rip), %rax
000000000000e448	movq	(%r15,%rax), %rdi
000000000000e44c	movq	0x25f2d(%rip), %rsi     ## Objc selector ref: addObject:
000000000000e453	movq	%r14, %rdx
000000000000e456	movq	%r13, %rax
000000000000e459	addq	$0x8, %rsp
000000000000e45d	popq	%rbx
000000000000e45e	popq	%r12
000000000000e460	popq	%r13
000000000000e462	popq	%r14
000000000000e464	popq	%r15
000000000000e466	popq	%rbp
000000000000e467	jmpq	*%rax
000000000000e469	addq	$0x8, %rsp
000000000000e46d	popq	%rbx
000000000000e46e	popq	%r12
000000000000e470	popq	%r13
000000000000e472	popq	%r14
000000000000e474	popq	%r15
000000000000e476	popq	%rbp
000000000000e477	retq
000000000000e478	pushq	%rbp
000000000000e479	movq	%rsp, %rbp
000000000000e47c	pushq	%r15
000000000000e47e	pushq	%r14
000000000000e480	pushq	%r12
000000000000e482	pushq	%rbx
000000000000e483	subq	$0x10, %rsp
000000000000e487	movq	%rdi, %rbx
000000000000e48a	movq	0x1ac4f(%rip), %rax     ## literal pool symbol address: _NSApp
000000000000e491	movq	(%rax), %r14
000000000000e494	movq	_OBJC_IVAR_$_UAPSwitchViewController._switchesSettingsWindow(%rip), %rax
000000000000e49b	movq	(%rbx,%rax), %r15
000000000000e49f	movq	0x25f1a(%rip), %rsi     ## Objc selector ref: view
000000000000e4a6	movq	0x1af53(%rip), %r12     ## Objc message: -[%rdi view]
000000000000e4ad	callq	*%r12
000000000000e4b0	movq	0x25f11(%rip), %rsi     ## Objc selector ref: window
000000000000e4b7	movq	%rax, %rdi
000000000000e4ba	callq	*%r12
000000000000e4bd	movq	0x264fc(%rip), %r9      ## Objc selector ref: _genericSheetDidEnd:returnCode:contextInfo:
000000000000e4c4	movq	0x264fd(%rip), %rsi     ## Objc selector ref: beginSheet:modalForWindow:modalDelegate:didEndSelector:contextInfo:
000000000000e4cb	movq	$0x0, (%rsp)
000000000000e4d3	movq	%r14, %rdi
000000000000e4d6	movq	%r15, %rdx
000000000000e4d9	movq	%rax, %rcx
000000000000e4dc	movq	%rbx, %r8
000000000000e4df	callq	*%r12
000000000000e4e2	addq	$0x10, %rsp
000000000000e4e6	popq	%rbx
000000000000e4e7	popq	%r12
000000000000e4e9	popq	%r14
000000000000e4eb	popq	%r15
000000000000e4ed	popq	%rbp
000000000000e4ee	retq
000000000000e4ef	pushq	%rbp
000000000000e4f0	movq	%rsp, %rbp
000000000000e4f3	movq	0x1abe6(%rip), %rax     ## literal pool symbol address: _NSApp
000000000000e4fa	movq	(%rax), %rax
000000000000e4fd	movq	_OBJC_IVAR_$_UAPSwitchViewController._switchesSettingsWindow(%rip), %rcx
000000000000e504	movq	(%rdi,%rcx), %rdx
000000000000e508	movq	0x26119(%rip), %rsi     ## Objc selector ref: endSheet:
000000000000e50f	movq	%rax, %rdi
000000000000e512	popq	%rbp
000000000000e513	jmpq	*0x1aee7(%rip)          ## Objc message: -[%rdi endSheet:]
000000000000e519	pushq	%rbp
000000000000e51a	movq	%rsp, %rbp
000000000000e51d	pushq	%r14
000000000000e51f	pushq	%rbx
000000000000e520	movq	%rdi, %rbx
000000000000e523	movq	_OBJC_IVAR_$_UAPSwitchViewController._coalesceIntervalStepper(%rip), %rax
000000000000e52a	movq	(%rbx,%rax), %rdi
000000000000e52e	movq	0x2651b(%rip), %rsi     ## Objc selector ref: doubleValue
000000000000e535	movq	0x1aec4(%rip), %r14     ## Objc message: -[%rdi doubleValue]
000000000000e53c	callq	*%r14
000000000000e53f	movq	0x26372(%rip), %rsi     ## Objc selector ref: setCoalesceInterval:
000000000000e546	movq	%rbx, %rdi
000000000000e549	movq	%r14, %rax
000000000000e54c	popq	%rbx
000000000000e54d	popq	%r14
000000000000e54f	popq	%rbp
000000000000e550	jmpq	*%rax
000000000000e552	pushq	%rbp
000000000000e553	movq	%rsp, %rbp
000000000000e556	pushq	%r14
000000000000e558	pushq	%rbx
000000000000e559	movq	%rdi, %rbx
000000000000e55c	movq	_OBJC_IVAR_$_UAPSwitchViewController._minimumPressDurationStepper(%rip), %rax
000000000000e563	movq	(%rbx,%rax), %rdi
000000000000e567	movq	0x264e2(%rip), %rsi     ## Objc selector ref: doubleValue
000000000000e56e	movq	0x1ae8b(%rip), %r14     ## Objc message: -[%rdi doubleValue]
000000000000e575	callq	*%r14
000000000000e578	movq	0x26341(%rip), %rsi     ## Objc selector ref: setMinimumPressDuration:
000000000000e57f	movq	%rbx, %rdi
000000000000e582	movq	%r14, %rax
000000000000e585	popq	%rbx
000000000000e586	popq	%r14
000000000000e588	popq	%rbp
000000000000e589	jmpq	*%rax
000000000000e58b	pushq	%rbp
000000000000e58c	movq	%rsp, %rbp
000000000000e58f	pushq	%r14
000000000000e591	pushq	%rbx
000000000000e592	movq	%rdi, %rbx
000000000000e595	movq	_OBJC_IVAR_$_UAPSwitchViewController._firstItemDelayStepper(%rip), %rax
000000000000e59c	movq	(%rbx,%rax), %rdi
000000000000e5a0	movq	0x264a9(%rip), %rsi     ## Objc selector ref: doubleValue
000000000000e5a7	movq	0x1ae52(%rip), %r14     ## Objc message: -[%rdi doubleValue]
000000000000e5ae	callq	*%r14
000000000000e5b1	movq	0x26310(%rip), %rsi     ## Objc selector ref: setFirstItemDelay:
000000000000e5b8	movq	%rbx, %rdi
000000000000e5bb	movq	%r14, %rax
000000000000e5be	popq	%rbx
000000000000e5bf	popq	%r14
000000000000e5c1	popq	%rbp
000000000000e5c2	jmpq	*%rax
000000000000e5c4	pushq	%rbp
000000000000e5c5	movq	%rsp, %rbp
000000000000e5c8	pushq	%r14
000000000000e5ca	pushq	%rbx
000000000000e5cb	movq	%rdi, %rbx
000000000000e5ce	movq	_OBJC_IVAR_$_UAPSwitchViewController._hideAfterDelayStepper(%rip), %rax
000000000000e5d5	movq	(%rbx,%rax), %rdi
000000000000e5d9	movq	0x26470(%rip), %rsi     ## Objc selector ref: doubleValue
000000000000e5e0	movq	0x1ae19(%rip), %r14     ## Objc message: -[%rdi doubleValue]
000000000000e5e7	callq	*%r14
000000000000e5ea	movq	0x262bf(%rip), %rsi     ## Objc selector ref: setHideAfterDelay:
000000000000e5f1	movq	%rbx, %rdi
000000000000e5f4	movq	%r14, %rax
000000000000e5f7	popq	%rbx
000000000000e5f8	popq	%r14
000000000000e5fa	popq	%rbp
000000000000e5fb	jmpq	*%rax
000000000000e5fd	pushq	%rbp
000000000000e5fe	movq	%rsp, %rbp
000000000000e601	pushq	%r14
000000000000e603	pushq	%rbx
000000000000e604	movq	%rdi, %rbx
000000000000e607	movq	_OBJC_IVAR_$_UAPSwitchViewController._autoScanPanelSpeedStepper(%rip), %rax
000000000000e60e	movq	(%rbx,%rax), %rdi
000000000000e612	movq	0x26437(%rip), %rsi     ## Objc selector ref: doubleValue
000000000000e619	movq	0x1ade0(%rip), %r14     ## Objc message: -[%rdi doubleValue]
000000000000e620	callq	*%r14
000000000000e623	movq	0x262ae(%rip), %rsi     ## Objc selector ref: setAutoScanPanelStepInterval:
000000000000e62a	movq	%rbx, %rdi
000000000000e62d	movq	%r14, %rax
000000000000e630	popq	%rbx
000000000000e631	popq	%r14
000000000000e633	popq	%rbp
000000000000e634	jmpq	*%rax
000000000000e636	pushq	%rbp
000000000000e637	movq	%rsp, %rbp
000000000000e63a	pushq	%r14
000000000000e63c	pushq	%rbx
000000000000e63d	movq	%rdi, %rbx
000000000000e640	movq	_OBJC_IVAR_$_UAPSwitchViewController._autoScanElementSpeedStepper(%rip), %rax
000000000000e647	movq	(%rbx,%rax), %rdi
000000000000e64b	movq	0x263fe(%rip), %rsi     ## Objc selector ref: doubleValue
000000000000e652	movq	0x1ada7(%rip), %r14     ## Objc message: -[%rdi doubleValue]
000000000000e659	callq	*%r14
000000000000e65c	movq	0x2626d(%rip), %rsi     ## Objc selector ref: setAutoScanElementStepInterval:
000000000000e663	movq	%rbx, %rdi
000000000000e666	movq	%r14, %rax
000000000000e669	popq	%rbx
000000000000e66a	popq	%r14
000000000000e66c	popq	%rbp
000000000000e66d	jmpq	*%rax
000000000000e66f	pushq	%rbp
000000000000e670	movq	%rsp, %rbp
000000000000e673	pushq	%r14
000000000000e675	pushq	%rbx
000000000000e676	movq	%rdi, %rbx
000000000000e679	movq	_OBJC_IVAR_$_UAPSwitchViewController._sweepingCursorSpeedStepper(%rip), %rax
000000000000e680	movq	(%rbx,%rax), %rdi
000000000000e684	movq	0x263c5(%rip), %rsi     ## Objc selector ref: doubleValue
000000000000e68b	movq	0x1ad6e(%rip), %r14     ## Objc message: -[%rdi doubleValue]
000000000000e692	callq	*%r14
000000000000e695	movq	0x26244(%rip), %rsi     ## Objc selector ref: setSweepingCursorSpeed:
000000000000e69c	movq	%rbx, %rdi
000000000000e69f	movq	%r14, %rax
000000000000e6a2	popq	%rbx
000000000000e6a3	popq	%r14
000000000000e6a5	popq	%rbp
000000000000e6a6	jmpq	*%rax
000000000000e6a8	pushq	%rbp
000000000000e6a9	movq	%rsp, %rbp
000000000000e6ac	pushq	%r14
000000000000e6ae	pushq	%rbx
000000000000e6af	movq	%rdi, %rbx
000000000000e6b2	movq	_OBJC_IVAR_$_UAPSwitchViewController._holdBeforeRepeatDurationStepper(%rip), %rax
000000000000e6b9	movq	(%rbx,%rax), %rdi
000000000000e6bd	movq	0x2638c(%rip), %rsi     ## Objc selector ref: doubleValue
000000000000e6c4	movq	0x1ad35(%rip), %r14     ## Objc message: -[%rdi doubleValue]
000000000000e6cb	callq	*%r14
000000000000e6ce	movq	0x26213(%rip), %rsi     ## Objc selector ref: setMinimumPressBeforeRepeatDuration:
000000000000e6d5	movq	%rbx, %rdi
000000000000e6d8	movq	%r14, %rax
000000000000e6db	popq	%rbx
000000000000e6dc	popq	%r14
000000000000e6de	popq	%rbp
000000000000e6df	jmpq	*%rax
000000000000e6e1	pushq	%rbp
000000000000e6e2	movq	%rsp, %rbp
000000000000e6e5	pushq	%r15
000000000000e6e7	pushq	%r14
000000000000e6e9	pushq	%r13
000000000000e6eb	pushq	%r12
000000000000e6ed	pushq	%rbx
000000000000e6ee	pushq	%rax
000000000000e6ef	movq	%rdi, %rbx
000000000000e6f2	movq	0x26337(%rip), %rsi     ## Objc selector ref: _resetInputAssignment
000000000000e6f9	movq	0x1ad00(%rip), %r13     ## Objc message: -[%rdi _resetInputAssignment]
000000000000e700	callq	*%r13
000000000000e703	movq	_OBJC_IVAR_$_UAPSwitchViewController._editingSwitchInputEntity(%rip), %r12
000000000000e70a	movq	(%rbx,%r12), %rdi
000000000000e70e	movq	0x262e3(%rip), %rsi     ## Objc selector ref: deviceSettings
000000000000e715	callq	*%r13
000000000000e718	movq	%rax, %r14
000000000000e71b	movq	_OBJC_IVAR_$_UAPSwitchViewController._deviceAssignmentNicknameField(%rip), %rax
000000000000e722	movq	(%rbx,%rax), %rdi
000000000000e726	movq	0x25ed3(%rip), %rsi     ## Objc selector ref: stringValue
000000000000e72d	callq	*%r13
000000000000e730	movq	0x262c9(%rip), %rsi     ## Objc selector ref: setNickname:
000000000000e737	movq	%r14, %rdi
000000000000e73a	movq	%rax, %rdx
000000000000e73d	callq	*%r13
000000000000e740	movq	_OBJC_IVAR_$_UAPSwitchViewController._deviceActionPopupButton(%rip), %r15
000000000000e747	movq	(%rbx,%r15), %rdi
000000000000e74b	movq	0x262c6(%rip), %rsi     ## Objc selector ref: isHidden
000000000000e752	callq	*%r13
000000000000e755	testb	%al, %al
000000000000e757	je	0xe768
000000000000e759	addq	$0x8, %rsp
000000000000e75d	popq	%rbx
000000000000e75e	popq	%r12
000000000000e760	popq	%r13
000000000000e762	popq	%r14
000000000000e764	popq	%r15
000000000000e766	popq	%rbp
000000000000e767	retq
000000000000e768	movq	(%rbx,%r15), %rdi
000000000000e76c	movq	0x25e2d(%rip), %rsi     ## Objc selector ref: selectedItem
000000000000e773	callq	*%r13
000000000000e776	movq	0x25d0b(%rip), %rsi     ## Objc selector ref: representedObject
000000000000e77d	movq	%rax, %rdi
000000000000e780	callq	*%r13
000000000000e783	movq	%rax, %r15
000000000000e786	movq	(%rbx,%r12), %rdi
000000000000e78a	movq	0x2628f(%rip), %rsi     ## Objc selector ref: setActionKey:
000000000000e791	movq	%r15, %rdx
000000000000e794	callq	*%r13
000000000000e797	movq	0x262ba(%rip), %rsi     ## Objc selector ref: _switchActionsForActionKey:
000000000000e79e	movq	%rbx, %rdi
000000000000e7a1	movq	%r15, %rdx
000000000000e7a4	callq	*%r13
000000000000e7a7	movq	0x1aa8a(%rip), %rcx     ## literal pool symbol address: _UASwitchActionsKey
000000000000e7ae	movq	(%rcx), %rcx
000000000000e7b1	movq	0x25a68(%rip), %rsi     ## Objc selector ref: setObject:forKey:
000000000000e7b8	movq	%r14, %rdi
000000000000e7bb	movq	%rax, %rdx
000000000000e7be	movq	%r13, %rax
000000000000e7c1	addq	$0x8, %rsp
000000000000e7c5	popq	%rbx
000000000000e7c6	popq	%r12
000000000000e7c8	popq	%r13
000000000000e7ca	popq	%r14
000000000000e7cc	popq	%r15
000000000000e7ce	popq	%rbp
000000000000e7cf	jmpq	*%rax
000000000000e7d1	pushq	%rbp
000000000000e7d2	movq	%rsp, %rbp
000000000000e7d5	pushq	%r15
000000000000e7d7	pushq	%r14
000000000000e7d9	pushq	%rbx
000000000000e7da	subq	$0x18, %rsp
000000000000e7de	movsd	%xmm0, -0x20(%rbp)
000000000000e7e3	movq	%rdi, %rbx
000000000000e7e6	movq	0x25f33(%rip), %rsi     ## Objc selector ref: stopListeningForChanges
000000000000e7ed	movq	0x1ac0c(%rip), %r15     ## Objc message: -[%rdi stopListeningForChanges]
000000000000e7f4	callq	*%r15
000000000000e7f7	movsd	-0x20(%rbp), %xmm2
000000000000e7fc	minsd	0x19b5c(%rip), %xmm2
000000000000e804	movsd	%xmm2, -0x28(%rbp)
000000000000e809	movsd	0x19b47(%rip), %xmm1
000000000000e811	movaps	%xmm1, %xmm0
000000000000e814	maxsd	%xmm2, %xmm0
000000000000e818	movsd	%xmm0, -0x30(%rbp)
000000000000e81d	movq	_OBJC_IVAR_$_UAPSwitchViewController._secondsFormatter(%rip), %rax
000000000000e824	movq	(%rbx,%rax), %r14
000000000000e828	movq	0x26d31(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_NSNumber
000000000000e82f	movq	0x2622a(%rip), %rsi     ## Objc selector ref: numberWithDouble:
000000000000e836	callq	*%r15
000000000000e839	movq	0x260d8(%rip), %rsi     ## Objc selector ref: stringFromNumber:
000000000000e840	movq	%r14, %rdi
000000000000e843	movq	%rax, %rdx
000000000000e846	callq	*%r15
000000000000e849	movq	_OBJC_IVAR_$_UAPSwitchViewController._hideAfterDelayTextField(%rip), %rcx
000000000000e850	movq	(%rbx,%rcx), %rdi
000000000000e854	movq	0x25bbd(%rip), %rsi     ## Objc selector ref: setStringValue:
000000000000e85b	movq	%rax, %rdx
000000000000e85e	callq	*%r15
000000000000e861	movq	_OBJC_IVAR_$_UAPSwitchViewController._hideAfterDelayStepper(%rip), %rax
000000000000e868	movq	(%rbx,%rax), %rdi
000000000000e86c	movq	0x25f3d(%rip), %rsi     ## Objc selector ref: setDoubleValue:
000000000000e873	movsd	-0x30(%rbp), %xmm0
000000000000e878	callq	*%r15
000000000000e87b	movsd	-0x20(%rbp), %xmm0
000000000000e880	movsd	0x19ad8(%rip), %xmm1
000000000000e888	ucomisd	%xmm0, %xmm1
000000000000e88c	ja	0xe898
000000000000e88e	movss	0x19aa6(%rip), %xmm0
000000000000e896	jmp	0xe89c
000000000000e898	cvtsd2ss	%xmm0, %xmm0
000000000000e89c	movsd	0x19ab4(%rip), %xmm1
000000000000e8a4	ucomisd	-0x28(%rbp), %xmm1
000000000000e8a9	jbe	0xe8b3
000000000000e8ab	movss	0x19a8d(%rip), %xmm0
000000000000e8b3	callq	0x1e784                 ## symbol stub for: _UASwitchSetHideUITimeout
000000000000e8b8	movq	0x25e69(%rip), %rsi     ## Objc selector ref: startListeningForChanges
000000000000e8bf	movq	%rbx, %rdi
000000000000e8c2	movq	%r15, %rax
000000000000e8c5	addq	$0x18, %rsp
000000000000e8c9	popq	%rbx
000000000000e8ca	popq	%r14
000000000000e8cc	popq	%r15
000000000000e8ce	popq	%rbp
000000000000e8cf	jmpq	*%rax
000000000000e8d1	pushq	%rbp
000000000000e8d2	movq	%rsp, %rbp
000000000000e8d5	pushq	%r15
000000000000e8d7	pushq	%r14
000000000000e8d9	pushq	%rbx
000000000000e8da	subq	$0x18, %rsp
000000000000e8de	movsd	%xmm0, -0x20(%rbp)
000000000000e8e3	movq	%rdi, %rbx
000000000000e8e6	movq	0x25e33(%rip), %rsi     ## Objc selector ref: stopListeningForChanges
000000000000e8ed	movq	0x1ab0c(%rip), %r15     ## Objc message: +[NSNumber stopListeningForChanges]
000000000000e8f4	callq	*%r15
000000000000e8f7	movsd	-0x20(%rbp), %xmm1
000000000000e8fc	minsd	0x19a64(%rip), %xmm1
000000000000e904	movsd	%xmm1, -0x28(%rbp)
000000000000e909	xorps	%xmm0, %xmm0
000000000000e90c	maxsd	%xmm1, %xmm0
000000000000e910	movsd	%xmm0, -0x30(%rbp)
000000000000e915	movq	_OBJC_IVAR_$_UAPSwitchViewController._secondsFormatter(%rip), %rax
000000000000e91c	movq	(%rbx,%rax), %r14
000000000000e920	movq	0x26c39(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_NSNumber
000000000000e927	movq	0x26132(%rip), %rsi     ## Objc selector ref: numberWithDouble:
000000000000e92e	callq	*%r15
000000000000e931	movq	0x25fe0(%rip), %rsi     ## Objc selector ref: stringFromNumber:
000000000000e938	movq	%r14, %rdi
000000000000e93b	movq	%rax, %rdx
000000000000e93e	callq	*%r15
000000000000e941	movq	_OBJC_IVAR_$_UAPSwitchViewController._coalesceIntervalTextField(%rip), %rcx
000000000000e948	movq	(%rbx,%rcx), %rdi
000000000000e94c	movq	0x25ac5(%rip), %rsi     ## Objc selector ref: setStringValue:
000000000000e953	movq	%rax, %rdx
000000000000e956	callq	*%r15
000000000000e959	movq	_OBJC_IVAR_$_UAPSwitchViewController._coalesceIntervalStepper(%rip), %rax
000000000000e960	movq	(%rbx,%rax), %rdi
000000000000e964	movq	0x25e45(%rip), %rsi     ## Objc selector ref: setDoubleValue:
000000000000e96b	movsd	-0x30(%rbp), %xmm0
000000000000e970	callq	*%r15
000000000000e973	movsd	-0x20(%rbp), %xmm0
000000000000e978	movsd	0x199e8(%rip), %xmm1
000000000000e980	ucomisd	%xmm0, %xmm1
000000000000e984	ja	0xe990
000000000000e986	movss	0x199b6(%rip), %xmm1
000000000000e98e	jmp	0xe997
000000000000e990	xorps	%xmm1, %xmm1
000000000000e993	cvtsd2ss	%xmm0, %xmm1
000000000000e997	xorps	%xmm0, %xmm0
000000000000e99a	ucomisd	-0x28(%rbp), %xmm0
000000000000e99f	xorps	%xmm0, %xmm0
000000000000e9a2	ja	0xe9a7
000000000000e9a4	movaps	%xmm1, %xmm0
000000000000e9a7	callq	0x1e706                 ## symbol stub for: _UASwitchCoalescePressesSetDuration
000000000000e9ac	movq	0x25d75(%rip), %rsi     ## Objc selector ref: startListeningForChanges
000000000000e9b3	movq	%rbx, %rdi
000000000000e9b6	movq	%r15, %rax
000000000000e9b9	addq	$0x18, %rsp
000000000000e9bd	popq	%rbx
000000000000e9be	popq	%r14
000000000000e9c0	popq	%r15
000000000000e9c2	popq	%rbp
000000000000e9c3	jmpq	*%rax
000000000000e9c5	pushq	%rbp
000000000000e9c6	movq	%rsp, %rbp
000000000000e9c9	pushq	%r15
000000000000e9cb	pushq	%r14
000000000000e9cd	pushq	%rbx
000000000000e9ce	subq	$0x18, %rsp
000000000000e9d2	movsd	%xmm0, -0x20(%rbp)
000000000000e9d7	movq	%rdi, %rbx
000000000000e9da	movq	0x25d3f(%rip), %rsi     ## Objc selector ref: stopListeningForChanges
000000000000e9e1	movq	0x1aa18(%rip), %r15     ## Objc message: +[NSNumber stopListeningForChanges]
000000000000e9e8	callq	*%r15
000000000000e9eb	movsd	-0x20(%rbp), %xmm1
000000000000e9f0	minsd	0x19970(%rip), %xmm1
000000000000e9f8	movsd	%xmm1, -0x28(%rbp)
000000000000e9fd	xorps	%xmm0, %xmm0
000000000000ea00	maxsd	%xmm1, %xmm0
000000000000ea04	movsd	%xmm0, -0x30(%rbp)
000000000000ea09	movq	_OBJC_IVAR_$_UAPSwitchViewController._secondsFormatter(%rip), %rax
000000000000ea10	movq	(%rbx,%rax), %r14
000000000000ea14	movq	0x26b45(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_NSNumber
000000000000ea1b	movq	0x2603e(%rip), %rsi     ## Objc selector ref: numberWithDouble:
000000000000ea22	callq	*%r15
000000000000ea25	movq	0x25eec(%rip), %rsi     ## Objc selector ref: stringFromNumber:
000000000000ea2c	movq	%r14, %rdi
000000000000ea2f	movq	%rax, %rdx
000000000000ea32	callq	*%r15
000000000000ea35	movq	_OBJC_IVAR_$_UAPSwitchViewController._minimumPressDurationTextField(%rip), %rcx
000000000000ea3c	movq	(%rbx,%rcx), %rdi
000000000000ea40	movq	0x259d1(%rip), %rsi     ## Objc selector ref: setStringValue:
000000000000ea47	movq	%rax, %rdx
000000000000ea4a	callq	*%r15
000000000000ea4d	movq	_OBJC_IVAR_$_UAPSwitchViewController._minimumPressDurationStepper(%rip), %rax
000000000000ea54	movq	(%rbx,%rax), %rdi
000000000000ea58	movq	0x25d51(%rip), %rsi     ## Objc selector ref: setDoubleValue:
000000000000ea5f	movsd	-0x30(%rbp), %xmm0
000000000000ea64	callq	*%r15
000000000000ea67	movsd	-0x20(%rbp), %xmm0
000000000000ea6c	movsd	0x198f4(%rip), %xmm1
000000000000ea74	ucomisd	%xmm0, %xmm1
000000000000ea78	ja	0xea84
000000000000ea7a	movss	0x198c2(%rip), %xmm1
000000000000ea82	jmp	0xea8b
000000000000ea84	xorps	%xmm1, %xmm1
000000000000ea87	cvtsd2ss	%xmm0, %xmm1
000000000000ea8b	xorps	%xmm0, %xmm0
000000000000ea8e	ucomisd	-0x28(%rbp), %xmm0
000000000000ea93	xorps	%xmm0, %xmm0
000000000000ea96	ja	0xea9b
000000000000ea98	movaps	%xmm1, %xmm0
000000000000ea9b	callq	0x1e74e                 ## symbol stub for: _UASwitchMinimumPressSetDuration
000000000000eaa0	movq	0x25c81(%rip), %rsi     ## Objc selector ref: startListeningForChanges
000000000000eaa7	movq	%rbx, %rdi
000000000000eaaa	movq	%r15, %rax
000000000000eaad	addq	$0x18, %rsp
000000000000eab1	popq	%rbx
000000000000eab2	popq	%r14
000000000000eab4	popq	%r15
000000000000eab6	popq	%rbp
000000000000eab7	jmpq	*%rax
000000000000eab9	pushq	%rbp
000000000000eaba	movq	%rsp, %rbp
000000000000eabd	pushq	%r15
000000000000eabf	pushq	%r14
000000000000eac1	pushq	%rbx
000000000000eac2	subq	$0x18, %rsp
000000000000eac6	movsd	%xmm0, -0x20(%rbp)
000000000000eacb	movq	%rdi, %rbx
000000000000eace	movq	0x25c4b(%rip), %rsi     ## Objc selector ref: stopListeningForChanges
000000000000ead5	movq	0x1a924(%rip), %r15     ## Objc message: +[NSNumber stopListeningForChanges]
000000000000eadc	callq	*%r15
000000000000eadf	movsd	-0x20(%rbp), %xmm1
000000000000eae4	minsd	0x1987c(%rip), %xmm1
000000000000eaec	movsd	%xmm1, -0x28(%rbp)
000000000000eaf1	xorps	%xmm0, %xmm0
000000000000eaf4	maxsd	%xmm1, %xmm0
000000000000eaf8	movsd	%xmm0, -0x30(%rbp)
000000000000eafd	movq	_OBJC_IVAR_$_UAPSwitchViewController._secondsFormatter(%rip), %rax
000000000000eb04	movq	(%rbx,%rax), %r14
000000000000eb08	movq	0x26a51(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_NSNumber
000000000000eb0f	movq	0x25f4a(%rip), %rsi     ## Objc selector ref: numberWithDouble:
000000000000eb16	callq	*%r15
000000000000eb19	movq	0x25df8(%rip), %rsi     ## Objc selector ref: stringFromNumber:
000000000000eb20	movq	%r14, %rdi
000000000000eb23	movq	%rax, %rdx
000000000000eb26	callq	*%r15
000000000000eb29	movq	_OBJC_IVAR_$_UAPSwitchViewController._firstItemDelayTextField(%rip), %rcx
000000000000eb30	movq	(%rbx,%rcx), %rdi
000000000000eb34	movq	0x258dd(%rip), %rsi     ## Objc selector ref: setStringValue:
000000000000eb3b	movq	%rax, %rdx
000000000000eb3e	callq	*%r15
000000000000eb41	movq	_OBJC_IVAR_$_UAPSwitchViewController._firstItemDelayStepper(%rip), %rax
000000000000eb48	movq	(%rbx,%rax), %rdi
000000000000eb4c	movq	0x25c5d(%rip), %rsi     ## Objc selector ref: setDoubleValue:
000000000000eb53	movsd	-0x30(%rbp), %xmm0
000000000000eb58	callq	*%r15
000000000000eb5b	movsd	-0x20(%rbp), %xmm0
000000000000eb60	movsd	0x19800(%rip), %xmm1
000000000000eb68	ucomisd	%xmm0, %xmm1
000000000000eb6c	ja	0xeb78
000000000000eb6e	movss	0x197ce(%rip), %xmm1
000000000000eb76	jmp	0xeb7f
000000000000eb78	xorps	%xmm1, %xmm1
000000000000eb7b	cvtsd2ss	%xmm0, %xmm1
000000000000eb7f	xorps	%xmm0, %xmm0
000000000000eb82	ucomisd	-0x28(%rbp), %xmm0
000000000000eb87	xorps	%xmm0, %xmm0
000000000000eb8a	ja	0xeb8f
000000000000eb8c	movaps	%xmm1, %xmm0
000000000000eb8f	callq	0x1e71e                 ## symbol stub for: _UASwitchFirstElementSetDelay
000000000000eb94	movq	0x25b8d(%rip), %rsi     ## Objc selector ref: startListeningForChanges
000000000000eb9b	movq	%rbx, %rdi
000000000000eb9e	movq	%r15, %rax
000000000000eba1	addq	$0x18, %rsp
000000000000eba5	popq	%rbx
000000000000eba6	popq	%r14
000000000000eba8	popq	%r15
000000000000ebaa	popq	%rbp
000000000000ebab	jmpq	*%rax
000000000000ebad	pushq	%rbp
000000000000ebae	movq	%rsp, %rbp
000000000000ebb1	pushq	%r15
000000000000ebb3	pushq	%r14
000000000000ebb5	pushq	%rbx
000000000000ebb6	subq	$0x18, %rsp
000000000000ebba	movsd	%xmm0, -0x20(%rbp)
000000000000ebbf	movq	%rdi, %rbx
000000000000ebc2	movq	0x25b57(%rip), %rsi     ## Objc selector ref: stopListeningForChanges
000000000000ebc9	movq	0x1a830(%rip), %r15     ## Objc message: +[NSNumber stopListeningForChanges]
000000000000ebd0	callq	*%r15
000000000000ebd3	movsd	-0x20(%rbp), %xmm2
000000000000ebd8	minsd	0x19798(%rip), %xmm2
000000000000ebe0	movsd	%xmm2, -0x28(%rbp)
000000000000ebe5	movsd	0x19783(%rip), %xmm1
000000000000ebed	movaps	%xmm1, %xmm0
000000000000ebf0	maxsd	%xmm2, %xmm0
000000000000ebf4	movsd	%xmm0, -0x30(%rbp)
000000000000ebf9	movq	_OBJC_IVAR_$_UAPSwitchViewController._secondsFormatter(%rip), %rax
000000000000ec00	movq	(%rbx,%rax), %r14
000000000000ec04	movq	0x26955(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_NSNumber
000000000000ec0b	movq	0x25e4e(%rip), %rsi     ## Objc selector ref: numberWithDouble:
000000000000ec12	callq	*%r15
000000000000ec15	movq	0x25cfc(%rip), %rsi     ## Objc selector ref: stringFromNumber:
000000000000ec1c	movq	%r14, %rdi
000000000000ec1f	movq	%rax, %rdx
000000000000ec22	callq	*%r15
000000000000ec25	movq	_OBJC_IVAR_$_UAPSwitchViewController._autoScanElementSpeedTextField(%rip), %rcx
000000000000ec2c	movq	(%rbx,%rcx), %rdi
000000000000ec30	movq	0x257e1(%rip), %rsi     ## Objc selector ref: setStringValue:
000000000000ec37	movq	%rax, %rdx
000000000000ec3a	callq	*%r15
000000000000ec3d	movq	_OBJC_IVAR_$_UAPSwitchViewController._autoScanElementSpeedStepper(%rip), %rax
000000000000ec44	movq	(%rbx,%rax), %rdi
000000000000ec48	movq	0x25b61(%rip), %rsi     ## Objc selector ref: setDoubleValue:
000000000000ec4f	movsd	-0x30(%rbp), %xmm0
000000000000ec54	callq	*%r15
000000000000ec57	movsd	-0x20(%rbp), %xmm0
000000000000ec5c	movsd	0x19714(%rip), %xmm1
000000000000ec64	ucomisd	%xmm0, %xmm1
000000000000ec68	ja	0xec74
000000000000ec6a	movss	0x196d6(%rip), %xmm0
000000000000ec72	jmp	0xec78
000000000000ec74	cvtsd2ss	%xmm0, %xmm0
000000000000ec78	movsd	0x196f0(%rip), %xmm1
000000000000ec80	ucomisd	-0x28(%rbp), %xmm1
000000000000ec85	jbe	0xec8f
000000000000ec87	movss	0x196bd(%rip), %xmm0
000000000000ec8f	callq	0x1e6ee                 ## symbol stub for: _UASwitchAutoScanSetElementInterval
000000000000ec94	movq	0x25a8d(%rip), %rsi     ## Objc selector ref: startListeningForChanges
000000000000ec9b	movq	%rbx, %rdi
000000000000ec9e	movq	%r15, %rax
000000000000eca1	addq	$0x18, %rsp
000000000000eca5	popq	%rbx
000000000000eca6	popq	%r14
000000000000eca8	popq	%r15
000000000000ecaa	popq	%rbp
000000000000ecab	jmpq	*%rax
000000000000ecad	pushq	%rbp
000000000000ecae	movq	%rsp, %rbp
000000000000ecb1	pushq	%r15
000000000000ecb3	pushq	%r14
000000000000ecb5	pushq	%rbx
000000000000ecb6	subq	$0x18, %rsp
000000000000ecba	movsd	%xmm0, -0x20(%rbp)
000000000000ecbf	movq	%rdi, %rbx
000000000000ecc2	movq	0x25a57(%rip), %rsi     ## Objc selector ref: stopListeningForChanges
000000000000ecc9	movq	0x1a730(%rip), %r15     ## Objc message: +[NSNumber stopListeningForChanges]
000000000000ecd0	callq	*%r15
000000000000ecd3	movsd	-0x20(%rbp), %xmm0
000000000000ecd8	callq	0x1e8ce                 ## symbol stub for: _floor
000000000000ecdd	movsd	%xmm0, -0x28(%rbp)
000000000000ece2	movaps	%xmm0, %xmm2
000000000000ece5	minsd	0x19693(%rip), %xmm2
000000000000eced	movsd	%xmm2, -0x20(%rbp)
000000000000ecf2	xorps	%xmm0, %xmm0
000000000000ecf5	maxsd	%xmm2, %xmm0
000000000000ecf9	movsd	%xmm0, -0x30(%rbp)
000000000000ecfe	movq	_OBJC_IVAR_$_UAPSwitchViewController._intFormatter(%rip), %rax
000000000000ed05	movq	(%rbx,%rax), %r14
000000000000ed09	movq	0x26850(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_NSNumber
000000000000ed10	movq	0x25d49(%rip), %rsi     ## Objc selector ref: numberWithDouble:
000000000000ed17	callq	*%r15
000000000000ed1a	movq	0x25bf7(%rip), %rsi     ## Objc selector ref: stringFromNumber:
000000000000ed21	movq	%r14, %rdi
000000000000ed24	movq	%rax, %rdx
000000000000ed27	callq	*%r15
000000000000ed2a	movq	_OBJC_IVAR_$_UAPSwitchViewController._sweepingCursorSpeedTextField(%rip), %rcx
000000000000ed31	movq	(%rbx,%rcx), %rdi
000000000000ed35	movq	0x256dc(%rip), %rsi     ## Objc selector ref: setStringValue:
000000000000ed3c	movq	%rax, %rdx
000000000000ed3f	callq	*%r15
000000000000ed42	movq	_OBJC_IVAR_$_UAPSwitchViewController._sweepingCursorSpeedStepper(%rip), %rax
000000000000ed49	movq	(%rbx,%rax), %rdi
000000000000ed4d	movq	0x25a5c(%rip), %rsi     ## Objc selector ref: setDoubleValue:
000000000000ed54	movsd	-0x30(%rbp), %xmm0
000000000000ed59	callq	*%r15
000000000000ed5c	movsd	-0x28(%rbp), %xmm0
000000000000ed61	movsd	0x19617(%rip), %xmm1
000000000000ed69	ucomisd	%xmm0, %xmm1
000000000000ed6d	ja	0xed79
000000000000ed6f	movss	0x195a9(%rip), %xmm1
000000000000ed77	jmp	0xed80
000000000000ed79	xorps	%xmm1, %xmm1
000000000000ed7c	cvtsd2ss	%xmm0, %xmm1
000000000000ed80	xorps	%xmm0, %xmm0
000000000000ed83	ucomisd	-0x20(%rbp), %xmm0
000000000000ed88	xorps	%xmm0, %xmm0
000000000000ed8b	ja	0xed90
000000000000ed8d	movaps	%xmm1, %xmm0
000000000000ed90	callq	0x1e7ae                 ## symbol stub for: _UASwitchSetSweepingCursorSpeed
000000000000ed95	movq	0x2598c(%rip), %rsi     ## Objc selector ref: startListeningForChanges
000000000000ed9c	movq	%rbx, %rdi
000000000000ed9f	movq	%r15, %rax
000000000000eda2	addq	$0x18, %rsp
000000000000eda6	popq	%rbx
000000000000eda7	popq	%r14
000000000000eda9	popq	%r15
000000000000edab	popq	%rbp
000000000000edac	jmpq	*%rax
000000000000edae	pushq	%rbp
000000000000edaf	movq	%rsp, %rbp
000000000000edb2	pushq	%r15
000000000000edb4	pushq	%r14
000000000000edb6	pushq	%rbx
000000000000edb7	subq	$0x18, %rsp
000000000000edbb	movsd	%xmm0, -0x20(%rbp)
000000000000edc0	movq	%rdi, %rbx
000000000000edc3	movq	0x25956(%rip), %rsi     ## Objc selector ref: stopListeningForChanges
000000000000edca	movq	0x1a62f(%rip), %r15     ## Objc message: +[NSNumber stopListeningForChanges]
000000000000edd1	callq	*%r15
000000000000edd4	movsd	-0x20(%rbp), %xmm2
000000000000edd9	minsd	0x19597(%rip), %xmm2
000000000000ede1	movsd	%xmm2, -0x28(%rbp)
000000000000ede6	movsd	0x19582(%rip), %xmm1
000000000000edee	movaps	%xmm1, %xmm0
000000000000edf1	maxsd	%xmm2, %xmm0
000000000000edf5	movsd	%xmm0, -0x30(%rbp)
000000000000edfa	movq	_OBJC_IVAR_$_UAPSwitchViewController._secondsFormatter(%rip), %rax
000000000000ee01	movq	(%rbx,%rax), %r14
000000000000ee05	movq	0x26754(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_NSNumber
000000000000ee0c	movq	0x25c4d(%rip), %rsi     ## Objc selector ref: numberWithDouble:
000000000000ee13	callq	*%r15
000000000000ee16	movq	0x25afb(%rip), %rsi     ## Objc selector ref: stringFromNumber:
000000000000ee1d	movq	%r14, %rdi
000000000000ee20	movq	%rax, %rdx
000000000000ee23	callq	*%r15
000000000000ee26	movq	_OBJC_IVAR_$_UAPSwitchViewController._autoScanPanelSpeedTextField(%rip), %rcx
000000000000ee2d	movq	(%rbx,%rcx), %rdi
000000000000ee31	movq	0x255e0(%rip), %rsi     ## Objc selector ref: setStringValue:
000000000000ee38	movq	%rax, %rdx
000000000000ee3b	callq	*%r15
000000000000ee3e	movq	_OBJC_IVAR_$_UAPSwitchViewController._autoScanPanelSpeedStepper(%rip), %rax
000000000000ee45	movq	(%rbx,%rax), %rdi
000000000000ee49	movq	0x25960(%rip), %rsi     ## Objc selector ref: setDoubleValue:
000000000000ee50	movsd	-0x30(%rbp), %xmm0
000000000000ee55	callq	*%r15
000000000000ee58	movsd	-0x20(%rbp), %xmm0
000000000000ee5d	movsd	0x19513(%rip), %xmm1
000000000000ee65	ucomisd	%xmm0, %xmm1
000000000000ee69	ja	0xee75
000000000000ee6b	movss	0x194d5(%rip), %xmm0
000000000000ee73	jmp	0xee79
000000000000ee75	cvtsd2ss	%xmm0, %xmm0
000000000000ee79	movsd	0x194ef(%rip), %xmm1
000000000000ee81	ucomisd	-0x28(%rbp), %xmm1
000000000000ee86	jbe	0xee90
000000000000ee88	movss	0x194bc(%rip), %xmm0
000000000000ee90	callq	0x1e6fa                 ## symbol stub for: _UASwitchAutoScanSetPanelInterval
000000000000ee95	movq	0x2588c(%rip), %rsi     ## Objc selector ref: startListeningForChanges
000000000000ee9c	movq	%rbx, %rdi
000000000000ee9f	movq	%r15, %rax
000000000000eea2	addq	$0x18, %rsp
000000000000eea6	popq	%rbx
000000000000eea7	popq	%r14
000000000000eea9	popq	%r15
000000000000eeab	popq	%rbp
000000000000eeac	jmpq	*%rax
000000000000eeae	pushq	%rbp
000000000000eeaf	movq	%rsp, %rbp
000000000000eeb2	pushq	%r15
000000000000eeb4	pushq	%r14
000000000000eeb6	pushq	%rbx
000000000000eeb7	subq	$0x18, %rsp
000000000000eebb	movsd	%xmm0, -0x20(%rbp)
000000000000eec0	movq	%rdi, %rbx
000000000000eec3	movq	0x25856(%rip), %rsi     ## Objc selector ref: stopListeningForChanges
000000000000eeca	movq	0x1a52f(%rip), %r15     ## Objc message: +[NSNumber stopListeningForChanges]
000000000000eed1	callq	*%r15
000000000000eed4	movsd	-0x20(%rbp), %xmm2
000000000000eed9	minsd	0x194a7(%rip), %xmm2
000000000000eee1	movsd	%xmm2, -0x28(%rbp)
000000000000eee6	movsd	0x19442(%rip), %xmm1
000000000000eeee	movaps	%xmm1, %xmm0
000000000000eef1	maxsd	%xmm2, %xmm0
000000000000eef5	movsd	%xmm0, -0x30(%rbp)
000000000000eefa	movq	_OBJC_IVAR_$_UAPSwitchViewController._secondsFormatter(%rip), %rax
000000000000ef01	movq	(%rbx,%rax), %r14
000000000000ef05	movq	0x26654(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_NSNumber
000000000000ef0c	movq	0x25b4d(%rip), %rsi     ## Objc selector ref: numberWithDouble:
000000000000ef13	callq	*%r15
000000000000ef16	movq	0x259fb(%rip), %rsi     ## Objc selector ref: stringFromNumber:
000000000000ef1d	movq	%r14, %rdi
000000000000ef20	movq	%rax, %rdx
000000000000ef23	callq	*%r15
000000000000ef26	movq	_OBJC_IVAR_$_UAPSwitchViewController._holdBeforeRepeatDurationTextField(%rip), %rcx
000000000000ef2d	movq	(%rbx,%rcx), %rdi
000000000000ef31	movq	0x254e0(%rip), %rsi     ## Objc selector ref: setStringValue:
000000000000ef38	movq	%rax, %rdx
000000000000ef3b	callq	*%r15
000000000000ef3e	movq	_OBJC_IVAR_$_UAPSwitchViewController._holdBeforeRepeatDurationStepper(%rip), %rax
000000000000ef45	movq	(%rbx,%rax), %rdi
000000000000ef49	movq	0x25860(%rip), %rsi     ## Objc selector ref: setDoubleValue:
000000000000ef50	movsd	-0x30(%rbp), %xmm0
000000000000ef55	callq	*%r15
000000000000ef58	movsd	-0x20(%rbp), %xmm0
000000000000ef5d	movsd	0x19423(%rip), %xmm1
000000000000ef65	ucomisd	%xmm0, %xmm1
000000000000ef69	ja	0xef75
000000000000ef6b	movss	0x193dd(%rip), %xmm0
000000000000ef73	jmp	0xef79
000000000000ef75	cvtsd2ss	%xmm0, %xmm0
000000000000ef79	movsd	0x193af(%rip), %xmm1
000000000000ef81	ucomisd	-0x28(%rbp), %xmm1
000000000000ef86	jbe	0xef90
000000000000ef88	movss	0x193c4(%rip), %xmm0
000000000000ef90	callq	0x1e78a                 ## symbol stub for: _UASwitchSetHoldBeforeRepeatDuration
000000000000ef95	movq	0x2578c(%rip), %rsi     ## Objc selector ref: startListeningForChanges
000000000000ef9c	movq	%rbx, %rdi
000000000000ef9f	movq	%r15, %rax
000000000000efa2	addq	$0x18, %rsp
000000000000efa6	popq	%rbx
000000000000efa7	popq	%r14
000000000000efa9	popq	%r15
000000000000efab	popq	%rbp
000000000000efac	jmpq	*%rax
000000000000efae	pushq	%rbp
000000000000efaf	movq	%rsp, %rbp
000000000000efb2	pushq	%r15
000000000000efb4	pushq	%r14
000000000000efb6	pushq	%rbx
000000000000efb7	pushq	%rax
000000000000efb8	movq	%rdi, %r14
000000000000efbb	movq	0x25aa6(%rip), %rsi     ## Objc selector ref: object
000000000000efc2	movq	0x1a437(%rip), %r15     ## Objc message: +[NSNumber object]
000000000000efc9	movq	%rdx, %rdi
000000000000efcc	callq	*%r15
000000000000efcf	movq	%rax, %rbx
000000000000efd2	movq	0x25a77(%rip), %rsi     ## Objc selector ref: doubleValue
000000000000efd9	movq	%rbx, %rdi
000000000000efdc	callq	*%r15
000000000000efdf	movq	_OBJC_IVAR_$_UAPSwitchViewController._hideAfterDelayTextField(%rip), %rax
000000000000efe6	cmpq	(%r14,%rax), %rbx
000000000000efea	je	0xf052
000000000000efec	movq	_OBJC_IVAR_$_UAPSwitchViewController._minimumPressDurationTextField(%rip), %rax
000000000000eff3	cmpq	(%r14,%rax), %rbx
000000000000eff7	je	0xf05b
000000000000eff9	movq	_OBJC_IVAR_$_UAPSwitchViewController._coalesceIntervalTextField(%rip), %rax
000000000000f000	cmpq	(%r14,%rax), %rbx
000000000000f004	je	0xf064
000000000000f006	movq	_OBJC_IVAR_$_UAPSwitchViewController._firstItemDelayTextField(%rip), %rax
000000000000f00d	cmpq	(%r14,%rax), %rbx
000000000000f011	je	0xf06d
000000000000f013	movq	_OBJC_IVAR_$_UAPSwitchViewController._autoScanPanelSpeedTextField(%rip), %rax
000000000000f01a	cmpq	(%r14,%rax), %rbx
000000000000f01e	je	0xf076
000000000000f020	movq	_OBJC_IVAR_$_UAPSwitchViewController._autoScanElementSpeedTextField(%rip), %rax
000000000000f027	cmpq	(%r14,%rax), %rbx
000000000000f02b	je	0xf07f
000000000000f02d	movq	_OBJC_IVAR_$_UAPSwitchViewController._sweepingCursorSpeedTextField(%rip), %rax
000000000000f034	cmpq	(%r14,%rax), %rbx
000000000000f038	je	0xf088
000000000000f03a	movq	_OBJC_IVAR_$_UAPSwitchViewController._holdBeforeRepeatDurationTextField(%rip), %rax
000000000000f041	cmpq	(%r14,%rax), %rbx
000000000000f045	je	0xf091
000000000000f047	addq	$0x8, %rsp
000000000000f04b	popq	%rbx
000000000000f04c	popq	%r14
000000000000f04e	popq	%r15
000000000000f050	popq	%rbp
000000000000f051	retq
000000000000f052	movq	0x25857(%rip), %rsi     ## Objc selector ref: setHideAfterDelay:
000000000000f059	jmp	0xf098
000000000000f05b	movq	0x2585e(%rip), %rsi     ## Objc selector ref: setMinimumPressDuration:
000000000000f062	jmp	0xf098
000000000000f064	movq	0x2584d(%rip), %rsi     ## Objc selector ref: setCoalesceInterval:
000000000000f06b	jmp	0xf098
000000000000f06d	movq	0x25854(%rip), %rsi     ## Objc selector ref: setFirstItemDelay:
000000000000f074	jmp	0xf098
000000000000f076	movq	0x2585b(%rip), %rsi     ## Objc selector ref: setAutoScanPanelStepInterval:
000000000000f07d	jmp	0xf098
000000000000f07f	movq	0x2584a(%rip), %rsi     ## Objc selector ref: setAutoScanElementStepInterval:
000000000000f086	jmp	0xf098
000000000000f088	movq	0x25851(%rip), %rsi     ## Objc selector ref: setSweepingCursorSpeed:
000000000000f08f	jmp	0xf098
000000000000f091	movq	0x25850(%rip), %rsi     ## Objc selector ref: setMinimumPressBeforeRepeatDuration:
000000000000f098	movq	%r14, %rdi
000000000000f09b	addq	$0x8, %rsp
000000000000f09f	popq	%rbx
000000000000f0a0	popq	%r14
000000000000f0a2	popq	%r15
000000000000f0a4	popq	%rbp
000000000000f0a5	jmpq	*0x1a355(%rip)          ## Objc message: -[%rdi setMinimumPressBeforeRepeatDuration:]
000000000000f0ab	pushq	%rbp
000000000000f0ac	movq	%rsp, %rbp
000000000000f0af	pushq	%r15
000000000000f0b1	pushq	%r14
000000000000f0b3	pushq	%r12
000000000000f0b5	pushq	%rbx
000000000000f0b6	subq	$0x10, %rsp
000000000000f0ba	movq	%rdi, %rbx
000000000000f0bd	movq	_OBJC_IVAR_$_UAPSwitchViewController._switchAssignDeviceInputWindow(%rip), %r15
000000000000f0c4	movq	(%rbx,%r15), %rdi
000000000000f0c8	movq	0x259a1(%rip), %rsi     ## Objc selector ref: isVisible
000000000000f0cf	callq	*0x1a32b(%rip)          ## Objc message: -[%rdi isVisible]
000000000000f0d5	testb	%al, %al
000000000000f0d7	jne	0xf140
000000000000f0d9	movq	(%rbx,%r15), %rdi
000000000000f0dd	movq	0x25994(%rip), %rsi     ## Objc selector ref: enableCapture:
000000000000f0e4	movq	0x1a315(%rip), %r12     ## Objc message: -[%rdi enableCapture:]
000000000000f0eb	movl	$0x1, %edx
000000000000f0f0	callq	*%r12
000000000000f0f3	movq	0x19fe6(%rip), %rax     ## literal pool symbol address: _NSApp
000000000000f0fa	movq	(%rax), %r14
000000000000f0fd	movq	(%rbx,%r15), %r15
000000000000f101	movq	0x252b8(%rip), %rsi     ## Objc selector ref: view
000000000000f108	movq	%rbx, %rdi
000000000000f10b	callq	*%r12
000000000000f10e	movq	0x252b3(%rip), %rsi     ## Objc selector ref: window
000000000000f115	movq	%rax, %rdi
000000000000f118	callq	*%r12
000000000000f11b	movq	0x2595e(%rip), %r9      ## Objc selector ref: _switchAssignmentSheetDidEnd:returnCode:contextInfo:
000000000000f122	movq	0x2589f(%rip), %rsi     ## Objc selector ref: beginSheet:modalForWindow:modalDelegate:didEndSelector:contextInfo:
000000000000f129	movq	$0x0, (%rsp)
000000000000f131	movq	%r14, %rdi
000000000000f134	movq	%r15, %rdx
000000000000f137	movq	%rax, %rcx
000000000000f13a	movq	%rbx, %r8
000000000000f13d	callq	*%r12
000000000000f140	addq	$0x10, %rsp
000000000000f144	popq	%rbx
000000000000f145	popq	%r12
000000000000f147	popq	%r14
000000000000f149	popq	%r15
000000000000f14b	popq	%rbp
000000000000f14c	retq
000000000000f14d	pushq	%rbp
000000000000f14e	movq	%rsp, %rbp
000000000000f151	pushq	%r15
000000000000f153	pushq	%r14
000000000000f155	pushq	%rbx
000000000000f156	pushq	%rax
000000000000f157	movq	%rdx, %r14
000000000000f15a	movq	%rdi, %rbx
000000000000f15d	movq	_OBJC_IVAR_$_UAPSwitchViewController._switchAssignDeviceInputWindow(%rip), %rax
000000000000f164	movq	(%rbx,%rax), %rdi
000000000000f168	movq	0x25909(%rip), %rsi     ## Objc selector ref: enableCapture:
000000000000f16f	movq	0x1a28a(%rip), %r15     ## Objc message: -[%rdi enableCapture:]
000000000000f176	xorl	%edx, %edx
000000000000f178	callq	*%r15
000000000000f17b	movq	0x2524e(%rip), %rsi     ## Objc selector ref: orderOut:
000000000000f182	movq	%r14, %rdi
000000000000f185	movq	%rbx, %rdx
000000000000f188	callq	*%r15
000000000000f18b	movq	0x256f6(%rip), %rsi     ## Objc selector ref: _updateUIForSelection
000000000000f192	movq	%rbx, %rdi
000000000000f195	movq	%r15, %rax
000000000000f198	addq	$0x8, %rsp
000000000000f19c	popq	%rbx
000000000000f19d	popq	%r14
000000000000f19f	popq	%r15
000000000000f1a1	popq	%rbp
000000000000f1a2	jmpq	*%rax
000000000000f1a4	pushq	%rbp
000000000000f1a5	movq	%rsp, %rbp
000000000000f1a8	movq	%rdi, %rax
000000000000f1ab	movq	0x2521e(%rip), %rsi     ## Objc selector ref: orderOut:
000000000000f1b2	movq	%rdx, %rdi
000000000000f1b5	movq	%rax, %rdx
000000000000f1b8	popq	%rbp
000000000000f1b9	jmpq	*0x1a241(%rip)          ## Objc message: -[%rdi orderOut:]
000000000000f1bf	pushq	%rbp
000000000000f1c0	movq	%rsp, %rbp
000000000000f1c3	pushq	%r15
000000000000f1c5	pushq	%r14
000000000000f1c7	pushq	%r13
000000000000f1c9	pushq	%r12
000000000000f1cb	pushq	%rbx
000000000000f1cc	subq	$0x118, %rsp            ## imm = 0x118
000000000000f1d3	movq	%rdx, %r15
000000000000f1d6	movq	%rdi, %r14
000000000000f1d9	movq	%r14, -0x108(%rbp)
000000000000f1e0	movq	0x1a171(%rip), %rax     ## literal pool symbol address: ___stack_chk_guard
000000000000f1e7	movq	(%rax), %rax
000000000000f1ea	movq	%rax, -0x30(%rbp)
000000000000f1ee	movq	0x25893(%rip), %rsi     ## Objc selector ref: switchInputs
000000000000f1f5	movq	0x1a204(%rip), %r12     ## Objc message: -[%rdi switchInputs]
000000000000f1fc	callq	*%r12
000000000000f1ff	movq	%rax, -0x110(%rbp)
000000000000f206	movq	0x25883(%rip), %rsi     ## Objc selector ref: actionKey
000000000000f20d	movq	%r15, %rdi
000000000000f210	callq	*%r12
000000000000f213	movq	%rax, %r13
000000000000f216	movq	%r13, -0x118(%rbp)
000000000000f21d	movq	0x257d4(%rip), %rsi     ## Objc selector ref: deviceSettings
000000000000f224	movq	%r15, %rdi
000000000000f227	callq	*%r12
000000000000f22a	movq	%rax, %rbx
000000000000f22d	movq	%rbx, -0x128(%rbp)
000000000000f234	movq	0x2581d(%rip), %rsi     ## Objc selector ref: _switchActionsForActionKey:
000000000000f23b	movq	%r14, %rdi
000000000000f23e	movq	%r13, %rdx
000000000000f241	callq	*%r12
000000000000f244	movq	0x19fed(%rip), %rcx     ## literal pool symbol address: _UASwitchActionsKey
000000000000f24b	movq	(%rcx), %rcx
000000000000f24e	movq	0x24fcb(%rip), %rsi     ## Objc selector ref: setObject:forKey:
000000000000f255	movq	%rbx, %rdi
000000000000f258	movq	%rax, %rdx
000000000000f25b	callq	*%r12
000000000000f25e	movq	0x25833(%rip), %rsi     ## Objc selector ref: index
000000000000f265	movq	%r15, %rdi
000000000000f268	callq	*%r12
000000000000f26b	movq	%rax, %r15
000000000000f26e	movq	0x24f53(%rip), %rsi     ## Objc selector ref: objectForKey:
000000000000f275	movq	-0x110(%rbp), %rdi
000000000000f27c	movq	%r13, %rdx
000000000000f27f	callq	*%r12
000000000000f282	movq	%rax, %r14
000000000000f285	xorl	%ebx, %ebx
000000000000f287	testq	%r15, %r15
000000000000f28a	js	0xf2e1
000000000000f28c	movq	_OBJC_IVAR_$_UAPSwitchViewController._switchInputEntities(%rip), %rax
000000000000f293	movq	-0x108(%rbp), %r13
000000000000f29a	movq	(%r13,%rax), %rdi
000000000000f29f	movq	0x250ca(%rip), %rsi     ## Objc selector ref: objectAtIndex:
000000000000f2a6	movq	%r15, %rdx
000000000000f2a9	callq	*%r12
000000000000f2ac	movq	%rax, %rbx
000000000000f2af	movq	0x25742(%rip), %rsi     ## Objc selector ref: deviceSettings
000000000000f2b6	movq	%rbx, %rdi
000000000000f2b9	callq	*%r12
000000000000f2bc	movq	%rax, -0xf8(%rbp)
000000000000f2c3	movq	0x257c6(%rip), %rsi     ## Objc selector ref: actionKey
000000000000f2ca	movq	%rbx, %rdi
000000000000f2cd	callq	*%r12
000000000000f2d0	movq	%rax, %rbx
000000000000f2d3	movb	$0x1, %al
000000000000f2d5	movq	%rax, -0x100(%rbp)
000000000000f2dc	movq	%r13, %r12
000000000000f2df	jmp	0xf2fa
000000000000f2e1	xorl	%eax, %eax
000000000000f2e3	movq	%rax, -0xf8(%rbp)
000000000000f2ea	xorl	%eax, %eax
000000000000f2ec	movq	%rax, -0x100(%rbp)
000000000000f2f3	movq	-0x108(%rbp), %r12
000000000000f2fa	movq	0x26257(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_NSMutableArray
000000000000f301	movq	0x24e60(%rip), %rsi     ## Objc selector ref: alloc
000000000000f308	callq	*0x1a0f2(%rip)          ## Objc message: +[NSMutableArray alloc]
000000000000f30e	movq	%rax, %rdx
000000000000f311	testq	%r14, %r14
000000000000f314	je	0xf3f0
000000000000f31a	movq	0x25787(%rip), %rsi     ## Objc selector ref: initWithArray:
000000000000f321	movq	%rdx, %rdi
000000000000f324	movq	%r14, %rdx
000000000000f327	callq	*0x1a0d3(%rip)          ## Objc message: -[%rdi initWithArray:]
000000000000f32d	movq	%rax, %r14
000000000000f330	testq	%r15, %r15
000000000000f333	js	0xf43e
000000000000f339	movq	0x24db0(%rip), %rsi     ## Objc selector ref: isEqualToString:
000000000000f340	movq	%rbx, %rdi
000000000000f343	movq	%rbx, -0x130(%rbp)
000000000000f34a	movq	-0x118(%rbp), %rdx
000000000000f351	callq	*0x1a0a9(%rip)          ## Objc message: -[%rdi isEqualToString:]
000000000000f357	testb	%al, %al
000000000000f359	je	0xf468
000000000000f35f	cmpq	$0x0, -0xf8(%rbp)
000000000000f367	je	0xf468
000000000000f36d	movq	%r12, -0x108(%rbp)
000000000000f374	movq	0x24fed(%rip), %rsi     ## Objc selector ref: count
000000000000f37b	movq	%r14, %rbx
000000000000f37e	movq	%rbx, %rdi
000000000000f381	callq	*0x1a079(%rip)          ## Objc message: -[%rdi count]
000000000000f387	testq	%rax, %rax
000000000000f38a	je	0xf489
000000000000f390	movq	0x25139(%rip), %r15     ## Objc selector ref: isEqual:
000000000000f397	movq	0x24fca(%rip), %r13     ## Objc selector ref: count
000000000000f39e	xorl	%r12d, %r12d
000000000000f3a1	movq	%rbx, %rdi
000000000000f3a4	movq	0x24fc5(%rip), %rsi     ## Objc selector ref: objectAtIndex:
000000000000f3ab	movq	%r12, %rdx
000000000000f3ae	movq	0x1a04b(%rip), %rax     ## Objc message: -[%rdi objectAtIndex:]
000000000000f3b5	movq	%rbx, %r14
000000000000f3b8	movq	%rax, %rbx
000000000000f3bb	callq	*%rbx
000000000000f3bd	movq	%rax, %rdi
000000000000f3c0	movq	%r15, %rsi
000000000000f3c3	movq	-0xf8(%rbp), %rdx
000000000000f3ca	callq	*%rbx
000000000000f3cc	testb	%al, %al
000000000000f3ce	jne	0xf718
000000000000f3d4	incq	%r12
000000000000f3d7	movq	%r14, %rdi
000000000000f3da	movq	%r13, %rsi
000000000000f3dd	callq	*0x1a01d(%rip)          ## Objc message: -[%rdi objectAtIndex:]
000000000000f3e3	cmpq	%rax, %r12
000000000000f3e6	movq	%r14, %rbx
000000000000f3e9	jb	0xf3a1
000000000000f3eb	jmp	0xf489
000000000000f3f0	movq	%rbx, -0x130(%rbp)
000000000000f3f7	movq	%r12, -0x108(%rbp)
000000000000f3fe	movq	0x2569b(%rip), %rsi     ## Objc selector ref: initWithObjects:
000000000000f405	xorl	%ecx, %ecx
000000000000f407	xorl	%eax, %eax
000000000000f409	movq	%rdx, %rdi
000000000000f40c	movq	-0x128(%rbp), %rdx
000000000000f413	movq	0x19fe6(%rip), %rbx     ## Objc message: -[%rdi initWithObjects:]
000000000000f41a	callq	*%rbx
000000000000f41c	movq	%rax, %r14
000000000000f41f	movq	0x24dfa(%rip), %rsi     ## Objc selector ref: setObject:forKey:
000000000000f426	movq	-0x110(%rbp), %rdi
000000000000f42d	movq	%r14, %rdx
000000000000f430	movq	-0x118(%rbp), %rcx
000000000000f437	callq	*%rbx
000000000000f439	movq	%r14, %rbx
000000000000f43c	jmp	0xf489
000000000000f43e	movq	%rbx, -0x130(%rbp)
000000000000f445	movq	%r12, -0x108(%rbp)
000000000000f44c	movq	0x24f2d(%rip), %rsi     ## Objc selector ref: addObject:
000000000000f453	movq	%r14, %rdi
000000000000f456	movq	-0x128(%rbp), %rdx
000000000000f45d	callq	*0x19f9d(%rip)          ## Objc message: -[%rdi addObject:]
000000000000f463	movq	%r14, %rbx
000000000000f466	jmp	0xf489
000000000000f468	movq	%r12, -0x108(%rbp)
000000000000f46f	movq	0x24f0a(%rip), %rsi     ## Objc selector ref: addObject:
000000000000f476	movq	%r14, %rbx
000000000000f479	movq	%rbx, %rdi
000000000000f47c	movq	-0x128(%rbp), %rdx
000000000000f483	callq	*0x19f77(%rip)          ## Objc message: -[%rdi addObject:]
000000000000f489	movq	-0x100(%rbp), %rax
000000000000f490	testb	%al, %al
000000000000f492	movq	-0x108(%rbp), %r14
000000000000f499	je	0xf5c6
000000000000f49f	movq	0x24d22(%rip), %rsi     ## Objc selector ref: objectForKey:
000000000000f4a6	movq	-0x110(%rbp), %rdi
000000000000f4ad	movq	-0x130(%rbp), %rdx
000000000000f4b4	callq	*0x19f46(%rip)          ## Objc message: -[%rdi objectForKey:]
000000000000f4ba	movq	%rax, %r15
000000000000f4bd	testq	%r15, %r15
000000000000f4c0	movq	0x19e91(%rip), %r12     ## literal pool symbol address: ___stack_chk_guard
000000000000f4c7	je	0xf657
000000000000f4cd	movq	%rbx, -0x120(%rbp)
000000000000f4d4	xorps	%xmm0, %xmm0
000000000000f4d7	movaps	%xmm0, -0xc0(%rbp)
000000000000f4de	movaps	%xmm0, -0xd0(%rbp)
000000000000f4e5	movaps	%xmm0, -0xe0(%rbp)
000000000000f4ec	movaps	%xmm0, -0xf0(%rbp)
000000000000f4f3	movq	0x24c16(%rip), %rsi     ## Objc selector ref: countByEnumeratingWithState:objects:count:
000000000000f4fa	leaq	-0xf0(%rbp), %rdx
000000000000f501	leaq	-0xb0(%rbp), %rcx
000000000000f508	movl	$0x10, %r8d
000000000000f50e	movq	%r15, %rdi
000000000000f511	callq	*0x19ee9(%rip)          ## Objc message: -[%rdi countByEnumeratingWithState:objects:count:]
000000000000f517	movq	%rax, %r13
000000000000f51a	testq	%r13, %r13
000000000000f51d	je	0xf5ba
000000000000f523	movq	-0xe0(%rbp), %rax
000000000000f52a	movq	(%rax), %r12
000000000000f52d	movq	0x24f9c(%rip), %rbx     ## Objc selector ref: isEqual:
000000000000f534	movq	%r15, -0x100(%rbp)
000000000000f53b	xorl	%r15d, %r15d
000000000000f53e	movq	-0xe0(%rbp), %rax
000000000000f545	cmpq	%r12, (%rax)
000000000000f548	je	0xf556
000000000000f54a	movq	-0x100(%rbp), %rdi
000000000000f551	callq	0x1e886                 ## symbol stub for: _objc_enumerationMutation
000000000000f556	movq	-0xe8(%rbp), %rax
000000000000f55d	movq	(%rax,%r15,8), %r14
000000000000f561	movq	%r14, %rdi
000000000000f564	movq	%rbx, %rsi
000000000000f567	movq	-0xf8(%rbp), %rdx
000000000000f56e	callq	*0x19e8c(%rip)          ## Objc message: -[%rdi isEqual:]
000000000000f574	testb	%al, %al
000000000000f576	jne	0xf5e3
000000000000f578	incq	%r15
000000000000f57b	cmpq	%r13, %r15
000000000000f57e	jb	0xf53e
000000000000f580	movl	$0x10, %r8d
000000000000f586	movq	-0x100(%rbp), %r15
000000000000f58d	movq	%r15, %rdi
000000000000f590	movq	0x24b79(%rip), %rsi     ## Objc selector ref: countByEnumeratingWithState:objects:count:
000000000000f597	leaq	-0xf0(%rbp), %rdx
000000000000f59e	leaq	-0xb0(%rbp), %rcx
000000000000f5a5	callq	*0x19e55(%rip)          ## Objc message: -[%rdi countByEnumeratingWithState:objects:count:]
000000000000f5ab	movq	%rax, %r13
000000000000f5ae	testq	%r13, %r13
000000000000f5b1	jne	0xf534
000000000000f5b3	movq	0x19d9e(%rip), %r12     ## literal pool symbol address: ___stack_chk_guard
000000000000f5ba	movq	-0x108(%rbp), %r14
000000000000f5c1	jmp	0xf65e
000000000000f5c6	movq	%rbx, -0x120(%rbp)
000000000000f5cd	movq	0x19e2c(%rip), %rbx     ## Objc message: -[%rdi countByEnumeratingWithState:objects:count:]
000000000000f5d4	movq	%rbx, %r13
000000000000f5d7	movq	0x19d7a(%rip), %r12     ## literal pool symbol address: ___stack_chk_guard
000000000000f5de	jmp	0xf6a3
000000000000f5e3	movq	0x25f6e(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_NSMutableArray
000000000000f5ea	movq	0x24b77(%rip), %rsi     ## Objc selector ref: alloc
000000000000f5f1	movq	0x19e08(%rip), %rbx     ## Objc message: +[NSMutableArray alloc]
000000000000f5f8	movq	%rbx, %r13
000000000000f5fb	callq	*%r13
000000000000f5fe	movq	0x254a3(%rip), %rsi     ## Objc selector ref: initWithArray:
000000000000f605	movq	%rax, %rdi
000000000000f608	movq	-0x100(%rbp), %rdx
000000000000f60f	callq	*%r13
000000000000f612	movq	%rax, %r15
000000000000f615	movq	0x24b14(%rip), %rsi     ## Objc selector ref: removeObject:
000000000000f61c	movq	%r15, %rdi
000000000000f61f	movq	%r14, %rdx
000000000000f622	callq	*%r13
000000000000f625	movq	0x24d3c(%rip), %rsi     ## Objc selector ref: count
000000000000f62c	movq	%r15, %rdi
000000000000f62f	callq	*%r13
000000000000f632	testq	%rax, %rax
000000000000f635	je	0xf66a
000000000000f637	movq	0x24be2(%rip), %rsi     ## Objc selector ref: setObject:forKey:
000000000000f63e	movq	-0x110(%rbp), %rdi
000000000000f645	movq	%r15, %rdx
000000000000f648	movq	-0x130(%rbp), %rcx
000000000000f64f	callq	*0x19dab(%rip)          ## Objc message: -[%rdi setObject:forKey:]
000000000000f655	jmp	0xf685
000000000000f657	movq	%rbx, -0x120(%rbp)
000000000000f65e	movq	0x19d9b(%rip), %rbx     ## Objc message: -[%rdi setObject:forKey:]
000000000000f665	movq	%rbx, %r13
000000000000f668	jmp	0xf6a3
000000000000f66a	movq	0x24bbf(%rip), %rsi     ## Objc selector ref: removeObjectForKey:
000000000000f671	movq	-0x110(%rbp), %rdi
000000000000f678	movq	-0x130(%rbp), %rdx
000000000000f67f	callq	*0x19d7b(%rip)          ## Objc message: -[%rdi removeObjectForKey:]
000000000000f685	movq	0x19ccc(%rip), %r12     ## literal pool symbol address: ___stack_chk_guard
000000000000f68c	movq	-0x108(%rbp), %r14
000000000000f693	movq	0x24ab6(%rip), %rsi     ## Objc selector ref: release
000000000000f69a	movq	%r15, %rdi
000000000000f69d	callq	*0x19d5d(%rip)          ## Objc message: -[%rdi release]
000000000000f6a3	movq	0x24b76(%rip), %rsi     ## Objc selector ref: setObject:forKey:
000000000000f6aa	movq	-0x110(%rbp), %r15
000000000000f6b1	movq	%r15, %rdi
000000000000f6b4	movq	-0x120(%rbp), %rbx
000000000000f6bb	movq	%rbx, %rdx
000000000000f6be	movq	-0x118(%rbp), %rcx
000000000000f6c5	callq	*%r13
000000000000f6c8	movq	0x24a81(%rip), %rsi     ## Objc selector ref: release
000000000000f6cf	movq	%rbx, %rdi
000000000000f6d2	callq	*%r13
000000000000f6d5	movq	0x25044(%rip), %rsi     ## Objc selector ref: stopListeningForChanges
000000000000f6dc	movq	%r14, %rdi
000000000000f6df	callq	*%r13
000000000000f6e2	movq	%r15, %rdi
000000000000f6e5	callq	0x1e76c                 ## symbol stub for: _UASwitchSetDeviceInputs
000000000000f6ea	movq	0x25037(%rip), %rsi     ## Objc selector ref: startListeningForChanges
000000000000f6f1	movq	%r14, %rdi
000000000000f6f4	callq	*%r13
000000000000f6f7	movq	(%r12), %rax
000000000000f6fb	cmpq	-0x30(%rbp), %rax
000000000000f6ff	jne	0xf713
000000000000f701	addq	$0x118, %rsp            ## imm = 0x118
000000000000f708	popq	%rbx
000000000000f709	popq	%r12
000000000000f70b	popq	%r13
000000000000f70d	popq	%r14
000000000000f70f	popq	%r15
000000000000f711	popq	%rbp
000000000000f712	retq
000000000000f713	callq	0x1e8b6                 ## symbol stub for: ___stack_chk_fail
000000000000f718	movq	0x25391(%rip), %rsi     ## Objc selector ref: replaceObjectAtIndex:withObject:
000000000000f71f	movq	%r14, %rdi
000000000000f722	movq	%r14, -0x120(%rbp)
000000000000f729	movq	%r12, %rdx
000000000000f72c	movq	-0x128(%rbp), %rcx
000000000000f733	callq	*0x19cc7(%rip)          ## Objc message: -[%rdi replaceObjectAtIndex:withObject:]
000000000000f739	movq	-0x108(%rbp), %r14
000000000000f740	jmp	0xf5cd
000000000000f745	pushq	%rbp
000000000000f746	movq	%rsp, %rbp
000000000000f749	pushq	%r15
000000000000f74b	pushq	%r14
000000000000f74d	pushq	%rbx
000000000000f74e	pushq	%rax
000000000000f74f	movq	%rdi, %r14
000000000000f752	movq	_OBJC_IVAR_$_UAPSwitchViewController._switchSwitchesTableView(%rip), %rax
000000000000f759	movq	(%r14,%rax), %rdi
000000000000f75d	movq	0x25354(%rip), %rsi     ## Objc selector ref: clickedRow
000000000000f764	callq	*0x19c96(%rip)          ## Objc message: -[%rdi clickedRow]
000000000000f76a	movq	%rax, %rbx
000000000000f76d	testq	%rbx, %rbx
000000000000f770	js	0xf7c3
000000000000f772	movq	_OBJC_IVAR_$_UAPSwitchViewController._switchInputEntities(%rip), %r15
000000000000f779	movq	(%r14,%r15), %rdi
000000000000f77d	movq	0x24be4(%rip), %rsi     ## Objc selector ref: count
000000000000f784	callq	*0x19c76(%rip)          ## Objc message: -[%rdi count]
000000000000f78a	cmpq	%rax, %rbx
000000000000f78d	jae	0xf7c3
000000000000f78f	movq	(%r14,%r15), %rdi
000000000000f793	movq	0x24bd6(%rip), %rsi     ## Objc selector ref: objectAtIndex:
000000000000f79a	movq	0x19c5f(%rip), %r15     ## Objc message: -[%rdi objectAtIndex:]
000000000000f7a1	movq	%rbx, %rdx
000000000000f7a4	callq	*%r15
000000000000f7a7	movq	0x25242(%rip), %rsi     ## Objc selector ref: _configureDeviceInputsForActionEntity:
000000000000f7ae	movq	%r14, %rdi
000000000000f7b1	movq	%rax, %rdx
000000000000f7b4	movq	%r15, %rax
000000000000f7b7	addq	$0x8, %rsp
000000000000f7bb	popq	%rbx
000000000000f7bc	popq	%r14
000000000000f7be	popq	%r15
000000000000f7c0	popq	%rbp
000000000000f7c1	jmpq	*%rax
000000000000f7c3	addq	$0x8, %rsp
000000000000f7c7	popq	%rbx
000000000000f7c8	popq	%r14
000000000000f7ca	popq	%r15
000000000000f7cc	popq	%rbp
000000000000f7cd	retq
000000000000f7ce	pushq	%rbp
000000000000f7cf	movq	%rsp, %rbp
000000000000f7d2	pushq	%r15
000000000000f7d4	pushq	%r14
000000000000f7d6	pushq	%r12
000000000000f7d8	pushq	%rbx
000000000000f7d9	movq	%rdx, %rbx
000000000000f7dc	movq	%rdi, %r14
000000000000f7df	movq	0x251f2(%rip), %rsi     ## Objc selector ref: isHeader
000000000000f7e6	movq	%rbx, %rdi
000000000000f7e9	callq	*0x19c11(%rip)          ## Objc message: -[%rdi isHeader]
000000000000f7ef	testb	%al, %al
000000000000f7f1	je	0xf7fc
000000000000f7f3	popq	%rbx
000000000000f7f4	popq	%r12
000000000000f7f6	popq	%r14
000000000000f7f8	popq	%r15
000000000000f7fa	popq	%rbp
000000000000f7fb	retq
000000000000f7fc	movq	_OBJC_IVAR_$_UAPSwitchViewController._editingSwitchInputEntity(%rip), %r15
000000000000f803	movq	(%r14,%r15), %rdi
000000000000f807	movq	0x25232(%rip), %rsi     ## Objc selector ref: clear
000000000000f80e	movq	0x19beb(%rip), %r12     ## Objc message: -[%rdi clear]
000000000000f815	callq	*%r12
000000000000f818	movq	(%r14,%r15), %rdi
000000000000f81c	movq	0x25225(%rip), %rsi     ## Objc selector ref: setWithEntity:
000000000000f823	movq	%rbx, %rdx
000000000000f826	callq	*%r12
000000000000f829	movq	0x25290(%rip), %rsi     ## Objc selector ref: _updateDeviceInputWarningLabel
000000000000f830	movq	%r14, %rdi
000000000000f833	callq	*%r12
000000000000f836	movq	0x2528b(%rip), %rsi     ## Objc selector ref: _displaySwitchEditView
000000000000f83d	movq	%r14, %rdi
000000000000f840	callq	*%r12
000000000000f843	movq	0x25286(%rip), %rsi     ## Objc selector ref: _showAssignmentSheet
000000000000f84a	movq	%r14, %rdi
000000000000f84d	movq	%r12, %rax
000000000000f850	popq	%rbx
000000000000f851	popq	%r12
000000000000f853	popq	%r14
000000000000f855	popq	%r15
000000000000f857	popq	%rbp
000000000000f858	jmpq	*%rax
000000000000f85a	pushq	%rbp
000000000000f85b	movq	%rsp, %rbp
000000000000f85e	pushq	%r15
000000000000f860	pushq	%r14
000000000000f862	pushq	%r13
000000000000f864	pushq	%r12
000000000000f866	pushq	%rbx
000000000000f867	pushq	%rax
000000000000f868	movq	%rdi, %rbx
000000000000f86b	movq	_OBJC_IVAR_$_UAPSwitchViewController._switchAssignDeviceInputStackView(%rip), %r15
000000000000f872	movq	(%rbx,%r15), %rdi
000000000000f876	movq	0x2525b(%rip), %rsi     ## Objc selector ref: views
000000000000f87d	movq	0x19b7c(%rip), %r13     ## Objc message: -[%rdi views]
000000000000f884	callq	*%r13
000000000000f887	movq	0x2499a(%rip), %rsi     ## Objc selector ref: copy
000000000000f88e	movq	%rax, %rdi
000000000000f891	callq	*%r13
000000000000f894	movq	%rax, %r14
000000000000f897	movq	_OBJC_IVAR_$_UAPSwitchViewController._deviceAssignmentConflictView(%rip), %r12
000000000000f89e	movq	(%rbx,%r12), %rdx
000000000000f8a2	movq	0x24877(%rip), %rsi     ## Objc selector ref: containsObject:
000000000000f8a9	movq	%r14, %rdi
000000000000f8ac	callq	*%r13
000000000000f8af	testb	%al, %al
000000000000f8b1	je	0xf8c8
000000000000f8b3	movq	(%rbx,%r15), %rdi
000000000000f8b7	movq	(%rbx,%r12), %rdx
000000000000f8bb	movq	0x2521e(%rip), %rsi     ## Objc selector ref: removeView:
000000000000f8c2	callq	*0x19b38(%rip)          ## Objc message: -[%rdi removeView:]
000000000000f8c8	movq	_OBJC_IVAR_$_UAPSwitchViewController._deviceAssignmentOptionsView(%rip), %r12
000000000000f8cf	movq	(%rbx,%r12), %rdx
000000000000f8d3	movq	0x24846(%rip), %rsi     ## Objc selector ref: containsObject:
000000000000f8da	movq	%r14, %rdi
000000000000f8dd	callq	*0x19b1d(%rip)          ## Objc message: -[%rdi containsObject:]
000000000000f8e3	testb	%al, %al
000000000000f8e5	je	0xf8fc
000000000000f8e7	movq	(%rbx,%r15), %rdi
000000000000f8eb	movq	(%rbx,%r12), %rdx
000000000000f8ef	movq	0x251ea(%rip), %rsi     ## Objc selector ref: removeView:
000000000000f8f6	callq	*0x19b04(%rip)          ## Objc message: -[%rdi removeView:]
000000000000f8fc	movq	_OBJC_IVAR_$_UAPSwitchViewController._deviceAssignmentConfirmationView2(%rip), %r12
000000000000f903	movq	(%rbx,%r12), %rdx
000000000000f907	movq	0x24812(%rip), %rsi     ## Objc selector ref: containsObject:
000000000000f90e	movq	%r14, %rdi
000000000000f911	callq	*0x19ae9(%rip)          ## Objc message: -[%rdi containsObject:]
000000000000f917	testb	%al, %al
000000000000f919	je	0xf930
000000000000f91b	movq	(%rbx,%r15), %rdi
000000000000f91f	movq	(%rbx,%r12), %rdx
000000000000f923	movq	0x251b6(%rip), %rsi     ## Objc selector ref: removeView:
000000000000f92a	callq	*0x19ad0(%rip)          ## Objc message: -[%rdi removeView:]
000000000000f930	movq	_OBJC_IVAR_$_UAPSwitchViewController._deviceAssignmentConfirmationView1(%rip), %r12
000000000000f937	movq	(%rbx,%r12), %rdx
000000000000f93b	movq	0x247de(%rip), %rsi     ## Objc selector ref: containsObject:
000000000000f942	movq	%r14, %rdi
000000000000f945	callq	*0x19ab5(%rip)          ## Objc message: -[%rdi containsObject:]
000000000000f94b	testb	%al, %al
000000000000f94d	jne	0xf969
000000000000f94f	movq	(%rbx,%r15), %rdi
000000000000f953	movq	(%rbx,%r12), %rdx
000000000000f957	movq	0x2518a(%rip), %rsi     ## Objc selector ref: addView:inGravity:
000000000000f95e	movl	$0x1, %ecx
000000000000f963	callq	*0x19a97(%rip)          ## Objc message: -[%rdi addView:inGravity:]
000000000000f969	movq	_OBJC_IVAR_$_UAPSwitchViewController._pressSwitchInstructionView(%rip), %r12
000000000000f970	movq	(%rbx,%r12), %rdx
000000000000f974	movq	0x247a5(%rip), %rsi     ## Objc selector ref: containsObject:
000000000000f97b	movq	%r14, %rdi
000000000000f97e	callq	*0x19a7c(%rip)          ## Objc message: -[%rdi containsObject:]
000000000000f984	testb	%al, %al
000000000000f986	jne	0xf9a5
000000000000f988	movq	(%rbx,%r15), %rdi
000000000000f98c	movq	(%rbx,%r12), %rdx
000000000000f990	movq	0x25159(%rip), %rsi     ## Objc selector ref: insertView:atIndex:inGravity:
000000000000f997	xorl	%ecx, %ecx
000000000000f999	movl	$0x1, %r8d
000000000000f99f	callq	*0x19a5b(%rip)          ## Objc message: -[%rdi insertView:atIndex:inGravity:]
000000000000f9a5	movq	0x247a4(%rip), %rsi     ## Objc selector ref: release
000000000000f9ac	movq	%r14, %rdi
000000000000f9af	callq	*%r13
000000000000f9b2	movq	_OBJC_IVAR_$_UAPSwitchViewController._deviceAssignmentInstructionLabel(%rip), %rax
000000000000f9b9	movq	(%rbx,%rax), %r14
000000000000f9bd	movq	0x25b3c(%rip), %r15     ## Objc class ref: _OBJC_CLASS_$_NSBundle
000000000000f9c4	movq	0x25b3d(%rip), %rdi     ## Objc class ref: UniversalAccessPref
000000000000f9cb	movq	0x246ee(%rip), %rsi     ## Objc selector ref: class
000000000000f9d2	callq	*%r13
000000000000f9d5	movq	0x247dc(%rip), %rsi     ## Objc selector ref: bundleForClass:
000000000000f9dc	movq	%r15, %rdi
000000000000f9df	movq	%rax, %rdx
000000000000f9e2	callq	*%r13
000000000000f9e5	movq	0x247d4(%rip), %rsi     ## Objc selector ref: localizedStringForKey:value:table:
000000000000f9ec	leaq	0x1b07d(%rip), %rdx     ## Objc cfstring ref: @"switch.deviceAssigment.instruction"
000000000000f9f3	leaq	0x1a716(%rip), %rcx     ## Objc cfstring ref: @""
000000000000f9fa	xorl	%r8d, %r8d
000000000000f9fd	movq	%rax, %rdi
000000000000fa00	callq	*%r13
000000000000fa03	movq	0x24a0e(%rip), %rsi     ## Objc selector ref: setStringValue:
000000000000fa0a	movq	%r14, %rdi
000000000000fa0d	movq	%rax, %rdx
000000000000fa10	callq	*%r13
000000000000fa13	movq	_OBJC_IVAR_$_UAPSwitchViewController._deviceAssigmentBusyIndicator(%rip), %rax
000000000000fa1a	movq	(%rbx,%rax), %rdi
000000000000fa1e	movq	0x250d3(%rip), %rsi     ## Objc selector ref: startAnimation:
000000000000fa25	xorl	%edx, %edx
000000000000fa27	callq	*%r13
000000000000fa2a	movq	_OBJC_IVAR_$_UAPSwitchViewController._deviceAssignmentReassignButton(%rip), %rax
000000000000fa31	movq	(%rbx,%rax), %rdi
000000000000fa35	movq	0x249bc(%rip), %rsi     ## Objc selector ref: setHidden:
000000000000fa3c	movl	$0x1, %edx
000000000000fa41	callq	*%r13
000000000000fa44	movq	_OBJC_IVAR_$_UAPSwitchViewController._deviceInputWarningLabel(%rip), %rax
000000000000fa4b	movq	(%rbx,%rax), %rdi
000000000000fa4f	movq	0x249a2(%rip), %rsi     ## Objc selector ref: setHidden:
000000000000fa56	movl	$0x1, %edx
000000000000fa5b	callq	*%r13
000000000000fa5e	movq	_OBJC_IVAR_$_UAPSwitchViewController._deviceAssignmentDoneButton(%rip), %rax
000000000000fa65	movq	(%rbx,%rax), %rdi
000000000000fa69	movq	0x24cd0(%rip), %rsi     ## Objc selector ref: setEnabled:
000000000000fa70	xorl	%edx, %edx
000000000000fa72	callq	*%r13
000000000000fa75	movq	_OBJC_IVAR_$_UAPSwitchViewController._deviceActionPopupButton(%rip), %rax
000000000000fa7c	movq	(%rbx,%rax), %rdi
000000000000fa80	movq	0x24cb9(%rip), %rsi     ## Objc selector ref: setEnabled:
000000000000fa87	movl	$0x1, %edx
000000000000fa8c	callq	*%r13
000000000000fa8f	movq	_OBJC_IVAR_$_UAPSwitchViewController._switchAssignDeviceInputWindow(%rip), %r14
000000000000fa96	movq	(%rbx,%r14), %rdi
000000000000fa9a	movq	_OBJC_IVAR_$_UAPSwitchViewController._deviceAssignmentCancelButton(%rip), %rax
000000000000faa1	movq	(%rbx,%rax), %rdx
000000000000faa5	movq	0x25054(%rip), %rsi     ## Objc selector ref: makeFirstResponder:
000000000000faac	callq	*%r13
000000000000faaf	movq	(%rbx,%r14), %rdi
000000000000fab3	movq	0x2504e(%rip), %rsi     ## Objc selector ref: setIsCapturingEvents:
000000000000faba	movl	$0x1, %edx
000000000000fabf	movq	%r13, %rax
000000000000fac2	addq	$0x8, %rsp
000000000000fac6	popq	%rbx
000000000000fac7	popq	%r12
000000000000fac9	popq	%r13
000000000000facb	popq	%r14
000000000000facd	popq	%r15
000000000000facf	popq	%rbp
000000000000fad0	jmpq	*%rax
000000000000fad2	pushq	%rbp
000000000000fad3	movq	%rsp, %rbp
000000000000fad6	pushq	%r15
000000000000fad8	pushq	%r14
000000000000fada	pushq	%r13
000000000000fadc	pushq	%r12
000000000000fade	pushq	%rbx
000000000000fadf	pushq	%rax
000000000000fae0	movq	%rdi, %rbx
000000000000fae3	movq	_OBJC_IVAR_$_UAPSwitchViewController._switchAssignDeviceInputStackView(%rip), %r15
000000000000faea	movq	(%rbx,%r15), %rdi
000000000000faee	movq	0x24fe3(%rip), %rsi     ## Objc selector ref: views
000000000000faf5	movq	0x19904(%rip), %r13     ## Objc message: +[UniversalAccessPref views]
000000000000fafc	callq	*%r13
000000000000faff	movq	0x24722(%rip), %rsi     ## Objc selector ref: copy
000000000000fb06	movq	%rax, %rdi
000000000000fb09	callq	*%r13
000000000000fb0c	movq	%rax, %r14
000000000000fb0f	movq	_OBJC_IVAR_$_UAPSwitchViewController._deviceAssignmentConfirmationView1(%rip), %r12
000000000000fb16	movq	(%rbx,%r12), %rdx
000000000000fb1a	movq	0x245ff(%rip), %rsi     ## Objc selector ref: containsObject:
000000000000fb21	movq	%r14, %rdi
000000000000fb24	callq	*%r13
000000000000fb27	testb	%al, %al
000000000000fb29	je	0xfb40
000000000000fb2b	movq	(%rbx,%r15), %rdi
000000000000fb2f	movq	(%rbx,%r12), %rdx
000000000000fb33	movq	0x24fa6(%rip), %rsi     ## Objc selector ref: removeView:
000000000000fb3a	callq	*0x198c0(%rip)          ## Objc message: -[%rdi removeView:]
000000000000fb40	movq	_OBJC_IVAR_$_UAPSwitchViewController._pressSwitchInstructionView(%rip), %r12
000000000000fb47	movq	(%rbx,%r12), %rdx
000000000000fb4b	movq	0x245ce(%rip), %rsi     ## Objc selector ref: containsObject:
000000000000fb52	movq	%r14, %rdi
000000000000fb55	callq	*0x198a5(%rip)          ## Objc message: -[%rdi containsObject:]
000000000000fb5b	testb	%al, %al
000000000000fb5d	je	0xfb74
000000000000fb5f	movq	(%rbx,%r15), %rdi
000000000000fb63	movq	(%rbx,%r12), %rdx
000000000000fb67	movq	0x24f72(%rip), %rsi     ## Objc selector ref: removeView:
000000000000fb6e	callq	*0x1988c(%rip)          ## Objc message: -[%rdi removeView:]
000000000000fb74	movq	_OBJC_IVAR_$_UAPSwitchViewController._deviceAssignmentOptionsView(%rip), %r12
000000000000fb7b	movq	(%rbx,%r12), %rdx
000000000000fb7f	movq	0x2459a(%rip), %rsi     ## Objc selector ref: containsObject:
000000000000fb86	movq	%r14, %rdi
000000000000fb89	callq	*0x19871(%rip)          ## Objc message: -[%rdi containsObject:]
000000000000fb8f	testb	%al, %al
000000000000fb91	je	0xfba8
000000000000fb93	movq	(%rbx,%r15), %rdi
000000000000fb97	movq	(%rbx,%r12), %rdx
000000000000fb9b	movq	0x24f3e(%rip), %rsi     ## Objc selector ref: removeView:
000000000000fba2	callq	*0x19858(%rip)          ## Objc message: -[%rdi removeView:]
000000000000fba8	movq	_OBJC_IVAR_$_UAPSwitchViewController._deviceAssignmentConfirmationView2(%rip), %r12
000000000000fbaf	movq	(%rbx,%r12), %rdx
000000000000fbb3	movq	0x24566(%rip), %rsi     ## Objc selector ref: containsObject:
000000000000fbba	movq	%r14, %rdi
000000000000fbbd	callq	*0x1983d(%rip)          ## Objc message: -[%rdi containsObject:]
000000000000fbc3	testb	%al, %al
000000000000fbc5	jne	0xfbe1
000000000000fbc7	movq	(%rbx,%r15), %rdi
000000000000fbcb	movq	(%rbx,%r12), %rdx
000000000000fbcf	movq	0x24f12(%rip), %rsi     ## Objc selector ref: addView:inGravity:
000000000000fbd6	movl	$0x1, %ecx
000000000000fbdb	callq	*0x1981f(%rip)          ## Objc message: -[%rdi addView:inGravity:]
000000000000fbe1	movq	_OBJC_IVAR_$_UAPSwitchViewController._deviceAssignmentConflictView(%rip), %r12
000000000000fbe8	movq	(%rbx,%r12), %rdx
000000000000fbec	movq	0x2452d(%rip), %rsi     ## Objc selector ref: containsObject:
000000000000fbf3	movq	%r14, %rdi
000000000000fbf6	callq	*0x19804(%rip)          ## Objc message: -[%rdi containsObject:]
000000000000fbfc	testb	%al, %al
000000000000fbfe	jne	0xfc1d
000000000000fc00	movq	(%rbx,%r15), %rdi
000000000000fc04	movq	(%rbx,%r12), %rdx
000000000000fc08	movq	0x24ee1(%rip), %rsi     ## Objc selector ref: insertView:atIndex:inGravity:
000000000000fc0f	xorl	%ecx, %ecx
000000000000fc11	movl	$0x1, %r8d
000000000000fc17	callq	*0x197e3(%rip)          ## Objc message: -[%rdi insertView:atIndex:inGravity:]
000000000000fc1d	movq	0x2452c(%rip), %rsi     ## Objc selector ref: release
000000000000fc24	movq	%r14, %rdi
000000000000fc27	callq	*%r13
000000000000fc2a	movq	_OBJC_IVAR_$_UAPSwitchViewController._deviceAssignmentConflictOKButton(%rip), %rax
000000000000fc31	movq	(%rbx,%rax), %rdi
000000000000fc35	movq	0x24a2c(%rip), %rsi     ## Objc selector ref: becomeFirstResponder
000000000000fc3c	movq	%r13, %rax
000000000000fc3f	addq	$0x8, %rsp
000000000000fc43	popq	%rbx
000000000000fc44	popq	%r12
000000000000fc46	popq	%r13
000000000000fc48	popq	%r14
000000000000fc4a	popq	%r15
000000000000fc4c	popq	%rbp
000000000000fc4d	jmpq	*%rax
000000000000fc4f	pushq	%rbp
000000000000fc50	movq	%rsp, %rbp
000000000000fc53	pushq	%r15
000000000000fc55	pushq	%r14
000000000000fc57	pushq	%rbx
000000000000fc58	pushq	%rax
000000000000fc59	movq	%rdx, %r14
000000000000fc5c	leaq	_kActionSelectKey(%rip), %rax
000000000000fc63	movq	(%rax), %rdx
000000000000fc66	movq	0x24483(%rip), %rsi     ## Objc selector ref: isEqualToString:
000000000000fc6d	movq	%r14, %rdi
000000000000fc70	callq	*0x1978a(%rip)          ## Objc message: -[%rdi isEqualToString:]
000000000000fc76	movl	$0x4, %r15d
000000000000fc7c	testb	%al, %al
000000000000fc7e	jne	0xfd17
000000000000fc84	leaq	_kActionStepKey(%rip), %rax
000000000000fc8b	movq	(%rax), %rdx
000000000000fc8e	movq	0x2445b(%rip), %rsi     ## Objc selector ref: isEqualToString:
000000000000fc95	movq	%r14, %rdi
000000000000fc98	callq	*0x19762(%rip)          ## Objc message: -[%rdi isEqualToString:]
000000000000fc9e	movl	$0x8, %r15d
000000000000fca4	testb	%al, %al
000000000000fca6	jne	0xfd17
000000000000fca8	leaq	_kActionRunKey(%rip), %rax
000000000000fcaf	movq	(%rax), %rdx
000000000000fcb2	movq	0x24437(%rip), %rsi     ## Objc selector ref: isEqualToString:
000000000000fcb9	movq	%r14, %rdi
000000000000fcbc	callq	*0x1973e(%rip)          ## Objc message: -[%rdi isEqualToString:]
000000000000fcc2	movl	$0x2, %r15d
000000000000fcc8	testb	%al, %al
000000000000fcca	jne	0xfd17
000000000000fccc	leaq	_kActionStopKey(%rip), %rax
000000000000fcd3	movq	(%rax), %rdx
000000000000fcd6	movq	0x24413(%rip), %rsi     ## Objc selector ref: isEqualToString:
000000000000fcdd	movq	%r14, %rdi
000000000000fce0	callq	*0x1971a(%rip)          ## Objc message: -[%rdi isEqualToString:]
000000000000fce6	movl	$0x10, %r15d
000000000000fcec	testb	%al, %al
000000000000fcee	jne	0xfd17
000000000000fcf0	leaq	_kActionCustomKey(%rip), %rax
000000000000fcf7	movq	(%rax), %rdx
000000000000fcfa	movq	0x243ef(%rip), %rsi     ## Objc selector ref: isEqualToString:
000000000000fd01	movq	%r14, %rdi
000000000000fd04	callq	*0x196f6(%rip)          ## Objc message: -[%rdi isEqualToString:]
000000000000fd0a	testb	%al, %al
000000000000fd0c	setne	%al
000000000000fd0f	movzbl	%al, %r15d
000000000000fd13	shlq	$0x5, %r15
000000000000fd17	movq	0x258b2(%rip), %rdi     ## Objc class ref: UASwitchActionMaskActionValueTransformer
000000000000fd1e	movq	0x2439b(%rip), %rsi     ## Objc selector ref: class
000000000000fd25	movq	0x196d4(%rip), %r14     ## Objc message: +[UASwitchActionMaskActionValueTransformer class]
000000000000fd2c	callq	*%r14
000000000000fd2f	movq	%rax, %rdi
000000000000fd32	callq	0x1e856                 ## symbol stub for: _NSStringFromClass
000000000000fd37	movq	0x2589a(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_NSValueTransformer
000000000000fd3e	movq	0x24dcb(%rip), %rsi     ## Objc selector ref: valueTransformerForName:
000000000000fd45	movq	%rax, %rdx
000000000000fd48	callq	*%r14
000000000000fd4b	movq	%rax, %rbx
000000000000fd4e	movq	0x2580b(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_NSNumber
000000000000fd55	movq	0x249ac(%rip), %rsi     ## Objc selector ref: numberWithUnsignedInteger:
000000000000fd5c	movq	%r15, %rdx
000000000000fd5f	callq	*%r14
000000000000fd62	movq	0x24daf(%rip), %rsi     ## Objc selector ref: transformedValue:
000000000000fd69	movq	%rbx, %rdi
000000000000fd6c	movq	%rax, %rdx
000000000000fd6f	movq	%r14, %rax
000000000000fd72	addq	$0x8, %rsp
000000000000fd76	popq	%rbx
000000000000fd77	popq	%r14
000000000000fd79	popq	%r15
000000000000fd7b	popq	%rbp
000000000000fd7c	jmpq	*%rax
000000000000fd7e	pushq	%rbp
000000000000fd7f	movq	%rsp, %rbp
000000000000fd82	pushq	%r14
000000000000fd84	pushq	%rbx
000000000000fd85	movq	%rdi, %rbx
000000000000fd88	movq	_OBJC_IVAR_$_UAPSwitchViewController._editingSwitchInputEntity(%rip), %rax
000000000000fd8f	movq	(%rbx,%rax), %rdi
000000000000fd93	movq	0x24ca6(%rip), %rsi     ## Objc selector ref: clear
000000000000fd9a	movq	0x1965f(%rip), %r14     ## Objc message: +[NSNumber clear]
000000000000fda1	callq	*%r14
000000000000fda4	movq	0x24c85(%rip), %rsi     ## Objc selector ref: _resetInputAssignment
000000000000fdab	movq	%rbx, %rdi
000000000000fdae	callq	*%r14
000000000000fdb1	movq	0x24d18(%rip), %rsi     ## Objc selector ref: _showAssignmentSheet
000000000000fdb8	movq	%rbx, %rdi
000000000000fdbb	movq	%r14, %rax
000000000000fdbe	popq	%rbx
000000000000fdbf	popq	%r14
000000000000fdc1	popq	%rbp
000000000000fdc2	jmpq	*%rax
000000000000fdc4	pushq	%rbp
000000000000fdc5	movq	%rsp, %rbp
000000000000fdc8	pushq	%r15
000000000000fdca	pushq	%r14
000000000000fdcc	pushq	%r13
000000000000fdce	pushq	%r12
000000000000fdd0	pushq	%rbx
000000000000fdd1	subq	$0xf8, %rsp
000000000000fdd8	movq	%rdx, %r13
000000000000fddb	movq	%rdi, %r14
000000000000fdde	movq	0x19573(%rip), %rbx     ## literal pool symbol address: ___stack_chk_guard
000000000000fde5	movq	(%rbx), %rax
000000000000fde8	movq	%rax, -0x30(%rbp)
000000000000fdec	testq	%r13, %r13
000000000000fdef	je	0x10108
000000000000fdf5	movq	0x24d24(%rip), %rsi     ## Objc selector ref: isRequired
000000000000fdfc	movq	%r13, %rdi
000000000000fdff	callq	*0x195fb(%rip)          ## Objc message: -[%rdi isRequired]
000000000000fe05	testb	%al, %al
000000000000fe07	jne	0x10108
000000000000fe0d	movq	0x24c7c(%rip), %rsi     ## Objc selector ref: actionKey
000000000000fe14	movq	%r13, %rdi
000000000000fe17	callq	*0x195e3(%rip)          ## Objc message: -[%rdi actionKey]
000000000000fe1d	testq	%rax, %rax
000000000000fe20	je	0x10108
000000000000fe26	movq	0x24bcb(%rip), %rsi     ## Objc selector ref: deviceSettings
000000000000fe2d	movq	%r13, %rdi
000000000000fe30	callq	*0x195ca(%rip)          ## Objc message: -[%rdi deviceSettings]
000000000000fe36	movq	%rax, -0xf8(%rbp)
000000000000fe3d	testq	%rax, %rax
000000000000fe40	je	0x10108
000000000000fe46	movq	0x24c43(%rip), %rsi     ## Objc selector ref: actionKey
000000000000fe4d	movq	0x195ac(%rip), %r12     ## Objc message: -[%rdi actionKey]
000000000000fe54	movq	%r13, %rdi
000000000000fe57	callq	*%r12
000000000000fe5a	movq	0x243c7(%rip), %rsi     ## Objc selector ref: copy
000000000000fe61	movq	%rax, %rdi
000000000000fe64	callq	*%r12
000000000000fe67	movq	%rax, %r15
000000000000fe6a	movq	0x24c17(%rip), %rsi     ## Objc selector ref: switchInputs
000000000000fe71	movq	%r14, %rdi
000000000000fe74	movq	%r14, -0x108(%rbp)
000000000000fe7b	callq	*%r12
000000000000fe7e	movq	%rax, -0x118(%rbp)
000000000000fe85	movq	0x2433c(%rip), %rsi     ## Objc selector ref: objectForKey:
000000000000fe8c	movq	%rax, %rdi
000000000000fe8f	movq	%r15, %rdx
000000000000fe92	callq	*%r12
000000000000fe95	movq	%rax, %rbx
000000000000fe98	movq	0x256b9(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_NSMutableArray
000000000000fe9f	movq	0x242c2(%rip), %rsi     ## Objc selector ref: alloc
000000000000fea6	callq	*%r12
000000000000fea9	movq	0x24bf8(%rip), %rsi     ## Objc selector ref: initWithArray:
000000000000feb0	movq	%rax, %rdi
000000000000feb3	movq	%rbx, %rdx
000000000000feb6	callq	*%r12
000000000000feb9	movq	%rax, -0x100(%rbp)
000000000000fec0	xorps	%xmm0, %xmm0
000000000000fec3	movaps	%xmm0, -0xc0(%rbp)
000000000000feca	movaps	%xmm0, -0xd0(%rbp)
000000000000fed1	movaps	%xmm0, -0xe0(%rbp)
000000000000fed8	movaps	%xmm0, -0xf0(%rbp)
000000000000fedf	movq	0x2422a(%rip), %rsi     ## Objc selector ref: countByEnumeratingWithState:objects:count:
000000000000fee6	leaq	-0xf0(%rbp), %rdx
000000000000feed	leaq	-0xb0(%rbp), %rcx
000000000000fef4	movl	$0x10, %r8d
000000000000fefa	movq	%rbx, %rdi
000000000000fefd	callq	*%r12
000000000000ff00	movq	%rax, %r12
000000000000ff03	testq	%r12, %r12
000000000000ff06	je	0xffb0
000000000000ff0c	movq	%r13, -0x120(%rbp)
000000000000ff13	movq	%r15, -0x110(%rbp)
000000000000ff1a	movq	-0xe0(%rbp), %rax
000000000000ff21	movq	(%rax), %r13
000000000000ff24	xorl	%r14d, %r14d
000000000000ff27	movq	-0xe0(%rbp), %rax
000000000000ff2e	cmpq	%r13, (%rax)
000000000000ff31	je	0xff3b
000000000000ff33	movq	%rbx, %rdi
000000000000ff36	callq	0x1e886                 ## symbol stub for: _objc_enumerationMutation
000000000000ff3b	movq	-0xe8(%rbp), %rax
000000000000ff42	movq	(%rax,%r14,8), %r15
000000000000ff46	movq	%r15, %rdi
000000000000ff49	movq	0x24580(%rip), %rsi     ## Objc selector ref: isEqual:
000000000000ff50	movq	-0xf8(%rbp), %rdx
000000000000ff57	callq	*0x194a3(%rip)          ## Objc message: +[NSMutableArray isEqual:]
000000000000ff5d	testb	%al, %al
000000000000ff5f	jne	0xff97
000000000000ff61	incq	%r14
000000000000ff64	cmpq	%r12, %r14
000000000000ff67	jb	0xff27
000000000000ff69	movl	$0x10, %r8d
000000000000ff6f	movq	%rbx, %rdi
000000000000ff72	movq	0x24197(%rip), %rsi     ## Objc selector ref: countByEnumeratingWithState:objects:count:
000000000000ff79	leaq	-0xf0(%rbp), %rdx
000000000000ff80	leaq	-0xb0(%rbp), %rcx
000000000000ff87	callq	*0x19473(%rip)          ## Objc message: -[%rdi countByEnumeratingWithState:objects:count:]
000000000000ff8d	movq	%rax, %r12
000000000000ff90	testq	%r12, %r12
000000000000ff93	jne	0xff24
000000000000ff95	jmp	0xffbe
000000000000ff97	movq	0x24192(%rip), %rsi     ## Objc selector ref: removeObject:
000000000000ff9e	movq	-0x100(%rbp), %rdi
000000000000ffa5	movq	%r15, %rdx
000000000000ffa8	callq	*0x19452(%rip)          ## Objc message: -[%rdi removeObject:]
000000000000ffae	jmp	0xffbe
000000000000ffb0	movq	%r13, -0x120(%rbp)
000000000000ffb7	movq	%r15, -0x110(%rbp)
000000000000ffbe	movq	0x241c3(%rip), %rsi     ## Objc selector ref: nickname
000000000000ffc5	movq	-0xf8(%rbp), %rdi
000000000000ffcc	callq	*0x1942e(%rip)          ## Objc message: -[%rdi nickname]
000000000000ffd2	testq	%rax, %rax
000000000000ffd5	movq	-0x108(%rbp), %r15
000000000000ffdc	movq	-0x110(%rbp), %r13
000000000000ffe3	je	0x10000
000000000000ffe5	movq	_OBJC_IVAR_$_UAPSwitchViewController._defaultSwitchNames(%rip), %rcx
000000000000ffec	movq	(%r15,%rcx), %rdi
000000000000fff0	movq	0x24139(%rip), %rsi     ## Objc selector ref: removeObject:
000000000000fff7	movq	%rax, %rdx
000000000000fffa	callq	*0x19400(%rip)          ## Objc message: -[%rdi removeObject:]
0000000000010000	movq	0x24a91(%rip), %rsi     ## Objc selector ref: index
0000000000010007	movq	-0x120(%rbp), %rdi
000000000001000e	movq	0x193eb(%rip), %r12     ## Objc message: -[%rdi index]
0000000000010015	callq	*%r12
0000000000010018	movq	%rax, %rbx
000000000001001b	movq	_OBJC_IVAR_$_UAPSwitchViewController._switchInputEntities(%rip), %r14
0000000000010022	movq	(%r15,%r14), %rdi
0000000000010026	movq	0x2433b(%rip), %rsi     ## Objc selector ref: count
000000000001002d	callq	*%r12
0000000000010030	cmpq	%rax, %rbx
0000000000010033	jae	0x1004e
0000000000010035	testq	%rbx, %rbx
0000000000010038	jle	0x1004e
000000000001003a	movq	(%r15,%r14), %rdi
000000000001003e	movq	0x24ae3(%rip), %rsi     ## Objc selector ref: removeObjectAtIndex:
0000000000010045	movq	%rbx, %rdx
0000000000010048	callq	*0x193b2(%rip)          ## Objc message: -[%rdi removeObjectAtIndex:]
000000000001004e	movq	0x24313(%rip), %rsi     ## Objc selector ref: count
0000000000010055	movq	-0x100(%rbp), %rbx
000000000001005c	movq	%rbx, %rdi
000000000001005f	callq	*0x1939b(%rip)          ## Objc message: -[%rdi count]
0000000000010065	testq	%rax, %rax
0000000000010068	je	0x10089
000000000001006a	movq	0x241af(%rip), %rsi     ## Objc selector ref: setObject:forKey:
0000000000010071	movq	-0x118(%rbp), %r14
0000000000010078	movq	%r14, %rdi
000000000001007b	movq	%rbx, %rdx
000000000001007e	movq	%r13, %rcx
0000000000010081	callq	*0x19379(%rip)          ## Objc message: -[%rdi setObject:forKey:]
0000000000010087	jmp	0x100a3
0000000000010089	movq	0x241a0(%rip), %rsi     ## Objc selector ref: removeObjectForKey:
0000000000010090	movq	-0x118(%rbp), %r14
0000000000010097	movq	%r14, %rdi
000000000001009a	movq	%r13, %rdx
000000000001009d	callq	*0x1935d(%rip)          ## Objc message: -[%rdi removeObjectForKey:]
00000000000100a3	movq	%rbx, %rdi
00000000000100a6	movq	0x192ab(%rip), %rbx     ## literal pool symbol address: ___stack_chk_guard
00000000000100ad	movq	0x2409c(%rip), %rsi     ## Objc selector ref: release
00000000000100b4	callq	*%r12
00000000000100b7	movq	0x24092(%rip), %rsi     ## Objc selector ref: release
00000000000100be	movq	%r13, %rdi
00000000000100c1	callq	*%r12
00000000000100c4	movq	0x24655(%rip), %rsi     ## Objc selector ref: stopListeningForChanges
00000000000100cb	movq	%r15, %rdi
00000000000100ce	callq	*%r12
00000000000100d1	movq	%r14, %rdi
00000000000100d4	callq	0x1e76c                 ## symbol stub for: _UASwitchSetDeviceInputs
00000000000100d9	movq	0x24648(%rip), %rsi     ## Objc selector ref: startListeningForChanges
00000000000100e0	movq	%r15, %rdi
00000000000100e3	callq	*%r12
00000000000100e6	movq	0x24813(%rip), %rsi     ## Objc selector ref: _updateSwitchesTableModel
00000000000100ed	movq	%r15, %rdi
00000000000100f0	callq	*%r12
00000000000100f3	movq	_OBJC_IVAR_$_UAPSwitchViewController._switchSwitchesTableView(%rip), %rax
00000000000100fa	movq	(%r15,%rax), %rdi
00000000000100fe	movq	0x2451b(%rip), %rsi     ## Objc selector ref: reloadData
0000000000010105	callq	*%r12
0000000000010108	movq	(%rbx), %rax
000000000001010b	cmpq	-0x30(%rbp), %rax
000000000001010f	jne	0x10123
0000000000010111	addq	$0xf8, %rsp
0000000000010118	popq	%rbx
0000000000010119	popq	%r12
000000000001011b	popq	%r13
000000000001011d	popq	%r14
000000000001011f	popq	%r15
0000000000010121	popq	%rbp
0000000000010122	retq
0000000000010123	callq	0x1e8b6                 ## symbol stub for: ___stack_chk_fail
0000000000010128	pushq	%rbp
0000000000010129	movq	%rsp, %rbp
000000000001012c	pushq	%r15
000000000001012e	pushq	%r14
0000000000010130	pushq	%r13
0000000000010132	pushq	%r12
0000000000010134	pushq	%rbx
0000000000010135	subq	$0x38, %rsp
0000000000010139	movq	%rdi, %r13
000000000001013c	movq	_OBJC_IVAR_$_UAPSwitchViewController._editingSwitchInputEntity(%rip), %rbx
0000000000010143	movq	(%r13,%rbx), %rdi
0000000000010148	movq	0x24941(%rip), %rsi     ## Objc selector ref: actionKey
000000000001014f	movq	0x192aa(%rip), %r14     ## Objc message: -[%rdi actionKey]
0000000000010156	callq	*%r14
0000000000010159	movq	%rax, -0x58(%rbp)
000000000001015d	movq	(%r13,%rbx), %rdi
0000000000010162	movq	%r14, %rbx
0000000000010165	movq	0x249b4(%rip), %rsi     ## Objc selector ref: isRequired
000000000001016c	callq	*%rbx
000000000001016e	movb	%al, -0x59(%rbp)
0000000000010171	movq	_OBJC_IVAR_$_UAPSwitchViewController._switchAssignDeviceInputStackView(%rip), %r15
0000000000010178	movq	(%r13,%r15), %rdi
000000000001017d	movq	0x24954(%rip), %rsi     ## Objc selector ref: views
0000000000010184	callq	*%rbx
0000000000010186	movq	0x2409b(%rip), %rsi     ## Objc selector ref: copy
000000000001018d	movq	%rax, %rdi
0000000000010190	callq	*%rbx
0000000000010192	movq	%rax, %r12
0000000000010195	movq	_OBJC_IVAR_$_UAPSwitchViewController._pressSwitchInstructionView(%rip), %r14
000000000001019c	movq	(%r13,%r14), %rdx
00000000000101a1	movq	0x23f78(%rip), %rsi     ## Objc selector ref: containsObject:
00000000000101a8	movq	%r12, %rdi
00000000000101ab	callq	*%rbx
00000000000101ad	testb	%al, %al
00000000000101af	je	0x101c8
00000000000101b1	movq	(%r13,%r15), %rdi
00000000000101b6	movq	(%r13,%r14), %rdx
00000000000101bb	movq	0x2491e(%rip), %rsi     ## Objc selector ref: removeView:
00000000000101c2	callq	*0x19238(%rip)          ## Objc message: -[%rdi removeView:]
00000000000101c8	movq	_OBJC_IVAR_$_UAPSwitchViewController._deviceAssignmentConfirmationView2(%rip), %r14
00000000000101cf	movq	(%r13,%r14), %rdx
00000000000101d4	movq	0x23f45(%rip), %rsi     ## Objc selector ref: containsObject:
00000000000101db	movq	%r12, %rdi
00000000000101de	callq	*0x1921c(%rip)          ## Objc message: -[%rdi containsObject:]
00000000000101e4	testb	%al, %al
00000000000101e6	je	0x101ff
00000000000101e8	movq	(%r13,%r15), %rdi
00000000000101ed	movq	(%r13,%r14), %rdx
00000000000101f2	movq	0x248e7(%rip), %rsi     ## Objc selector ref: removeView:
00000000000101f9	callq	*0x19201(%rip)          ## Objc message: -[%rdi removeView:]
00000000000101ff	movq	_OBJC_IVAR_$_UAPSwitchViewController._deviceAssignmentConflictView(%rip), %r14
0000000000010206	movq	(%r13,%r14), %rdx
000000000001020b	movq	0x23f0e(%rip), %rsi     ## Objc selector ref: containsObject:
0000000000010212	movq	%r12, %rdi
0000000000010215	callq	*0x191e5(%rip)          ## Objc message: -[%rdi containsObject:]
000000000001021b	testb	%al, %al
000000000001021d	je	0x10236
000000000001021f	movq	(%r13,%r15), %rdi
0000000000010224	movq	(%r13,%r14), %rdx
0000000000010229	movq	0x248b0(%rip), %rsi     ## Objc selector ref: removeView:
0000000000010230	callq	*0x191ca(%rip)          ## Objc message: -[%rdi removeView:]
0000000000010236	movq	_OBJC_IVAR_$_UAPSwitchViewController._deviceAssignmentConfirmationView1(%rip), %r14
000000000001023d	movq	(%r13,%r14), %rdx
0000000000010242	movq	0x23ed7(%rip), %rsi     ## Objc selector ref: containsObject:
0000000000010249	movq	%r12, %rdi
000000000001024c	callq	*0x191ae(%rip)          ## Objc message: -[%rdi containsObject:]
0000000000010252	testb	%al, %al
0000000000010254	jne	0x10272
0000000000010256	movq	(%r13,%r15), %rdi
000000000001025b	movq	(%r13,%r14), %rdx
0000000000010260	movq	0x24881(%rip), %rsi     ## Objc selector ref: addView:inGravity:
0000000000010267	movl	$0x1, %ecx
000000000001026c	callq	*0x1918e(%rip)          ## Objc message: -[%rdi addView:inGravity:]
0000000000010272	movq	_OBJC_IVAR_$_UAPSwitchViewController._deviceAssignmentOptionsView(%rip), %r14
0000000000010279	movq	(%r13,%r14), %rdx
000000000001027e	movq	0x23e9b(%rip), %rsi     ## Objc selector ref: containsObject:
0000000000010285	movq	%r12, %rdi
0000000000010288	callq	*0x19172(%rip)          ## Objc message: -[%rdi containsObject:]
000000000001028e	testb	%al, %al
0000000000010290	jne	0x102b1
0000000000010292	movq	(%r13,%r15), %rdi
0000000000010297	movq	(%r13,%r14), %rdx
000000000001029c	movq	0x2484d(%rip), %rsi     ## Objc selector ref: insertView:atIndex:inGravity:
00000000000102a3	xorl	%ecx, %ecx
00000000000102a5	movl	$0x1, %r8d
00000000000102ab	callq	*0x1914f(%rip)          ## Objc message: -[%rdi insertView:atIndex:inGravity:]
00000000000102b1	movq	0x23e98(%rip), %rsi     ## Objc selector ref: release
00000000000102b8	movq	%r12, %rdi
00000000000102bb	callq	*%rbx
00000000000102bd	movq	_OBJC_IVAR_$_UAPSwitchViewController._editingSwitchInputEntity(%rip), %r15
00000000000102c4	movq	(%r13,%r15), %rdi
00000000000102c9	movq	0x24728(%rip), %rsi     ## Objc selector ref: deviceSettings
00000000000102d0	callq	*%rbx
00000000000102d2	movq	0x24857(%rip), %rsi     ## Objc selector ref: pressHoldOption
00000000000102d9	movq	%rax, %rdi
00000000000102dc	callq	*%rbx
00000000000102de	movq	0x23eeb(%rip), %rsi     ## Objc selector ref: unsignedIntegerValue
00000000000102e5	movq	%rax, %rdi
00000000000102e8	callq	*%rbx
00000000000102ea	movq	_OBJC_IVAR_$_UAPSwitchViewController._devicePressHoldOptionPopupButton(%rip), %rcx
00000000000102f1	movq	(%r13,%rcx), %rdi
00000000000102f6	movq	0x2419b(%rip), %rsi     ## Objc selector ref: selectItemAtIndex:
00000000000102fd	movq	%rax, %rdx
0000000000010300	callq	*%rbx
0000000000010302	cmpq	$0x0, -0x58(%rbp)
0000000000010307	je	0x10331
0000000000010309	movq	(%r13,%r15), %rdi
000000000001030e	movq	0x24823(%rip), %rsi     ## Objc selector ref: switchName
0000000000010315	callq	*%rbx
0000000000010317	movq	%rax, %r12
000000000001031a	movq	_OBJC_IVAR_$_UAPSwitchViewController._deviceAssignmentReassignButton(%rip), %rax
0000000000010321	movq	(%r13,%rax), %rdi
0000000000010326	movq	0x240cb(%rip), %rsi     ## Objc selector ref: setHidden:
000000000001032d	xorl	%edx, %edx
000000000001032f	jmp	0x1036e
0000000000010331	movq	_OBJC_IVAR_$_UAPSwitchViewController._defaultSwitchNames(%rip), %r14
0000000000010338	movq	(%r13,%r14), %rdi
000000000001033d	callq	_UAPNextNewSwitchName
0000000000010342	movq	%rax, %r12
0000000000010345	movq	(%r13,%r14), %rdi
000000000001034a	movq	0x2402f(%rip), %rsi     ## Objc selector ref: addObject:
0000000000010351	movq	%r12, %rdx
0000000000010354	callq	*%rbx
0000000000010356	movq	_OBJC_IVAR_$_UAPSwitchViewController._deviceAssignmentReassignButton(%rip), %rax
000000000001035d	movq	(%r13,%rax), %rdi
0000000000010362	movq	0x2408f(%rip), %rsi     ## Objc selector ref: setHidden:
0000000000010369	movl	$0x1, %edx
000000000001036e	callq	*%rbx
0000000000010370	testq	%r12, %r12
0000000000010373	leaq	0x19d96(%rip), %rdx     ## Objc cfstring ref: @""
000000000001037a	cmovneq	%r12, %rdx
000000000001037e	movq	_OBJC_IVAR_$_UAPSwitchViewController._deviceAssignmentNicknameField(%rip), %r14
0000000000010385	movq	(%r13,%r14), %rdi
000000000001038a	movq	0x24087(%rip), %rsi     ## Objc selector ref: setStringValue:
0000000000010391	callq	*%rbx
0000000000010393	movq	(%r13,%r14), %rdi
0000000000010398	movq	0x242c9(%rip), %rsi     ## Objc selector ref: becomeFirstResponder
000000000001039f	callq	*%rbx
00000000000103a1	movq	_OBJC_IVAR_$_UAPSwitchViewController._deviceActionPopupButton(%rip), %r12
00000000000103a8	movq	(%r13,%r12), %rdi
00000000000103ad	cmpb	$0x0, -0x59(%rbp)
00000000000103b1	sete	%al
00000000000103b4	movq	0x24385(%rip), %rsi     ## Objc selector ref: setEnabled:
00000000000103bb	movzbl	%al, %edx
00000000000103be	callq	*%rbx
00000000000103c0	movq	_OBJC_IVAR_$_UAPSwitchViewController._deviceAssignmentDoneButton(%rip), %rax
00000000000103c7	movq	(%r13,%rax), %rdi
00000000000103cc	movq	0x2436d(%rip), %rsi     ## Objc selector ref: setEnabled:
00000000000103d3	movl	$0x1, %edx
00000000000103d8	callq	*%rbx
00000000000103da	movq	_OBJC_IVAR_$_UAPSwitchViewController._deviceAssigmentBusyIndicator(%rip), %rax
00000000000103e1	movq	(%r13,%rax), %rdi
00000000000103e6	movq	0x24753(%rip), %rsi     ## Objc selector ref: stopAnimation:
00000000000103ed	xorl	%edx, %edx
00000000000103ef	callq	*%rbx
00000000000103f1	movq	(%r13,%r12), %rdi
00000000000103f6	movq	0x2474b(%rip), %rsi     ## Objc selector ref: menu
00000000000103fd	callq	*%rbx
00000000000103ff	movq	0x24162(%rip), %rsi     ## Objc selector ref: itemAtIndex:
0000000000010406	xorl	%edx, %edx
0000000000010408	movq	%rax, %rdi
000000000001040b	callq	*%rbx
000000000001040d	movq	0x23fe4(%rip), %rsi     ## Objc selector ref: setHidden:
0000000000010414	movl	$0x1, %edx
0000000000010419	movq	%rax, %rdi
000000000001041c	callq	*%rbx
000000000001041e	movq	_OBJC_IVAR_$_UAPSwitchViewController._switchAssignDeviceInputWindow(%rip), %rax
0000000000010425	movq	(%r13,%rax), %rdi
000000000001042a	movq	0x23e8f(%rip), %rsi     ## Objc selector ref: contentView
0000000000010431	callq	*%rbx
0000000000010433	testq	%rax, %rax
0000000000010436	je	0x1044d
0000000000010438	movq	0x24711(%rip), %rdx     ## Objc selector ref: frame
000000000001043f	leaq	-0x50(%rbp), %rdi
0000000000010443	movq	%rax, %rsi
0000000000010446	callq	0x1e892                 ## symbol stub for: _objc_msgSend_stret
000000000001044b	jmp	0x10458
000000000001044d	xorps	%xmm0, %xmm0
0000000000010450	movaps	%xmm0, -0x40(%rbp)
0000000000010454	movaps	%xmm0, -0x50(%rbp)
0000000000010458	cmpq	$0x0, -0x58(%rbp)
000000000001045d	je	0x104db
000000000001045f	movq	(%r13,%r15), %rdi
0000000000010464	movq	0x2458d(%rip), %rsi     ## Objc selector ref: deviceSettings
000000000001046b	callq	*%rbx
000000000001046d	movq	0x18dc4(%rip), %rcx     ## literal pool symbol address: _UASwitchActionsKey
0000000000010474	movq	(%rcx), %rdx
0000000000010477	movq	0x23d32(%rip), %rsi     ## Objc selector ref: valueForKey:
000000000001047e	movq	%rax, %rdi
0000000000010481	callq	*%rbx
0000000000010483	movq	%rax, %r14
0000000000010486	movq	0x23edb(%rip), %rsi     ## Objc selector ref: count
000000000001048d	movq	%r14, %rdi
0000000000010490	callq	*%rbx
0000000000010492	movq	%rax, %rcx
0000000000010495	xorl	%eax, %eax
0000000000010497	testq	%rcx, %rcx
000000000001049a	je	0x1052a
00000000000104a0	movq	0x23ec9(%rip), %rsi     ## Objc selector ref: objectAtIndex:
00000000000104a7	xorl	%edx, %edx
00000000000104a9	movq	%r14, %rdi
00000000000104ac	callq	*%rbx
00000000000104ae	movq	0x23d1b(%rip), %rsi     ## Objc selector ref: unsignedIntegerValue
00000000000104b5	movq	%rax, %rdi
00000000000104b8	callq	*%rbx
00000000000104ba	movq	(%r13,%r12), %rdi
00000000000104bf	movq	0x23fd2(%rip), %rsi     ## Objc selector ref: selectItemAtIndex:
00000000000104c6	movq	%rax, %rdx
00000000000104c9	callq	*%rbx
00000000000104cb	movq	(%r13,%r12), %rdi
00000000000104d0	movq	0x24681(%rip), %rsi     ## Objc selector ref: titleOfSelectedItem
00000000000104d7	callq	*%rbx
00000000000104d9	jmp	0x1052a
00000000000104db	movq	_OBJC_IVAR_$_UAPSwitchViewController._autoScanEnableCheckbox(%rip), %rax
00000000000104e2	movq	(%r13,%rax), %rdi
00000000000104e7	movq	0x241ba(%rip), %rsi     ## Objc selector ref: state
00000000000104ee	callq	*0x18f0c(%rip)          ## Objc message: -[%rdi state]
00000000000104f4	movq	(%r13,%r12), %rdi
00000000000104f9	movq	0x23f98(%rip), %rsi     ## Objc selector ref: selectItemAtIndex:
0000000000010500	cmpq	$0x1, %rax
0000000000010504	jne	0x1050d
0000000000010506	movl	$0x3, %edx
000000000001050b	jmp	0x10512
000000000001050d	movl	$0x1, %edx
0000000000010512	callq	*0x18ee8(%rip)          ## Objc message: -[%rdi selectItemAtIndex:]
0000000000010518	movq	(%r13,%r12), %rdi
000000000001051d	movq	0x24634(%rip), %rsi     ## Objc selector ref: titleOfSelectedItem
0000000000010524	callq	*0x18ed6(%rip)          ## Objc message: -[%rdi titleOfSelectedItem]
000000000001052a	movabsq	$0x4062c00000000000, %rcx ## imm = 0x4062C00000000000
0000000000010534	movq	%rcx, -0x38(%rbp)
0000000000010538	testq	%rax, %rax
000000000001053b	je	0x10552
000000000001053d	movq	(%r13,%r12), %rdi
0000000000010542	movq	0x243d7(%rip), %rsi     ## Objc selector ref: setTitle:
0000000000010549	movq	%rax, %rdx
000000000001054c	callq	*0x18eae(%rip)          ## Objc message: -[%rdi setTitle:]
0000000000010552	addq	$0x38, %rsp
0000000000010556	popq	%rbx
0000000000010557	popq	%r12
0000000000010559	popq	%r13
000000000001055b	popq	%r14
000000000001055d	popq	%r15
000000000001055f	popq	%rbp
0000000000010560	retq
0000000000010561	pushq	%rbp
0000000000010562	movq	%rsp, %rbp
0000000000010565	pushq	%r15
0000000000010567	pushq	%r14
0000000000010569	pushq	%rbx
000000000001056a	pushq	%rax
000000000001056b	movl	%edx, %r14d
000000000001056e	movq	%rdi, %rbx
0000000000010571	movq	_OBJC_IVAR_$_UAPSwitchViewController._autoScanEnableCheckbox(%rip), %rax
0000000000010578	movq	(%rbx,%rax), %rdi
000000000001057c	movq	0x241bd(%rip), %rsi     ## Objc selector ref: setEnabled:
0000000000010583	movq	0x18e76(%rip), %r15     ## Objc message: -[%rdi setEnabled:]
000000000001058a	callq	*%r15
000000000001058d	movq	_OBJC_IVAR_$_UAPSwitchViewController._autoScanEnableInstruction(%rip), %rax
0000000000010594	movq	(%rbx,%rax), %rdi
0000000000010598	movq	0x23e59(%rip), %rsi     ## Objc selector ref: setHidden:
000000000001059f	movl	%r14d, %edx
00000000000105a2	movq	%r15, %rax
00000000000105a5	addq	$0x8, %rsp
00000000000105a9	popq	%rbx
00000000000105aa	popq	%r14
00000000000105ac	popq	%r15
00000000000105ae	popq	%rbp
00000000000105af	jmpq	*%rax
00000000000105b1	pushq	%rbp
00000000000105b2	movq	%rsp, %rbp
00000000000105b5	pushq	%r15
00000000000105b7	pushq	%r14
00000000000105b9	pushq	%r13
00000000000105bb	pushq	%r12
00000000000105bd	pushq	%rbx
00000000000105be	subq	$0xf8, %rsp
00000000000105c5	movq	%rdx, %rbx
00000000000105c8	movq	%rdi, -0x118(%rbp)
00000000000105cf	movq	0x18d82(%rip), %r12     ## literal pool symbol address: ___stack_chk_guard
00000000000105d6	movq	(%r12), %rax
00000000000105da	movq	%rax, -0x30(%rbp)
00000000000105de	movq	0x23bf3(%rip), %rsi     ## Objc selector ref: switchValue
00000000000105e5	movq	0x18e14(%rip), %r13     ## Objc message: -[%rdi switchValue]
00000000000105ec	movq	%rbx, %rdi
00000000000105ef	callq	*%r13
00000000000105f2	movq	%rax, %r14
00000000000105f5	movq	0x23b94(%rip), %rsi     ## Objc selector ref: triggerType
00000000000105fc	movq	%rbx, %rdi
00000000000105ff	callq	*%r13
0000000000010602	movq	%rax, -0x110(%rbp)
0000000000010609	movq	0x23bc0(%rip), %rsi     ## Objc selector ref: unsignedIntegerValue
0000000000010610	movq	%rax, %rdi
0000000000010613	callq	*%r13
0000000000010616	cmpq	$0x2, %rax
000000000001061a	jne	0x10667
000000000001061c	movq	0x24f0d(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_NSDictionary
0000000000010623	movq	0x23a96(%rip), %rsi     ## Objc selector ref: class
000000000001062a	callq	*%r13
000000000001062d	movq	0x23ac4(%rip), %rsi     ## Objc selector ref: isKindOfClass:
0000000000010634	movq	%r14, %rdi
0000000000010637	movq	%rax, %rdx
000000000001063a	callq	*%r13
000000000001063d	testb	%al, %al
000000000001063f	je	0x1068d
0000000000010641	movq	0x18ca8(%rip), %rax     ## literal pool symbol address: _UASwitchValueKeyCodeKey
0000000000010648	movq	(%rax), %rdx
000000000001064b	movq	0x23b76(%rip), %rsi     ## Objc selector ref: objectForKey:
0000000000010652	movq	%r14, %rdi
0000000000010655	callq	*%r13
0000000000010658	movq	0x23b71(%rip), %rsi     ## Objc selector ref: unsignedIntegerValue
000000000001065f	movq	%rax, %rdi
0000000000010662	callq	*%r13
0000000000010665	jmp	0x1067d
0000000000010667	cmpq	$0x1, %rax
000000000001066b	jne	0x1068d
000000000001066d	movq	0x23b5c(%rip), %rsi     ## Objc selector ref: unsignedIntegerValue
0000000000010674	movq	%r14, %rdi
0000000000010677	callq	*0x18d83(%rip)          ## Objc message: +[NSDictionary unsignedIntegerValue]
000000000001067d	movq	%rax, %rdi
0000000000010680	callq	_UAPIsKeyAllowedInSecureInput
0000000000010685	testb	%al, %al
0000000000010687	je	0x108da
000000000001068d	xorps	%xmm0, %xmm0
0000000000010690	movaps	%xmm0, -0xc0(%rbp)
0000000000010697	movaps	%xmm0, -0xd0(%rbp)
000000000001069e	movaps	%xmm0, -0xe0(%rbp)
00000000000106a5	movaps	%xmm0, -0xf0(%rbp)
00000000000106ac	movq	_OBJC_IVAR_$_UAPSwitchViewController._switchInputEntities(%rip), %rax
00000000000106b3	movq	-0x118(%rbp), %rcx
00000000000106ba	movq	(%rcx,%rax), %rdi
00000000000106be	movq	%rdi, -0x100(%rbp)
00000000000106c5	movq	0x23a44(%rip), %rsi     ## Objc selector ref: countByEnumeratingWithState:objects:count:
00000000000106cc	leaq	-0xf0(%rbp), %rdx
00000000000106d3	leaq	-0xb0(%rbp), %rcx
00000000000106da	movl	$0x10, %r8d
00000000000106e0	callq	*0x18d1a(%rip)          ## Objc message: -[%rdi countByEnumeratingWithState:objects:count:]
00000000000106e6	movq	%rax, %r15
00000000000106e9	movb	$0x1, %al
00000000000106eb	movq	%rax, -0x120(%rbp)
00000000000106f2	testq	%r15, %r15
00000000000106f5	je	0x10958
00000000000106fb	movq	%r14, -0x108(%rbp)
0000000000010702	movq	-0xe0(%rbp), %rax
0000000000010709	movq	(%rax), %rax
000000000001070c	movq	%rax, -0xf8(%rbp)
0000000000010713	xorl	%ebx, %ebx
0000000000010715	movq	-0xe0(%rbp), %rax
000000000001071c	movq	-0xf8(%rbp), %rcx
0000000000010723	cmpq	%rcx, (%rax)
0000000000010726	je	0x10734
0000000000010728	movq	-0x100(%rbp), %rdi
000000000001072f	callq	0x1e886                 ## symbol stub for: _objc_enumerationMutation
0000000000010734	movq	-0xe8(%rbp), %rax
000000000001073b	movq	(%rax,%rbx,8), %r14
000000000001073f	movq	%r14, %rdi
0000000000010742	movq	0x2428f(%rip), %rsi     ## Objc selector ref: isHeader
0000000000010749	callq	*0x18cb1(%rip)          ## Objc message: -[%rdi isHeader]
000000000001074f	testb	%al, %al
0000000000010751	jne	0x107d7
0000000000010757	movq	%r14, %rdi
000000000001075a	movq	0x24297(%rip), %rsi     ## Objc selector ref: deviceSettings
0000000000010761	callq	*%r13
0000000000010764	movq	%rax, %r12
0000000000010767	movq	%r12, %rdi
000000000001076a	movq	0x23a67(%rip), %rsi     ## Objc selector ref: switchValue
0000000000010771	callq	*%r13
0000000000010774	movq	%rax, %rdi
0000000000010777	movq	0x23d52(%rip), %rsi     ## Objc selector ref: isEqual:
000000000001077e	movq	-0x108(%rbp), %rdx
0000000000010785	callq	*%r13
0000000000010788	testb	%al, %al
000000000001078a	je	0x107d7
000000000001078c	movq	%r12, %rdi
000000000001078f	movq	0x239fa(%rip), %rsi     ## Objc selector ref: triggerType
0000000000010796	callq	*%r13
0000000000010799	movq	%rax, %rdi
000000000001079c	movq	0x239f5(%rip), %rsi     ## Objc selector ref: isEqualToNumber:
00000000000107a3	movq	-0x110(%rbp), %rdx
00000000000107aa	callq	*%r13
00000000000107ad	testb	%al, %al
00000000000107af	je	0x107d7
00000000000107b1	movq	-0x118(%rbp), %rax
00000000000107b8	movq	_OBJC_IVAR_$_UAPSwitchViewController._editingSwitchInputEntity(%rip), %rcx
00000000000107bf	movq	(%rax,%rcx), %rdi
00000000000107c3	movq	0x23cc6(%rip), %rsi     ## Objc selector ref: isEqualTo:
00000000000107ca	movq	%r14, %rdx
00000000000107cd	callq	*0x18c2d(%rip)          ## Objc message: -[%rdi isEqualTo:]
00000000000107d3	testb	%al, %al
00000000000107d5	je	0x1081c
00000000000107d7	incq	%rbx
00000000000107da	cmpq	%r15, %rbx
00000000000107dd	jb	0x10715
00000000000107e3	movl	$0x10, %r8d
00000000000107e9	movq	-0x100(%rbp), %rdi
00000000000107f0	movq	0x23919(%rip), %rsi     ## Objc selector ref: countByEnumeratingWithState:objects:count:
00000000000107f7	leaq	-0xf0(%rbp), %rdx
00000000000107fe	leaq	-0xb0(%rbp), %rcx
0000000000010805	callq	*0x18bf5(%rip)          ## Objc message: -[%rdi countByEnumeratingWithState:objects:count:]
000000000001080b	movq	%rax, %r15
000000000001080e	testq	%r15, %r15
0000000000010811	jne	0x10713
0000000000010817	jmp	0x108d1
000000000001081c	movq	0x24cdd(%rip), %rbx     ## Objc class ref: _OBJC_CLASS_$_NSBundle
0000000000010823	movq	0x24cde(%rip), %rdi     ## Objc class ref: UniversalAccessPref
000000000001082a	movq	0x2388f(%rip), %rsi     ## Objc selector ref: class
0000000000010831	callq	*%r13
0000000000010834	movq	0x2397d(%rip), %rsi     ## Objc selector ref: bundleForClass:
000000000001083b	movq	%rbx, %rdi
000000000001083e	movq	%rax, %rdx
0000000000010841	callq	*%r13
0000000000010844	movq	0x23975(%rip), %rsi     ## Objc selector ref: localizedStringForKey:value:table:
000000000001084b	leaq	0x1a25e(%rip), %rdx     ## Objc cfstring ref: @"switch.deviceAssignmentConflict.label"
0000000000010852	leaq	0x198b7(%rip), %rcx     ## Objc cfstring ref: @""
0000000000010859	xorl	%edi, %edi
000000000001085b	movq	%rdi, -0x120(%rbp)
0000000000010862	xorl	%r8d, %r8d
0000000000010865	movq	%rax, %rdi
0000000000010868	callq	*%r13
000000000001086b	movq	%rax, %r12
000000000001086e	movq	_OBJC_IVAR_$_UAPSwitchViewController._deviceAssigmentConflictLabel(%rip), %rax
0000000000010875	movq	-0x118(%rbp), %rbx
000000000001087c	movq	(%rbx,%rax), %rax
0000000000010880	movq	%rax, -0xf8(%rbp)
0000000000010887	movq	0x24c8a(%rip), %r15     ## Objc class ref: _OBJC_CLASS_$_NSString
000000000001088e	movq	0x23c33(%rip), %rsi     ## Objc selector ref: title
0000000000010895	movq	%r14, %rdi
0000000000010898	callq	*%r13
000000000001089b	movq	%rax, %rcx
000000000001089e	movq	0x2395b(%rip), %rsi     ## Objc selector ref: stringWithFormat:
00000000000108a5	xorl	%eax, %eax
00000000000108a7	movq	%r15, %rdi
00000000000108aa	movq	%r12, %rdx
00000000000108ad	callq	*%r13
00000000000108b0	movq	0x23b61(%rip), %rsi     ## Objc selector ref: setStringValue:
00000000000108b7	movq	-0xf8(%rbp), %rdi
00000000000108be	movq	%rax, %rdx
00000000000108c1	callq	*%r13
00000000000108c4	movq	0x24295(%rip), %rsi     ## Objc selector ref: _showWarning
00000000000108cb	movq	%rbx, %rdi
00000000000108ce	callq	*%r13
00000000000108d1	movq	0x18a80(%rip), %r12     ## literal pool symbol address: ___stack_chk_guard
00000000000108d8	jmp	0x10958
00000000000108da	movq	_OBJC_IVAR_$_UAPSwitchViewController._deviceAssigmentConflictLabel(%rip), %rax
00000000000108e1	movq	-0x118(%rbp), %r15
00000000000108e8	movq	(%r15,%rax), %r14
00000000000108ec	movq	0x24c0d(%rip), %rbx     ## Objc class ref: _OBJC_CLASS_$_NSBundle
00000000000108f3	movq	0x24c0e(%rip), %rdi     ## Objc class ref: UniversalAccessPref
00000000000108fa	movq	0x237bf(%rip), %rsi     ## Objc selector ref: class
0000000000010901	callq	*%r13
0000000000010904	movq	0x238ad(%rip), %rsi     ## Objc selector ref: bundleForClass:
000000000001090b	movq	%rbx, %rdi
000000000001090e	movq	%rax, %rdx
0000000000010911	callq	*%r13
0000000000010914	movq	0x238a5(%rip), %rsi     ## Objc selector ref: localizedStringForKey:value:table:
000000000001091b	leaq	0x1a16e(%rip), %rdx     ## Objc cfstring ref: @"switch.deviceAssignmentNotPermitted.label"
0000000000010922	leaq	0x197e7(%rip), %rcx     ## Objc cfstring ref: @""
0000000000010929	xorl	%edi, %edi
000000000001092b	movq	%rdi, -0x120(%rbp)
0000000000010932	xorl	%r8d, %r8d
0000000000010935	movq	%rax, %rdi
0000000000010938	callq	*%r13
000000000001093b	movq	0x23ad6(%rip), %rsi     ## Objc selector ref: setStringValue:
0000000000010942	movq	%r14, %rdi
0000000000010945	movq	%rax, %rdx
0000000000010948	callq	*%r13
000000000001094b	movq	0x2420e(%rip), %rsi     ## Objc selector ref: _showWarning
0000000000010952	movq	%r15, %rdi
0000000000010955	callq	*%r13
0000000000010958	movq	(%r12), %rax
000000000001095c	cmpq	-0x30(%rbp), %rax
0000000000010960	jne	0x1097e
0000000000010962	movq	-0x120(%rbp), %rax
0000000000010969	movzbl	%al, %eax
000000000001096c	addq	$0xf8, %rsp
0000000000010973	popq	%rbx
0000000000010974	popq	%r12
0000000000010976	popq	%r13
0000000000010978	popq	%r14
000000000001097a	popq	%r15
000000000001097c	popq	%rbp
000000000001097d	retq
000000000001097e	callq	0x1e8b6                 ## symbol stub for: ___stack_chk_fail
0000000000010983	pushq	%rbp
0000000000010984	movq	%rsp, %rbp
0000000000010987	pushq	%r15
0000000000010989	pushq	%r14
000000000001098b	pushq	%rbx
000000000001098c	pushq	%rax
000000000001098d	movq	%rdi, %r14
0000000000010990	movq	0x241d1(%rip), %rsi     ## Objc selector ref: userInfo
0000000000010997	movq	0x18a62(%rip), %r15     ## Objc message: +[UniversalAccessPref userInfo]
000000000001099e	movq	%rdx, %rdi
00000000000109a1	callq	*%r15
00000000000109a4	movq	0x2381d(%rip), %rsi     ## Objc selector ref: objectForKey:
00000000000109ab	leaq	0x1a11e(%rip), %rdx     ## Objc cfstring ref: @"NSFieldEditor"
00000000000109b2	movq	%rax, %rdi
00000000000109b5	callq	*%r15
00000000000109b8	movq	0x241b1(%rip), %rsi     ## Objc selector ref: string
00000000000109bf	movq	%rax, %rdi
00000000000109c2	callq	*%r15
00000000000109c5	movq	%rax, %rbx
00000000000109c8	movq	0x23759(%rip), %rsi     ## Objc selector ref: length
00000000000109cf	movq	%rbx, %rdi
00000000000109d2	callq	*%r15
00000000000109d5	testq	%rax, %rax
00000000000109d8	je	0x109ff
00000000000109da	movq	_OBJC_IVAR_$_UAPSwitchViewController._defaultSwitchNames(%rip), %rax
00000000000109e1	movq	(%r14,%rax), %rdi
00000000000109e5	movq	0x23744(%rip), %rsi     ## Objc selector ref: removeObject:
00000000000109ec	movq	%rbx, %rdx
00000000000109ef	addq	$0x8, %rsp
00000000000109f3	popq	%rbx
00000000000109f4	popq	%r14
00000000000109f6	popq	%r15
00000000000109f8	popq	%rbp
00000000000109f9	jmpq	*0x18a01(%rip)          ## Objc message: -[%rdi removeObject:]
00000000000109ff	addq	$0x8, %rsp
0000000000010a03	popq	%rbx
0000000000010a04	popq	%r14
0000000000010a06	popq	%r15
0000000000010a08	popq	%rbp
0000000000010a09	retq
0000000000010a0a	pushq	%rbp
0000000000010a0b	movq	%rsp, %rbp
0000000000010a0e	pushq	%r15
0000000000010a10	pushq	%r14
0000000000010a12	pushq	%r13
0000000000010a14	pushq	%r12
0000000000010a16	pushq	%rbx
0000000000010a17	subq	$0x18, %rsp
0000000000010a1b	movq	%rdi, %r15
0000000000010a1e	movq	_OBJC_IVAR_$_UAPSwitchViewController._editingSwitchInputEntity(%rip), %rax
0000000000010a25	movq	(%r15,%rax), %rdi
0000000000010a29	movq	0x23fc8(%rip), %rsi     ## Objc selector ref: deviceSettings
0000000000010a30	movq	0x189c9(%rip), %rbx     ## Objc message: -[%rdi deviceSettings]
0000000000010a37	callq	*%rbx
0000000000010a39	movq	0x24138(%rip), %rsi     ## Objc selector ref: inputName
0000000000010a40	movq	%rax, %rdi
0000000000010a43	callq	*%rbx
0000000000010a45	movq	%rax, %r14
0000000000010a48	movq	0x236d9(%rip), %rsi     ## Objc selector ref: length
0000000000010a4f	movq	%r14, %rdi
0000000000010a52	callq	*%rbx
0000000000010a54	movq	%rbx, %rcx
0000000000010a57	testq	%rax, %rax
0000000000010a5a	je	0x10b61
0000000000010a60	movq	0x24a99(%rip), %rbx     ## Objc class ref: _OBJC_CLASS_$_NSBundle
0000000000010a67	movq	0x24a9a(%rip), %rdi     ## Objc class ref: UniversalAccessPref
0000000000010a6e	movq	0x2364b(%rip), %rsi     ## Objc selector ref: class
0000000000010a75	movq	%rcx, %r12
0000000000010a78	callq	*%r12
0000000000010a7b	movq	0x23736(%rip), %rsi     ## Objc selector ref: bundleForClass:
0000000000010a82	movq	%rbx, %rdi
0000000000010a85	movq	%rax, %rdx
0000000000010a88	callq	*%r12
0000000000010a8b	movq	0x2372e(%rip), %rsi     ## Objc selector ref: localizedStringForKey:value:table:
0000000000010a92	leaq	0x1a057(%rip), %rdx     ## Objc cfstring ref: @"switch.deviceAssignmentInputWarning.label"
0000000000010a99	leaq	0x19670(%rip), %rcx     ## Objc cfstring ref: @""
0000000000010aa0	xorl	%r8d, %r8d
0000000000010aa3	movq	%rax, %rdi
0000000000010aa6	movq	%rcx, %r13
0000000000010aa9	callq	*%r12
0000000000010aac	movq	%rax, -0x38(%rbp)
0000000000010ab0	movq	_OBJC_IVAR_$_UAPSwitchViewController._deviceInputWarningLabel(%rip), %rax
0000000000010ab7	movq	(%r15,%rax), %rax
0000000000010abb	movq	%rax, -0x30(%rbp)
0000000000010abf	movq	0x24a52(%rip), %rax     ## Objc class ref: _OBJC_CLASS_$_NSString
0000000000010ac6	movq	%rax, -0x40(%rbp)
0000000000010aca	movq	0x24a2f(%rip), %rbx     ## Objc class ref: _OBJC_CLASS_$_NSBundle
0000000000010ad1	movq	0x24a30(%rip), %rdi     ## Objc class ref: UniversalAccessPref
0000000000010ad8	movq	0x235e1(%rip), %rsi     ## Objc selector ref: class
0000000000010adf	callq	*%r12
0000000000010ae2	movq	0x236cf(%rip), %rsi     ## Objc selector ref: bundleForClass:
0000000000010ae9	movq	%rbx, %rdi
0000000000010aec	movq	%rax, %rdx
0000000000010aef	callq	*%r12
0000000000010af2	movq	0x236c7(%rip), %rsi     ## Objc selector ref: localizedStringForKey:value:table:
0000000000010af9	leaq	0x1a010(%rip), %rdx     ## Objc cfstring ref: @"switch.productName"
0000000000010b00	xorl	%r8d, %r8d
0000000000010b03	movq	%rax, %rdi
0000000000010b06	movq	%r13, %rcx
0000000000010b09	callq	*%r12
0000000000010b0c	movq	%rax, %rbx
0000000000010b0f	movq	0x236ea(%rip), %rsi     ## Objc selector ref: stringWithFormat:
0000000000010b16	xorl	%eax, %eax
0000000000010b18	movq	-0x40(%rbp), %rdi
0000000000010b1c	movq	-0x38(%rbp), %rdx
0000000000010b20	movq	%r14, %rcx
0000000000010b23	movq	%rbx, %r8
0000000000010b26	callq	*%r12
0000000000010b29	movq	0x238e8(%rip), %rsi     ## Objc selector ref: setStringValue:
0000000000010b30	movq	-0x30(%rbp), %rdi
0000000000010b34	movq	%rax, %rdx
0000000000010b37	callq	*%r12
0000000000010b3a	movq	_OBJC_IVAR_$_UAPSwitchViewController._deviceInputWarningLabel(%rip), %rax
0000000000010b41	movq	(%r15,%rax), %rdi
0000000000010b45	movq	0x238ac(%rip), %rsi     ## Objc selector ref: setHidden:
0000000000010b4c	xorl	%edx, %edx
0000000000010b4e	movq	%r12, %rax
0000000000010b51	addq	$0x18, %rsp
0000000000010b55	popq	%rbx
0000000000010b56	popq	%r12
0000000000010b58	popq	%r13
0000000000010b5a	popq	%r14
0000000000010b5c	popq	%r15
0000000000010b5e	popq	%rbp
0000000000010b5f	jmpq	*%rax
0000000000010b61	movq	_OBJC_IVAR_$_UAPSwitchViewController._deviceInputWarningLabel(%rip), %rax
0000000000010b68	movq	(%r15,%rax), %rdi
0000000000010b6c	movq	0x23885(%rip), %rsi     ## Objc selector ref: setHidden:
0000000000010b73	movl	$0x1, %edx
0000000000010b78	addq	$0x18, %rsp
0000000000010b7c	popq	%rbx
0000000000010b7d	popq	%r12
0000000000010b7f	popq	%r13
0000000000010b81	popq	%r14
0000000000010b83	popq	%r15
0000000000010b85	popq	%rbp
0000000000010b86	jmpq	*0x18874(%rip)          ## Objc message: +[UniversalAccessPref setHidden:]
0000000000010b8c	pushq	%rbp
0000000000010b8d	movq	%rsp, %rbp
0000000000010b90	pushq	%r15
0000000000010b92	pushq	%r14
0000000000010b94	pushq	%rbx
0000000000010b95	pushq	%rax
0000000000010b96	movq	%rdx, %r14
0000000000010b99	movq	%rdi, %rbx
0000000000010b9c	movq	_OBJC_IVAR_$_UAPSwitchViewController._switchAssignDeviceInputWindow(%rip), %rax
0000000000010ba3	cmpq	%rcx, (%rbx,%rax)
0000000000010ba7	jne	0x10c12
0000000000010ba9	movq	0x23fd0(%rip), %rsi     ## Objc selector ref: _verifyDeviceAssignment:
0000000000010bb0	movq	%rbx, %rdi
0000000000010bb3	movq	%r14, %rdx
0000000000010bb6	callq	*0x18844(%rip)          ## Objc message: -[%rdi _verifyDeviceAssignment:]
0000000000010bbc	testb	%al, %al
0000000000010bbe	je	0x10c12
0000000000010bc0	movq	_OBJC_IVAR_$_UAPSwitchViewController._editingSwitchInputEntity(%rip), %rax
0000000000010bc7	movq	(%rbx,%rax), %rdi
0000000000010bcb	movq	0x23e26(%rip), %rsi     ## Objc selector ref: deviceSettings
0000000000010bd2	movq	0x18827(%rip), %r15     ## Objc message: -[%rdi deviceSettings]
0000000000010bd9	callq	*%r15
0000000000010bdc	movq	0x23fa5(%rip), %rsi     ## Objc selector ref: addEntriesFromDictionary:
0000000000010be3	movq	%rax, %rdi
0000000000010be6	movq	%r14, %rdx
0000000000010be9	callq	*%r15
0000000000010bec	movq	0x23ecd(%rip), %rsi     ## Objc selector ref: _updateDeviceInputWarningLabel
0000000000010bf3	movq	%rbx, %rdi
0000000000010bf6	callq	*%r15
0000000000010bf9	movq	0x23ec8(%rip), %rsi     ## Objc selector ref: _displaySwitchEditView
0000000000010c00	movq	%rbx, %rdi
0000000000010c03	movq	%r15, %rax
0000000000010c06	addq	$0x8, %rsp
0000000000010c0a	popq	%rbx
0000000000010c0b	popq	%r14
0000000000010c0d	popq	%r15
0000000000010c0f	popq	%rbp
0000000000010c10	jmpq	*%rax
0000000000010c12	addq	$0x8, %rsp
0000000000010c16	popq	%rbx
0000000000010c17	popq	%r14
0000000000010c19	popq	%r15
0000000000010c1b	popq	%rbp
0000000000010c1c	retq
0000000000010c1d	pushq	%rbp
0000000000010c1e	movq	%rsp, %rbp
0000000000010c21	pushq	%r14
0000000000010c23	pushq	%rbx
0000000000010c24	movq	_OBJC_IVAR_$_UAPSwitchViewController._deviceActionPopupButton(%rip), %rax
0000000000010c2b	movq	(%rdi,%rax), %rbx
0000000000010c2f	movq	0x23f22(%rip), %rsi     ## Objc selector ref: titleOfSelectedItem
0000000000010c36	movq	0x187c3(%rip), %r14     ## Objc message: -[%rdi titleOfSelectedItem]
0000000000010c3d	movq	%rbx, %rdi
0000000000010c40	callq	*%r14
0000000000010c43	movq	0x23cd6(%rip), %rsi     ## Objc selector ref: setTitle:
0000000000010c4a	movq	%rbx, %rdi
0000000000010c4d	movq	%rax, %rdx
0000000000010c50	movq	%r14, %rax
0000000000010c53	popq	%rbx
0000000000010c54	popq	%r14
0000000000010c56	popq	%rbp
0000000000010c57	jmpq	*%rax
0000000000010c59	pushq	%rbp
0000000000010c5a	movq	%rsp, %rbp
0000000000010c5d	movq	_OBJC_IVAR_$_UAPSwitchViewController._switchSwitchesTableView(%rip), %rax
0000000000010c64	cmpq	%rdx, (%rdi,%rax)
0000000000010c68	je	0x10c6e
0000000000010c6a	xorl	%eax, %eax
0000000000010c6c	popq	%rbp
0000000000010c6d	retq
0000000000010c6e	movq	_OBJC_IVAR_$_UAPSwitchViewController._switchInputEntities(%rip), %rax
0000000000010c75	movq	(%rdi,%rax), %rdi
0000000000010c79	movq	0x236e8(%rip), %rsi     ## Objc selector ref: count
0000000000010c80	popq	%rbp
0000000000010c81	jmpq	*0x18779(%rip)          ## Objc message: -[%rdi count]
0000000000010c87	pushq	%rbp
0000000000010c88	movq	%rsp, %rbp
0000000000010c8b	pushq	%r15
0000000000010c8d	pushq	%r14
0000000000010c8f	pushq	%r13
0000000000010c91	pushq	%r12
0000000000010c93	pushq	%rbx
0000000000010c94	pushq	%rax
0000000000010c95	movq	%r8, %rbx
0000000000010c98	movq	%rdx, %r15
0000000000010c9b	movq	%rdi, %r13
0000000000010c9e	movq	_OBJC_IVAR_$_UAPSwitchViewController._switchSwitchesTableView(%rip), %rax
0000000000010ca5	xorl	%r12d, %r12d
0000000000010ca8	cmpq	%r15, (%r13,%rax)
0000000000010cad	jne	0x10e78
0000000000010cb3	testq	%rbx, %rbx
0000000000010cb6	js	0x10e78
0000000000010cbc	movq	_OBJC_IVAR_$_UAPSwitchViewController._switchInputEntities(%rip), %r14
0000000000010cc3	movq	(%r13,%r14), %rdi
0000000000010cc8	movq	0x23699(%rip), %rsi     ## Objc selector ref: count
0000000000010ccf	callq	*0x1872b(%rip)          ## Objc message: -[%rdi count]
0000000000010cd5	xorl	%r12d, %r12d
0000000000010cd8	cmpq	%rbx, %rax
0000000000010cdb	jbe	0x10e78
0000000000010ce1	movq	(%r13,%r14), %rdi
0000000000010ce6	movq	0x23683(%rip), %rsi     ## Objc selector ref: objectAtIndex:
0000000000010ced	movq	0x1870c(%rip), %r12     ## Objc message: -[%rdi objectAtIndex:]
0000000000010cf4	movq	%rbx, %rdx
0000000000010cf7	callq	*%r12
0000000000010cfa	movq	%rax, %r14
0000000000010cfd	movq	0x23cd4(%rip), %rsi     ## Objc selector ref: isHeader
0000000000010d04	movq	%r14, %rdi
0000000000010d07	callq	*%r12
0000000000010d0a	testb	%al, %al
0000000000010d0c	movq	0x236f5(%rip), %rsi     ## Objc selector ref: makeViewWithIdentifier:owner:
0000000000010d13	je	0x10d68
0000000000010d15	leaq	0x19e14(%rip), %rdx     ## Objc cfstring ref: @"HeaderCell"
0000000000010d1c	movq	%r15, %rdi
0000000000010d1f	movq	%r13, %rcx
0000000000010d22	callq	*%r12
0000000000010d25	movq	%r12, %r15
0000000000010d28	movq	%rax, %r12
0000000000010d2b	movq	0x23796(%rip), %rsi     ## Objc selector ref: title
0000000000010d32	movq	%r14, %rdi
0000000000010d35	callq	*%r15
0000000000010d38	testq	%rax, %rax
0000000000010d3b	leaq	0x193ce(%rip), %rbx     ## Objc cfstring ref: @""
0000000000010d42	cmovneq	%rax, %rbx
0000000000010d46	movq	0x236c3(%rip), %rsi     ## Objc selector ref: textField
0000000000010d4d	movq	%r12, %rdi
0000000000010d50	callq	*%r15
0000000000010d53	movq	0x236be(%rip), %rsi     ## Objc selector ref: setStringValue:
0000000000010d5a	movq	%rax, %rdi
0000000000010d5d	movq	%rbx, %rdx
0000000000010d60	callq	*%r15
0000000000010d63	jmp	0x10e78
0000000000010d68	leaq	0x19de1(%rip), %rdx     ## Objc cfstring ref: @"MainCell"
0000000000010d6f	movq	%r15, %rdi
0000000000010d72	movq	%r13, %rcx
0000000000010d75	callq	*%r12
0000000000010d78	movq	%r12, %r15
0000000000010d7b	movq	%rax, %r12
0000000000010d7e	movq	0x23e0b(%rip), %rsi     ## Objc selector ref: actionTitle
0000000000010d85	movq	%r12, %rdi
0000000000010d88	callq	*%r15
0000000000010d8b	movq	%rax, %r13
0000000000010d8e	movq	0x23e03(%rip), %rsi     ## Objc selector ref: switchTitle
0000000000010d95	movq	%r12, %rdi
0000000000010d98	callq	*%r15
0000000000010d9b	movq	%rax, -0x30(%rbp)
0000000000010d9f	movq	0x23722(%rip), %rsi     ## Objc selector ref: title
0000000000010da6	movq	%r14, %rdi
0000000000010da9	callq	*%r15
0000000000010dac	movq	%rax, %rbx
0000000000010daf	movq	0x23372(%rip), %rsi     ## Objc selector ref: length
0000000000010db6	movq	%rbx, %rdi
0000000000010db9	callq	*%r15
0000000000010dbc	testq	%rax, %rax
0000000000010dbf	leaq	0x1934a(%rip), %rdx     ## Objc cfstring ref: @""
0000000000010dc6	cmovneq	%rbx, %rdx
0000000000010dca	movq	0x23647(%rip), %rsi     ## Objc selector ref: setStringValue:
0000000000010dd1	movq	%r13, %rdi
0000000000010dd4	callq	*%r15
0000000000010dd7	movq	0x23dc2(%rip), %rsi     ## Objc selector ref: hasSystemDefinedAction
0000000000010dde	movq	%r14, %rdi
0000000000010de1	callq	*%r15
0000000000010de4	testb	%al, %al
0000000000010de6	sete	%al
0000000000010de9	movq	0x23db8(%rip), %rsi     ## Objc selector ref: setEditable:
0000000000010df0	movzbl	%al, %edx
0000000000010df3	movq	%r13, %rdi
0000000000010df6	callq	*%r15
0000000000010df9	movq	0x23d38(%rip), %rsi     ## Objc selector ref: switchName
0000000000010e00	movq	%r14, %rdi
0000000000010e03	callq	*%r15
0000000000010e06	testq	%rax, %rax
0000000000010e09	je	0x10e21
0000000000010e0b	movq	0x23606(%rip), %rsi     ## Objc selector ref: setStringValue:
0000000000010e12	movq	-0x30(%rbp), %rdi
0000000000010e16	movq	%rax, %rdx
0000000000010e19	callq	*0x185e1(%rip)          ## Objc message: -[%rdi setStringValue:]
0000000000010e1f	jmp	0x10e78
0000000000010e21	movq	0x246d8(%rip), %rbx     ## Objc class ref: _OBJC_CLASS_$_NSBundle
0000000000010e28	movq	0x246d9(%rip), %rdi     ## Objc class ref: UniversalAccessPref
0000000000010e2f	movq	0x2328a(%rip), %rsi     ## Objc selector ref: class
0000000000010e36	callq	*%r15
0000000000010e39	movq	0x23378(%rip), %rsi     ## Objc selector ref: bundleForClass:
0000000000010e40	movq	%rbx, %rdi
0000000000010e43	movq	%rax, %rdx
0000000000010e46	callq	*%r15
0000000000010e49	movq	0x23370(%rip), %rsi     ## Objc selector ref: localizedStringForKey:value:table:
0000000000010e50	leaq	0x19d19(%rip), %rdx     ## Objc cfstring ref: @"switch.generic_title"
0000000000010e57	leaq	0x192b2(%rip), %rcx     ## Objc cfstring ref: @""
0000000000010e5e	xorl	%r8d, %r8d
0000000000010e61	movq	%rax, %rdi
0000000000010e64	callq	*%r15
0000000000010e67	movq	0x235aa(%rip), %rsi     ## Objc selector ref: setStringValue:
0000000000010e6e	movq	-0x30(%rbp), %rdi
0000000000010e72	movq	%rax, %rdx
0000000000010e75	callq	*%r15
0000000000010e78	movq	%r12, %rax
0000000000010e7b	addq	$0x8, %rsp
0000000000010e7f	popq	%rbx
0000000000010e80	popq	%r12
0000000000010e82	popq	%r13
0000000000010e84	popq	%r14
0000000000010e86	popq	%r15
0000000000010e88	popq	%rbp
0000000000010e89	retq
0000000000010e8a	pushq	%rbp
0000000000010e8b	movq	%rsp, %rbp
0000000000010e8e	pushq	%r15
0000000000010e90	pushq	%r14
0000000000010e92	pushq	%rbx
0000000000010e93	pushq	%rax
0000000000010e94	movq	%rcx, %r14
0000000000010e97	movq	%rdi, %rbx
0000000000010e9a	movq	_OBJC_IVAR_$_UAPSwitchViewController._switchSwitchesTableView(%rip), %rcx
0000000000010ea1	xorl	%eax, %eax
0000000000010ea3	cmpq	%rdx, (%rbx,%rcx)
0000000000010ea7	jne	0x10ef2
0000000000010ea9	testq	%r14, %r14
0000000000010eac	js	0x10ef2
0000000000010eae	movq	_OBJC_IVAR_$_UAPSwitchViewController._switchInputEntities(%rip), %r15
0000000000010eb5	movq	(%rbx,%r15), %rdi
0000000000010eb9	movq	0x234a8(%rip), %rsi     ## Objc selector ref: count
0000000000010ec0	callq	*0x1853a(%rip)          ## Objc message: +[UniversalAccessPref count]
0000000000010ec6	cmpq	%r14, %rax
0000000000010ec9	jbe	0x10ef0
0000000000010ecb	movq	(%rbx,%r15), %rdi
0000000000010ecf	movq	0x2349a(%rip), %rsi     ## Objc selector ref: objectAtIndex:
0000000000010ed6	movq	0x18523(%rip), %rbx     ## Objc message: -[%rdi objectAtIndex:]
0000000000010edd	movq	%r14, %rdx
0000000000010ee0	callq	*%rbx
0000000000010ee2	movq	0x23aef(%rip), %rsi     ## Objc selector ref: isHeader
0000000000010ee9	movq	%rax, %rdi
0000000000010eec	callq	*%rbx
0000000000010eee	jmp	0x10ef2
0000000000010ef0	xorl	%eax, %eax
0000000000010ef2	movsbl	%al, %eax
0000000000010ef5	addq	$0x8, %rsp
0000000000010ef9	popq	%rbx
0000000000010efa	popq	%r14
0000000000010efc	popq	%r15
0000000000010efe	popq	%rbp
0000000000010eff	retq
0000000000010f00	pushq	%rbp
0000000000010f01	movq	%rsp, %rbp
0000000000010f04	pushq	%r15
0000000000010f06	pushq	%r14
0000000000010f08	pushq	%r12
0000000000010f0a	pushq	%rbx
0000000000010f0b	movq	%rdi, %r14
0000000000010f0e	movq	_OBJC_IVAR_$_UAPSwitchViewController._switchSwitchesTableView(%rip), %rax
0000000000010f15	movq	(%r14,%rax), %rdi
0000000000010f19	movq	0x23498(%rip), %rsi     ## Objc selector ref: selectedRow
0000000000010f20	callq	*0x184da(%rip)          ## Objc message: -[%rdi selectedRow]
0000000000010f26	movq	%rax, %rbx
0000000000010f29	testq	%rbx, %rbx
0000000000010f2c	js	0x10fa5
0000000000010f2e	movq	_OBJC_IVAR_$_UAPSwitchViewController._switchInputEntities(%rip), %r15
0000000000010f35	movq	(%r14,%r15), %rdi
0000000000010f39	movq	0x23428(%rip), %rsi     ## Objc selector ref: count
0000000000010f40	callq	*0x184ba(%rip)          ## Objc message: -[%rdi count]
0000000000010f46	cmpq	%rax, %rbx
0000000000010f49	jae	0x10fa5
0000000000010f4b	movq	(%r14,%r15), %rdi
0000000000010f4f	movq	0x2341a(%rip), %rsi     ## Objc selector ref: objectAtIndex:
0000000000010f56	movq	0x184a3(%rip), %r12     ## Objc message: -[%rdi objectAtIndex:]
0000000000010f5d	movq	%rbx, %rdx
0000000000010f60	callq	*%r12
0000000000010f63	movq	_OBJC_IVAR_$_UAPSwitchViewController._addRemoveSwitchBar(%rip), %r15
0000000000010f6a	movq	(%r14,%r15), %rbx
0000000000010f6e	movq	0x23bab(%rip), %rsi     ## Objc selector ref: isRequired
0000000000010f75	movq	%rax, %rdi
0000000000010f78	callq	*%r12
0000000000010f7b	testb	%al, %al
0000000000010f7d	sete	%al
0000000000010f80	movq	0x23479(%rip), %rsi     ## Objc selector ref: setRemoveEnabled:
0000000000010f87	movzbl	%al, %edx
0000000000010f8a	movq	%rbx, %rdi
0000000000010f8d	callq	*%r12
0000000000010f90	movq	(%r14,%r15), %rdi
0000000000010f94	movq	0x23c15(%rip), %rsi     ## Objc selector ref: setConfigEnabled:
0000000000010f9b	movl	$0x1, %edx
0000000000010fa0	movq	%r12, %rax
0000000000010fa3	jmp	0x10fd3
0000000000010fa5	movq	_OBJC_IVAR_$_UAPSwitchViewController._addRemoveSwitchBar(%rip), %rbx
0000000000010fac	movq	(%r14,%rbx), %rdi
0000000000010fb0	movq	0x23449(%rip), %rsi     ## Objc selector ref: setRemoveEnabled:
0000000000010fb7	movq	0x18442(%rip), %r15     ## Objc message: -[%rdi setRemoveEnabled:]
0000000000010fbe	xorl	%edx, %edx
0000000000010fc0	callq	*%r15
0000000000010fc3	movq	(%r14,%rbx), %rdi
0000000000010fc7	movq	0x23be2(%rip), %rsi     ## Objc selector ref: setConfigEnabled:
0000000000010fce	xorl	%edx, %edx
0000000000010fd0	movq	%r15, %rax
0000000000010fd3	popq	%rbx
0000000000010fd4	popq	%r12
0000000000010fd6	popq	%r14
0000000000010fd8	popq	%r15
0000000000010fda	popq	%rbp
0000000000010fdb	jmpq	*%rax
0000000000010fdd	pushq	%rbp
0000000000010fde	movq	%rsp, %rbp
0000000000010fe1	movq	0x238a0(%rip), %rsi     ## Objc selector ref: _updateUIForSelection
0000000000010fe8	popq	%rbp
0000000000010fe9	jmpq	*0x18411(%rip)          ## Objc message: -[%rdi _updateUIForSelection]
0000000000010fef	pushq	%rbp
0000000000010ff0	movq	%rsp, %rbp
0000000000010ff3	pushq	%r15
0000000000010ff5	pushq	%r14
0000000000010ff7	pushq	%r13
0000000000010ff9	pushq	%r12
0000000000010ffb	pushq	%rbx
0000000000010ffc	subq	$0x58, %rsp
0000000000011000	movq	%rdi, %rbx
0000000000011003	movq	_OBJC_IVAR_$_UAPSwitchViewController._openCustomActionFilePanel(%rip), %r15
000000000001100a	cmpq	$0x0, (%rbx,%r15)
000000000001100f	je	0x11021
0000000000011011	movq	0x23840(%rip), %rsi     ## Objc selector ref: _hideOpenCustomActionFilePanel
0000000000011018	movq	%rbx, %rdi
000000000001101b	callq	*0x183df(%rip)          ## Objc message: -[%rdi _hideOpenCustomActionFilePanel]
0000000000011021	movq	0x180b8(%rip), %rax     ## literal pool symbol address: _NSApp
0000000000011028	movq	(%rax), %rdi
000000000001102b	movq	_OBJC_IVAR_$_UAPSwitchViewController._switchAssignDeviceInputWindow(%rip), %rax
0000000000011032	movq	(%rbx,%rax), %rdx
0000000000011036	movq	0x235eb(%rip), %rsi     ## Objc selector ref: endSheet:
000000000001103d	movq	0x183bc(%rip), %r14     ## Objc message: -[%rdi endSheet:]
0000000000011044	callq	*%r14
0000000000011047	movq	0x23372(%rip), %rsi     ## Objc selector ref: view
000000000001104e	movq	%rbx, %rdi
0000000000011051	callq	*%r14
0000000000011054	movq	0x2336d(%rip), %rsi     ## Objc selector ref: window
000000000001105b	movq	%rax, %rdi
000000000001105e	callq	*%r14
0000000000011061	testq	%rax, %rax
0000000000011064	je	0x1139b
000000000001106a	cmpq	$0x0, (%rbx,%r15)
000000000001106f	jne	0x1139b
0000000000011075	movq	%rax, -0x60(%rbp)
0000000000011079	movb	$0x0, -0x29(%rbp)
000000000001107d	movl	$0x5, %edi
0000000000011082	movl	$0x1, %esi
0000000000011087	xorl	%edx, %edx
0000000000011089	callq	0x1e850                 ## symbol stub for: _NSSearchPathForDirectoriesInDomains
000000000001108e	movq	0x23b23(%rip), %rsi     ## Objc selector ref: lastObject
0000000000011095	movq	%rax, %rdi
0000000000011098	callq	*%r14
000000000001109b	movq	%rax, %rcx
000000000001109e	movq	0x24473(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_NSString
00000000000110a5	movq	0x23154(%rip), %rsi     ## Objc selector ref: stringWithFormat:
00000000000110ac	leaq	0x19add(%rip), %rdx     ## Objc cfstring ref: @"%@/Scripts"
00000000000110b3	xorl	%eax, %eax
00000000000110b5	callq	*%r14
00000000000110b8	movq	%rax, %r12
00000000000110bb	movq	0x2451e(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_NSFileManager
00000000000110c2	movq	0x23af7(%rip), %rsi     ## Objc selector ref: defaultManager
00000000000110c9	callq	*%r14
00000000000110cc	movq	0x23af5(%rip), %rsi     ## Objc selector ref: fileExistsAtPath:isDirectory:
00000000000110d3	leaq	-0x29(%rbp), %rcx
00000000000110d7	movq	%rax, %rdi
00000000000110da	movq	%r12, %rdx
00000000000110dd	callq	*%r14
00000000000110e0	testb	%al, %al
00000000000110e2	je	0x110ef
00000000000110e4	movb	-0x29(%rbp), %al
00000000000110e7	testb	%al, %al
00000000000110e9	jne	0x11181
00000000000110ef	movl	$0x5, %edi
00000000000110f4	movl	$0x2, %esi
00000000000110f9	xorl	%edx, %edx
00000000000110fb	callq	0x1e850                 ## symbol stub for: _NSSearchPathForDirectoriesInDomains
0000000000011100	movq	0x23ab1(%rip), %rsi     ## Objc selector ref: lastObject
0000000000011107	movq	%rax, %rdi
000000000001110a	callq	*%r14
000000000001110d	movq	%rax, %rcx
0000000000011110	movq	0x24401(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_NSString
0000000000011117	movq	0x230e2(%rip), %rsi     ## Objc selector ref: stringWithFormat:
000000000001111e	leaq	0x19a6b(%rip), %rdx     ## Objc cfstring ref: @"%@/Scripts"
0000000000011125	xorl	%eax, %eax
0000000000011127	callq	*%r14
000000000001112a	movq	%rax, %r12
000000000001112d	movq	0x244ac(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_NSFileManager
0000000000011134	movq	0x23a85(%rip), %rsi     ## Objc selector ref: defaultManager
000000000001113b	callq	*%r14
000000000001113e	movq	0x23a83(%rip), %rsi     ## Objc selector ref: fileExistsAtPath:isDirectory:
0000000000011145	leaq	-0x29(%rbp), %rcx
0000000000011149	movq	%rax, %rdi
000000000001114c	movq	%r12, %rdx
000000000001114f	callq	*%r14
0000000000011152	testb	%al, %al
0000000000011154	je	0x1115d
0000000000011156	movb	-0x29(%rbp), %al
0000000000011159	testb	%al, %al
000000000001115b	jne	0x11181
000000000001115d	movl	$0x1, %edi
0000000000011162	movl	$0x8, %esi
0000000000011167	xorl	%edx, %edx
0000000000011169	callq	0x1e850                 ## symbol stub for: _NSSearchPathForDirectoriesInDomains
000000000001116e	movq	0x23a43(%rip), %rsi     ## Objc selector ref: lastObject
0000000000011175	movq	%rax, %rdi
0000000000011178	callq	*0x18282(%rip)          ## Objc message: +[NSFileManager lastObject]
000000000001117e	movq	%rax, %r12
0000000000011181	movq	0x24460(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_NSOpenPanel
0000000000011188	movq	0x23a41(%rip), %rsi     ## Objc selector ref: openPanel
000000000001118f	callq	*%r14
0000000000011192	movq	0x230cf(%rip), %rsi     ## Objc selector ref: retain
0000000000011199	movq	%rax, %rdi
000000000001119c	callq	*%r14
000000000001119f	movq	_OBJC_IVAR_$_UAPSwitchViewController._openCustomActionFilePanel(%rip), %r15
00000000000111a6	movq	%rax, %rdi
00000000000111a9	movq	%rbx, %rsi
00000000000111ac	movq	%r15, %rdx
00000000000111af	callq	0x1e868                 ## symbol stub for: _objc_assign_ivar
00000000000111b4	movq	(%rbx,%r15), %r13
00000000000111b8	movq	0x24329(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_NSArray
00000000000111bf	movq	0x23a12(%rip), %rsi     ## Objc selector ref: arrayWithObjects:
00000000000111c6	leaq	0x19a83(%rip), %rax     ## Objc cfstring ref: @"public.shell-script"
00000000000111cd	movq	%rax, 0x8(%rsp)
00000000000111d2	leaq	0x19a57(%rip), %rax     ## Objc cfstring ref: @"public.script"
00000000000111d9	movq	%rax, (%rsp)
00000000000111dd	movq	$0x0, 0x10(%rsp)
00000000000111e6	leaq	0x199c3(%rip), %rdx     ## Objc cfstring ref: @"applescript"
00000000000111ed	leaq	0x199dc(%rip), %rcx     ## Objc cfstring ref: @"scpt"
00000000000111f4	leaq	0x199f5(%rip), %r8      ## Objc cfstring ref: @"public.executable"
00000000000111fb	leaq	0x19a0e(%rip), %r9      ## Objc cfstring ref: @"app"
0000000000011202	xorl	%eax, %eax
0000000000011204	callq	*%r14
0000000000011207	movq	0x239d2(%rip), %rsi     ## Objc selector ref: setAllowedFileTypes:
000000000001120e	movq	%r13, %rdi
0000000000011211	movq	%rax, %rdx
0000000000011214	callq	*%r14
0000000000011217	movq	(%rbx,%r15), %rdi
000000000001121b	movq	0x239c6(%rip), %rsi     ## Objc selector ref: setCanChooseFiles:
0000000000011222	movl	$0x1, %edx
0000000000011227	callq	*%r14
000000000001122a	movq	(%rbx,%r15), %rdi
000000000001122e	movq	0x239bb(%rip), %rsi     ## Objc selector ref: setAllowsOtherFileTypes:
0000000000011235	xorl	%edx, %edx
0000000000011237	callq	*%r14
000000000001123a	movq	(%rbx,%r15), %rdi
000000000001123e	movq	0x239b3(%rip), %rsi     ## Objc selector ref: setCanChooseDirectories:
0000000000011245	xorl	%edx, %edx
0000000000011247	callq	*%r14
000000000001124a	movq	(%rbx,%r15), %rdi
000000000001124e	movq	0x239ab(%rip), %rsi     ## Objc selector ref: setAllowsMultipleSelection:
0000000000011255	xorl	%edx, %edx
0000000000011257	callq	*%r14
000000000001125a	movq	(%rbx,%r15), %r13
000000000001125e	movq	0x2438b(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_NSURL
0000000000011265	movq	0x2399c(%rip), %rsi     ## Objc selector ref: fileURLWithPath:
000000000001126c	movq	%r12, %rdx
000000000001126f	callq	*%r14
0000000000011272	movq	0x23997(%rip), %rsi     ## Objc selector ref: setDirectoryURL:
0000000000011279	movq	%r13, %rdi
000000000001127c	movq	%rax, %rdx
000000000001127f	callq	*%r14
0000000000011282	movq	(%rbx,%r15), %rdi
0000000000011286	movq	0x2398b(%rip), %rsi     ## Objc selector ref: setDelegate:
000000000001128d	movq	%rbx, %rdx
0000000000011290	callq	*%r14
0000000000011293	movq	(%rbx,%r15), %r13
0000000000011297	movq	0x24262(%rip), %r12     ## Objc class ref: _OBJC_CLASS_$_NSBundle
000000000001129e	movq	0x24263(%rip), %rdi     ## Objc class ref: UniversalAccessPref
00000000000112a5	movq	0x22e14(%rip), %rsi     ## Objc selector ref: class
00000000000112ac	callq	*%r14
00000000000112af	movq	0x22f02(%rip), %rsi     ## Objc selector ref: bundleForClass:
00000000000112b6	movq	%r12, %rdi
00000000000112b9	movq	%rax, %rdx
00000000000112bc	callq	*%r14
00000000000112bf	movq	0x22efa(%rip), %rsi     ## Objc selector ref: localizedStringForKey:value:table:
00000000000112c6	leaq	0x199a3(%rip), %rdx     ## Objc cfstring ref: @"switch.actionChooserDone.title"
00000000000112cd	leaq	0x18e3c(%rip), %rcx     ## Objc cfstring ref: @""
00000000000112d4	xorl	%r8d, %r8d
00000000000112d7	movq	%rax, %rdi
00000000000112da	callq	*%r14
00000000000112dd	movq	0x2393c(%rip), %rsi     ## Objc selector ref: setPrompt:
00000000000112e4	movq	%r13, %rdi
00000000000112e7	movq	%rax, %rdx
00000000000112ea	callq	*%r14
00000000000112ed	movq	(%rbx,%r15), %r13
00000000000112f1	movq	0x24208(%rip), %r12     ## Objc class ref: _OBJC_CLASS_$_NSBundle
00000000000112f8	movq	0x24209(%rip), %rdi     ## Objc class ref: UniversalAccessPref
00000000000112ff	movq	0x22dba(%rip), %rsi     ## Objc selector ref: class
0000000000011306	callq	*%r14
0000000000011309	movq	0x22ea8(%rip), %rsi     ## Objc selector ref: bundleForClass:
0000000000011310	movq	%r12, %rdi
0000000000011313	movq	%rax, %rdx
0000000000011316	callq	*%r14
0000000000011319	movq	0x22ea0(%rip), %rsi     ## Objc selector ref: localizedStringForKey:value:table:
0000000000011320	leaq	0x19969(%rip), %rdx     ## Objc cfstring ref: @"switch.actionChooser.message"
0000000000011327	xorl	%r8d, %r8d
000000000001132a	movq	%rax, %rdi
000000000001132d	leaq	0x18ddc(%rip), %rcx     ## Objc cfstring ref: @""
0000000000011334	callq	*%r14
0000000000011337	movq	0x238ea(%rip), %rsi     ## Objc selector ref: setMessage:
000000000001133e	movq	%r13, %rdi
0000000000011341	movq	%rax, %rdx
0000000000011344	callq	*%r14
0000000000011347	movq	(%rbx,%r15), %r15
000000000001134b	movq	0x17ff6(%rip), %rax     ## literal pool symbol address: __NSConcreteStackBlock
0000000000011352	movq	%rax, -0x58(%rbp)
0000000000011356	movl	$0x42000000, -0x50(%rbp) ## imm = 0x42000000
000000000001135d	movl	$0x0, -0x4c(%rbp)
0000000000011364	leaq	0x3f(%rip), %rax
000000000001136b	movq	%rax, -0x48(%rbp)
000000000001136f	leaq	0x18a3a(%rip), %rax
0000000000011376	movq	%rax, -0x40(%rbp)
000000000001137a	leaq	-0x38(%rbp), %rsi
000000000001137e	movq	%rbx, %rdi
0000000000011381	callq	0x1e86e                 ## symbol stub for: _objc_assign_strongCast
0000000000011386	movq	0x232cb(%rip), %rsi     ## Objc selector ref: beginSheetModalForWindow:completionHandler:
000000000001138d	leaq	-0x58(%rbp), %rcx
0000000000011391	movq	%r15, %rdi
0000000000011394	movq	-0x60(%rbp), %rdx
0000000000011398	callq	*%r14
000000000001139b	addq	$0x58, %rsp
000000000001139f	popq	%rbx
00000000000113a0	popq	%r12
00000000000113a2	popq	%r13
00000000000113a4	popq	%r14
00000000000113a6	popq	%r15
00000000000113a8	popq	%rbp
00000000000113a9	retq
00000000000113aa	pushq	%rbp
00000000000113ab	movq	%rsp, %rbp
00000000000113ae	movq	%rsi, %rax
00000000000113b1	movq	0x20(%rdi), %rdi
00000000000113b5	movq	0x23874(%rip), %rsi     ## Objc selector ref: _openCustomActionFilePanelDidClose:
00000000000113bc	movq	%rax, %rdx
00000000000113bf	popq	%rbp
00000000000113c0	jmpq	*0x1803a(%rip)          ## Objc message: +[UniversalAccessPref _openCustomActionFilePanelDidClose:]
00000000000113c6	nopw	%cs:(%rax,%rax)
00000000000113d0	pushq	%rbp
00000000000113d1	movq	%rsp, %rbp
00000000000113d4	addq	$0x20, %rdi
00000000000113d8	movq	0x20(%rsi), %rsi
00000000000113dc	movl	$0x3, %edx
00000000000113e1	popq	%rbp
00000000000113e2	jmp	0x1e8a4                 ## symbol stub for: __Block_object_assign
00000000000113e7	nopw	(%rax,%rax)
00000000000113f0	pushq	%rbp
00000000000113f1	movq	%rsp, %rbp
00000000000113f4	movq	0x20(%rdi), %rdi
00000000000113f8	movl	$0x3, %esi
00000000000113fd	popq	%rbp
00000000000113fe	jmp	0x1e8aa                 ## symbol stub for: __Block_object_dispose
0000000000011403	pushq	%rbp
0000000000011404	movq	%rsp, %rbp
0000000000011407	pushq	%r15
0000000000011409	pushq	%r14
000000000001140b	pushq	%rbx
000000000001140c	pushq	%rax
000000000001140d	movq	%rdi, %rbx
0000000000011410	movq	_OBJC_IVAR_$_UAPSwitchViewController._openCustomActionFilePanel(%rip), %r14
0000000000011417	movq	(%rbx,%r14), %rdi
000000000001141b	movq	0x22fae(%rip), %rsi     ## Objc selector ref: orderOut:
0000000000011422	movq	0x17fd7(%rip), %r15     ## Objc message: -[%rdi orderOut:]
0000000000011429	xorl	%edx, %edx
000000000001142b	callq	*%r15
000000000001142e	movq	(%rbx,%r14), %rdi
0000000000011432	movq	0x22d17(%rip), %rsi     ## Objc selector ref: release
0000000000011439	callq	*%r15
000000000001143c	movq	_OBJC_IVAR_$_UAPSwitchViewController._openCustomActionFilePanel(%rip), %rdx
0000000000011443	xorl	%edi, %edi
0000000000011445	movq	%rbx, %rsi
0000000000011448	addq	$0x8, %rsp
000000000001144c	popq	%rbx
000000000001144d	popq	%r14
000000000001144f	popq	%r15
0000000000011451	popq	%rbp
0000000000011452	jmp	0x1e868                 ## symbol stub for: _objc_assign_ivar
0000000000011457	pushq	%rbp
0000000000011458	movq	%rsp, %rbp
000000000001145b	pushq	%r15
000000000001145d	pushq	%r14
000000000001145f	pushq	%r12
0000000000011461	pushq	%rbx
0000000000011462	movq	%rdi, %rbx
0000000000011465	cmpq	$0x1, %rdx
0000000000011469	jne	0x11533
000000000001146f	movq	_OBJC_IVAR_$_UAPSwitchViewController._openCustomActionFilePanel(%rip), %rax
0000000000011476	movq	(%rbx,%rax), %rdi
000000000001147a	movq	0x237b7(%rip), %rsi     ## Objc selector ref: URL
0000000000011481	movq	0x17f78(%rip), %r15     ## Objc message: -[%rdi URL]
0000000000011488	callq	*%r15
000000000001148b	movq	0x237ae(%rip), %rsi     ## Objc selector ref: path
0000000000011492	movq	%rax, %rdi
0000000000011495	callq	*%r15
0000000000011498	movq	%rax, %r14
000000000001149b	movq	_OBJC_IVAR_$_UAPSwitchViewController._editingSwitchInputEntity(%rip), %r12
00000000000114a2	movq	(%rbx,%r12), %rdi
00000000000114a6	leaq	_kActionCustomKey(%rip), %rax
00000000000114ad	movq	(%rax), %rdx
00000000000114b0	movq	0x23569(%rip), %rsi     ## Objc selector ref: setActionKey:
00000000000114b7	callq	*%r15
00000000000114ba	movq	(%rbx,%r12), %rdi
00000000000114be	movq	0x23533(%rip), %rsi     ## Objc selector ref: deviceSettings
00000000000114c5	callq	*%r15
00000000000114c8	movq	0x17d61(%rip), %rcx     ## literal pool symbol address: _UASwitchActionURLKey
00000000000114cf	movq	(%rcx), %rcx
00000000000114d2	movq	0x22d47(%rip), %rsi     ## Objc selector ref: setObject:forKey:
00000000000114d9	movq	%rax, %rdi
00000000000114dc	movq	%r14, %rdx
00000000000114df	callq	*%r15
00000000000114e2	movq	0x2375f(%rip), %rsi     ## Objc selector ref: lastPathComponent
00000000000114e9	movq	%r14, %rdi
00000000000114ec	callq	*%r15
00000000000114ef	movq	0x2375a(%rip), %rsi     ## Objc selector ref: stringByDeletingPathExtension
00000000000114f6	movq	%rax, %rdi
00000000000114f9	callq	*%r15
00000000000114fc	movq	%rax, %r14
00000000000114ff	movq	_OBJC_IVAR_$_UAPSwitchViewController._deviceActionPopupButton(%rip), %rax
0000000000011506	movq	(%rbx,%rax), %rdi
000000000001150a	movq	0x23637(%rip), %rsi     ## Objc selector ref: menu
0000000000011511	callq	*%r15
0000000000011514	movq	0x2304d(%rip), %rsi     ## Objc selector ref: itemAtIndex:
000000000001151b	xorl	%edx, %edx
000000000001151d	movq	%rax, %rdi
0000000000011520	callq	*%r15
0000000000011523	movq	0x233f6(%rip), %rsi     ## Objc selector ref: setTitle:
000000000001152a	movq	%rax, %rdi
000000000001152d	movq	%r14, %rdx
0000000000011530	callq	*%r15
0000000000011533	movq	0x23596(%rip), %rdx     ## Objc selector ref: _showAssignmentSheet
000000000001153a	movq	0x232cf(%rip), %rsi     ## Objc selector ref: performSelector:withObject:afterDelay:
0000000000011541	movsd	0x16dcf(%rip), %xmm0
0000000000011549	xorl	%ecx, %ecx
000000000001154b	movq	%rbx, %rdi
000000000001154e	popq	%rbx
000000000001154f	popq	%r12
0000000000011551	popq	%r14
0000000000011553	popq	%r15
0000000000011555	popq	%rbp
0000000000011556	jmpq	*0x17ea4(%rip)          ## Objc message: -[%rdi performSelector:withObject:afterDelay:]
000000000001155c	pushq	%rbp
000000000001155d	movq	%rsp, %rbp
0000000000011560	testb	%dl, %dl
0000000000011562	je	0x11572
0000000000011564	movq	0x236ed(%rip), %rsi     ## Objc selector ref: _waitForSecureTapFileToEnable
000000000001156b	popq	%rbp
000000000001156c	jmpq	*0x17e8e(%rip)          ## Objc message: -[%rdi _waitForSecureTapFileToEnable]
0000000000011572	movq	0x23417(%rip), %rsi     ## Objc selector ref: _enableAssistiveControl:
0000000000011579	xorl	%edx, %edx
000000000001157b	popq	%rbp
000000000001157c	jmpq	*0x17e7e(%rip)          ## Objc message: -[%rdi _enableAssistiveControl:]
0000000000011582	pushq	%rbp
0000000000011583	movq	%rsp, %rbp
0000000000011586	pushq	%r15
0000000000011588	pushq	%r14
000000000001158a	pushq	%r13
000000000001158c	pushq	%r12
000000000001158e	pushq	%rbx
000000000001158f	subq	$0x38, %rsp
0000000000011593	movq	%rdi, %r13
0000000000011596	movq	0x24043(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_NSFileManager
000000000001159d	movq	0x2361c(%rip), %rsi     ## Objc selector ref: defaultManager
00000000000115a4	movq	0x17e55(%rip), %rbx     ## Objc message: +[NSFileManager defaultManager]
00000000000115ab	callq	*%rbx
00000000000115ad	movq	0x236ac(%rip), %rsi     ## Objc selector ref: fileExistsAtPath:
00000000000115b4	leaq	0x196f5(%rip), %rdx     ## Objc cfstring ref: @"/var/db/.AccessibilitySecureTap"
00000000000115bb	movq	%rax, %rdi
00000000000115be	callq	*%rbx
00000000000115c0	testb	%al, %al
00000000000115c2	je	0x115de
00000000000115c4	movq	0x233c5(%rip), %rsi     ## Objc selector ref: _enableAssistiveControl:
00000000000115cb	movl	$0x1, %edx
00000000000115d0	movq	%r13, %rdi
00000000000115d3	callq	*0x17e27(%rip)          ## Objc message: -[%rdi _enableAssistiveControl:]
00000000000115d9	jmp	0x116a5
00000000000115de	movq	_OBJC_IVAR_$_UAPSwitchViewController._isAuthorizing(%rip), %rax
00000000000115e5	cmpb	$0x0, (%r13,%rax)
00000000000115eb	jne	0x116a5
00000000000115f1	movb	$0x1, (%r13,%rax)
00000000000115f7	movq	0x23ffa(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_AdminAuthenticator
00000000000115fe	movq	0x23663(%rip), %rsi     ## Objc selector ref: sharedAuthenticator
0000000000011605	callq	*%rbx
0000000000011607	movq	%rax, %r14
000000000001160a	movq	0x2365f(%rip), %rsi     ## Objc selector ref: isAuthenticated
0000000000011611	movq	%r14, %rdi
0000000000011614	callq	*%rbx
0000000000011616	testb	%al, %al
0000000000011618	jne	0x116a5
000000000001161e	movq	0x23fdb(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_SFAuthorization
0000000000011625	movq	0x2364c(%rip), %rsi     ## Objc selector ref: authorization
000000000001162c	callq	*0x17dce(%rip)          ## Objc message: +[SFAuthorization authorization]
0000000000011632	movq	%rax, %r15
0000000000011635	testq	%r15, %r15
0000000000011638	je	0x116a5
000000000001163a	xorl	%edi, %edi
000000000001163c	xorl	%esi, %esi
000000000001163e	callq	0x1e8c2                 ## symbol stub for: _dispatch_get_global_queue
0000000000011643	movq	%rax, %r12
0000000000011646	movq	0x17cfb(%rip), %rax     ## literal pool symbol address: __NSConcreteStackBlock
000000000001164d	movq	%rax, -0x60(%rbp)
0000000000011651	movl	$0x42000000, -0x58(%rbp) ## imm = 0x42000000
0000000000011658	movl	$0x0, -0x54(%rbp)
000000000001165f	leaq	0x4e(%rip), %rax
0000000000011666	movq	%rax, -0x50(%rbp)
000000000001166a	leaq	0x1879f(%rip), %rax
0000000000011671	movq	%rax, -0x48(%rbp)
0000000000011675	leaq	-0x40(%rbp), %rsi
0000000000011679	movq	%r15, %rdi
000000000001167c	callq	0x1e86e                 ## symbol stub for: _objc_assign_strongCast
0000000000011681	leaq	-0x38(%rbp), %rsi
0000000000011685	movq	%r14, %rdi
0000000000011688	callq	0x1e86e                 ## symbol stub for: _objc_assign_strongCast
000000000001168d	leaq	-0x30(%rbp), %rsi
0000000000011691	movq	%r13, %rdi
0000000000011694	callq	0x1e86e                 ## symbol stub for: _objc_assign_strongCast
0000000000011699	leaq	-0x60(%rbp), %rsi
000000000001169d	movq	%r12, %rdi
00000000000116a0	callq	0x1e8bc                 ## symbol stub for: _dispatch_async
00000000000116a5	addq	$0x38, %rsp
00000000000116a9	popq	%rbx
00000000000116aa	popq	%r12
00000000000116ac	popq	%r13
00000000000116ae	popq	%r14
00000000000116b0	popq	%r15
00000000000116b2	popq	%rbp
00000000000116b3	retq
00000000000116b4	pushq	%rbp
00000000000116b5	movq	%rsp, %rbp
00000000000116b8	pushq	%r15
00000000000116ba	pushq	%r14
00000000000116bc	pushq	%r13
00000000000116be	pushq	%r12
00000000000116c0	pushq	%rbx
00000000000116c1	subq	$0x38, %rsp
00000000000116c5	movq	%rdi, %rbx
00000000000116c8	movq	0x20(%rbx), %rdi
00000000000116cc	movq	0x235ad(%rip), %rsi     ## Objc selector ref: obtainWithRight:flags:error:
00000000000116d3	leaq	0x15e5b(%rip), %rdx     ## literal pool for: "system.preferences.accessibility"
00000000000116da	movl	$0x3, %ecx
00000000000116df	xorl	%r8d, %r8d
00000000000116e2	callq	*0x17d18(%rip)          ## Objc message: -[%rdi obtainWithRight:flags:error:]
00000000000116e8	movb	%al, %r14b
00000000000116eb	testb	%r14b, %r14b
00000000000116ee	je	0x11795
00000000000116f4	movq	0x20(%rbx), %rdx
00000000000116f8	movq	0x28(%rbx), %rdi
00000000000116fc	movq	0x23585(%rip), %rsi     ## Objc selector ref: authenticateUsingAuthorizationSync:
0000000000011703	callq	*0x17cf7(%rip)          ## Objc message: -[%rdi authenticateUsingAuthorizationSync:]
0000000000011709	testb	%al, %al
000000000001170b	je	0x11795
0000000000011711	movq	0x23ef0(%rip), %rax     ## Objc class ref: _OBJC_CLASS_$_UserUtilities
0000000000011718	movq	%rax, -0x60(%rbp)
000000000001171c	movq	0x23eed(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_NSData
0000000000011723	movq	0x23566(%rip), %rsi     ## Objc selector ref: dataWithBytes:length:
000000000001172a	leaq	0x15e25(%rip), %rdx     ## literal pool for: "a"
0000000000011731	movq	0x17cc8(%rip), %r15     ## Objc message: +[NSData dataWithBytes:length:]
0000000000011738	movl	$0x1, %ecx
000000000001173d	callq	*%r15
0000000000011740	movq	%rax, %r12
0000000000011743	movq	0x23de6(%rip), %r13     ## Objc class ref: _OBJC_CLASS_$_NSDictionary
000000000001174a	movq	0x23e0f(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_NSNumber
0000000000011751	movq	0x23540(%rip), %rsi     ## Objc selector ref: numberWithShort:
0000000000011758	movl	$0x124, %edx            ## imm = 0x124
000000000001175d	callq	*%r15
0000000000011760	movq	0x17991(%rip), %rcx     ## literal pool symbol address: _NSFilePosixPermissions
0000000000011767	movq	(%rcx), %rcx
000000000001176a	movq	0x2352f(%rip), %rsi     ## Objc selector ref: dictionaryWithObject:forKey:
0000000000011771	movq	%r13, %rdi
0000000000011774	movq	%rax, %rdx
0000000000011777	callq	*%r15
000000000001177a	movq	0x23527(%rip), %rsi     ## Objc selector ref: createFileWithContents:path:attributes:
0000000000011781	leaq	0x19528(%rip), %rcx     ## Objc cfstring ref: @"/var/db/.AccessibilitySecureTap"
0000000000011788	movq	-0x60(%rbp), %rdi
000000000001178c	movq	%r12, %rdx
000000000001178f	movq	%rax, %r8
0000000000011792	callq	*%r15
0000000000011795	movq	0x17bac(%rip), %rax     ## literal pool symbol address: __NSConcreteStackBlock
000000000001179c	movq	%rax, -0x58(%rbp)
00000000000117a0	movl	$0x42000000, -0x50(%rbp) ## imm = 0x42000000
00000000000117a7	movl	$0x0, -0x4c(%rbp)
00000000000117ae	leaq	0x7a(%rip), %rax
00000000000117b5	movq	%rax, -0x48(%rbp)
00000000000117b9	leaq	0x18620(%rip), %rax
00000000000117c0	movq	%rax, -0x40(%rbp)
00000000000117c4	leaq	-0x38(%rbp), %rsi
00000000000117c8	movq	0x30(%rbx), %rdi
00000000000117cc	callq	0x1e86e                 ## symbol stub for: _objc_assign_strongCast
00000000000117d1	movb	%r14b, -0x30(%rbp)
00000000000117d5	movq	0x17b84(%rip), %rdi     ## literal pool symbol address: __dispatch_main_q
00000000000117dc	leaq	-0x58(%rbp), %rsi
00000000000117e0	callq	0x1e8bc                 ## symbol stub for: _dispatch_async
00000000000117e5	movq	0x28(%rbx), %rdi
00000000000117e9	testq	%rdi, %rdi
00000000000117ec	je	0x117fb
00000000000117ee	movq	0x234c3(%rip), %rsi     ## Objc selector ref: deauthenticate
00000000000117f5	callq	*0x17c05(%rip)          ## Objc message: +[NSNumber deauthenticate]
00000000000117fb	movq	0x20(%rbx), %rdi
00000000000117ff	testq	%rdi, %rdi
0000000000011802	je	0x11811
0000000000011804	movq	0x234b5(%rip), %rsi     ## Objc selector ref: invalidateCredentials
000000000001180b	callq	*0x17bef(%rip)          ## Objc message: -[%rdi invalidateCredentials]
0000000000011811	movq	0x30(%rbx), %rax
0000000000011815	movq	_OBJC_IVAR_$_UAPSwitchViewController._isAuthorizing(%rip), %rcx
000000000001181c	movb	$0x0, (%rax,%rcx)
0000000000011820	addq	$0x38, %rsp
0000000000011824	popq	%rbx
0000000000011825	popq	%r12
0000000000011827	popq	%r13
0000000000011829	popq	%r14
000000000001182b	popq	%r15
000000000001182d	popq	%rbp
000000000001182e	retq
000000000001182f	pushq	%rbp
0000000000011830	movq	%rsp, %rbp
0000000000011833	movq	0x20(%rdi), %rax
0000000000011837	movq	0x23472(%rip), %rsi     ## Objc selector ref: _setSecureTapIsAllowed:
000000000001183e	movsbl	0x28(%rdi), %edx
0000000000011842	movq	%rax, %rdi
0000000000011845	popq	%rbp
0000000000011846	jmpq	*0x17bb4(%rip)          ## Objc message: -[%rdi _setSecureTapIsAllowed:]
000000000001184c	nopl	(%rax)
0000000000011850	pushq	%rbp
0000000000011851	movq	%rsp, %rbp
0000000000011854	addq	$0x20, %rdi
0000000000011858	movq	0x20(%rsi), %rsi
000000000001185c	movl	$0x3, %edx
0000000000011861	popq	%rbp
0000000000011862	jmp	0x1e8a4                 ## symbol stub for: __Block_object_assign
0000000000011867	nopw	(%rax,%rax)
0000000000011870	pushq	%rbp
0000000000011871	movq	%rsp, %rbp
0000000000011874	movq	0x20(%rdi), %rdi
0000000000011878	movl	$0x3, %esi
000000000001187d	popq	%rbp
000000000001187e	jmp	0x1e8aa                 ## symbol stub for: __Block_object_dispose
0000000000011883	nopw	%cs:(%rax,%rax)
0000000000011890	pushq	%rbp
0000000000011891	movq	%rsp, %rbp
0000000000011894	pushq	%r14
0000000000011896	pushq	%rbx
0000000000011897	movq	%rsi, %r14
000000000001189a	movq	%rdi, %rbx
000000000001189d	leaq	0x20(%rbx), %rdi
00000000000118a1	movq	0x20(%r14), %rsi
00000000000118a5	movl	$0x3, %edx
00000000000118aa	callq	0x1e8a4                 ## symbol stub for: __Block_object_assign
00000000000118af	leaq	0x28(%rbx), %rdi
00000000000118b3	movq	0x28(%r14), %rsi
00000000000118b7	movl	$0x3, %edx
00000000000118bc	callq	0x1e8a4                 ## symbol stub for: __Block_object_assign
00000000000118c1	addq	$0x30, %rbx
00000000000118c5	movq	0x30(%r14), %rsi
00000000000118c9	movl	$0x3, %edx
00000000000118ce	movq	%rbx, %rdi
00000000000118d1	popq	%rbx
00000000000118d2	popq	%r14
00000000000118d4	popq	%rbp
00000000000118d5	jmp	0x1e8a4                 ## symbol stub for: __Block_object_assign
00000000000118da	nopw	(%rax,%rax)
00000000000118e0	pushq	%rbp
00000000000118e1	movq	%rsp, %rbp
00000000000118e4	pushq	%rbx
00000000000118e5	pushq	%rax
00000000000118e6	movq	%rdi, %rbx
00000000000118e9	movq	0x20(%rbx), %rdi
00000000000118ed	movl	$0x3, %esi
00000000000118f2	callq	0x1e8aa                 ## symbol stub for: __Block_object_dispose
00000000000118f7	movq	0x28(%rbx), %rdi
00000000000118fb	movl	$0x3, %esi
0000000000011900	callq	0x1e8aa                 ## symbol stub for: __Block_object_dispose
0000000000011905	movq	0x30(%rbx), %rdi
0000000000011909	movl	$0x3, %esi
000000000001190e	addq	$0x8, %rsp
0000000000011912	popq	%rbx
0000000000011913	popq	%rbp
0000000000011914	jmp	0x1e8aa                 ## symbol stub for: __Block_object_dispose
0000000000011919	pushq	%rbp
000000000001191a	movq	%rsp, %rbp
000000000001191d	pushq	%rbx
000000000001191e	pushq	%rax
000000000001191f	movq	0x23cba(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_NSFileManager
0000000000011926	movq	0x23293(%rip), %rsi     ## Objc selector ref: defaultManager
000000000001192d	movq	0x17acc(%rip), %rbx     ## Objc message: +[NSFileManager defaultManager]
0000000000011934	callq	*%rbx
0000000000011936	movq	0x23323(%rip), %rsi     ## Objc selector ref: fileExistsAtPath:
000000000001193d	leaq	0x1936c(%rip), %rdx     ## Objc cfstring ref: @"/var/db/.AccessibilitySecureTap"
0000000000011944	movq	%rax, %rdi
0000000000011947	movq	%rbx, %rax
000000000001194a	addq	$0x8, %rsp
000000000001194e	popq	%rbx
000000000001194f	popq	%rbp
0000000000011950	jmpq	*%rax
0000000000011952	pushq	%rbp
0000000000011953	movq	%rsp, %rbp
0000000000011956	popq	%rbp
0000000000011957	jmp	0x1e82c                 ## symbol stub for: _AuthorizationDismiss
000000000001195c	pushq	%rbp
000000000001195d	movq	%rsp, %rbp
0000000000011960	movq	_OBJC_IVAR_$_UAPSwitchViewController._secondsFormatter(%rip), %rax
0000000000011967	movq	(%rdi,%rax), %rax
000000000001196b	popq	%rbp
000000000001196c	retq
000000000001196d	pushq	%rbp
000000000001196e	movq	%rsp, %rbp
0000000000011971	movq	%rdx, %rax
0000000000011974	movq	_OBJC_IVAR_$_UAPSwitchViewController._secondsFormatter(%rip), %rdx
000000000001197b	xorl	%r8d, %r8d
000000000001197e	xorl	%r9d, %r9d
0000000000011981	movq	%rax, %rcx
0000000000011984	popq	%rbp
0000000000011985	jmp	0x1e89e                 ## symbol stub for: _objc_setProperty
000000000001198a	pushq	%rbp
000000000001198b	movq	%rsp, %rbp
000000000001198e	movq	_OBJC_IVAR_$_UAPSwitchViewController._floatFormatter(%rip), %rax
0000000000011995	movq	(%rdi,%rax), %rax
0000000000011999	popq	%rbp
000000000001199a	retq
000000000001199b	pushq	%rbp
000000000001199c	movq	%rsp, %rbp
000000000001199f	movq	%rdx, %rax
00000000000119a2	movq	_OBJC_IVAR_$_UAPSwitchViewController._floatFormatter(%rip), %rdx
00000000000119a9	xorl	%r8d, %r8d
00000000000119ac	xorl	%r9d, %r9d
00000000000119af	movq	%rax, %rcx
00000000000119b2	popq	%rbp
00000000000119b3	jmp	0x1e89e                 ## symbol stub for: _objc_setProperty
00000000000119b8	pushq	%rbp
00000000000119b9	movq	%rsp, %rbp
00000000000119bc	movq	_OBJC_IVAR_$_UAPSwitchViewController._intFormatter(%rip), %rax
00000000000119c3	movq	(%rdi,%rax), %rax
00000000000119c7	popq	%rbp
00000000000119c8	retq
00000000000119c9	pushq	%rbp
00000000000119ca	movq	%rsp, %rbp
00000000000119cd	movq	%rdx, %rax
00000000000119d0	movq	_OBJC_IVAR_$_UAPSwitchViewController._intFormatter(%rip), %rdx
00000000000119d7	xorl	%r8d, %r8d
00000000000119da	xorl	%r9d, %r9d
00000000000119dd	movq	%rax, %rcx
00000000000119e0	popq	%rbp
00000000000119e1	jmp	0x1e89e                 ## symbol stub for: _objc_setProperty
00000000000119e6	pushq	%rbp
00000000000119e7	movq	%rsp, %rbp
00000000000119ea	movq	_OBJC_IVAR_$_UAPSwitchViewController._switchInputs(%rip), %rax
00000000000119f1	movq	(%rdi,%rax), %rax
00000000000119f5	popq	%rbp
00000000000119f6	retq
00000000000119f7	nop
00000000000119f8	nop
00000000000119f9	nop
00000000000119fa	nop
00000000000119fb	nop
00000000000119fc	nop
00000000000119fd	nop
00000000000119fe	nop
00000000000119ff	nop
0000000000011a00	pushq	%rbp
0000000000011a01	movq	%rsp, %rbp
0000000000011a04	pushq	%r15
0000000000011a06	pushq	%r14
0000000000011a08	pushq	%rbx
0000000000011a09	subq	$0x18, %rsp
0000000000011a0d	movq	%rdi, %r14
0000000000011a10	movq	0x23ae9(%rip), %rbx     ## Objc class ref: _OBJC_CLASS_$_NSBundle
0000000000011a17	movq	0x23aea(%rip), %rdi     ## Objc class ref: UniversalAccessPref
0000000000011a1e	movq	0x2269b(%rip), %rsi     ## Objc selector ref: class
0000000000011a25	movq	0x179d4(%rip), %r15     ## Objc message: +[UniversalAccessPref class]
0000000000011a2c	callq	*%r15
0000000000011a2f	movq	0x22782(%rip), %rsi     ## Objc selector ref: bundleForClass:
0000000000011a36	movq	%rbx, %rdi
0000000000011a39	movq	%rax, %rdx
0000000000011a3c	callq	*%r15
0000000000011a3f	movq	%r14, -0x28(%rbp)
0000000000011a43	movq	0x23d06(%rip), %rcx     ## Objc class ref: UAPMouseAndTrackpadViewController
0000000000011a4a	movq	%rcx, -0x20(%rbp)
0000000000011a4e	movq	0x227f3(%rip), %rsi     ## Objc selector ref: initWithNibName:bundle:
0000000000011a55	leaq	0x192d4(%rip), %rdx     ## Objc cfstring ref: @"MouseAndTrackpad"
0000000000011a5c	leaq	-0x28(%rbp), %rdi
0000000000011a60	movq	%rax, %rcx
0000000000011a63	callq	0x1e88c                 ## Objc message: -[[%rdi super] initWithNibName:bundle:]
0000000000011a68	movq	%rax, %rbx
0000000000011a6b	testq	%rbx, %rbx
0000000000011a6e	je	0x11a8c
0000000000011a70	movq	0x176f9(%rip), %rax     ## literal pool symbol address: _UADomainMouseSettingsDidChangeNotification
0000000000011a77	movq	(%rax), %rdi
0000000000011a7a	leaq	_OBJC_IVAR_$_UAPOptionsViewController._notificationOfInterest(%rip), %rax
0000000000011a81	movq	(%rax), %rdx
0000000000011a84	movq	%rbx, %rsi
0000000000011a87	callq	0x1e868                 ## symbol stub for: _objc_assign_ivar
0000000000011a8c	movq	%rbx, %rax
0000000000011a8f	addq	$0x18, %rsp
0000000000011a93	popq	%rbx
0000000000011a94	popq	%r14
0000000000011a96	popq	%r15
0000000000011a98	popq	%rbp
0000000000011a99	retq
0000000000011a9a	pushq	%rbp
0000000000011a9b	movq	%rsp, %rbp
0000000000011a9e	pushq	%r15
0000000000011aa0	pushq	%r14
0000000000011aa2	pushq	%r13
0000000000011aa4	pushq	%r12
0000000000011aa6	pushq	%rbx
0000000000011aa7	subq	$0x18, %rsp
0000000000011aab	movq	%rcx, %r15
0000000000011aae	movl	%edx, %r14d
0000000000011ab1	movq	$0x1, -0x30(%rbp)
0000000000011ab9	movq	$0x0, -0x38(%rbp)
0000000000011ac1	movq	0x178c8(%rip), %rax     ## literal pool symbol address: _kCFAllocatorDefault
0000000000011ac8	movq	(%rax), %rbx
0000000000011acb	leaq	-0x38(%rbp), %rdx
0000000000011acf	movl	$0xf, %esi
0000000000011ad4	movq	%rbx, %rdi
0000000000011ad7	callq	0x1e532                 ## symbol stub for: _CFNumberCreate
0000000000011adc	movq	%rax, %r13
0000000000011adf	leaq	-0x30(%rbp), %rdx
0000000000011ae3	movl	$0xf, %esi
0000000000011ae8	movq	%rbx, %rdi
0000000000011aeb	callq	0x1e532                 ## symbol stub for: _CFNumberCreate
0000000000011af0	movq	%rax, %r12
0000000000011af3	movq	0x178ce(%rip), %rdx     ## literal pool symbol address: _kCFTypeDictionaryKeyCallBacks
0000000000011afa	movq	0x178cf(%rip), %rcx     ## literal pool symbol address: _kCFTypeDictionaryValueCallBacks
0000000000011b01	movl	$0xc, %esi
0000000000011b06	movq	%rbx, %rdi
0000000000011b09	callq	0x1e514                 ## symbol stub for: _CFDictionaryCreateMutable
0000000000011b0e	movq	%rax, %rbx
0000000000011b11	testq	%r13, %r13
0000000000011b14	je	0x11b44
0000000000011b16	testq	%r12, %r12
0000000000011b19	je	0x11b44
0000000000011b1b	testq	%rbx, %rbx
0000000000011b1e	je	0x11b44
0000000000011b20	testb	%r14b, %r14b
0000000000011b23	movq	%r13, %rdx
0000000000011b26	cmovneq	%r12, %rdx
0000000000011b2a	movq	%rbx, %rdi
0000000000011b2d	movq	%r15, %rsi
0000000000011b30	callq	0x1e51a                 ## symbol stub for: _CFDictionarySetValue
0000000000011b35	callq	0x1e5aa                 ## symbol stub for: _getEVSHandle
0000000000011b3a	movl	%eax, %edi
0000000000011b3c	movq	%rbx, %rsi
0000000000011b3f	callq	0x1e4d8                 ## symbol stub for: _IOConnectSetCFProperties
0000000000011b44	testq	%r13, %r13
0000000000011b47	je	0x11b51
0000000000011b49	movq	%r13, %rdi
0000000000011b4c	callq	0x1e562                 ## symbol stub for: _CFRelease
0000000000011b51	testq	%r12, %r12
0000000000011b54	je	0x11b5e
0000000000011b56	movq	%r12, %rdi
0000000000011b59	callq	0x1e562                 ## symbol stub for: _CFRelease
0000000000011b5e	testq	%rbx, %rbx
0000000000011b61	je	0x11b6b
0000000000011b63	movq	%rbx, %rdi
0000000000011b66	callq	0x1e562                 ## symbol stub for: _CFRelease
0000000000011b6b	testb	%r14b, %r14b
0000000000011b6e	movq	0x17823(%rip), %rax     ## literal pool symbol address: _kCFBooleanFalse
0000000000011b75	cmovneq	0x17823(%rip), %rax     ## literal pool symbol address: _kCFBooleanTrue
0000000000011b7d	movq	(%rax), %r14
0000000000011b80	movq	0x17839(%rip), %rax     ## literal pool symbol address: _kCFPreferencesCurrentUser
0000000000011b87	movq	(%rax), %r12
0000000000011b8a	movq	0x1781f(%rip), %rax     ## literal pool symbol address: _kCFPreferencesAnyHost
0000000000011b91	movq	(%rax), %rbx
0000000000011b94	leaq	0x191b5(%rip), %r13     ## Objc cfstring ref: @"com.apple.driver.AppleBluetoothMultitouch.trackpad"
0000000000011b9b	movq	%r15, %rdi
0000000000011b9e	movq	%r14, %rsi
0000000000011ba1	movq	%r13, %rdx
0000000000011ba4	movq	%r12, %rcx
0000000000011ba7	movq	%rbx, %r8
0000000000011baa	callq	0x1e556                 ## symbol stub for: _CFPreferencesSetValue
0000000000011baf	movq	%r13, %rdi
0000000000011bb2	movq	%r12, %rsi
0000000000011bb5	movq	%rbx, %rdx
0000000000011bb8	callq	0x1e55c                 ## symbol stub for: _CFPreferencesSynchronize
0000000000011bbd	movq	%r13, %rdi
0000000000011bc0	callq	0x1e832                 ## symbol stub for: _BSKernelPreferenceChanged
0000000000011bc5	leaq	0x191a4(%rip), %r13     ## Objc cfstring ref: @"com.apple.AppleMultitouchTrackpad"
0000000000011bcc	movq	%r15, %rdi
0000000000011bcf	movq	%r14, %rsi
0000000000011bd2	movq	%r13, %rdx
0000000000011bd5	movq	%r12, %rcx
0000000000011bd8	movq	%rbx, %r8
0000000000011bdb	callq	0x1e556                 ## symbol stub for: _CFPreferencesSetValue
0000000000011be0	movq	%r13, %rdi
0000000000011be3	movq	%r12, %rsi
0000000000011be6	movq	%rbx, %rdx
0000000000011be9	callq	0x1e55c                 ## symbol stub for: _CFPreferencesSynchronize
0000000000011bee	movq	%r13, %rdi
0000000000011bf1	callq	0x1e832                 ## symbol stub for: _BSKernelPreferenceChanged
0000000000011bf6	addq	$0x18, %rsp
0000000000011bfa	popq	%rbx
0000000000011bfb	popq	%r12
0000000000011bfd	popq	%r13
0000000000011bff	popq	%r14
0000000000011c01	popq	%r15
0000000000011c03	popq	%rbp
0000000000011c04	retq
0000000000011c05	pushq	%rbp
0000000000011c06	movq	%rsp, %rbp
0000000000011c09	subq	$0x30, %rsp
0000000000011c0d	movq	0x17734(%rip), %rax     ## literal pool symbol address: __NSConcreteStackBlock
0000000000011c14	movq	%rax, -0x28(%rbp)
0000000000011c18	movl	$0x42000000, -0x20(%rbp) ## imm = 0x42000000
0000000000011c1f	movl	$0x0, -0x1c(%rbp)
0000000000011c26	leaq	0x3a(%rip), %rax
0000000000011c2d	movq	%rax, -0x18(%rbp)
0000000000011c31	leaq	0x18228(%rip), %rax
0000000000011c38	movq	%rax, -0x10(%rbp)
0000000000011c3c	leaq	-0x8(%rbp), %rsi
0000000000011c40	callq	0x1e86e                 ## symbol stub for: _objc_assign_strongCast
0000000000011c45	cmpq	$-0x1, 0x252d3(%rip)
0000000000011c4d	jne	0x11c55
0000000000011c4f	addq	$0x30, %rsp
0000000000011c53	popq	%rbp
0000000000011c54	retq
0000000000011c55	leaq	0x252c4(%rip), %rdi
0000000000011c5c	leaq	-0x28(%rbp), %rsi
0000000000011c60	callq	0x1e8c8                 ## symbol stub for: _dispatch_once
0000000000011c65	jmp	0x11c4f
0000000000011c67	pushq	%rbp
0000000000011c68	movq	%rsp, %rbp
0000000000011c6b	pushq	%r15
0000000000011c6d	pushq	%r14
0000000000011c6f	pushq	%r13
0000000000011c71	pushq	%r12
0000000000011c73	pushq	%rbx
0000000000011c74	subq	$0x28, %rsp
0000000000011c78	movq	%rdi, %r15
0000000000011c7b	movq	0x20(%r15), %rax
0000000000011c7f	movq	_OBJC_IVAR_$_UAPMouseAndTrackpadViewController._doubleClickSpeedView(%rip), %rcx
0000000000011c86	movq	(%rax,%rcx), %rdi
0000000000011c8a	movq	0x22627(%rip), %rsi     ## Objc selector ref: setTranslatesAutoresizingMaskIntoConstraints:
0000000000011c91	movq	0x17768(%rip), %r14     ## Objc message: -[%rdi setTranslatesAutoresizingMaskIntoConstraints:]
0000000000011c98	xorl	%edx, %edx
0000000000011c9a	callq	*%r14
0000000000011c9d	movq	0x20(%r15), %rax
0000000000011ca1	movq	_OBJC_IVAR_$_UAPMouseAndTrackpadViewController._springLoadingDelayView(%rip), %r12
0000000000011ca8	movq	(%rax,%r12), %rdi
0000000000011cac	movq	0x22605(%rip), %rsi     ## Objc selector ref: setTranslatesAutoresizingMaskIntoConstraints:
0000000000011cb3	xorl	%edx, %edx
0000000000011cb5	callq	*%r14
0000000000011cb8	movq	0x20(%r15), %rax
0000000000011cbc	movq	_OBJC_IVAR_$_UAPMouseAndTrackpadViewController._ignoreTrackpadWhenExternalMouseView(%rip), %rcx
0000000000011cc3	movq	(%rax,%rcx), %rdi
0000000000011cc7	movq	0x225ea(%rip), %rsi     ## Objc selector ref: setTranslatesAutoresizingMaskIntoConstraints:
0000000000011cce	xorl	%edx, %edx
0000000000011cd0	callq	*%r14
0000000000011cd3	movq	0x20(%r15), %rax
0000000000011cd7	movq	_OBJC_IVAR_$_UAPMouseAndTrackpadViewController._primaryStackView(%rip), %r13
0000000000011cde	movq	(%rax,%r13), %rdi
0000000000011ce2	movq	0x225cf(%rip), %rsi     ## Objc selector ref: setTranslatesAutoresizingMaskIntoConstraints:
0000000000011ce9	xorl	%edx, %edx
0000000000011ceb	callq	*%r14
0000000000011cee	movq	0x20(%r15), %rax
0000000000011cf2	movq	(%rax,%r13), %rdi
0000000000011cf6	movq	0x22fd3(%rip), %rsi     ## Objc selector ref: setSpacing:
0000000000011cfd	xorps	%xmm0, %xmm0
0000000000011d00	callq	*%r14
0000000000011d03	movq	0x20(%r15), %rax
0000000000011d07	movq	(%rax,%r13), %rdi
0000000000011d0b	movq	0x22fc6(%rip), %rsi     ## Objc selector ref: setEdgeInsets:
0000000000011d12	movq	0x173d7(%rip), %rcx     ## literal pool symbol address: _NSEdgeInsetsZero
0000000000011d19	movq	0x18(%rcx), %rax
0000000000011d1d	movq	%rax, 0x18(%rsp)
0000000000011d22	movq	0x10(%rcx), %rax
0000000000011d26	movq	%rax, 0x10(%rsp)
0000000000011d2b	movq	(%rcx), %rax
0000000000011d2e	movq	0x8(%rcx), %rcx
0000000000011d32	movq	%rcx, 0x8(%rsp)
0000000000011d37	movq	%rax, (%rsp)
0000000000011d3b	callq	*%r14
0000000000011d3e	movq	0x20(%r15), %rax
0000000000011d42	movq	(%rax,%r13), %rdi
0000000000011d46	movq	0x22f93(%rip), %rsi     ## Objc selector ref: setAlignment:
0000000000011d4d	movl	$0x1, %edx
0000000000011d52	callq	*%r14
0000000000011d55	movq	0x20(%r15), %rax
0000000000011d59	movq	(%rax,%r13), %rdi
0000000000011d5d	movq	_OBJC_IVAR_$_UAPMouseAndTrackpadViewController._doubleClickSpeedView(%rip), %rcx
0000000000011d64	movq	(%rax,%rcx), %rdx
0000000000011d68	movq	0x22d79(%rip), %rsi     ## Objc selector ref: addView:inGravity:
0000000000011d6f	movl	$0x2, %ecx
0000000000011d74	callq	*%r14
0000000000011d77	movq	0x20(%r15), %rax
0000000000011d7b	movq	(%rax,%r13), %rdi
0000000000011d7f	movq	(%rax,%r12), %rdx
0000000000011d83	movq	0x22d5e(%rip), %rsi     ## Objc selector ref: addView:inGravity:
0000000000011d8a	movl	$0x2, %ecx
0000000000011d8f	callq	*%r14
0000000000011d92	movq	0x20(%r15), %rdi
0000000000011d96	movq	0x22623(%rip), %rsi     ## Objc selector ref: view
0000000000011d9d	callq	*%r14
0000000000011da0	movq	%r14, %r10
0000000000011da3	movq	%rax, %r14
0000000000011da6	testq	%r14, %r14
0000000000011da9	je	0x11e11
0000000000011dab	movq	0x20(%r15), %rax
0000000000011daf	movq	_OBJC_IVAR_$_UAPMouseAndTrackpadViewController._doubleClickSpeedLabel(%rip), %rcx
0000000000011db6	movq	(%rax,%rcx), %rdx
0000000000011dba	testq	%rdx, %rdx
0000000000011dbd	je	0x11e11
0000000000011dbf	movq	_OBJC_IVAR_$_UAPMouseAndTrackpadViewController._enableSpringLoadingCheckbox(%rip), %rcx
0000000000011dc6	movq	(%rax,%rcx), %r9
0000000000011dca	testq	%r9, %r9
0000000000011dcd	je	0x11e11
0000000000011dcf	movq	0x2376a(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_NSLayoutConstraint
0000000000011dd6	movq	0x224eb(%rip), %rsi     ## Objc selector ref: constraintWithItem:attribute:relatedBy:toItem:attribute:multiplier:constant:
0000000000011ddd	movq	$0x6, (%rsp)
0000000000011de5	movsd	0x16503(%rip), %xmm0
0000000000011ded	movl	$0x6, %ecx
0000000000011df2	xorl	%r8d, %r8d
0000000000011df5	xorps	%xmm1, %xmm1
0000000000011df8	movq	%r10, %r12
0000000000011dfb	callq	*%r12
0000000000011dfe	movq	0x224cb(%rip), %rsi     ## Objc selector ref: addConstraint:
0000000000011e05	movq	%r14, %rdi
0000000000011e08	movq	%rax, %rdx
0000000000011e0b	callq	*%r12
0000000000011e0e	movq	%r12, %r10
0000000000011e11	movq	0x20(%r15), %rax
0000000000011e15	movq	_OBJC_IVAR_$_UAPMouseAndTrackpadViewController._trackpadOptionsStackView(%rip), %r14
0000000000011e1c	movq	(%rax,%r14), %rdi
0000000000011e20	movq	0x22491(%rip), %rsi     ## Objc selector ref: setTranslatesAutoresizingMaskIntoConstraints:
0000000000011e27	xorl	%edx, %edx
0000000000011e29	movq	%r10, %rbx
0000000000011e2c	callq	*%rbx
0000000000011e2e	movq	0x20(%r15), %rax
0000000000011e32	movq	_OBJC_IVAR_$_UAPMouseAndTrackpadViewController._trackpadOptionsPrimaryView(%rip), %r12
0000000000011e39	movq	(%rax,%r12), %rdi
0000000000011e3d	movq	0x22474(%rip), %rsi     ## Objc selector ref: setTranslatesAutoresizingMaskIntoConstraints:
0000000000011e44	xorl	%edx, %edx
0000000000011e46	callq	*%rbx
0000000000011e48	movq	0x20(%r15), %rax
0000000000011e4c	movq	_OBJC_IVAR_$_UAPMouseAndTrackpadViewController._enableTrackpadTapToClickView(%rip), %rcx
0000000000011e53	movq	(%rax,%rcx), %rdi
0000000000011e57	movq	0x2245a(%rip), %rsi     ## Objc selector ref: setTranslatesAutoresizingMaskIntoConstraints:
0000000000011e5e	xorl	%edx, %edx
0000000000011e60	callq	*%rbx
0000000000011e62	movq	0x20(%r15), %rax
0000000000011e66	movq	(%rax,%r14), %rdi
0000000000011e6a	movq	0x22e5f(%rip), %rsi     ## Objc selector ref: setSpacing:
0000000000011e71	xorps	%xmm0, %xmm0
0000000000011e74	callq	*%rbx
0000000000011e76	movq	0x20(%r15), %rax
0000000000011e7a	movq	(%rax,%r14), %rdi
0000000000011e7e	movq	0x22e53(%rip), %rsi     ## Objc selector ref: setEdgeInsets:
0000000000011e85	movq	0x17264(%rip), %rax     ## literal pool symbol address: _NSEdgeInsetsZero
0000000000011e8c	movq	%rax, %rcx
0000000000011e8f	movq	0x18(%rcx), %rax
0000000000011e93	movq	%rax, 0x18(%rsp)
0000000000011e98	movq	0x10(%rcx), %rax
0000000000011e9c	movq	%rax, 0x10(%rsp)
0000000000011ea1	movq	(%rcx), %rax
0000000000011ea4	movq	0x8(%rcx), %rcx
0000000000011ea8	movq	%rcx, 0x8(%rsp)
0000000000011ead	movq	%rax, (%rsp)
0000000000011eb1	callq	*%rbx
0000000000011eb3	movq	0x20(%r15), %rax
0000000000011eb7	movq	(%rax,%r14), %rdi
0000000000011ebb	movq	(%rax,%r12), %rdx
0000000000011ebf	movq	0x22c22(%rip), %rsi     ## Objc selector ref: addView:inGravity:
0000000000011ec6	movl	$0x2, %ecx
0000000000011ecb	movq	%rbx, %rax
0000000000011ece	addq	$0x28, %rsp
0000000000011ed2	popq	%rbx
0000000000011ed3	popq	%r12
0000000000011ed5	popq	%r13
0000000000011ed7	popq	%r14
0000000000011ed9	popq	%r15
0000000000011edb	popq	%rbp
0000000000011edc	jmpq	*%rax
0000000000011ede	nop
0000000000011ee0	pushq	%rbp
0000000000011ee1	movq	%rsp, %rbp
0000000000011ee4	addq	$0x20, %rdi
0000000000011ee8	movq	0x20(%rsi), %rsi
0000000000011eec	movl	$0x3, %edx
0000000000011ef1	popq	%rbp
0000000000011ef2	jmp	0x1e8a4                 ## symbol stub for: __Block_object_assign
0000000000011ef7	nopw	(%rax,%rax)
0000000000011f00	pushq	%rbp
0000000000011f01	movq	%rsp, %rbp
0000000000011f04	movq	0x20(%rdi), %rdi
0000000000011f08	movl	$0x3, %esi
0000000000011f0d	popq	%rbp
0000000000011f0e	jmp	0x1e8aa                 ## symbol stub for: __Block_object_dispose
0000000000011f13	pushq	%rbp
0000000000011f14	movq	%rsp, %rbp
0000000000011f17	pushq	%rbx
0000000000011f18	subq	$0x18, %rsp
0000000000011f1c	movq	%rdi, %rbx
0000000000011f1f	movq	%rbx, -0x18(%rbp)
0000000000011f23	movq	0x23826(%rip), %rax     ## Objc class ref: UAPMouseAndTrackpadViewController
0000000000011f2a	movq	%rax, -0x10(%rbp)
0000000000011f2e	movq	0x2283b(%rip), %rsi     ## Objc selector ref: loadView
0000000000011f35	leaq	-0x18(%rbp), %rdi
0000000000011f39	callq	0x1e88c                 ## Objc message: -[[%rdi super] loadView]
0000000000011f3e	movq	0x22da3(%rip), %rsi     ## Objc selector ref: _setupPrimaryStackView
0000000000011f45	movq	%rbx, %rdi
0000000000011f48	callq	*0x174b2(%rip)          ## Objc message: -[%rdi _setupPrimaryStackView]
0000000000011f4e	addq	$0x18, %rsp
0000000000011f52	popq	%rbx
0000000000011f53	popq	%rbp
0000000000011f54	retq
0000000000011f55	pushq	%rbp
0000000000011f56	movq	%rsp, %rbp
0000000000011f59	pushq	%r14
0000000000011f5b	pushq	%rbx
0000000000011f5c	movq	%rdi, %rbx
0000000000011f5f	movq	_OBJC_IVAR_$_UAPMouseAndTrackpadViewController._springLoadingDelaySlider(%rip), %rax
0000000000011f66	movq	(%rbx,%rax), %rdi
0000000000011f6a	movq	0x22537(%rip), %rsi     ## Objc selector ref: floatValue
0000000000011f71	movq	0x17488(%rip), %r14     ## Objc message: -[%rdi floatValue]
0000000000011f78	callq	*%r14
0000000000011f7b	movq	0x22d6e(%rip), %rsi     ## Objc selector ref: _setSystemSpringingDelay:
0000000000011f82	movq	%rbx, %rdi
0000000000011f85	movq	%r14, %rax
0000000000011f88	popq	%rbx
0000000000011f89	popq	%r14
0000000000011f8b	popq	%rbp
0000000000011f8c	jmpq	*%rax
0000000000011f8e	pushq	%rbp
0000000000011f8f	movq	%rsp, %rbp
0000000000011f92	pushq	%r15
0000000000011f94	pushq	%r14
0000000000011f96	pushq	%rbx
0000000000011f97	pushq	%rax
0000000000011f98	movq	%rdi, %rbx
0000000000011f9b	movq	_OBJC_IVAR_$_UAPMouseAndTrackpadViewController._enableSpringLoadingCheckbox(%rip), %rax
0000000000011fa2	movq	(%rbx,%rax), %rdi
0000000000011fa6	movq	0x226fb(%rip), %rsi     ## Objc selector ref: state
0000000000011fad	movq	0x1744c(%rip), %r15     ## Objc message: -[%rdi state]
0000000000011fb4	callq	*%r15
0000000000011fb7	cmpq	$0x1, %rax
0000000000011fbb	sete	%al
0000000000011fbe	movq	0x22d33(%rip), %rsi     ## Objc selector ref: _setSystemSpringingEnabled:
0000000000011fc5	movzbl	%al, %r14d
0000000000011fc9	movq	%rbx, %rdi
0000000000011fcc	movl	%r14d, %edx
0000000000011fcf	callq	*%r15
0000000000011fd2	movq	_OBJC_IVAR_$_UAPMouseAndTrackpadViewController._springLoadingDelaySlider(%rip), %rax
0000000000011fd9	movq	(%rbx,%rax), %rdi
0000000000011fdd	movq	0x2275c(%rip), %rsi     ## Objc selector ref: setEnabled:
0000000000011fe4	movl	%r14d, %edx
0000000000011fe7	movq	%r15, %rax
0000000000011fea	addq	$0x8, %rsp
0000000000011fee	popq	%rbx
0000000000011fef	popq	%r14
0000000000011ff1	popq	%r15
0000000000011ff3	popq	%rbp
0000000000011ff4	jmpq	*%rax
0000000000011ff6	pushq	%rbp
0000000000011ff7	movq	%rsp, %rbp
0000000000011ffa	pushq	%r15
0000000000011ffc	pushq	%r14
0000000000011ffe	pushq	%rbx
0000000000011fff	pushq	%rax
0000000000012000	movq	%rdi, %rbx
0000000000012003	movq	_OBJC_IVAR_$_UAPMouseAndTrackpadViewController._ignoreTrackpadWhenExternalMouseCheckbox(%rip), %rax
000000000001200a	movq	(%rbx,%rax), %rdi
000000000001200e	movq	0x22693(%rip), %rsi     ## Objc selector ref: state
0000000000012015	movq	0x173e4(%rip), %r15     ## Objc message: -[%rdi state]
000000000001201c	callq	*%r15
000000000001201f	cmpq	$0x1, %rax
0000000000012023	sete	%r14b
0000000000012027	movq	0x226f2(%rip), %rsi     ## Objc selector ref: stopListeningForChanges
000000000001202e	movq	%rbx, %rdi
0000000000012031	callq	*%r15
0000000000012034	movzbl	%r14b, %edi
0000000000012038	callq	0x1e5fe                 ## symbol stub for: _UAIgnoreTrackpadIfMousePresentSetEnabled
000000000001203d	movq	0x226e4(%rip), %rsi     ## Objc selector ref: startListeningForChanges
0000000000012044	movq	%rbx, %rdi
0000000000012047	movq	%r15, %rax
000000000001204a	addq	$0x8, %rsp
000000000001204e	popq	%rbx
000000000001204f	popq	%r14
0000000000012051	popq	%r15
0000000000012053	popq	%rbp
0000000000012054	jmpq	*%rax
0000000000012056	pushq	%rbp
0000000000012057	movq	%rsp, %rbp
000000000001205a	pushq	%rbx
000000000001205b	pushq	%rax
000000000001205c	movq	0x220d5(%rip), %rsi     ## Objc selector ref: integerValue
0000000000012063	movq	%rdx, %rdi
0000000000012066	callq	*0x17394(%rip)          ## Objc message: -[%rdi integerValue]
000000000001206c	cmpq	$0xa, %rax
0000000000012070	ja	0x120c3
0000000000012072	leaq	0x16387(%rip), %rcx
0000000000012079	movsd	(%rcx,%rax,8), %xmm0
000000000001207e	movsd	%xmm0, -0x10(%rbp)
0000000000012083	callq	0x1e5b0                 ## symbol stub for: _setDoubleClickThresholdLevel
0000000000012088	movq	0x23589(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_NSCFPrefManager
000000000001208f	movq	0x22c6a(%rip), %rsi     ## Objc selector ref: standardPrefManager
0000000000012096	movq	0x17363(%rip), %rbx     ## Objc message: +[NSCFPrefManager standardPrefManager]
000000000001209d	callq	*%rbx
000000000001209f	movq	0x16f6a(%rip), %rcx     ## literal pool symbol address: _DoubleClickThresholdTimeKey
00000000000120a6	movq	(%rcx), %rdx
00000000000120a9	movq	0x22c58(%rip), %rsi     ## Objc selector ref: setDouble:forKey:
00000000000120b0	movq	%rax, %rdi
00000000000120b3	movsd	-0x10(%rbp), %xmm0
00000000000120b8	movq	%rbx, %rax
00000000000120bb	addq	$0x8, %rsp
00000000000120bf	popq	%rbx
00000000000120c0	popq	%rbp
00000000000120c1	jmpq	*%rax
00000000000120c3	addq	$0x8, %rsp
00000000000120c7	popq	%rbx
00000000000120c8	popq	%rbp
00000000000120c9	retq
00000000000120ca	pushq	%rbp
00000000000120cb	movq	%rsp, %rbp
00000000000120ce	pushq	%r15
00000000000120d0	pushq	%r14
00000000000120d2	pushq	%rbx
00000000000120d3	pushq	%rax
00000000000120d4	movq	%rdi, %r15
00000000000120d7	movq	_OBJC_IVAR_$_UAPMouseAndTrackpadViewController._trackpadScrollBehaviorPopup(%rip), %rax
00000000000120de	movq	(%r15,%rax), %rdi
00000000000120e2	movq	0x225af(%rip), %rsi     ## Objc selector ref: indexOfSelectedItem
00000000000120e9	movq	0x17310(%rip), %r14     ## Objc message: -[%rdi indexOfSelectedItem]
00000000000120f0	callq	*%r14
00000000000120f3	movq	0x22c16(%rip), %rsi     ## Objc selector ref: _ioSetBoolProperty:forKey:
00000000000120fa	testq	%rax, %rax
00000000000120fd	sete	%al
0000000000012100	movzbl	%al, %edx
0000000000012103	leaq	0x18c86(%rip), %rcx     ## Objc cfstring ref: @"TrackpadMomentumScroll"
000000000001210a	movq	0x17287(%rip), %rbx     ## literal pool symbol address: _kCFBooleanFalse
0000000000012111	cmoveq	0x17287(%rip), %rbx     ## literal pool symbol address: _kCFBooleanTrue
0000000000012119	movq	%r15, %rdi
000000000001211c	callq	*%r14
000000000001211f	movq	(%rbx), %rsi
0000000000012122	movq	0x1727f(%rip), %rax     ## literal pool symbol address: _kCFPreferencesAnyApplication
0000000000012129	movq	(%rax), %r14
000000000001212c	movq	0x1728d(%rip), %rax     ## literal pool symbol address: _kCFPreferencesCurrentUser
0000000000012133	movq	(%rax), %r15
0000000000012136	movq	0x1727b(%rip), %rax     ## literal pool symbol address: _kCFPreferencesCurrentHost
000000000001213d	movq	(%rax), %rbx
0000000000012140	leaq	0x18c69(%rip), %rdi     ## Objc cfstring ref: @"com.apple.trackpad.momentumScroll"
0000000000012147	movq	%r14, %rdx
000000000001214a	movq	%r15, %rcx
000000000001214d	movq	%rbx, %r8
0000000000012150	callq	0x1e556                 ## symbol stub for: _CFPreferencesSetValue
0000000000012155	movq	%r14, %rdi
0000000000012158	movq	%r15, %rsi
000000000001215b	movq	%rbx, %rdx
000000000001215e	addq	$0x8, %rsp
0000000000012162	popq	%rbx
0000000000012163	popq	%r14
0000000000012165	popq	%r15
0000000000012167	popq	%rbp
0000000000012168	jmp	0x1e55c                 ## symbol stub for: _CFPreferencesSynchronize
000000000001216d	pushq	%rbp
000000000001216e	movq	%rsp, %rbp
0000000000012171	pushq	%r15
0000000000012173	pushq	%r14
0000000000012175	pushq	%r13
0000000000012177	pushq	%r12
0000000000012179	pushq	%rbx
000000000001217a	pushq	%rax
000000000001217b	movq	%rdi, %r14
000000000001217e	movq	_OBJC_IVAR_$_UAPMouseAndTrackpadViewController._enableTrackpadScrollCheckbox(%rip), %rax
0000000000012185	movq	(%r14,%rax), %rdi
0000000000012189	movq	0x22518(%rip), %rsi     ## Objc selector ref: state
0000000000012190	movq	0x17269(%rip), %r13     ## Objc message: -[%rdi state]
0000000000012197	callq	*%r13
000000000001219a	cmpq	$0x1, %rax
000000000001219e	sete	%al
00000000000121a1	movq	_OBJC_IVAR_$_UAPMouseAndTrackpadViewController._trackpadScrollBehaviorPopup(%rip), %rcx
00000000000121a8	movq	(%r14,%rcx), %rdi
00000000000121ac	movq	0x2258d(%rip), %rsi     ## Objc selector ref: setEnabled:
00000000000121b3	movzbl	%al, %ebx
00000000000121b6	movl	%ebx, %edx
00000000000121b8	callq	*%r13
00000000000121bb	movq	0x22b4e(%rip), %rsi     ## Objc selector ref: _ioSetBoolProperty:forKey:
00000000000121c2	leaq	0x18c07(%rip), %rcx     ## Objc cfstring ref: @"TrackpadScroll"
00000000000121c9	movq	%r14, %rdi
00000000000121cc	movl	%ebx, %edx
00000000000121ce	callq	*%r13
00000000000121d1	movq	0x22b38(%rip), %rsi     ## Objc selector ref: _ioSetBoolProperty:forKey:
00000000000121d8	leaq	0x18c11(%rip), %rcx     ## Objc cfstring ref: @"TrackpadHorizScroll"
00000000000121df	movq	%r14, %rdi
00000000000121e2	movl	%ebx, %edx
00000000000121e4	callq	*%r13
00000000000121e7	movq	0x16f42(%rip), %rax     ## literal pool symbol address: _TrackPadScrollBehaviorKey
00000000000121ee	movq	(%rax), %r14
00000000000121f1	movq	0x23368(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_NSNumber
00000000000121f8	addq	%rbx, %rbx
00000000000121fb	movq	0x224ce(%rip), %rsi     ## Objc selector ref: numberWithInteger:
0000000000012202	movq	%rbx, %rdx
0000000000012205	callq	*%r13
0000000000012208	movq	0x17199(%rip), %rcx     ## literal pool symbol address: _kCFPreferencesAnyApplication
000000000001220f	movq	(%rcx), %r15
0000000000012212	movq	0x171a7(%rip), %rcx     ## literal pool symbol address: _kCFPreferencesCurrentUser
0000000000012219	movq	(%rcx), %r12
000000000001221c	movq	0x17195(%rip), %rcx     ## literal pool symbol address: _kCFPreferencesCurrentHost
0000000000012223	movq	(%rcx), %rbx
0000000000012226	movq	%r14, %rdi
0000000000012229	movq	%rax, %rsi
000000000001222c	movq	%r15, %rdx
000000000001222f	movq	%r12, %rcx
0000000000012232	movq	%rbx, %r8
0000000000012235	callq	0x1e556                 ## symbol stub for: _CFPreferencesSetValue
000000000001223a	movq	%r15, %rdi
000000000001223d	movq	%r12, %rsi
0000000000012240	movq	%rbx, %rdx
0000000000012243	callq	0x1e55c                 ## symbol stub for: _CFPreferencesSynchronize
0000000000012248	movq	0x23361(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_NSDistributedNotificationCenter
000000000001224f	movq	0x220da(%rip), %rsi     ## Objc selector ref: defaultCenter
0000000000012256	callq	*%r13
0000000000012259	movq	0x22ab8(%rip), %rsi     ## Objc selector ref: postNotificationName:object:
0000000000012260	leaq	0x18ba9(%rip), %rdx     ## Objc cfstring ref: @"AppleGestureScrollSettingChanged"
0000000000012267	xorl	%ecx, %ecx
0000000000012269	movq	%rax, %rdi
000000000001226c	movq	%r13, %rax
000000000001226f	addq	$0x8, %rsp
0000000000012273	popq	%rbx
0000000000012274	popq	%r12
0000000000012276	popq	%r13
0000000000012278	popq	%r14
000000000001227a	popq	%r15
000000000001227c	popq	%rbp
000000000001227d	jmpq	*%rax
000000000001227f	pushq	%rbp
0000000000012280	movq	%rsp, %rbp
0000000000012283	pushq	%r15
0000000000012285	pushq	%r14
0000000000012287	pushq	%r13
0000000000012289	pushq	%r12
000000000001228b	pushq	%rbx
000000000001228c	pushq	%rax
000000000001228d	movq	%rdi, %r15
0000000000012290	movq	0x23389(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_MTTGestureBackEnd
0000000000012297	movq	0x22a82(%rip), %rsi     ## Objc selector ref: sharedInstance
000000000001229e	movq	0x1715b(%rip), %r13     ## Objc message: +[MTTGestureBackEnd sharedInstance]
00000000000122a5	callq	*%r13
00000000000122a8	movq	%rax, %rbx
00000000000122ab	movq	0x22a76(%rip), %rsi     ## Objc selector ref: tapBehavior
00000000000122b2	movq	%rbx, %rdi
00000000000122b5	callq	*%r13
00000000000122b8	movq	%rax, %r14
00000000000122bb	movq	0x22a6e(%rip), %rsi     ## Objc selector ref: threeFingerDrag
00000000000122c2	movq	%rbx, %rdi
00000000000122c5	callq	*%r13
00000000000122c8	testb	%al, %al
00000000000122ca	je	0x122f4
00000000000122cc	movq	%r14, -0x30(%rbp)
00000000000122d0	movq	_OBJC_IVAR_$_UAPMouseAndTrackpadViewController._trackpadDraggingBehaviorPopup(%rip), %rax
00000000000122d7	movq	(%r15,%rax), %rdi
00000000000122db	movq	0x22196(%rip), %rsi     ## Objc selector ref: selectItemWithTag:
00000000000122e2	movl	$0x2, %edx
00000000000122e7	callq	*0x17113(%rip)          ## Objc message: -[%rdi selectItemWithTag:]
00000000000122ed	movb	$0x1, %al
00000000000122ef	xorl	%r12d, %r12d
00000000000122f2	jmp	0x12347
00000000000122f4	cmpq	$0x2, %r14
00000000000122f8	jne	0x12314
00000000000122fa	movq	%r14, -0x30(%rbp)
00000000000122fe	movq	_OBJC_IVAR_$_UAPMouseAndTrackpadViewController._trackpadDraggingBehaviorPopup(%rip), %rax
0000000000012305	movq	(%r15,%rax), %rdi
0000000000012309	movq	0x22168(%rip), %rsi     ## Objc selector ref: selectItemWithTag:
0000000000012310	xorl	%edx, %edx
0000000000012312	jmp	0x12335
0000000000012314	cmpq	$0x3, %r14
0000000000012318	movq	%r14, -0x30(%rbp)
000000000001231c	jne	0x12342
000000000001231e	movq	_OBJC_IVAR_$_UAPMouseAndTrackpadViewController._trackpadDraggingBehaviorPopup(%rip), %rax
0000000000012325	movq	(%r15,%rax), %rdi
0000000000012329	movq	0x22148(%rip), %rsi     ## Objc selector ref: selectItemWithTag:
0000000000012330	movl	$0x1, %edx
0000000000012335	callq	*0x170c5(%rip)          ## Objc message: -[%rdi selectItemWithTag:]
000000000001233b	movb	$0x1, %al
000000000001233d	movb	$0x1, %r12b
0000000000012340	jmp	0x12347
0000000000012342	xorl	%eax, %eax
0000000000012344	xorl	%r12d, %r12d
0000000000012347	movq	_OBJC_IVAR_$_UAPMouseAndTrackpadViewController._enableTrackpadDraggingCheckbox(%rip), %rcx
000000000001234e	movq	(%r15,%rcx), %rdi
0000000000012352	movzbl	%al, %ebx
0000000000012355	movq	0x220e4(%rip), %rsi     ## Objc selector ref: setState:
000000000001235c	movq	%rbx, %rdx
000000000001235f	callq	*%r13
0000000000012362	movq	_OBJC_IVAR_$_UAPMouseAndTrackpadViewController._enableTrackpadTapToClickCheckbox(%rip), %r14
0000000000012369	movq	(%r15,%r14), %rdi
000000000001236d	movb	%r12b, %al
0000000000012370	xorb	$0x1, %al
0000000000012372	movq	0x223c7(%rip), %rsi     ## Objc selector ref: setEnabled:
0000000000012379	movzbl	%al, %edx
000000000001237c	callq	*%r13
000000000001237f	movq	(%r15,%r14), %rdi
0000000000012383	cmpq	$0x1, -0x30(%rbp)
0000000000012388	sete	%al
000000000001238b	orb	%r12b, %al
000000000001238e	movzbl	%al, %edx
0000000000012391	movq	0x220a8(%rip), %rsi     ## Objc selector ref: setState:
0000000000012398	callq	*%r13
000000000001239b	movq	_OBJC_IVAR_$_UAPMouseAndTrackpadViewController._trackpadDraggingBehaviorPopup(%rip), %rax
00000000000123a2	movq	(%r15,%rax), %rdi
00000000000123a6	movq	0x22393(%rip), %rsi     ## Objc selector ref: setEnabled:
00000000000123ad	movl	%ebx, %edx
00000000000123af	movq	%r13, %rax
00000000000123b2	addq	$0x8, %rsp
00000000000123b6	popq	%rbx
00000000000123b7	popq	%r12
00000000000123b9	popq	%r13
00000000000123bb	popq	%r14
00000000000123bd	popq	%r15
00000000000123bf	popq	%rbp
00000000000123c0	jmpq	*%rax
00000000000123c2	pushq	%rbp
00000000000123c3	movq	%rsp, %rbp
00000000000123c6	movq	0x2296b(%rip), %rsi     ## Objc selector ref: _updateTrackpadDraggingPrefsFromUI
00000000000123cd	popq	%rbp
00000000000123ce	jmpq	*0x1702c(%rip)          ## Objc message: -[%rdi _updateTrackpadDraggingPrefsFromUI]
00000000000123d4	pushq	%rbp
00000000000123d5	movq	%rsp, %rbp
00000000000123d8	pushq	%r15
00000000000123da	pushq	%r14
00000000000123dc	pushq	%r12
00000000000123de	pushq	%rbx
00000000000123df	movq	%rdi, %r15
00000000000123e2	movq	_OBJC_IVAR_$_UAPMouseAndTrackpadViewController._enableTrackpadDraggingCheckbox(%rip), %rax
00000000000123e9	movq	(%r15,%rax), %rdi
00000000000123ed	movq	0x222b4(%rip), %rsi     ## Objc selector ref: state
00000000000123f4	movq	0x17005(%rip), %r12     ## Objc message: -[%rdi state]
00000000000123fb	callq	*%r12
00000000000123fe	movq	%rax, %rbx
0000000000012401	movq	0x23218(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_MTTGestureBackEnd
0000000000012408	movq	0x22911(%rip), %rsi     ## Objc selector ref: sharedInstance
000000000001240f	callq	*%r12
0000000000012412	movq	%rax, %r14
0000000000012415	cmpq	$0x1, %rbx
0000000000012419	jne	0x1245a
000000000001241b	movq	_OBJC_IVAR_$_UAPMouseAndTrackpadViewController._trackpadDraggingBehaviorPopup(%rip), %rax
0000000000012422	movq	(%r15,%rax), %rdi
0000000000012426	movq	0x22173(%rip), %rsi     ## Objc selector ref: selectedItem
000000000001242d	callq	*%r12
0000000000012430	movq	0x22259(%rip), %rsi     ## Objc selector ref: tag
0000000000012437	movq	%rax, %rdi
000000000001243a	callq	*%r12
000000000001243d	cmpq	$0x2, %rax
0000000000012441	jne	0x1248a
0000000000012443	movq	0x228f6(%rip), %rsi     ## Objc selector ref: setThreeFingerDrag:
000000000001244a	movl	$0x1, %edx
000000000001244f	movq	%r14, %rdi
0000000000012452	callq	*0x16fa8(%rip)          ## Objc message: +[MTTGestureBackEnd setThreeFingerDrag:]
0000000000012458	jmp	0x124ac
000000000001245a	movq	0x228df(%rip), %rsi     ## Objc selector ref: setThreeFingerDrag:
0000000000012461	xorl	%edx, %edx
0000000000012463	movq	%r14, %rdi
0000000000012466	callq	*%r12
0000000000012469	movq	_OBJC_IVAR_$_UAPMouseAndTrackpadViewController._cachedTrackpadTapBehavior(%rip), %rax
0000000000012470	cmpq	$0x0, (%r15,%rax)
0000000000012475	setne	%al
0000000000012478	movzbl	%al, %edx
000000000001247b	movq	0x228c6(%rip), %rsi     ## Objc selector ref: setTapBehavior:
0000000000012482	movq	%r14, %rdi
0000000000012485	callq	*%r12
0000000000012488	jmp	0x124ac
000000000001248a	movq	0x228b7(%rip), %rsi     ## Objc selector ref: setTapBehavior:
0000000000012491	cmpq	$0x1, %rax
0000000000012495	jne	0x1249e
0000000000012497	movl	$0x3, %edx
000000000001249c	jmp	0x124a3
000000000001249e	movl	$0x2, %edx
00000000000124a3	movq	%r14, %rdi
00000000000124a6	callq	*0x16f54(%rip)          ## Objc message: -[%rdi setTapBehavior:]
00000000000124ac	movq	0x2289d(%rip), %rsi     ## Objc selector ref: _updateTrackpadDraggingUI
00000000000124b3	movq	%r15, %rdi
00000000000124b6	popq	%rbx
00000000000124b7	popq	%r12
00000000000124b9	popq	%r14
00000000000124bb	popq	%r15
00000000000124bd	popq	%rbp
00000000000124be	jmpq	*0x16f3c(%rip)          ## Objc message: -[%rdi _updateTrackpadDraggingUI]
00000000000124c4	pushq	%rbp
00000000000124c5	movq	%rsp, %rbp
00000000000124c8	movq	0x22869(%rip), %rsi     ## Objc selector ref: _updateTrackpadDraggingPrefsFromUI
00000000000124cf	popq	%rbp
00000000000124d0	jmpq	*0x16f2a(%rip)          ## Objc message: -[%rdi _updateTrackpadDraggingPrefsFromUI]
00000000000124d6	pushq	%rbp
00000000000124d7	movq	%rsp, %rbp
00000000000124da	pushq	%rbx
00000000000124db	pushq	%rax
00000000000124dc	movq	_OBJC_IVAR_$_UAPMouseAndTrackpadViewController._trackpadScrollSpeedSlider(%rip), %rax
00000000000124e3	movq	(%rdi,%rax), %rdi
00000000000124e7	movq	0x21c4a(%rip), %rsi     ## Objc selector ref: integerValue
00000000000124ee	movq	0x16f0b(%rip), %rbx     ## Objc message: -[%rdi integerValue]
00000000000124f5	callq	*%rbx
00000000000124f7	leaq	0x15f62(%rip), %rcx
00000000000124fe	movsd	(%rcx,%rax,8), %xmm0
0000000000012503	movsd	%xmm0, -0x10(%rbp)
0000000000012508	callq	0x1e5aa                 ## symbol stub for: _getEVSHandle
000000000001250d	leaq	0x1891c(%rip), %rsi     ## Objc cfstring ref: @"HIDTrackpadScrollAcceleration"
0000000000012514	movl	%eax, %edi
0000000000012516	movsd	-0x10(%rbp), %xmm0
000000000001251b	callq	0x1e5f2                 ## symbol stub for: _UAIOHIDSetAccelerationWithKey
0000000000012520	movq	0x230f1(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_NSCFPrefManager
0000000000012527	movq	0x227d2(%rip), %rsi     ## Objc selector ref: standardPrefManager
000000000001252e	callq	*%rbx
0000000000012530	movq	0x16c01(%rip), %rcx     ## literal pool symbol address: _TrackPadScrollingKey
0000000000012537	movq	(%rcx), %rdx
000000000001253a	movq	0x227c7(%rip), %rsi     ## Objc selector ref: setDouble:forKey:
0000000000012541	movq	%rax, %rdi
0000000000012544	movsd	-0x10(%rbp), %xmm0
0000000000012549	movq	%rbx, %rax
000000000001254c	addq	$0x8, %rsp
0000000000012550	popq	%rbx
0000000000012551	popq	%rbp
0000000000012552	jmpq	*%rax
0000000000012554	pushq	%rbp
0000000000012555	movq	%rsp, %rbp
0000000000012558	pushq	%r15
000000000001255a	pushq	%r14
000000000001255c	pushq	%rbx
000000000001255d	pushq	%rax
000000000001255e	movq	%rdi, %r14
0000000000012561	movq	_OBJC_IVAR_$_UAPMouseAndTrackpadViewController._enableTrackpadTapToClickCheckbox(%rip), %rax
0000000000012568	movq	(%r14,%rax), %rdi
000000000001256c	movq	0x22135(%rip), %rsi     ## Objc selector ref: state
0000000000012573	movq	0x16e86(%rip), %r15     ## Objc message: +[NSCFPrefManager state]
000000000001257a	callq	*%r15
000000000001257d	cmpq	$0x1, %rax
0000000000012581	sete	%bl
0000000000012584	movq	0x23095(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_MTTGestureBackEnd
000000000001258b	movq	0x2278e(%rip), %rsi     ## Objc selector ref: sharedInstance
0000000000012592	callq	*%r15
0000000000012595	movzbl	%bl, %edx
0000000000012598	movq	0x227a9(%rip), %rsi     ## Objc selector ref: setTapBehavior:
000000000001259f	movq	%rax, %rdi
00000000000125a2	callq	*%r15
00000000000125a5	movq	0x2278c(%rip), %rsi     ## Objc selector ref: _updateTrackpadDraggingPrefsFromUI
00000000000125ac	movq	%r14, %rdi
00000000000125af	movq	%r15, %rax
00000000000125b2	addq	$0x8, %rsp
00000000000125b6	popq	%rbx
00000000000125b7	popq	%r14
00000000000125b9	popq	%r15
00000000000125bb	popq	%rbp
00000000000125bc	jmpq	*%rax
00000000000125be	pushq	%rbp
00000000000125bf	movq	%rsp, %rbp
00000000000125c2	pushq	%r15
00000000000125c4	pushq	%r14
00000000000125c6	pushq	%r12
00000000000125c8	pushq	%rbx
00000000000125c9	subq	$0x30, %rsp
00000000000125cd	movq	%rdi, %rbx
00000000000125d0	movq	0x221f1(%rip), %rsi     ## Objc selector ref: _readPreferences:cacheSettings:
00000000000125d7	movq	0x16e22(%rip), %r12     ## Objc message: +[MTTGestureBackEnd _readPreferences:cacheSettings:]
00000000000125de	xorl	%edx, %edx
00000000000125e0	movl	$0x1, %ecx
00000000000125e5	callq	*%r12
00000000000125e8	movq	0x21dd1(%rip), %rsi     ## Objc selector ref: view
00000000000125ef	movq	%rbx, %rdi
00000000000125f2	callq	*%r12
00000000000125f5	movq	0x21dcc(%rip), %rsi     ## Objc selector ref: window
00000000000125fc	movq	%rax, %rdi
00000000000125ff	callq	*%r12
0000000000012602	movq	%rax, %r14
0000000000012605	movq	_OBJC_IVAR_$_UAPMouseAndTrackpadViewController._trackpadOptionsSheet(%rip), %rax
000000000001260c	movq	(%rbx,%rax), %r15
0000000000012610	movq	0x16d31(%rip), %rax     ## literal pool symbol address: __NSConcreteStackBlock
0000000000012617	movq	%rax, -0x48(%rbp)
000000000001261b	movl	$0x42000000, -0x40(%rbp) ## imm = 0x42000000
0000000000012622	movl	$0x0, -0x3c(%rbp)
0000000000012629	leaq	0x3c(%rip), %rax
0000000000012630	movq	%rax, -0x38(%rbp)
0000000000012634	leaq	0x17855(%rip), %rax
000000000001263b	movq	%rax, -0x30(%rbp)
000000000001263f	leaq	-0x28(%rbp), %rsi
0000000000012643	movq	%rbx, %rdi
0000000000012646	callq	0x1e86e                 ## symbol stub for: _objc_assign_strongCast
000000000001264b	movq	0x21d86(%rip), %rsi     ## Objc selector ref: beginSheet:completionHandler:
0000000000012652	leaq	-0x48(%rbp), %rcx
0000000000012656	movq	%r14, %rdi
0000000000012659	movq	%r15, %rdx
000000000001265c	callq	*%r12
000000000001265f	addq	$0x30, %rsp
0000000000012663	popq	%rbx
0000000000012664	popq	%r12
0000000000012666	popq	%r14
0000000000012668	popq	%r15
000000000001266a	popq	%rbp
000000000001266b	retq
000000000001266c	pushq	%rbp
000000000001266d	movq	%rsp, %rbp
0000000000012670	movq	0x20(%rdi), %rax
0000000000012674	movq	_OBJC_IVAR_$_UAPMouseAndTrackpadViewController._trackpadOptionsSheet(%rip), %rcx
000000000001267b	movq	(%rax,%rcx), %rdi
000000000001267f	movq	0x21d4a(%rip), %rsi     ## Objc selector ref: orderOut:
0000000000012686	xorl	%edx, %edx
0000000000012688	popq	%rbp
0000000000012689	jmpq	*0x16d71(%rip)          ## Objc message: -[%rdi orderOut:]
000000000001268f	nop
0000000000012690	pushq	%rbp
0000000000012691	movq	%rsp, %rbp
0000000000012694	addq	$0x20, %rdi
0000000000012698	movq	0x20(%rsi), %rsi
000000000001269c	movl	$0x3, %edx
00000000000126a1	popq	%rbp
00000000000126a2	jmp	0x1e8a4                 ## symbol stub for: __Block_object_assign
00000000000126a7	nopw	(%rax,%rax)
00000000000126b0	pushq	%rbp
00000000000126b1	movq	%rsp, %rbp
00000000000126b4	movq	0x20(%rdi), %rdi
00000000000126b8	movl	$0x3, %esi
00000000000126bd	popq	%rbp
00000000000126be	jmp	0x1e8aa                 ## symbol stub for: __Block_object_dispose
00000000000126c3	pushq	%rbp
00000000000126c4	movq	%rsp, %rbp
00000000000126c7	pushq	%r15
00000000000126c9	pushq	%r14
00000000000126cb	pushq	%r12
00000000000126cd	pushq	%rbx
00000000000126ce	subq	$0x30, %rsp
00000000000126d2	movq	%rdi, %rbx
00000000000126d5	movq	0x220ec(%rip), %rsi     ## Objc selector ref: _readPreferences:cacheSettings:
00000000000126dc	movq	0x16d1d(%rip), %r12     ## Objc message: -[%rdi _readPreferences:cacheSettings:]
00000000000126e3	xorl	%edx, %edx
00000000000126e5	movl	$0x1, %ecx
00000000000126ea	callq	*%r12
00000000000126ed	movq	0x21ccc(%rip), %rsi     ## Objc selector ref: view
00000000000126f4	movq	%rbx, %rdi
00000000000126f7	callq	*%r12
00000000000126fa	movq	0x21cc7(%rip), %rsi     ## Objc selector ref: window
0000000000012701	movq	%rax, %rdi
0000000000012704	callq	*%r12
0000000000012707	movq	%rax, %r14
000000000001270a	movq	_OBJC_IVAR_$_UAPMouseAndTrackpadViewController._mouseOptionsSheet(%rip), %rax
0000000000012711	movq	(%rbx,%rax), %r15
0000000000012715	movq	0x16c2c(%rip), %rax     ## literal pool symbol address: __NSConcreteStackBlock
000000000001271c	movq	%rax, -0x48(%rbp)
0000000000012720	movl	$0x42000000, -0x40(%rbp) ## imm = 0x42000000
0000000000012727	movl	$0x0, -0x3c(%rbp)
000000000001272e	leaq	0x3c(%rip), %rax
0000000000012735	movq	%rax, -0x38(%rbp)
0000000000012739	leaq	0x17780(%rip), %rax
0000000000012740	movq	%rax, -0x30(%rbp)
0000000000012744	leaq	-0x28(%rbp), %rsi
0000000000012748	movq	%rbx, %rdi
000000000001274b	callq	0x1e86e                 ## symbol stub for: _objc_assign_strongCast
0000000000012750	movq	0x21c81(%rip), %rsi     ## Objc selector ref: beginSheet:completionHandler:
0000000000012757	leaq	-0x48(%rbp), %rcx
000000000001275b	movq	%r14, %rdi
000000000001275e	movq	%r15, %rdx
0000000000012761	callq	*%r12
0000000000012764	addq	$0x30, %rsp
0000000000012768	popq	%rbx
0000000000012769	popq	%r12
000000000001276b	popq	%r14
000000000001276d	popq	%r15
000000000001276f	popq	%rbp
0000000000012770	retq
0000000000012771	pushq	%rbp
0000000000012772	movq	%rsp, %rbp
0000000000012775	movq	0x20(%rdi), %rax
0000000000012779	movq	_OBJC_IVAR_$_UAPMouseAndTrackpadViewController._mouseOptionsSheet(%rip), %rcx
0000000000012780	movq	(%rax,%rcx), %rdi
0000000000012784	movq	0x21c45(%rip), %rsi     ## Objc selector ref: orderOut:
000000000001278b	xorl	%edx, %edx
000000000001278d	popq	%rbp
000000000001278e	jmpq	*0x16c6c(%rip)          ## Objc message: -[%rdi orderOut:]
0000000000012794	nopw	%cs:(%rax,%rax)
00000000000127a0	pushq	%rbp
00000000000127a1	movq	%rsp, %rbp
00000000000127a4	addq	$0x20, %rdi
00000000000127a8	movq	0x20(%rsi), %rsi
00000000000127ac	movl	$0x3, %edx
00000000000127b1	popq	%rbp
00000000000127b2	jmp	0x1e8a4                 ## symbol stub for: __Block_object_assign
00000000000127b7	nopw	(%rax,%rax)
00000000000127c0	pushq	%rbp
00000000000127c1	movq	%rsp, %rbp
00000000000127c4	movq	0x20(%rdi), %rdi
00000000000127c8	movl	$0x3, %esi
00000000000127cd	popq	%rbp
00000000000127ce	jmp	0x1e8aa                 ## symbol stub for: __Block_object_dispose
00000000000127d3	pushq	%rbp
00000000000127d4	movq	%rsp, %rbp
00000000000127d7	pushq	%r15
00000000000127d9	pushq	%r14
00000000000127db	pushq	%r12
00000000000127dd	pushq	%rbx
00000000000127de	subq	$0x30, %rsp
00000000000127e2	movq	%rdi, %rbx
00000000000127e5	movq	0x21fdc(%rip), %rsi     ## Objc selector ref: _readPreferences:cacheSettings:
00000000000127ec	movq	0x16c0d(%rip), %r12     ## Objc message: -[%rdi _readPreferences:cacheSettings:]
00000000000127f3	xorl	%edx, %edx
00000000000127f5	movl	$0x1, %ecx
00000000000127fa	callq	*%r12
00000000000127fd	movq	0x21bbc(%rip), %rsi     ## Objc selector ref: view
0000000000012804	movq	%rbx, %rdi
0000000000012807	callq	*%r12
000000000001280a	movq	0x21bb7(%rip), %rsi     ## Objc selector ref: window
0000000000012811	movq	%rax, %rdi
0000000000012814	callq	*%r12
0000000000012817	movq	%rax, %r14
000000000001281a	movq	_OBJC_IVAR_$_UAPMouseAndTrackpadViewController._mouseKeysOptionsSheet(%rip), %rax
0000000000012821	movq	(%rbx,%rax), %r15
0000000000012825	movq	0x16b1c(%rip), %rax     ## literal pool symbol address: __NSConcreteStackBlock
000000000001282c	movq	%rax, -0x48(%rbp)
0000000000012830	movl	$0x42000000, -0x40(%rbp) ## imm = 0x42000000
0000000000012837	movl	$0x0, -0x3c(%rbp)
000000000001283e	leaq	0x3c(%rip), %rax
0000000000012845	movq	%rax, -0x38(%rbp)
0000000000012849	leaq	0x176a0(%rip), %rax
0000000000012850	movq	%rax, -0x30(%rbp)
0000000000012854	leaq	-0x28(%rbp), %rsi
0000000000012858	movq	%rbx, %rdi
000000000001285b	callq	0x1e86e                 ## symbol stub for: _objc_assign_strongCast
0000000000012860	movq	0x21b71(%rip), %rsi     ## Objc selector ref: beginSheet:completionHandler:
0000000000012867	leaq	-0x48(%rbp), %rcx
000000000001286b	movq	%r14, %rdi
000000000001286e	movq	%r15, %rdx
0000000000012871	callq	*%r12
0000000000012874	addq	$0x30, %rsp
0000000000012878	popq	%rbx
0000000000012879	popq	%r12
000000000001287b	popq	%r14
000000000001287d	popq	%r15
000000000001287f	popq	%rbp
0000000000012880	retq
0000000000012881	pushq	%rbp
0000000000012882	movq	%rsp, %rbp
0000000000012885	movq	0x20(%rdi), %rax
0000000000012889	movq	_OBJC_IVAR_$_UAPMouseAndTrackpadViewController._mouseKeysOptionsSheet(%rip), %rcx
0000000000012890	movq	(%rax,%rcx), %rdi
0000000000012894	movq	0x21b35(%rip), %rsi     ## Objc selector ref: orderOut:
000000000001289b	xorl	%edx, %edx
000000000001289d	popq	%rbp
000000000001289e	jmpq	*0x16b5c(%rip)          ## Objc message: -[%rdi orderOut:]
00000000000128a4	nopw	%cs:(%rax,%rax)
00000000000128b0	pushq	%rbp
00000000000128b1	movq	%rsp, %rbp
00000000000128b4	addq	$0x20, %rdi
00000000000128b8	movq	0x20(%rsi), %rsi
00000000000128bc	movl	$0x3, %edx
00000000000128c1	popq	%rbp
00000000000128c2	jmp	0x1e8a4                 ## symbol stub for: __Block_object_assign
00000000000128c7	nopw	(%rax,%rax)
00000000000128d0	pushq	%rbp
00000000000128d1	movq	%rsp, %rbp
00000000000128d4	movq	0x20(%rdi), %rdi
00000000000128d8	movl	$0x3, %esi
00000000000128dd	popq	%rbp
00000000000128de	jmp	0x1e8aa                 ## symbol stub for: __Block_object_dispose
00000000000128e3	pushq	%rbp
00000000000128e4	movq	%rsp, %rbp
00000000000128e7	pushq	%r15
00000000000128e9	pushq	%r14
00000000000128eb	pushq	%r13
00000000000128ed	pushq	%r12
00000000000128ef	pushq	%rbx
00000000000128f0	pushq	%rax
00000000000128f1	movq	%rdi, %r14
00000000000128f4	movq	_OBJC_IVAR_$_UAPMouseAndTrackpadViewController._mouseScrollBehaviorPopup(%rip), %rax
00000000000128fb	movq	(%r14,%rax), %rdi
00000000000128ff	movq	0x21d92(%rip), %rsi     ## Objc selector ref: indexOfSelectedItem
0000000000012906	movq	0x16af3(%rip), %r13     ## Objc message: -[%rdi indexOfSelectedItem]
000000000001290d	callq	*%r13
0000000000012910	testq	%rax, %rax
0000000000012913	movq	0x16a86(%rip), %rax     ## literal pool symbol address: _kCFBooleanTrue
000000000001291a	cmovneq	0x16a76(%rip), %rax     ## literal pool symbol address: _kCFBooleanFalse
0000000000012922	movq	(%rax), %rsi
0000000000012925	movq	0x16a94(%rip), %rax     ## literal pool symbol address: _kCFPreferencesCurrentUser
000000000001292c	movq	(%rax), %r15
000000000001292f	movq	0x16a7a(%rip), %rax     ## literal pool symbol address: _kCFPreferencesAnyHost
0000000000012936	movq	(%rax), %rbx
0000000000012939	leaq	0x18510(%rip), %rdi     ## Objc cfstring ref: @"MouseMomentumScroll"
0000000000012940	leaq	0x18529(%rip), %r12     ## Objc cfstring ref: @"com.apple.driver.AppleBluetoothMultitouch.mouse"
0000000000012947	movq	%r12, %rdx
000000000001294a	movq	%r15, %rcx
000000000001294d	movq	%rbx, %r8
0000000000012950	callq	0x1e556                 ## symbol stub for: _CFPreferencesSetValue
0000000000012955	movq	%r12, %rdi
0000000000012958	movq	%r15, %rsi
000000000001295b	movq	%rbx, %rdx
000000000001295e	callq	0x1e55c                 ## symbol stub for: _CFPreferencesSynchronize
0000000000012963	movq	_OBJC_IVAR_$_UAPMouseAndTrackpadViewController._enableMouseScrollCheckbox(%rip), %rax
000000000001296a	movq	(%r14,%rax), %rdi
000000000001296e	movq	0x21d33(%rip), %rsi     ## Objc selector ref: state
0000000000012975	callq	*%r13
0000000000012978	cmpq	$0x1, %rax
000000000001297c	jne	0x12998
000000000001297e	leaq	0x184eb(%rip), %rdi     ## Objc cfstring ref: @"com.apple.driver.AppleBluetoothMultitouch.mouse"
0000000000012985	addq	$0x8, %rsp
0000000000012989	popq	%rbx
000000000001298a	popq	%r12
000000000001298c	popq	%r13
000000000001298e	popq	%r14
0000000000012990	popq	%r15
0000000000012992	popq	%rbp
0000000000012993	jmp	0x1e832                 ## symbol stub for: _BSKernelPreferenceChanged
0000000000012998	addq	$0x8, %rsp
000000000001299c	popq	%rbx
000000000001299d	popq	%r12
000000000001299f	popq	%r13
00000000000129a1	popq	%r14
00000000000129a3	popq	%r15
00000000000129a5	popq	%rbp
00000000000129a6	retq
00000000000129a7	pushq	%rbp
00000000000129a8	movq	%rsp, %rbp
00000000000129ab	pushq	%r15
00000000000129ad	pushq	%r14
00000000000129af	pushq	%r13
00000000000129b1	pushq	%r12
00000000000129b3	pushq	%rbx
00000000000129b4	pushq	%rax
00000000000129b5	movq	_OBJC_IVAR_$_UAPMouseAndTrackpadViewController._enableMouseScrollCheckbox(%rip), %rax
00000000000129bc	movq	(%rdi,%rax), %rdi
00000000000129c0	movq	0x21ce1(%rip), %rsi     ## Objc selector ref: state
00000000000129c7	movq	0x16a32(%rip), %r13     ## Objc message: -[%rdi state]
00000000000129ce	callq	*%r13
00000000000129d1	cmpq	$0x1, %rax
00000000000129d5	movq	0x169bc(%rip), %rax     ## literal pool symbol address: _kCFBooleanFalse
00000000000129dc	cmoveq	0x169bc(%rip), %rax     ## literal pool symbol address: _kCFBooleanTrue
00000000000129e4	movq	(%rax), %r14
00000000000129e7	movq	0x169d2(%rip), %rax     ## literal pool symbol address: _kCFPreferencesCurrentUser
00000000000129ee	movq	(%rax), %r15
00000000000129f1	movq	0x169b8(%rip), %rax     ## literal pool symbol address: _kCFPreferencesAnyHost
00000000000129f8	movq	(%rax), %rbx
00000000000129fb	leaq	0x1848e(%rip), %rdi     ## Objc cfstring ref: @"MouseHorizontalScroll"
0000000000012a02	leaq	0x18467(%rip), %r12     ## Objc cfstring ref: @"com.apple.driver.AppleBluetoothMultitouch.mouse"
0000000000012a09	movq	%r14, %rsi
0000000000012a0c	movq	%r12, %rdx
0000000000012a0f	movq	%r15, %rcx
0000000000012a12	movq	%rbx, %r8
0000000000012a15	callq	0x1e556                 ## symbol stub for: _CFPreferencesSetValue
0000000000012a1a	leaq	0x1848f(%rip), %rdi     ## Objc cfstring ref: @"MouseVerticalScroll"
0000000000012a21	movq	%r14, %rsi
0000000000012a24	movq	%r12, %rdx
0000000000012a27	movq	%r15, %rcx
0000000000012a2a	movq	%rbx, %r8
0000000000012a2d	callq	0x1e556                 ## symbol stub for: _CFPreferencesSetValue
0000000000012a32	movq	%r12, %rdi
0000000000012a35	movq	%r15, %rsi
0000000000012a38	movq	%rbx, %rdx
0000000000012a3b	callq	0x1e55c                 ## symbol stub for: _CFPreferencesSynchronize
0000000000012a40	movq	%r12, %rdi
0000000000012a43	callq	0x1e832                 ## symbol stub for: _BSKernelPreferenceChanged
0000000000012a48	movq	0x22b61(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_NSDistributedNotificationCenter
0000000000012a4f	movq	0x218da(%rip), %rsi     ## Objc selector ref: defaultCenter
0000000000012a56	callq	*%r13
0000000000012a59	movq	0x222b8(%rip), %rsi     ## Objc selector ref: postNotificationName:object:
0000000000012a60	leaq	0x183a9(%rip), %rdx     ## Objc cfstring ref: @"AppleGestureScrollSettingChanged"
0000000000012a67	xorl	%ecx, %ecx
0000000000012a69	movq	%rax, %rdi
0000000000012a6c	movq	%r13, %rax
0000000000012a6f	addq	$0x8, %rsp
0000000000012a73	popq	%rbx
0000000000012a74	popq	%r12
0000000000012a76	popq	%r13
0000000000012a78	popq	%r14
0000000000012a7a	popq	%r15
0000000000012a7c	popq	%rbp
0000000000012a7d	jmpq	*%rax
0000000000012a7f	pushq	%rbp
0000000000012a80	movq	%rsp, %rbp
0000000000012a83	pushq	%rbx
0000000000012a84	pushq	%rax
0000000000012a85	movq	_OBJC_IVAR_$_UAPMouseAndTrackpadViewController._mouseScrollSpeedSlider(%rip), %rax
0000000000012a8c	movq	(%rdi,%rax), %rdi
0000000000012a90	movq	0x216a1(%rip), %rsi     ## Objc selector ref: integerValue
0000000000012a97	movq	0x16962(%rip), %rbx     ## Objc message: +[NSDistributedNotificationCenter integerValue]
0000000000012a9e	callq	*%rbx
0000000000012aa0	leaq	0x159b9(%rip), %rcx
0000000000012aa7	movsd	(%rcx,%rax,8), %xmm0
0000000000012aac	movsd	%xmm0, -0x10(%rbp)
0000000000012ab1	callq	0x1e5aa                 ## symbol stub for: _getEVSHandle
0000000000012ab6	leaq	0x18413(%rip), %rsi     ## Objc cfstring ref: @"HIDMouseScrollAcceleration"
0000000000012abd	movl	%eax, %edi
0000000000012abf	movsd	-0x10(%rbp), %xmm0
0000000000012ac4	callq	0x1e5f2                 ## symbol stub for: _UAIOHIDSetAccelerationWithKey
0000000000012ac9	movq	0x22b48(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_NSCFPrefManager
0000000000012ad0	movq	0x22229(%rip), %rsi     ## Objc selector ref: standardPrefManager
0000000000012ad7	callq	*%rbx
0000000000012ad9	movq	0x16648(%rip), %rcx     ## literal pool symbol address: _ScrollWheelScalingKey
0000000000012ae0	movq	(%rcx), %rdx
0000000000012ae3	movq	0x2221e(%rip), %rsi     ## Objc selector ref: setDouble:forKey:
0000000000012aea	movq	%rax, %rdi
0000000000012aed	movsd	-0x10(%rbp), %xmm0
0000000000012af2	movq	%rbx, %rax
0000000000012af5	addq	$0x8, %rsp
0000000000012af9	popq	%rbx
0000000000012afa	popq	%rbp
0000000000012afb	jmpq	*%rax
0000000000012afd	pushq	%rbp
0000000000012afe	movq	%rsp, %rbp
0000000000012b01	pushq	%r14
0000000000012b03	pushq	%rbx
0000000000012b04	movq	%rdi, %rbx
0000000000012b07	movq	0x21c12(%rip), %rsi     ## Objc selector ref: stopListeningForChanges
0000000000012b0e	movq	0x168eb(%rip), %r14     ## Objc message: +[NSCFPrefManager stopListeningForChanges]
0000000000012b15	callq	*%r14
0000000000012b18	movq	_OBJC_IVAR_$_UAPMouseAndTrackpadViewController._mouseKeysEnableCheckbox(%rip), %rax
0000000000012b1f	movq	(%rbx,%rax), %rdi
0000000000012b23	movq	0x21b7e(%rip), %rsi     ## Objc selector ref: state
0000000000012b2a	callq	*%r14
0000000000012b2d	cmpq	$0x1, %rax
0000000000012b31	sete	%al
0000000000012b34	movzbl	%al, %edi
0000000000012b37	callq	0x1e63a                 ## symbol stub for: _UAMouseKeysSetEnabled
0000000000012b3c	movq	0x21be5(%rip), %rsi     ## Objc selector ref: startListeningForChanges
0000000000012b43	movq	%rbx, %rdi
0000000000012b46	callq	*%r14
0000000000012b49	movq	0x21be8(%rip), %rsi     ## Objc selector ref: readPreferences:
0000000000012b50	xorl	%edx, %edx
0000000000012b52	movq	%rbx, %rdi
0000000000012b55	movq	%r14, %rax
0000000000012b58	popq	%rbx
0000000000012b59	popq	%r14
0000000000012b5b	popq	%rbp
0000000000012b5c	jmpq	*%rax
0000000000012b5e	pushq	%rbp
0000000000012b5f	movq	%rsp, %rbp
0000000000012b62	pushq	%r14
0000000000012b64	pushq	%rbx
0000000000012b65	movq	%rdi, %rbx
0000000000012b68	movq	0x21bb1(%rip), %rsi     ## Objc selector ref: stopListeningForChanges
0000000000012b6f	movq	0x1688a(%rip), %r14     ## Objc message: -[%rdi stopListeningForChanges]
0000000000012b76	callq	*%r14
0000000000012b79	movq	_OBJC_IVAR_$_UAPMouseAndTrackpadViewController._mouseKeysEnableKeyboardShortcutCheckbox(%rip), %rax
0000000000012b80	movq	(%rbx,%rax), %rdi
0000000000012b84	movq	0x21b1d(%rip), %rsi     ## Objc selector ref: state
0000000000012b8b	callq	*%r14
0000000000012b8e	cmpq	$0x1, %rax
0000000000012b92	sete	%al
0000000000012b95	movzbl	%al, %edi
0000000000012b98	callq	0x1e616                 ## symbol stub for: _UAMouseKeysEnableWithOptionKeySetEnabled
0000000000012b9d	movq	0x21b84(%rip), %rsi     ## Objc selector ref: startListeningForChanges
0000000000012ba4	movq	%rbx, %rdi
0000000000012ba7	movq	%r14, %rax
0000000000012baa	popq	%rbx
0000000000012bab	popq	%r14
0000000000012bad	popq	%rbp
0000000000012bae	jmpq	*%rax
0000000000012bb0	pushq	%rbp
0000000000012bb1	movq	%rsp, %rbp
0000000000012bb4	pushq	%r15
0000000000012bb6	pushq	%r14
0000000000012bb8	pushq	%r12
0000000000012bba	pushq	%rbx
0000000000012bbb	movq	%rdi, %rbx
0000000000012bbe	movq	_OBJC_IVAR_$_UAPMouseAndTrackpadViewController._mouseKeysIgnoreTrackpadCheckbox(%rip), %rax
0000000000012bc5	movq	(%rbx,%rax), %rdi
0000000000012bc9	movq	0x21ad8(%rip), %rsi     ## Objc selector ref: state
0000000000012bd0	movq	0x16829(%rip), %r12     ## Objc message: -[%rdi state]
0000000000012bd7	callq	*%r12
0000000000012bda	movq	%rax, %r14
0000000000012bdd	cmpq	$0x1, %r14
0000000000012be1	sete	%r15b
0000000000012be5	movq	0x21b34(%rip), %rsi     ## Objc selector ref: stopListeningForChanges
0000000000012bec	movq	%rbx, %rdi
0000000000012bef	callq	*%r12
0000000000012bf2	movzbl	%r15b, %edi
0000000000012bf6	callq	0x1e622                 ## symbol stub for: _UAMouseKeysIgnoreTrackpadForMouseKeysSetEnabled
0000000000012bfb	movq	0x21b26(%rip), %rsi     ## Objc selector ref: startListeningForChanges
0000000000012c02	movq	%rbx, %rdi
0000000000012c05	callq	*%r12
0000000000012c08	movq	%r12, %r15
0000000000012c0b	cmpq	$0x1, %r14
0000000000012c0f	jne	0x12c3a
0000000000012c11	movq	_OBJC_IVAR_$_UAPMouseAndTrackpadViewController._mouseKeysEnableKeyboardShortcutCheckbox(%rip), %r14
0000000000012c18	movq	(%rbx,%r14), %rdi
0000000000012c1c	movq	0x2181d(%rip), %rsi     ## Objc selector ref: setState:
0000000000012c23	movl	$0x1, %edx
0000000000012c28	callq	*%r15
0000000000012c2b	movq	(%rbx,%r14), %rdi
0000000000012c2f	movq	0x21b0a(%rip), %rsi     ## Objc selector ref: setEnabled:
0000000000012c36	xorl	%edx, %edx
0000000000012c38	jmp	0x12c6c
0000000000012c3a	callq	0x1e610                 ## symbol stub for: _UAMouseKeysEnableWithOptionKeyIsEnabled
0000000000012c3f	movq	_OBJC_IVAR_$_UAPMouseAndTrackpadViewController._mouseKeysEnableKeyboardShortcutCheckbox(%rip), %r14
0000000000012c46	movq	(%rbx,%r14), %rdi
0000000000012c4a	testb	%al, %al
0000000000012c4c	setne	%al
0000000000012c4f	movzbl	%al, %edx
0000000000012c52	movq	0x217e7(%rip), %rsi     ## Objc selector ref: setState:
0000000000012c59	callq	*%r15
0000000000012c5c	movq	(%rbx,%r14), %rdi
0000000000012c60	movq	0x21ad9(%rip), %rsi     ## Objc selector ref: setEnabled:
0000000000012c67	movl	$0x1, %edx
0000000000012c6c	callq	*%r15
0000000000012c6f	movq	0x220e2(%rip), %rsi     ## Objc selector ref: mouseKeysEnableKeyboardShortcut:
0000000000012c76	movq	%rbx, %rdi
0000000000012c79	movq	%rbx, %rdx
0000000000012c7c	movq	%r15, %rax
0000000000012c7f	popq	%rbx
0000000000012c80	popq	%r12
0000000000012c82	popq	%r14
0000000000012c84	popq	%r15
0000000000012c86	popq	%rbp
0000000000012c87	jmpq	*%rax
0000000000012c89	pushq	%rbp
0000000000012c8a	movq	%rsp, %rbp
0000000000012c8d	pushq	%r14
0000000000012c8f	pushq	%rbx
0000000000012c90	movq	%rdi, %rbx
0000000000012c93	movq	0x21a86(%rip), %rsi     ## Objc selector ref: stopListeningForChanges
0000000000012c9a	movq	0x1675f(%rip), %r14     ## Objc message: -[%rdi stopListeningForChanges]
0000000000012ca1	callq	*%r14
0000000000012ca4	movq	_OBJC_IVAR_$_UAPMouseAndTrackpadViewController._mouseKeysInitialDelay(%rip), %rax
0000000000012cab	movq	(%rbx,%rax), %rdi
0000000000012caf	movq	0x220aa(%rip), %rsi     ## Objc selector ref: intValue
0000000000012cb6	callq	*%r14
0000000000012cb9	cltq
0000000000012cbb	leaq	0x240fe(%rip), %rcx
0000000000012cc2	movss	(%rcx,%rax,4), %xmm0
0000000000012cc7	callq	0x1e640                 ## symbol stub for: _UAMouseKeysSetInitialDelay
0000000000012ccc	movq	0x21a55(%rip), %rsi     ## Objc selector ref: startListeningForChanges
0000000000012cd3	movq	%rbx, %rdi
0000000000012cd6	movq	%r14, %rax
0000000000012cd9	popq	%rbx
0000000000012cda	popq	%r14
0000000000012cdc	popq	%rbp
0000000000012cdd	jmpq	*%rax
0000000000012cdf	pushq	%rbp
0000000000012ce0	movq	%rsp, %rbp
0000000000012ce3	pushq	%r14
0000000000012ce5	pushq	%rbx
0000000000012ce6	movq	%rdi, %rbx
0000000000012ce9	movq	0x21a30(%rip), %rsi     ## Objc selector ref: stopListeningForChanges
0000000000012cf0	movq	0x16709(%rip), %r14     ## Objc message: -[%rdi stopListeningForChanges]
0000000000012cf7	callq	*%r14
0000000000012cfa	movq	_OBJC_IVAR_$_UAPMouseAndTrackpadViewController._mouseKeysMaxSpeed(%rip), %rax
0000000000012d01	movq	(%rbx,%rax), %rdi
0000000000012d05	movq	0x22054(%rip), %rsi     ## Objc selector ref: intValue
0000000000012d0c	callq	*%r14
0000000000012d0f	cltq
0000000000012d11	leaq	0x240c8(%rip), %rcx
0000000000012d18	cvttss2si	(%rcx,%rax,4), %rdi
0000000000012d1e	callq	0x1e646                 ## symbol stub for: _UAMouseKeysSetMaximumSpeed
0000000000012d23	movq	0x219fe(%rip), %rsi     ## Objc selector ref: startListeningForChanges
0000000000012d2a	movq	%rbx, %rdi
0000000000012d2d	movq	%r14, %rax
0000000000012d30	popq	%rbx
0000000000012d31	popq	%r14
0000000000012d33	popq	%rbp
0000000000012d34	jmpq	*%rax
0000000000012d36	pushq	%rbp
0000000000012d37	movq	%rsp, %rbp
0000000000012d3a	xorl	%eax, %eax
0000000000012d3c	testl	%ecx, %ecx
0000000000012d3e	jle	0x12d8d
0000000000012d40	cvtss2sd	%xmm0, %xmm0
0000000000012d44	xorl	%eax, %eax
0000000000012d46	movsd	0x1565a(%rip), %xmm3
0000000000012d4e	movl	$0xffffffff, %esi       ## imm = 0xFFFFFFFF
0000000000012d53	xorps	%xmm1, %xmm1
0000000000012d56	movsd	0x15682(%rip), %xmm2
0000000000012d5e	cvtss2sd	(%rdx), %xmm5
0000000000012d62	movaps	%xmm0, %xmm4
0000000000012d65	subsd	%xmm5, %xmm4
0000000000012d69	ucomisd	%xmm4, %xmm1
0000000000012d6d	jbe	0x12d73
0000000000012d6f	xorpd	%xmm2, %xmm4
0000000000012d73	ucomisd	%xmm4, %xmm3
0000000000012d77	jbe	0x12d8d
0000000000012d79	leal	0x1(%rsi), %eax
0000000000012d7c	addq	$0x4, %rdx
0000000000012d80	addl	$0x2, %esi
0000000000012d83	cmpl	%ecx, %esi
0000000000012d85	movl	%eax, %esi
0000000000012d87	movapd	%xmm4, %xmm3
0000000000012d8b	jl	0x12d5e
0000000000012d8d	popq	%rbp
0000000000012d8e	retq
0000000000012d8f	pushq	%rbp
0000000000012d90	movq	%rsp, %rbp
0000000000012d93	pushq	%r14
0000000000012d95	pushq	%rbx
0000000000012d96	movq	_OBJC_IVAR_$_UAPMouseAndTrackpadViewController._mouseKeysInitialDelay(%rip), %rax
0000000000012d9d	movq	(%rdi,%rax), %rbx
0000000000012da1	movq	0x21fc0(%rip), %rsi     ## Objc selector ref: _mouseKeysClosestValueFromArray:numberOfEntries:toValue:
0000000000012da8	leaq	0x24011(%rip), %rdx
0000000000012daf	movq	0x1664a(%rip), %r14     ## Objc message: -[%rdi _mouseKeysClosestValueFromArray:numberOfEntries:toValue:]
0000000000012db6	movl	$0x5, %ecx
0000000000012dbb	callq	*%r14
0000000000012dbe	movslq	%eax, %rdx
0000000000012dc1	movq	0x21fa8(%rip), %rsi     ## Objc selector ref: tickMarkValueAtIndex:
0000000000012dc8	movq	%rbx, %rdi
0000000000012dcb	movq	%r14, %rax
0000000000012dce	popq	%rbx
0000000000012dcf	popq	%r14
0000000000012dd1	popq	%rbp
0000000000012dd2	jmpq	*%rax
0000000000012dd4	pushq	%rbp
0000000000012dd5	movq	%rsp, %rbp
0000000000012dd8	pushq	%r14
0000000000012dda	pushq	%rbx
0000000000012ddb	movq	_OBJC_IVAR_$_UAPMouseAndTrackpadViewController._mouseKeysMaxSpeed(%rip), %rax
0000000000012de2	movq	(%rdi,%rax), %rbx
0000000000012de6	movq	0x21f7b(%rip), %rsi     ## Objc selector ref: _mouseKeysClosestValueFromArray:numberOfEntries:toValue:
0000000000012ded	leaq	0x23fec(%rip), %rdx
0000000000012df4	movq	0x16605(%rip), %r14     ## Objc message: -[%rdi _mouseKeysClosestValueFromArray:numberOfEntries:toValue:]
0000000000012dfb	movl	$0xb, %ecx
0000000000012e00	callq	*%r14
0000000000012e03	movslq	%eax, %rdx
0000000000012e06	movq	0x21f63(%rip), %rsi     ## Objc selector ref: tickMarkValueAtIndex:
0000000000012e0d	movq	%rbx, %rdi
0000000000012e10	movq	%r14, %rax
0000000000012e13	popq	%rbx
0000000000012e14	popq	%r14
0000000000012e16	popq	%rbp
0000000000012e17	jmpq	*%rax
0000000000012e19	pushq	%rbp
0000000000012e1a	movq	%rsp, %rbp
0000000000012e1d	pushq	%r15
0000000000012e1f	pushq	%r14
0000000000012e21	pushq	%rbx
0000000000012e22	pushq	%rax
0000000000012e23	movq	%rdx, %rbx
0000000000012e26	movq	0x2159b(%rip), %rsi     ## Objc selector ref: window
0000000000012e2d	movq	0x165cc(%rip), %r15     ## Objc message: -[%rdi window]
0000000000012e34	movq	%rbx, %rdi
0000000000012e37	callq	*%r15
0000000000012e3a	movq	0x2158f(%rip), %rsi     ## Objc selector ref: orderOut:
0000000000012e41	xorl	%edx, %edx
0000000000012e43	movq	%rax, %rdi
0000000000012e46	callq	*%r15
0000000000012e49	movq	0x16290(%rip), %rax     ## literal pool symbol address: _NSApp
0000000000012e50	movq	(%rax), %r14
0000000000012e53	movq	0x2156e(%rip), %rsi     ## Objc selector ref: window
0000000000012e5a	movq	%rbx, %rdi
0000000000012e5d	callq	*%r15
0000000000012e60	movq	0x217c1(%rip), %rsi     ## Objc selector ref: endSheet:
0000000000012e67	movq	%r14, %rdi
0000000000012e6a	movq	%rax, %rdx
0000000000012e6d	movq	%r15, %rax
0000000000012e70	addq	$0x8, %rsp
0000000000012e74	popq	%rbx
0000000000012e75	popq	%r14
0000000000012e77	popq	%r15
0000000000012e79	popq	%rbp
0000000000012e7a	jmpq	*%rax
0000000000012e7c	pushq	%rbp
0000000000012e7d	movq	%rsp, %rbp
0000000000012e80	pushq	%r15
0000000000012e82	pushq	%r14
0000000000012e84	pushq	%rbx
0000000000012e85	pushq	%rax
0000000000012e86	movq	%rdx, %r14
0000000000012e89	movq	%rdi, %rbx
0000000000012e8c	movq	0x21535(%rip), %rsi     ## Objc selector ref: window
0000000000012e93	movq	%r14, %rdi
0000000000012e96	callq	*0x16564(%rip)          ## Objc message: -[%rdi window]
0000000000012e9c	movq	_OBJC_IVAR_$_UAPMouseAndTrackpadViewController._mouseOptionsSheet(%rip), %rcx
0000000000012ea3	cmpq	(%rbx,%rcx), %rax
0000000000012ea7	je	0x13031
0000000000012ead	movq	0x21514(%rip), %rsi     ## Objc selector ref: window
0000000000012eb4	movq	%r14, %rdi
0000000000012eb7	callq	*0x16543(%rip)          ## Objc message: -[%rdi window]
0000000000012ebd	movq	_OBJC_IVAR_$_UAPMouseAndTrackpadViewController._trackpadOptionsSheet(%rip), %rcx
0000000000012ec4	cmpq	(%rbx,%rcx), %rax
0000000000012ec8	je	0x13118
0000000000012ece	movq	0x214f3(%rip), %rsi     ## Objc selector ref: window
0000000000012ed5	movq	%r14, %rdi
0000000000012ed8	callq	*0x16522(%rip)          ## Objc message: -[%rdi window]
0000000000012ede	movq	_OBJC_IVAR_$_UAPMouseAndTrackpadViewController._mouseKeysOptionsSheet(%rip), %rcx
0000000000012ee5	cmpq	(%rbx,%rcx), %rax
0000000000012ee9	jne	0x132e6
0000000000012eef	movq	_OBJC_IVAR_$_UAPMouseAndTrackpadViewController._mouseKeysEnableKeyboardShortcutCheckbox(%rip), %r15
0000000000012ef6	movq	(%rbx,%r15), %rdi
0000000000012efa	movq	0x217a7(%rip), %rsi     ## Objc selector ref: state
0000000000012f01	callq	*0x164f9(%rip)          ## Objc message: -[%rdi state]
0000000000012f07	movq	_OBJC_IVAR_$_UAPMouseAndTrackpadViewController._cachedMouseKeysEnableKeyboardShortcutCheckboxState(%rip), %rcx
0000000000012f0e	movq	(%rbx,%rcx), %rdx
0000000000012f12	cmpq	%rdx, %rax
0000000000012f15	je	0x12f3c
0000000000012f17	movq	(%rbx,%r15), %rdi
0000000000012f1b	movq	0x2151e(%rip), %rsi     ## Objc selector ref: setState:
0000000000012f22	movq	0x164d7(%rip), %r15     ## Objc message: -[%rdi setState:]
0000000000012f29	callq	*%r15
0000000000012f2c	movq	0x21e25(%rip), %rsi     ## Objc selector ref: mouseKeysEnableKeyboardShortcut:
0000000000012f33	movq	%rbx, %rdi
0000000000012f36	movq	%rbx, %rdx
0000000000012f39	callq	*%r15
0000000000012f3c	movq	_OBJC_IVAR_$_UAPMouseAndTrackpadViewController._mouseKeysIgnoreTrackpadCheckbox(%rip), %r15
0000000000012f43	movq	(%rbx,%r15), %rdi
0000000000012f47	movq	0x2175a(%rip), %rsi     ## Objc selector ref: state
0000000000012f4e	callq	*0x164ac(%rip)          ## Objc message: -[%rdi state]
0000000000012f54	movq	_OBJC_IVAR_$_UAPMouseAndTrackpadViewController._cachedMouseKeysIgnoreTrackpadCheckboxState(%rip), %rcx
0000000000012f5b	movq	(%rbx,%rcx), %rdx
0000000000012f5f	cmpq	%rdx, %rax
0000000000012f62	je	0x12f89
0000000000012f64	movq	(%rbx,%r15), %rdi
0000000000012f68	movq	0x214d1(%rip), %rsi     ## Objc selector ref: setState:
0000000000012f6f	movq	0x1648a(%rip), %r15     ## Objc message: -[%rdi setState:]
0000000000012f76	callq	*%r15
0000000000012f79	movq	0x21e48(%rip), %rsi     ## Objc selector ref: mouseKeysIgnoreTrackpad:
0000000000012f80	movq	%rbx, %rdi
0000000000012f83	movq	%rbx, %rdx
0000000000012f86	callq	*%r15
0000000000012f89	movq	_OBJC_IVAR_$_UAPMouseAndTrackpadViewController._mouseKeysInitialDelay(%rip), %r15
0000000000012f90	movq	(%rbx,%r15), %rdi
0000000000012f94	movq	0x21ab5(%rip), %rsi     ## Objc selector ref: doubleValue
0000000000012f9b	callq	*0x1645f(%rip)          ## Objc message: -[%rdi doubleValue]
0000000000012fa1	movaps	%xmm0, %xmm1
0000000000012fa4	movq	_OBJC_IVAR_$_UAPMouseAndTrackpadViewController._cachedMouseKeysInitialDelaySliderDoubleValue(%rip), %rax
0000000000012fab	movsd	(%rbx,%rax), %xmm0
0000000000012fb0	ucomisd	%xmm0, %xmm1
0000000000012fb4	jne	0x12fb8
0000000000012fb6	jnp	0x12fdd
0000000000012fb8	movq	(%rbx,%r15), %rdi
0000000000012fbc	movq	0x217ed(%rip), %rsi     ## Objc selector ref: setDoubleValue:
0000000000012fc3	movq	0x16436(%rip), %r15     ## Objc message: -[%rdi setDoubleValue:]
0000000000012fca	callq	*%r15
0000000000012fcd	movq	0x21dfc(%rip), %rsi     ## Objc selector ref: mouseKeysChangeInitialDelay:
0000000000012fd4	movq	%rbx, %rdi
0000000000012fd7	movq	%rbx, %rdx
0000000000012fda	callq	*%r15
0000000000012fdd	movq	_OBJC_IVAR_$_UAPMouseAndTrackpadViewController._mouseKeysMaxSpeed(%rip), %r15
0000000000012fe4	movq	(%rbx,%r15), %rdi
0000000000012fe8	movq	0x21a61(%rip), %rsi     ## Objc selector ref: doubleValue
0000000000012fef	callq	*0x1640b(%rip)          ## Objc message: -[%rdi doubleValue]
0000000000012ff5	movaps	%xmm0, %xmm1
0000000000012ff8	movq	_OBJC_IVAR_$_UAPMouseAndTrackpadViewController._cachedMouseKeysMaxSpeedSliderDoubleValue(%rip), %rax
0000000000012fff	movsd	(%rbx,%rax), %xmm0
0000000000013004	ucomisd	%xmm0, %xmm1
0000000000013008	jne	0x13010
000000000001300a	jnp	0x132e6
0000000000013010	movq	(%rbx,%r15), %rdi
0000000000013014	movq	0x21795(%rip), %rsi     ## Objc selector ref: setDoubleValue:
000000000001301b	movq	0x163de(%rip), %r15     ## Objc message: -[%rdi setDoubleValue:]
0000000000013022	callq	*%r15
0000000000013025	movq	0x21dac(%rip), %rsi     ## Objc selector ref: mouseKeysChangeMaxSpeed:
000000000001302c	jmp	0x132dd
0000000000013031	movq	_OBJC_IVAR_$_UAPMouseAndTrackpadViewController._mouseScrollSpeedSlider(%rip), %r15
0000000000013038	movq	(%rbx,%r15), %rdi
000000000001303c	movq	0x210f5(%rip), %rsi     ## Objc selector ref: integerValue
0000000000013043	callq	*0x163b7(%rip)          ## Objc message: -[%rdi integerValue]
0000000000013049	movq	_OBJC_IVAR_$_UAPMouseAndTrackpadViewController._cachedMouseScrollSpeedSliderIntegerValue(%rip), %rcx
0000000000013050	movq	(%rbx,%rcx), %rdx
0000000000013054	cmpq	%rdx, %rax
0000000000013057	je	0x1307e
0000000000013059	movq	(%rbx,%r15), %rdi
000000000001305d	movq	0x21d14(%rip), %rsi     ## Objc selector ref: setIntegerValue:
0000000000013064	movq	0x16395(%rip), %r15     ## Objc message: -[%rdi setIntegerValue:]
000000000001306b	callq	*%r15
000000000001306e	movq	0x21d0b(%rip), %rsi     ## Objc selector ref: adjustMouseScrollSpeed:
0000000000013075	movq	%rbx, %rdi
0000000000013078	movq	%rbx, %rdx
000000000001307b	callq	*%r15
000000000001307e	movq	_OBJC_IVAR_$_UAPMouseAndTrackpadViewController._enableMouseScrollCheckbox(%rip), %r15
0000000000013085	movq	(%rbx,%r15), %rdi
0000000000013089	movq	0x21618(%rip), %rsi     ## Objc selector ref: state
0000000000013090	callq	*0x1636a(%rip)          ## Objc message: -[%rdi state]
0000000000013096	movq	_OBJC_IVAR_$_UAPMouseAndTrackpadViewController._cachedEnableMouseScrollCheckboxState(%rip), %rcx
000000000001309d	movq	(%rbx,%rcx), %rdx
00000000000130a1	cmpq	%rdx, %rax
00000000000130a4	je	0x130cb
00000000000130a6	movq	(%rbx,%r15), %rdi
00000000000130aa	movq	0x2138f(%rip), %rsi     ## Objc selector ref: setState:
00000000000130b1	movq	0x16348(%rip), %r15     ## Objc message: -[%rdi setState:]
00000000000130b8	callq	*%r15
00000000000130bb	movq	0x21cc6(%rip), %rsi     ## Objc selector ref: enableMouseScroll:
00000000000130c2	movq	%rbx, %rdi
00000000000130c5	movq	%rbx, %rdx
00000000000130c8	callq	*%r15
00000000000130cb	movq	_OBJC_IVAR_$_UAPMouseAndTrackpadViewController._mouseScrollBehaviorPopup(%rip), %r15
00000000000130d2	movq	(%rbx,%r15), %rdi
00000000000130d6	movq	0x215bb(%rip), %rsi     ## Objc selector ref: indexOfSelectedItem
00000000000130dd	callq	*0x1631d(%rip)          ## Objc message: -[%rdi indexOfSelectedItem]
00000000000130e3	movq	_OBJC_IVAR_$_UAPMouseAndTrackpadViewController._cachedMouseScrollBehaviorPopupIndexOfSelectedItem(%rip), %rcx
00000000000130ea	movq	(%rbx,%rcx), %rdx
00000000000130ee	cmpq	%rdx, %rax
00000000000130f1	je	0x132e6
00000000000130f7	movq	(%rbx,%r15), %rdi
00000000000130fb	movq	0x21396(%rip), %rsi     ## Objc selector ref: selectItemAtIndex:
0000000000013102	movq	0x162f7(%rip), %r15     ## Objc message: -[%rdi selectItemAtIndex:]
0000000000013109	callq	*%r15
000000000001310c	movq	0x21c7d(%rip), %rsi     ## Objc selector ref: mouseScrollUsingInertia:
0000000000013113	jmp	0x132dd
0000000000013118	movq	_OBJC_IVAR_$_UAPMouseAndTrackpadViewController._trackpadScrollSpeedSlider(%rip), %r15
000000000001311f	movq	(%rbx,%r15), %rdi
0000000000013123	movq	0x2100e(%rip), %rsi     ## Objc selector ref: integerValue
000000000001312a	callq	*0x162d0(%rip)          ## Objc message: -[%rdi integerValue]
0000000000013130	movq	_OBJC_IVAR_$_UAPMouseAndTrackpadViewController._cachedTrackpadScrollSpeedSliderIntegerValue(%rip), %rcx
0000000000013137	movq	(%rbx,%rcx), %rdx
000000000001313b	cmpq	%rdx, %rax
000000000001313e	je	0x13165
0000000000013140	movq	(%rbx,%r15), %rdi
0000000000013144	movq	0x21c2d(%rip), %rsi     ## Objc selector ref: setIntegerValue:
000000000001314b	movq	0x162ae(%rip), %r15     ## Objc message: -[%rdi setIntegerValue:]
0000000000013152	callq	*%r15
0000000000013155	movq	0x21c3c(%rip), %rsi     ## Objc selector ref: adjustTrackpadScrollSpeed:
000000000001315c	movq	%rbx, %rdi
000000000001315f	movq	%rbx, %rdx
0000000000013162	callq	*%r15
0000000000013165	movq	_OBJC_IVAR_$_UAPMouseAndTrackpadViewController._enableTrackpadScrollCheckbox(%rip), %r15
000000000001316c	movq	(%rbx,%r15), %rdi
0000000000013170	movq	0x21531(%rip), %rsi     ## Objc selector ref: state
0000000000013177	callq	*0x16283(%rip)          ## Objc message: -[%rdi state]
000000000001317d	movq	_OBJC_IVAR_$_UAPMouseAndTrackpadViewController._cachedEnableTrackpadScrollCheckboxState(%rip), %rcx
0000000000013184	movq	(%rbx,%rcx), %rdx
0000000000013188	cmpq	%rdx, %rax
000000000001318b	je	0x131b2
000000000001318d	movq	(%rbx,%r15), %rdi
0000000000013191	movq	0x212a8(%rip), %rsi     ## Objc selector ref: setState:
0000000000013198	movq	0x16261(%rip), %r15     ## Objc message: -[%rdi setState:]
000000000001319f	callq	*%r15
00000000000131a2	movq	0x21bf7(%rip), %rsi     ## Objc selector ref: enableTrackpadScroll:
00000000000131a9	movq	%rbx, %rdi
00000000000131ac	movq	%rbx, %rdx
00000000000131af	callq	*%r15
00000000000131b2	movq	_OBJC_IVAR_$_UAPMouseAndTrackpadViewController._trackpadScrollBehaviorPopup(%rip), %r15
00000000000131b9	movq	(%rbx,%r15), %rdi
00000000000131bd	movq	0x214d4(%rip), %rsi     ## Objc selector ref: indexOfSelectedItem
00000000000131c4	callq	*0x16236(%rip)          ## Objc message: -[%rdi indexOfSelectedItem]
00000000000131ca	movq	_OBJC_IVAR_$_UAPMouseAndTrackpadViewController._cachedTrackpadScrollBehaviorPopupIndexOfSelectedItem(%rip), %rcx
00000000000131d1	movq	(%rbx,%rcx), %rdx
00000000000131d5	cmpq	%rdx, %rax
00000000000131d8	je	0x131ff
00000000000131da	movq	(%rbx,%r15), %rdi
00000000000131de	movq	0x212b3(%rip), %rsi     ## Objc selector ref: selectItemAtIndex:
00000000000131e5	movq	0x16214(%rip), %r15     ## Objc message: -[%rdi selectItemAtIndex:]
00000000000131ec	callq	*%r15
00000000000131ef	movq	0x21bb2(%rip), %rsi     ## Objc selector ref: trackpadScrollUsingInertia:
00000000000131f6	movq	%rbx, %rdi
00000000000131f9	movq	%rbx, %rdx
00000000000131fc	callq	*%r15
00000000000131ff	movq	_OBJC_IVAR_$_UAPMouseAndTrackpadViewController._enableTrackpadDraggingCheckbox(%rip), %r15
0000000000013206	movq	(%rbx,%r15), %rdi
000000000001320a	movq	0x21497(%rip), %rsi     ## Objc selector ref: state
0000000000013211	callq	*0x161e9(%rip)          ## Objc message: -[%rdi state]
0000000000013217	movq	_OBJC_IVAR_$_UAPMouseAndTrackpadViewController._cachedEnableTrackpadDraggingCheckboxState(%rip), %rcx
000000000001321e	movq	(%rbx,%rcx), %rdx
0000000000013222	cmpq	%rdx, %rax
0000000000013225	je	0x1324c
0000000000013227	movq	(%rbx,%r15), %rdi
000000000001322b	movq	0x2120e(%rip), %rsi     ## Objc selector ref: setState:
0000000000013232	movq	0x161c7(%rip), %r15     ## Objc message: -[%rdi setState:]
0000000000013239	callq	*%r15
000000000001323c	movq	0x21b6d(%rip), %rsi     ## Objc selector ref: enableTrackpadDragging:
0000000000013243	movq	%rbx, %rdi
0000000000013246	movq	%rbx, %rdx
0000000000013249	callq	*%r15
000000000001324c	movq	_OBJC_IVAR_$_UAPMouseAndTrackpadViewController._trackpadDraggingBehaviorPopup(%rip), %r15
0000000000013253	movq	(%rbx,%r15), %rdi
0000000000013257	movq	0x21572(%rip), %rsi     ## Objc selector ref: selectedTag
000000000001325e	callq	*0x1619c(%rip)          ## Objc message: -[%rdi selectedTag]
0000000000013264	movq	_OBJC_IVAR_$_UAPMouseAndTrackpadViewController._cachedTrackpadDraggingBehaviorPopupSelectedTag(%rip), %rcx
000000000001326b	movq	(%rbx,%rcx), %rdx
000000000001326f	cmpq	%rdx, %rax
0000000000013272	je	0x13299
0000000000013274	movq	(%rbx,%r15), %rdi
0000000000013278	movq	0x211f9(%rip), %rsi     ## Objc selector ref: selectItemWithTag:
000000000001327f	movq	0x1617a(%rip), %r15     ## Objc message: -[%rdi selectItemWithTag:]
0000000000013286	callq	*%r15
0000000000013289	movq	0x21b28(%rip), %rsi     ## Objc selector ref: trackpadDraggingStyle:
0000000000013290	movq	%rbx, %rdi
0000000000013293	movq	%rbx, %rdx
0000000000013296	callq	*%r15
0000000000013299	movq	_OBJC_IVAR_$_UAPMouseAndTrackpadViewController._enableTrackpadTapToClickCheckbox(%rip), %r15
00000000000132a0	movq	(%rbx,%r15), %rdi
00000000000132a4	movq	0x213fd(%rip), %rsi     ## Objc selector ref: state
00000000000132ab	callq	*0x1614f(%rip)          ## Objc message: -[%rdi state]
00000000000132b1	movq	_OBJC_IVAR_$_UAPMouseAndTrackpadViewController._cachedEnableTrackpadTapToClickCheckboxState(%rip), %rcx
00000000000132b8	movq	(%rbx,%rcx), %rdx
00000000000132bc	cmpq	%rdx, %rax
00000000000132bf	je	0x132e6
00000000000132c1	movq	(%rbx,%r15), %rdi
00000000000132c5	movq	0x21174(%rip), %rsi     ## Objc selector ref: setState:
00000000000132cc	movq	0x1612d(%rip), %r15     ## Objc message: -[%rdi setState:]
00000000000132d3	callq	*%r15
00000000000132d6	movq	0x21ae3(%rip), %rsi     ## Objc selector ref: enableTrackpadTapToClick:
00000000000132dd	movq	%rbx, %rdi
00000000000132e0	movq	%rbx, %rdx
00000000000132e3	callq	*%r15
00000000000132e6	movq	0x210db(%rip), %rsi     ## Objc selector ref: window
00000000000132ed	movq	0x1610c(%rip), %r15     ## Objc message: -[%rdi window]
00000000000132f4	movq	%r14, %rdi
00000000000132f7	callq	*%r15
00000000000132fa	movq	0x210cf(%rip), %rsi     ## Objc selector ref: orderOut:
0000000000013301	xorl	%edx, %edx
0000000000013303	movq	%rax, %rdi
0000000000013306	callq	*%r15
0000000000013309	movq	0x15dd0(%rip), %rax     ## literal pool symbol address: _NSApp
0000000000013310	movq	(%rax), %rbx
0000000000013313	movq	0x210ae(%rip), %rsi     ## Objc selector ref: window
000000000001331a	movq	%r14, %rdi
000000000001331d	callq	*%r15
0000000000013320	movq	0x21301(%rip), %rsi     ## Objc selector ref: endSheet:
0000000000013327	movq	%rbx, %rdi
000000000001332a	movq	%rax, %rdx
000000000001332d	movq	%r15, %rax
0000000000013330	addq	$0x8, %rsp
0000000000013334	popq	%rbx
0000000000013335	popq	%r14
0000000000013337	popq	%r15
0000000000013339	popq	%rbp
000000000001333a	jmpq	*%rax
000000000001333c	pushq	%rbp
000000000001333d	movq	%rsp, %rbp
0000000000013340	movq	0x21481(%rip), %rsi     ## Objc selector ref: _readPreferences:cacheSettings:
0000000000013347	xorl	%ecx, %ecx
0000000000013349	popq	%rbp
000000000001334a	jmpq	*0x160b0(%rip)          ## Objc message: -[%rdi _readPreferences:cacheSettings:]
0000000000013350	pushq	%rbp
0000000000013351	movq	%rsp, %rbp
0000000000013354	pushq	%r15
0000000000013356	pushq	%r14
0000000000013358	pushq	%r13
000000000001335a	pushq	%r12
000000000001335c	pushq	%rbx
000000000001335d	subq	$0x88, %rsp
0000000000013364	movl	%ecx, -0x6c(%rbp)
0000000000013367	movq	%rdi, %r15
000000000001336a	movq	%r15, -0x38(%rbp)
000000000001336e	movq	0x223db(%rip), %rax     ## Objc class ref: UAPMouseAndTrackpadViewController
0000000000013375	movq	%rax, -0x30(%rbp)
0000000000013379	movq	0x213b8(%rip), %rsi     ## Objc selector ref: readPreferences:
0000000000013380	leaq	-0x38(%rbp), %rdi
0000000000013384	callq	0x1e88c                 ## Objc message: -[[%rdi super] readPreferences:]
0000000000013389	movq	_OBJC_IVAR_$_UAPMouseAndTrackpadViewController._ignoreTrackpadWhenExternalMouseCheckbox(%rip), %rax
0000000000013390	movq	(%r15,%rax), %rbx
0000000000013394	callq	0x1e5f8                 ## symbol stub for: _UAIgnoreTrackpadIfMousePresentIsEnabled
0000000000013399	testb	%al, %al
000000000001339b	setne	%al
000000000001339e	movzbl	%al, %edx
00000000000133a1	movq	0x21098(%rip), %rsi     ## Objc selector ref: setState:
00000000000133a8	movq	0x16051(%rip), %r12     ## Objc message: -[%rdi setState:]
00000000000133af	movq	%rbx, %rdi
00000000000133b2	callq	*%r12
00000000000133b5	movq	0x21a24(%rip), %rsi     ## Objc selector ref: _systemSpringingEnabled
00000000000133bc	movq	%r15, %rdi
00000000000133bf	callq	*%r12
00000000000133c2	movb	%al, %bl
00000000000133c4	movq	0x21a1d(%rip), %rsi     ## Objc selector ref: _systemSpringingDelay
00000000000133cb	movq	%r15, %rdi
00000000000133ce	callq	*%r12
00000000000133d1	movss	%xmm0, -0x68(%rbp)
00000000000133d6	movq	_OBJC_IVAR_$_UAPMouseAndTrackpadViewController._springLoadingDelaySlider(%rip), %r14
00000000000133dd	movq	(%r15,%r14), %rdi
00000000000133e1	movq	0x21358(%rip), %rsi     ## Objc selector ref: setEnabled:
00000000000133e8	movsbl	%bl, %ebx
00000000000133eb	movl	%ebx, %edx
00000000000133ed	callq	*%r12
00000000000133f0	movq	(%r15,%r14), %rdi
00000000000133f4	movq	0x213bd(%rip), %rsi     ## Objc selector ref: setFloatValue:
00000000000133fb	movss	-0x68(%rbp), %xmm0
0000000000013400	callq	*%r12
0000000000013403	movq	_OBJC_IVAR_$_UAPMouseAndTrackpadViewController._enableSpringLoadingCheckbox(%rip), %rax
000000000001340a	movq	(%r15,%rax), %rdi
000000000001340e	testb	%bl, %bl
0000000000013410	setne	%al
0000000000013413	movzbl	%al, %edx
0000000000013416	movq	0x21023(%rip), %rsi     ## Objc selector ref: setState:
000000000001341d	callq	*%r12
0000000000013420	movq	$0x0, -0x40(%rbp)
0000000000013428	callq	0x1e5aa                 ## symbol stub for: _getEVSHandle
000000000001342d	leaq	0x17a9c(%rip), %rsi     ## Objc cfstring ref: @"HIDMouseScrollAcceleration"
0000000000013434	leaq	-0x40(%rbp), %rdx
0000000000013438	movl	%eax, %edi
000000000001343a	callq	0x1e4de                 ## symbol stub for: _IOHIDGetAccelerationWithKey
000000000001343f	testl	%eax, %eax
0000000000013441	je	0x1345b
0000000000013443	movabsq	$0x3fd4000000000000, %rax ## imm = 0x3FD4000000000000
000000000001344d	movq	%rax, -0x40(%rbp)
0000000000013451	movsd	0x14f57(%rip), %xmm0
0000000000013459	jmp	0x13497
000000000001345b	movsd	-0x40(%rbp), %xmm0
0000000000013460	ucomisd	0x14f50(%rip), %xmm0
0000000000013468	jbe	0x13482
000000000001346a	movabsq	$0x3ffb333333333333, %rax ## imm = 0x3FFB333333333333
0000000000013474	movq	%rax, -0x40(%rbp)
0000000000013478	movsd	0x14f38(%rip), %xmm0
0000000000013480	jmp	0x13497
0000000000013482	xorpd	%xmm1, %xmm1
0000000000013486	ucomisd	%xmm0, %xmm1
000000000001348a	jbe	0x13497
000000000001348c	movq	$0x0, -0x40(%rbp)
0000000000013494	xorps	%xmm0, %xmm0
0000000000013497	movl	$0x9, %edx
000000000001349c	leaq	0x14fbd(%rip), %rax
00000000000134a3	movsd	0x14f45(%rip), %xmm2
00000000000134ab	movsd	0x14f0d(%rip), %xmm3
00000000000134b3	cmpq	$0x1, %rdx
00000000000134b7	je	0x134f0
00000000000134b9	movsd	-0x10(%rax,%rdx,8), %xmm1
00000000000134bf	subsd	%xmm0, %xmm1
00000000000134c3	andpd	%xmm2, %xmm1
00000000000134c7	decq	%rdx
00000000000134ca	ucomisd	%xmm1, %xmm3
00000000000134ce	jbe	0x134b3
00000000000134d0	testq	%rdx, %rdx
00000000000134d3	jle	0x134f0
00000000000134d5	decq	%rdx
00000000000134d8	movq	_OBJC_IVAR_$_UAPMouseAndTrackpadViewController._mouseScrollSpeedSlider(%rip), %rax
00000000000134df	movq	(%r15,%rax), %rdi
00000000000134e3	movq	0x2188e(%rip), %rsi     ## Objc selector ref: setIntegerValue:
00000000000134ea	callq	*0x15f10(%rip)          ## Objc message: -[%rdi setIntegerValue:]
00000000000134f0	callq	0x1e5a4                 ## symbol stub for: _doubleClickThresholdLevel
00000000000134f5	movsd	0x14ec3(%rip), %xmm3
00000000000134fd	movsd	0x14eeb(%rip), %xmm2
0000000000013505	movsd	%xmm0, -0x40(%rbp)
000000000001350a	movl	$0xc, %edx
000000000001350f	leaq	0x14eea(%rip), %rax
0000000000013516	cmpq	$0x1, %rdx
000000000001351a	je	0x13553
000000000001351c	movsd	-0x10(%rax,%rdx,8), %xmm1
0000000000013522	subsd	%xmm0, %xmm1
0000000000013526	andpd	%xmm2, %xmm1
000000000001352a	decq	%rdx
000000000001352d	ucomisd	%xmm1, %xmm3
0000000000013531	jbe	0x13516
0000000000013533	testq	%rdx, %rdx
0000000000013536	jle	0x13553
0000000000013538	decq	%rdx
000000000001353b	movq	_OBJC_IVAR_$_UAPMouseAndTrackpadViewController._doubleClickSpeedSlider(%rip), %rax
0000000000013542	movq	(%r15,%rax), %rdi
0000000000013546	movq	0x2182b(%rip), %rsi     ## Objc selector ref: setIntegerValue:
000000000001354d	callq	*0x15ead(%rip)          ## Objc message: -[%rdi setIntegerValue:]
0000000000013553	movq	_OBJC_IVAR_$_UAPMouseAndTrackpadViewController._mouseOptionsSheet(%rip), %rbx
000000000001355a	movq	(%r15,%rbx), %rsi
000000000001355e	testq	%rsi, %rsi
0000000000013561	je	0x13575
0000000000013563	movq	0x215e6(%rip), %rdx     ## Objc selector ref: frame
000000000001356a	leaq	-0x60(%rbp), %rdi
000000000001356e	callq	0x1e892                 ## symbol stub for: _objc_msgSend_stret
0000000000013573	jmp	0x13580
0000000000013575	xorps	%xmm0, %xmm0
0000000000013578	movaps	%xmm0, -0x50(%rbp)
000000000001357c	movaps	%xmm0, -0x60(%rbp)
0000000000013580	callq	__SystemHasTouchMouse
0000000000013585	testb	%al, %al
0000000000013587	je	0x13650
000000000001358d	movq	0x15e2c(%rip), %rax     ## literal pool symbol address: _kCFPreferencesCurrentUser
0000000000013594	movq	(%rax), %rbx
0000000000013597	movq	%rbx, -0x68(%rbp)
000000000001359b	movq	0x15e0e(%rip), %rax     ## literal pool symbol address: _kCFPreferencesAnyHost
00000000000135a2	movq	(%rax), %r12
00000000000135a5	movq	%r12, -0x78(%rbp)
00000000000135a9	leaq	0x178e0(%rip), %rdi     ## Objc cfstring ref: @"MouseHorizontalScroll"
00000000000135b0	leaq	0x178b9(%rip), %r14     ## Objc cfstring ref: @"com.apple.driver.AppleBluetoothMultitouch.mouse"
00000000000135b7	movq	%r14, %rsi
00000000000135ba	movq	%rbx, %rdx
00000000000135bd	movq	%r12, %rcx
00000000000135c0	callq	0x1e550                 ## symbol stub for: _CFPreferencesCopyValue
00000000000135c5	movq	%rax, %r13
00000000000135c8	leaq	0x178e1(%rip), %rdi     ## Objc cfstring ref: @"MouseVerticalScroll"
00000000000135cf	movq	%r14, %rsi
00000000000135d2	movq	%rbx, %rdx
00000000000135d5	movq	%r12, %rcx
00000000000135d8	callq	0x1e550                 ## symbol stub for: _CFPreferencesCopyValue
00000000000135dd	movq	%rax, %rbx
00000000000135e0	movb	$0x1, %r14b
00000000000135e3	testq	%r13, %r13
00000000000135e6	je	0x13613
00000000000135e8	movq	%r13, %rdi
00000000000135eb	callq	0x1e526                 ## symbol stub for: _CFGetTypeID
00000000000135f0	movq	%rax, %r12
00000000000135f3	callq	0x1e502                 ## symbol stub for: _CFBooleanGetTypeID
00000000000135f8	movb	$0x1, %r14b
00000000000135fb	cmpq	%rax, %r12
00000000000135fe	jne	0x1360b
0000000000013600	movq	%r13, %rdi
0000000000013603	callq	0x1e508                 ## symbol stub for: _CFBooleanGetValue
0000000000013608	movb	%al, %r14b
000000000001360b	movq	%r13, %rdi
000000000001360e	callq	0x1e562                 ## symbol stub for: _CFRelease
0000000000013613	testq	%rbx, %rbx
0000000000013616	je	0x136bf
000000000001361c	movq	%rbx, %rdi
000000000001361f	callq	0x1e526                 ## symbol stub for: _CFGetTypeID
0000000000013624	movq	%rbx, %r13
0000000000013627	movq	%rax, %rbx
000000000001362a	callq	0x1e502                 ## symbol stub for: _CFBooleanGetTypeID
000000000001362f	cmpq	%rax, %rbx
0000000000013632	jne	0x1363f
0000000000013634	movq	%r13, %rdi
0000000000013637	callq	0x1e508                 ## symbol stub for: _CFBooleanGetValue
000000000001363c	orb	%al, %r14b
000000000001363f	movq	0x15dba(%rip), %r12     ## Objc message: -[%rdi frame]
0000000000013646	movq	%r13, %rdi
0000000000013649	callq	0x1e562                 ## symbol stub for: _CFRelease
000000000001364e	jmp	0x136c6
0000000000013650	movq	_OBJC_IVAR_$_UAPMouseAndTrackpadViewController._enableMouseScrollCheckbox(%rip), %r14
0000000000013657	movq	(%r15,%r14), %rdi
000000000001365b	movq	0x213b6(%rip), %rsi     ## Objc selector ref: isHidden
0000000000013662	callq	*0x15d98(%rip)          ## Objc message: -[%rdi isHidden]
0000000000013668	testb	%al, %al
000000000001366a	movq	0x15d8f(%rip), %r12     ## Objc message: -[%rdi isHidden]
0000000000013671	jne	0x137ed
0000000000013677	movq	(%r15,%r14), %rdi
000000000001367b	movq	0x20d76(%rip), %rsi     ## Objc selector ref: setHidden:
0000000000013682	movl	$0x1, %edx
0000000000013687	callq	*%r12
000000000001368a	movq	_OBJC_IVAR_$_UAPMouseAndTrackpadViewController._mouseScrollBehaviorPopup(%rip), %rax
0000000000013691	movq	(%r15,%rax), %rdi
0000000000013695	movq	0x20d5c(%rip), %rsi     ## Objc selector ref: setHidden:
000000000001369c	movl	$0x1, %edx
00000000000136a1	callq	*%r12
00000000000136a4	movsd	-0x48(%rbp), %xmm0
00000000000136a9	addsd	0x14d1f(%rip), %xmm0
00000000000136b1	movsd	%xmm0, -0x48(%rbp)
00000000000136b6	movq	(%r15,%rbx), %rdi
00000000000136ba	jmp	0x137be
00000000000136bf	movq	0x15d3a(%rip), %r12     ## Objc message: -[%rdi setHidden:]
00000000000136c6	movq	_OBJC_IVAR_$_UAPMouseAndTrackpadViewController._enableMouseScrollCheckbox(%rip), %r13
00000000000136cd	movq	(%r15,%r13), %rdi
00000000000136d1	testb	%r14b, %r14b
00000000000136d4	setne	%al
00000000000136d7	movzbl	%al, %edx
00000000000136da	movq	0x20d5f(%rip), %rsi     ## Objc selector ref: setState:
00000000000136e1	callq	*0x15d19(%rip)          ## Objc message: -[%rdi setState:]
00000000000136e7	leaq	0x17762(%rip), %rdi     ## Objc cfstring ref: @"MouseMomentumScroll"
00000000000136ee	leaq	0x1777b(%rip), %rsi     ## Objc cfstring ref: @"com.apple.driver.AppleBluetoothMultitouch.mouse"
00000000000136f5	movq	-0x68(%rbp), %rdx
00000000000136f9	movq	-0x78(%rbp), %rcx
00000000000136fd	callq	0x1e550                 ## symbol stub for: _CFPreferencesCopyValue
0000000000013702	movq	%rax, %r14
0000000000013705	xorl	%ebx, %ebx
0000000000013707	testq	%r14, %r14
000000000001370a	je	0x13757
000000000001370c	movq	%r14, %rdi
000000000001370f	callq	0x1e526                 ## symbol stub for: _CFGetTypeID
0000000000013714	movq	%rax, %rbx
0000000000013717	callq	0x1e502                 ## symbol stub for: _CFBooleanGetTypeID
000000000001371c	cmpq	%rax, %rbx
000000000001371f	je	0x1373f
0000000000013721	movq	%r14, %rdi
0000000000013724	callq	0x1e526                 ## symbol stub for: _CFGetTypeID
0000000000013729	movq	%rax, %r12
000000000001372c	callq	0x1e53e                 ## symbol stub for: _CFNumberGetTypeID
0000000000013731	xorl	%ebx, %ebx
0000000000013733	cmpq	%rax, %r12
0000000000013736	movq	0x15cc3(%rip), %r12     ## Objc message: -[%rdi setState:]
000000000001373d	jne	0x1374f
000000000001373f	movq	%r14, %rdi
0000000000013742	callq	0x1e508                 ## symbol stub for: _CFBooleanGetValue
0000000000013747	testb	%al, %al
0000000000013749	sete	%al
000000000001374c	movzbl	%al, %ebx
000000000001374f	movq	%r14, %rdi
0000000000013752	callq	0x1e562                 ## symbol stub for: _CFRelease
0000000000013757	movq	_OBJC_IVAR_$_UAPMouseAndTrackpadViewController._mouseScrollBehaviorPopup(%rip), %r14
000000000001375e	movq	(%r15,%r14), %rdi
0000000000013762	movq	0x20d2f(%rip), %rsi     ## Objc selector ref: selectItemAtIndex:
0000000000013769	movq	%rbx, %rdx
000000000001376c	callq	*%r12
000000000001376f	movq	(%r15,%r13), %rdi
0000000000013773	movq	0x2129e(%rip), %rsi     ## Objc selector ref: isHidden
000000000001377a	callq	*%r12
000000000001377d	testb	%al, %al
000000000001377f	je	0x137ed
0000000000013781	movq	(%r15,%r13), %rdi
0000000000013785	movq	0x20c6c(%rip), %rsi     ## Objc selector ref: setHidden:
000000000001378c	xorl	%edx, %edx
000000000001378e	callq	*%r12
0000000000013791	movq	(%r15,%r14), %rdi
0000000000013795	movq	0x20c5c(%rip), %rsi     ## Objc selector ref: setHidden:
000000000001379c	xorl	%edx, %edx
000000000001379e	callq	*%r12
00000000000137a1	movsd	-0x48(%rbp), %xmm0
00000000000137a6	addsd	0x14c1a(%rip), %xmm0
00000000000137ae	movsd	%xmm0, -0x48(%rbp)
00000000000137b3	movq	_OBJC_IVAR_$_UAPMouseAndTrackpadViewController._mouseOptionsSheet(%rip), %rax
00000000000137ba	movq	(%r15,%rax), %rdi
00000000000137be	movq	0x2162b(%rip), %rsi     ## Objc selector ref: setFrame:display:
00000000000137c5	movq	-0x48(%rbp), %rax
00000000000137c9	movq	%rax, 0x18(%rsp)
00000000000137ce	movq	-0x50(%rbp), %rax
00000000000137d2	movq	%rax, 0x10(%rsp)
00000000000137d7	movq	-0x60(%rbp), %rax
00000000000137db	movq	-0x58(%rbp), %rcx
00000000000137df	movq	%rcx, 0x8(%rsp)
00000000000137e4	movq	%rax, (%rsp)
00000000000137e8	xorl	%edx, %edx
00000000000137ea	callq	*%r12
00000000000137ed	movq	0x2155c(%rip), %rsi     ## Objc selector ref: _updateTrackpadDraggingUI
00000000000137f4	movq	%r15, %rdi
00000000000137f7	callq	*0x15c03(%rip)          ## Objc message: -[%rdi _updateTrackpadDraggingUI]
00000000000137fd	movq	0x15ba4(%rip), %rax     ## literal pool symbol address: _kCFPreferencesAnyApplication
0000000000013804	movq	(%rax), %rsi
0000000000013807	movq	0x15bb2(%rip), %rax     ## literal pool symbol address: _kCFPreferencesCurrentUser
000000000001380e	movq	(%rax), %rdx
0000000000013811	movq	0x15ba0(%rip), %rax     ## literal pool symbol address: _kCFPreferencesCurrentHost
0000000000013818	movq	(%rax), %rcx
000000000001381b	leaq	0x1758e(%rip), %rdi     ## Objc cfstring ref: @"com.apple.trackpad.momentumScroll"
0000000000013822	callq	0x1e550                 ## symbol stub for: _CFPreferencesCopyValue
0000000000013827	movq	%rax, %rbx
000000000001382a	xorl	%r14d, %r14d
000000000001382d	testq	%rbx, %rbx
0000000000013830	je	0x13878
0000000000013832	movq	%rbx, %rdi
0000000000013835	callq	0x1e526                 ## symbol stub for: _CFGetTypeID
000000000001383a	movq	%rax, %r14
000000000001383d	callq	0x1e502                 ## symbol stub for: _CFBooleanGetTypeID
0000000000013842	cmpq	%rax, %r14
0000000000013845	je	0x1385f
0000000000013847	movq	%rbx, %rdi
000000000001384a	callq	0x1e526                 ## symbol stub for: _CFGetTypeID
000000000001384f	movq	%rax, %r12
0000000000013852	callq	0x1e53e                 ## symbol stub for: _CFNumberGetTypeID
0000000000013857	xorl	%r14d, %r14d
000000000001385a	cmpq	%rax, %r12
000000000001385d	jne	0x13870
000000000001385f	movq	%rbx, %rdi
0000000000013862	callq	0x1e508                 ## symbol stub for: _CFBooleanGetValue
0000000000013867	testb	%al, %al
0000000000013869	sete	%al
000000000001386c	movzbl	%al, %r14d
0000000000013870	movq	%rbx, %rdi
0000000000013873	callq	0x1e562                 ## symbol stub for: _CFRelease
0000000000013878	movq	_OBJC_IVAR_$_UAPMouseAndTrackpadViewController._trackpadScrollBehaviorPopup(%rip), %r12
000000000001387f	movq	(%r15,%r12), %rdi
0000000000013883	movq	0x20c0e(%rip), %rsi     ## Objc selector ref: selectItemAtIndex:
000000000001388a	movq	%r14, %rdx
000000000001388d	movq	0x15b6c(%rip), %rax     ## Objc message: -[%rdi selectItemAtIndex:]
0000000000013894	movq	%rax, %rbx
0000000000013897	callq	*%rbx
0000000000013899	movq	0x15890(%rip), %rax     ## literal pool symbol address: _TrackPadScrollBehaviorKey
00000000000138a0	movq	(%rax), %rdi
00000000000138a3	xorl	%esi, %esi
00000000000138a5	callq	_perHostIntegerForKeyWithDefaultValue
00000000000138aa	movq	_OBJC_IVAR_$_UAPMouseAndTrackpadViewController._enableTrackpadScrollCheckbox(%rip), %rcx
00000000000138b1	movq	(%r15,%rcx), %rdi
00000000000138b5	testq	%rax, %rax
00000000000138b8	setg	%al
00000000000138bb	movzbl	%al, %r13d
00000000000138bf	movq	0x20b7a(%rip), %rsi     ## Objc selector ref: setState:
00000000000138c6	movq	%r13, %rdx
00000000000138c9	callq	*%rbx
00000000000138cb	movq	(%r15,%r12), %rdi
00000000000138cf	movq	%rbx, %r14
00000000000138d2	movq	0x20e67(%rip), %rsi     ## Objc selector ref: setEnabled:
00000000000138d9	movl	%r13d, %edx
00000000000138dc	callq	*%r14
00000000000138df	callq	0x1e5aa                 ## symbol stub for: _getEVSHandle
00000000000138e4	leaq	0x17545(%rip), %rsi     ## Objc cfstring ref: @"HIDTrackpadScrollAcceleration"
00000000000138eb	leaq	-0x40(%rbp), %rdx
00000000000138ef	movl	%eax, %edi
00000000000138f1	callq	0x1e4de                 ## symbol stub for: _IOHIDGetAccelerationWithKey
00000000000138f6	movsd	-0x40(%rbp), %xmm0
00000000000138fb	movq	%r14, %rbx
00000000000138fe	ucomisd	0x14ab2(%rip), %xmm0
0000000000013906	jbe	0x13937
0000000000013908	movabsq	$0x3ffb333333333333, %rax ## imm = 0x3FFB333333333333
0000000000013912	movq	%rax, -0x40(%rbp)
0000000000013916	movsd	0x14a9a(%rip), %xmm0
000000000001391e	movsd	0x14aca(%rip), %xmm2
0000000000013926	movsd	0x14a92(%rip), %xmm3
000000000001392e	leaq	0x14b2b(%rip), %rax
0000000000013935	jmp	0x13963
0000000000013937	xorpd	%xmm1, %xmm1
000000000001393b	ucomisd	%xmm0, %xmm1
000000000001393f	movsd	0x14aa9(%rip), %xmm2
0000000000013947	movsd	0x14a71(%rip), %xmm3
000000000001394f	leaq	0x14b0a(%rip), %rax
0000000000013956	jbe	0x13963
0000000000013958	movq	$0x0, -0x40(%rbp)
0000000000013960	xorps	%xmm0, %xmm0
0000000000013963	movl	$0x9, %edx
0000000000013968	cmpq	$0x1, %rdx
000000000001396c	je	0x139a5
000000000001396e	movsd	-0x10(%rax,%rdx,8), %xmm1
0000000000013974	subsd	%xmm0, %xmm1
0000000000013978	andpd	%xmm2, %xmm1
000000000001397c	decq	%rdx
000000000001397f	ucomisd	%xmm1, %xmm3
0000000000013983	jbe	0x13968
0000000000013985	testq	%rdx, %rdx
0000000000013988	jle	0x139a5
000000000001398a	decq	%rdx
000000000001398d	movq	_OBJC_IVAR_$_UAPMouseAndTrackpadViewController._trackpadScrollSpeedSlider(%rip), %rax
0000000000013994	movq	(%r15,%rax), %rdi
0000000000013998	movq	0x213d9(%rip), %rsi     ## Objc selector ref: setIntegerValue:
000000000001399f	callq	*0x15a5b(%rip)          ## Objc message: -[%rdi setIntegerValue:]
00000000000139a5	callq	__SystemHasTrackpad
00000000000139aa	movb	%al, %r13b
00000000000139ad	movb	%r13b, -0x78(%rbp)
00000000000139b1	movq	_OBJC_IVAR_$_UAPMouseAndTrackpadViewController._trackpadOptionsButton(%rip), %rax
00000000000139b8	movq	(%r15,%rax), %rdi
00000000000139bc	movq	0x20a35(%rip), %rsi     ## Objc selector ref: setHidden:
00000000000139c3	testb	%r13b, %r13b
00000000000139c6	sete	%al
00000000000139c9	movzbl	%al, %edx
00000000000139cc	movl	%edx, -0x68(%rbp)
00000000000139cf	callq	*%rbx
00000000000139d1	movq	_OBJC_IVAR_$_UAPMouseAndTrackpadViewController._primaryStackView(%rip), %rax
00000000000139d8	movq	(%r15,%rax), %rdi
00000000000139dc	movq	0x210f5(%rip), %rsi     ## Objc selector ref: views
00000000000139e3	callq	*%rbx
00000000000139e5	movq	_OBJC_IVAR_$_UAPMouseAndTrackpadViewController._ignoreTrackpadWhenExternalMouseView(%rip), %r14
00000000000139ec	movq	(%r15,%r14), %rdx
00000000000139f0	movq	0x20729(%rip), %rsi     ## Objc selector ref: containsObject:
00000000000139f7	movq	%rax, %rdi
00000000000139fa	callq	*%rbx
00000000000139fc	movq	%rbx, %r12
00000000000139ff	testb	%r13b, %r13b
0000000000013a02	je	0x13a2b
0000000000013a04	testb	%al, %al
0000000000013a06	jne	0x13a4b
0000000000013a08	movq	_OBJC_IVAR_$_UAPMouseAndTrackpadViewController._primaryStackView(%rip), %rax
0000000000013a0f	movq	(%r15,%rax), %rdi
0000000000013a13	movq	(%r15,%r14), %rdx
0000000000013a17	movq	0x210ca(%rip), %rsi     ## Objc selector ref: addView:inGravity:
0000000000013a1e	movl	$0x2, %ecx
0000000000013a23	callq	*0x159d7(%rip)          ## Objc message: -[%rdi addView:inGravity:]
0000000000013a29	jmp	0x13a4b
0000000000013a2b	testb	%al, %al
0000000000013a2d	je	0x13a4b
0000000000013a2f	movq	_OBJC_IVAR_$_UAPMouseAndTrackpadViewController._primaryStackView(%rip), %rax
0000000000013a36	movq	(%r15,%rax), %rdi
0000000000013a3a	movq	(%r15,%r14), %rdx
0000000000013a3e	movq	0x2109b(%rip), %rsi     ## Objc selector ref: removeView:
0000000000013a45	callq	*0x159b5(%rip)          ## Objc message: -[%rdi removeView:]
0000000000013a4b	movq	_OBJC_IVAR_$_UAPMouseAndTrackpadViewController._ignoreTrackpadWhenExternalMouseCheckbox(%rip), %rax
0000000000013a52	movq	(%r15,%rax), %rdi
0000000000013a56	movq	0x2099b(%rip), %rsi     ## Objc selector ref: setHidden:
0000000000013a5d	movl	-0x68(%rbp), %ebx
0000000000013a60	movl	%ebx, %edx
0000000000013a62	movq	%r12, %r13
0000000000013a65	callq	*%r13
0000000000013a68	movq	_OBJC_IVAR_$_UAPMouseAndTrackpadViewController._ignoreTrackpadWhenExternalMouseText(%rip), %rax
0000000000013a6f	movq	(%r15,%rax), %rdi
0000000000013a73	movq	0x2097e(%rip), %rsi     ## Objc selector ref: setHidden:
0000000000013a7a	movl	%ebx, %edx
0000000000013a7c	callq	*%r13
0000000000013a7f	movq	_OBJC_IVAR_$_UAPMouseAndTrackpadViewController._mouseKeysEnableCheckbox(%rip), %rax
0000000000013a86	movq	(%r15,%rax), %rbx
0000000000013a8a	callq	0x1e62e                 ## symbol stub for: _UAMouseKeysIsEnabled
0000000000013a8f	testb	%al, %al
0000000000013a91	setne	%al
0000000000013a94	movzbl	%al, %edx
0000000000013a97	movq	0x209a2(%rip), %rsi     ## Objc selector ref: setState:
0000000000013a9e	movq	%rbx, %rdi
0000000000013aa1	callq	*%r13
0000000000013aa4	movq	_OBJC_IVAR_$_UAPMouseAndTrackpadViewController._mouseKeysInitialDelay(%rip), %rax
0000000000013aab	movq	(%r15,%rax), %rbx
0000000000013aaf	callq	0x1e628                 ## symbol stub for: _UAMouseKeysInitialDelay
0000000000013ab4	movq	0x2133d(%rip), %rsi     ## Objc selector ref: _mouseKeysClosestInitialDelayTickMarkValueToValue:
0000000000013abb	movq	%r15, %rdi
0000000000013abe	callq	*%r13
0000000000013ac1	movq	0x20ce8(%rip), %rsi     ## Objc selector ref: setDoubleValue:
0000000000013ac8	movq	%rbx, %rdi
0000000000013acb	callq	*%r13
0000000000013ace	movq	_OBJC_IVAR_$_UAPMouseAndTrackpadViewController._mouseKeysMaxSpeed(%rip), %rax
0000000000013ad5	movq	(%r15,%rax), %rbx
0000000000013ad9	callq	0x1e634                 ## symbol stub for: _UAMouseKeysMaximumSpeed
0000000000013ade	cvtsi2ssq	%rax, %xmm0
0000000000013ae3	movq	0x21316(%rip), %rsi     ## Objc selector ref: _mouseKeysClosestSpeedTickMarkValueToValue:
0000000000013aea	movq	%r15, %rdi
0000000000013aed	callq	*%r13
0000000000013af0	movq	0x20cb9(%rip), %rsi     ## Objc selector ref: setDoubleValue:
0000000000013af7	movq	%rbx, %rdi
0000000000013afa	callq	*%r13
0000000000013afd	cmpb	$0x0, -0x78(%rbp)
0000000000013b01	movq	%r13, %rbx
0000000000013b04	je	0x13b80
0000000000013b06	callq	0x1e61c                 ## symbol stub for: _UAMouseKeysIgnoreTrackpadForMouseKeysIsEnabled
0000000000013b0b	movq	_OBJC_IVAR_$_UAPMouseAndTrackpadViewController._mouseKeysIgnoreTrackpadCheckbox(%rip), %r14
0000000000013b12	movq	(%r15,%r14), %rdi
0000000000013b16	testb	%al, %al
0000000000013b18	setne	%al
0000000000013b1b	movzbl	%al, %edx
0000000000013b1e	movq	0x2091b(%rip), %rsi     ## Objc selector ref: setState:
0000000000013b25	callq	*%rbx
0000000000013b27	movq	(%r15,%r14), %rdi
0000000000013b2b	movq	0x20b76(%rip), %rsi     ## Objc selector ref: state
0000000000013b32	callq	*%rbx
0000000000013b34	cmpq	$0x1, %rax
0000000000013b38	jne	0x13b80
0000000000013b3a	movq	_OBJC_IVAR_$_UAPMouseAndTrackpadViewController._mouseKeysEnableKeyboardShortcutCheckbox(%rip), %r14
0000000000013b41	movq	(%r15,%r14), %rdi
0000000000013b45	movq	0x208f4(%rip), %rsi     ## Objc selector ref: setState:
0000000000013b4c	movl	$0x1, %edx
0000000000013b51	callq	*%rbx
0000000000013b53	movq	(%r15,%r14), %rdi
0000000000013b57	movq	0x20be2(%rip), %rsi     ## Objc selector ref: setEnabled:
0000000000013b5e	xorl	%edx, %edx
0000000000013b60	callq	*%rbx
0000000000013b62	callq	0x1e610                 ## symbol stub for: _UAMouseKeysEnableWithOptionKeyIsEnabled
0000000000013b67	testb	%al, %al
0000000000013b69	jne	0x13bb3
0000000000013b6b	movq	0x211e6(%rip), %rsi     ## Objc selector ref: mouseKeysEnableKeyboardShortcut:
0000000000013b72	movq	%r15, %rdi
0000000000013b75	movq	%r15, %rdx
0000000000013b78	callq	*0x15882(%rip)          ## Objc message: -[%rdi mouseKeysEnableKeyboardShortcut:]
0000000000013b7e	jmp	0x13bb3
0000000000013b80	callq	0x1e610                 ## symbol stub for: _UAMouseKeysEnableWithOptionKeyIsEnabled
0000000000013b85	movq	_OBJC_IVAR_$_UAPMouseAndTrackpadViewController._mouseKeysEnableKeyboardShortcutCheckbox(%rip), %r14
0000000000013b8c	movq	(%r15,%r14), %rdi
0000000000013b90	testb	%al, %al
0000000000013b92	setne	%al
0000000000013b95	movzbl	%al, %edx
0000000000013b98	movq	0x208a1(%rip), %rsi     ## Objc selector ref: setState:
0000000000013b9f	callq	*%rbx
0000000000013ba1	movq	(%r15,%r14), %rdi
0000000000013ba5	movq	0x20b94(%rip), %rsi     ## Objc selector ref: setEnabled:
0000000000013bac	movl	$0x1, %edx
0000000000013bb1	callq	*%rbx
0000000000013bb3	movq	_OBJC_IVAR_$_UAPMouseAndTrackpadViewController._mouseKeysIgnoreTrackpadCheckbox(%rip), %r12
0000000000013bba	movq	(%r15,%r12), %rdi
0000000000013bbe	movq	0x20833(%rip), %rsi     ## Objc selector ref: setHidden:
0000000000013bc5	movl	-0x68(%rbp), %edx
0000000000013bc8	callq	*0x15832(%rip)          ## Objc message: -[%rdi setHidden:]
0000000000013bce	movl	-0x6c(%rbp), %eax
0000000000013bd1	testb	%al, %al
0000000000013bd3	je	0x13d85
0000000000013bd9	movq	_OBJC_IVAR_$_UAPMouseAndTrackpadViewController._mouseScrollSpeedSlider(%rip), %rax
0000000000013be0	movq	(%r15,%rax), %rdi
0000000000013be4	movq	0x2054d(%rip), %rsi     ## Objc selector ref: integerValue
0000000000013beb	callq	*%rbx
0000000000013bed	movq	_OBJC_IVAR_$_UAPMouseAndTrackpadViewController._cachedMouseScrollSpeedSliderIntegerValue(%rip), %rcx
0000000000013bf4	movq	%rax, (%r15,%rcx)
0000000000013bf8	movq	_OBJC_IVAR_$_UAPMouseAndTrackpadViewController._enableMouseScrollCheckbox(%rip), %rax
0000000000013bff	movq	(%r15,%rax), %rdi
0000000000013c03	movq	0x20a9e(%rip), %rsi     ## Objc selector ref: state
0000000000013c0a	callq	*%rbx
0000000000013c0c	movq	_OBJC_IVAR_$_UAPMouseAndTrackpadViewController._cachedEnableMouseScrollCheckboxState(%rip), %rcx
0000000000013c13	movq	%rax, (%r15,%rcx)
0000000000013c17	movq	_OBJC_IVAR_$_UAPMouseAndTrackpadViewController._mouseScrollBehaviorPopup(%rip), %rax
0000000000013c1e	movq	(%r15,%rax), %rdi
0000000000013c22	movq	0x20a6f(%rip), %rsi     ## Objc selector ref: indexOfSelectedItem
0000000000013c29	callq	*%rbx
0000000000013c2b	movq	_OBJC_IVAR_$_UAPMouseAndTrackpadViewController._cachedMouseScrollBehaviorPopupIndexOfSelectedItem(%rip), %rcx
0000000000013c32	movq	%rax, (%r15,%rcx)
0000000000013c36	movq	0x15503(%rip), %rax     ## literal pool symbol address: _TrackPadTapBehaviorKey
0000000000013c3d	movq	(%rax), %rdi
0000000000013c40	xorl	%esi, %esi
0000000000013c42	callq	_perHostIntegerForKeyWithDefaultValue
0000000000013c47	movq	_OBJC_IVAR_$_UAPMouseAndTrackpadViewController._cachedTrackpadTapBehavior(%rip), %rcx
0000000000013c4e	movq	%rax, (%r15,%rcx)
0000000000013c52	movq	_OBJC_IVAR_$_UAPMouseAndTrackpadViewController._trackpadScrollSpeedSlider(%rip), %rax
0000000000013c59	movq	(%r15,%rax), %rdi
0000000000013c5d	movq	0x204d4(%rip), %rsi     ## Objc selector ref: integerValue
0000000000013c64	callq	*%rbx
0000000000013c66	movq	_OBJC_IVAR_$_UAPMouseAndTrackpadViewController._cachedTrackpadScrollSpeedSliderIntegerValue(%rip), %rcx
0000000000013c6d	movq	%rax, (%r15,%rcx)
0000000000013c71	movq	_OBJC_IVAR_$_UAPMouseAndTrackpadViewController._enableTrackpadScrollCheckbox(%rip), %rax
0000000000013c78	movq	(%r15,%rax), %rdi
0000000000013c7c	movq	0x20a25(%rip), %rsi     ## Objc selector ref: state
0000000000013c83	callq	*%rbx
0000000000013c85	movq	_OBJC_IVAR_$_UAPMouseAndTrackpadViewController._cachedEnableTrackpadScrollCheckboxState(%rip), %rcx
0000000000013c8c	movq	%rax, (%r15,%rcx)
0000000000013c90	movq	_OBJC_IVAR_$_UAPMouseAndTrackpadViewController._trackpadScrollBehaviorPopup(%rip), %rax
0000000000013c97	movq	(%r15,%rax), %rdi
0000000000013c9b	movq	0x209f6(%rip), %rsi     ## Objc selector ref: indexOfSelectedItem
0000000000013ca2	callq	*%rbx
0000000000013ca4	movq	_OBJC_IVAR_$_UAPMouseAndTrackpadViewController._cachedTrackpadScrollBehaviorPopupIndexOfSelectedItem(%rip), %rcx
0000000000013cab	movq	%rax, (%r15,%rcx)
0000000000013caf	movq	_OBJC_IVAR_$_UAPMouseAndTrackpadViewController._enableTrackpadDraggingCheckbox(%rip), %rax
0000000000013cb6	movq	(%r15,%rax), %rdi
0000000000013cba	movq	0x209e7(%rip), %rsi     ## Objc selector ref: state
0000000000013cc1	callq	*%rbx
0000000000013cc3	movq	_OBJC_IVAR_$_UAPMouseAndTrackpadViewController._cachedEnableTrackpadDraggingCheckboxState(%rip), %rcx
0000000000013cca	movq	%rax, (%r15,%rcx)
0000000000013cce	movq	_OBJC_IVAR_$_UAPMouseAndTrackpadViewController._trackpadDraggingBehaviorPopup(%rip), %rax
0000000000013cd5	movq	(%r15,%rax), %rdi
0000000000013cd9	movq	0x20af0(%rip), %rsi     ## Objc selector ref: selectedTag
0000000000013ce0	callq	*%rbx
0000000000013ce2	movq	_OBJC_IVAR_$_UAPMouseAndTrackpadViewController._cachedTrackpadDraggingBehaviorPopupSelectedTag(%rip), %rcx
0000000000013ce9	movq	%rax, (%r15,%rcx)
0000000000013ced	movq	_OBJC_IVAR_$_UAPMouseAndTrackpadViewController._enableTrackpadTapToClickCheckbox(%rip), %rax
0000000000013cf4	movq	(%r15,%rax), %rdi
0000000000013cf8	movq	0x209a9(%rip), %rsi     ## Objc selector ref: state
0000000000013cff	callq	*%rbx
0000000000013d01	movq	_OBJC_IVAR_$_UAPMouseAndTrackpadViewController._cachedEnableTrackpadTapToClickCheckboxState(%rip), %rcx
0000000000013d08	movq	%rax, (%r15,%rcx)
0000000000013d0c	movq	_OBJC_IVAR_$_UAPMouseAndTrackpadViewController._mouseKeysEnableKeyboardShortcutCheckbox(%rip), %rax
0000000000013d13	movq	(%r15,%rax), %rdi
0000000000013d17	movq	0x2098a(%rip), %rsi     ## Objc selector ref: state
0000000000013d1e	callq	*%rbx
0000000000013d20	movq	_OBJC_IVAR_$_UAPMouseAndTrackpadViewController._cachedMouseKeysEnableKeyboardShortcutCheckboxState(%rip), %rcx
0000000000013d27	movq	%rax, (%r15,%rcx)
0000000000013d2b	movq	(%r15,%r12), %rdi
0000000000013d2f	movq	0x20972(%rip), %rsi     ## Objc selector ref: state
0000000000013d36	callq	*%rbx
0000000000013d38	movq	_OBJC_IVAR_$_UAPMouseAndTrackpadViewController._cachedMouseKeysIgnoreTrackpadCheckboxState(%rip), %rcx
0000000000013d3f	movq	%rax, (%r15,%rcx)
0000000000013d43	movq	_OBJC_IVAR_$_UAPMouseAndTrackpadViewController._mouseKeysInitialDelay(%rip), %rax
0000000000013d4a	movq	(%r15,%rax), %rdi
0000000000013d4e	movq	0x20cfb(%rip), %rsi     ## Objc selector ref: doubleValue
0000000000013d55	callq	*%rbx
0000000000013d57	movq	_OBJC_IVAR_$_UAPMouseAndTrackpadViewController._cachedMouseKeysInitialDelaySliderDoubleValue(%rip), %rax
0000000000013d5e	movsd	%xmm0, (%r15,%rax)
0000000000013d64	movq	_OBJC_IVAR_$_UAPMouseAndTrackpadViewController._mouseKeysMaxSpeed(%rip), %rax
0000000000013d6b	movq	(%r15,%rax), %rdi
0000000000013d6f	movq	0x20cda(%rip), %rsi     ## Objc selector ref: doubleValue
0000000000013d76	callq	*%rbx
0000000000013d78	movq	_OBJC_IVAR_$_UAPMouseAndTrackpadViewController._cachedMouseKeysMaxSpeedSliderDoubleValue(%rip), %rax
0000000000013d7f	movsd	%xmm0, (%r15,%rax)
0000000000013d85	addq	$0x88, %rsp
0000000000013d8c	popq	%rbx
0000000000013d8d	popq	%r12
0000000000013d8f	popq	%r13
0000000000013d91	popq	%r14
0000000000013d93	popq	%r15
0000000000013d95	popq	%rbp
0000000000013d96	retq
0000000000013d97	pushq	%rbp
0000000000013d98	movq	%rsp, %rbp
0000000000013d9b	pushq	%r15
0000000000013d9d	pushq	%r14
0000000000013d9f	pushq	%r13
0000000000013da1	pushq	%r12
0000000000013da3	pushq	%rbx
0000000000013da4	subq	$0x18, %rsp
0000000000013da8	movq	%rdi, %r12
0000000000013dab	movq	_OBJC_IVAR_$_UAPMouseAndTrackpadViewController._ignoreTrackpadWhenExternalMouseCheckbox(%rip), %rax
0000000000013db2	movq	(%r12,%rax), %r14
0000000000013db6	movq	0x1535b(%rip), %rax     ## literal pool symbol address: _NewIgnoreTrackpadIfMousePresentKey
0000000000013dbd	movq	(%rax), %rdi
0000000000013dc0	callq	0x1e4cc                 ## symbol stub for: _UAPreferenceIsForced
0000000000013dc5	testb	%al, %al
0000000000013dc7	sete	%al
0000000000013dca	movq	0x2096f(%rip), %rsi     ## Objc selector ref: setEnabled:
0000000000013dd1	movzbl	%al, %edx
0000000000013dd4	movq	0x15625(%rip), %r13     ## Objc message: -[%rdi setEnabled:]
0000000000013ddb	movq	%r14, %rdi
0000000000013dde	callq	*%r13
0000000000013de1	movq	_OBJC_IVAR_$_UAPMouseAndTrackpadViewController._enableMouseScrollCheckbox(%rip), %rax
0000000000013de8	movq	(%r12,%rax), %r14
0000000000013dec	leaq	0x1709d(%rip), %rdi     ## Objc cfstring ref: @"MouseHorizontalScroll"
0000000000013df3	leaq	0x17076(%rip), %r15     ## Objc cfstring ref: @"com.apple.driver.AppleBluetoothMultitouch.mouse"
0000000000013dfa	movq	%r15, %rsi
0000000000013dfd	callq	0x1e54a                 ## symbol stub for: _CFPreferencesAppValueIsForced
0000000000013e02	testb	%al, %al
0000000000013e04	sete	%al
0000000000013e07	movq	0x20932(%rip), %rsi     ## Objc selector ref: setEnabled:
0000000000013e0e	movzbl	%al, %edx
0000000000013e11	movq	%r14, %rdi
0000000000013e14	callq	*%r13
0000000000013e17	movq	_OBJC_IVAR_$_UAPMouseAndTrackpadViewController._mouseScrollBehaviorPopup(%rip), %rax
0000000000013e1e	movq	(%r12,%rax), %r14
0000000000013e22	leaq	0x17027(%rip), %rdi     ## Objc cfstring ref: @"MouseMomentumScroll"
0000000000013e29	movq	%r15, %rsi
0000000000013e2c	callq	0x1e54a                 ## symbol stub for: _CFPreferencesAppValueIsForced
0000000000013e31	testb	%al, %al
0000000000013e33	sete	%al
0000000000013e36	movq	0x20903(%rip), %rsi     ## Objc selector ref: setEnabled:
0000000000013e3d	movzbl	%al, %edx
0000000000013e40	movq	%r14, %rdi
0000000000013e43	callq	*%r13
0000000000013e46	movq	_OBJC_IVAR_$_UAPMouseAndTrackpadViewController._mouseKeysEnableCheckbox(%rip), %rax
0000000000013e4d	movq	(%r12,%rax), %r14
0000000000013e51	movq	0x15358(%rip), %rax     ## literal pool symbol address: _UAMouseKeysEnabledKey
0000000000013e58	movq	(%rax), %rdi
0000000000013e5b	callq	0x1e4cc                 ## symbol stub for: _UAPreferenceIsForced
0000000000013e60	testb	%al, %al
0000000000013e62	sete	%al
0000000000013e65	movq	0x208d4(%rip), %rsi     ## Objc selector ref: setEnabled:
0000000000013e6c	movzbl	%al, %edx
0000000000013e6f	movq	%r14, %rdi
0000000000013e72	callq	*%r13
0000000000013e75	movq	_OBJC_IVAR_$_UAPMouseAndTrackpadViewController._mouseKeysEnableKeyboardShortcutCheckbox(%rip), %rax
0000000000013e7c	movq	(%r12,%rax), %r14
0000000000013e80	movq	0x15321(%rip), %rax     ## literal pool symbol address: _UAMouseKeysEnableWithOptionKeyKey
0000000000013e87	movq	(%rax), %rdi
0000000000013e8a	callq	0x1e4cc                 ## symbol stub for: _UAPreferenceIsForced
0000000000013e8f	testb	%al, %al
0000000000013e91	sete	%al
0000000000013e94	movq	0x208a5(%rip), %rsi     ## Objc selector ref: setEnabled:
0000000000013e9b	movzbl	%al, %edx
0000000000013e9e	movq	%r14, %rdi
0000000000013ea1	callq	*%r13
0000000000013ea4	movq	_OBJC_IVAR_$_UAPMouseAndTrackpadViewController._mouseKeysIgnoreTrackpadCheckbox(%rip), %rax
0000000000013eab	movq	(%r12,%rax), %r14
0000000000013eaf	movq	0x15302(%rip), %rax     ## literal pool symbol address: _UAMouseKeysIgnoreTrackpadKey
0000000000013eb6	movq	(%rax), %rdi
0000000000013eb9	callq	0x1e4cc                 ## symbol stub for: _UAPreferenceIsForced
0000000000013ebe	testb	%al, %al
0000000000013ec0	sete	%al
0000000000013ec3	movq	0x20876(%rip), %rsi     ## Objc selector ref: setEnabled:
0000000000013eca	movzbl	%al, %edx
0000000000013ecd	movq	%r14, %rdi
0000000000013ed0	callq	*%r13
0000000000013ed3	movq	_OBJC_IVAR_$_UAPMouseAndTrackpadViewController._mouseKeysInitialDelay(%rip), %rax
0000000000013eda	movq	(%r12,%rax), %r14
0000000000013ede	movq	0x152db(%rip), %rax     ## literal pool symbol address: _UAMouseKeysInitialDelayKey
0000000000013ee5	movq	(%rax), %rbx
0000000000013ee8	movq	%rbx, %rdi
0000000000013eeb	callq	0x1e4cc                 ## symbol stub for: _UAPreferenceIsForced
0000000000013ef0	testb	%al, %al
0000000000013ef2	sete	%al
0000000000013ef5	movq	0x20844(%rip), %rsi     ## Objc selector ref: setEnabled:
0000000000013efc	movzbl	%al, %edx
0000000000013eff	movq	%r14, %rdi
0000000000013f02	callq	*%r13
0000000000013f05	movq	_OBJC_IVAR_$_UAPMouseAndTrackpadViewController._mouseKeysMaxSpeed(%rip), %rax
0000000000013f0c	movq	(%r12,%rax), %r14
0000000000013f10	movq	%rbx, %rdi
0000000000013f13	callq	0x1e4cc                 ## symbol stub for: _UAPreferenceIsForced
0000000000013f18	testb	%al, %al
0000000000013f1a	sete	%al
0000000000013f1d	movq	0x2081c(%rip), %rsi     ## Objc selector ref: setEnabled:
0000000000013f24	movzbl	%al, %edx
0000000000013f27	movq	%r14, %rdi
0000000000013f2a	callq	*%r13
0000000000013f2d	movq	%r12, -0x38(%rbp)
0000000000013f31	movq	0x21818(%rip), %rax     ## Objc class ref: UAPMouseAndTrackpadViewController
0000000000013f38	movq	%rax, -0x30(%rbp)
0000000000013f3c	movq	0x20805(%rip), %rsi     ## Objc selector ref: validateControls
0000000000013f43	leaq	-0x38(%rbp), %rdi
0000000000013f47	callq	0x1e88c                 ## Objc message: -[[%rdi super] validateControls]
0000000000013f4c	addq	$0x18, %rsp
0000000000013f50	popq	%rbx
0000000000013f51	popq	%r12
0000000000013f53	popq	%r13
0000000000013f55	popq	%r14
0000000000013f57	popq	%r15
0000000000013f59	popq	%rbp
0000000000013f5a	retq
0000000000013f5b	pushq	%rbp
0000000000013f5c	movq	%rsp, %rbp
0000000000013f5f	pushq	%r15
0000000000013f61	pushq	%r14
0000000000013f63	pushq	%rbx
0000000000013f64	pushq	%rax
0000000000013f65	xorps	%xmm1, %xmm1
0000000000013f68	maxss	%xmm0, %xmm1
0000000000013f6c	movss	0x143b4(%rip), %xmm0
0000000000013f74	minss	%xmm1, %xmm0
0000000000013f78	movq	0x215e1(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_NSNumber
0000000000013f7f	movq	0x20622(%rip), %rsi     ## Objc selector ref: numberWithFloat:
0000000000013f86	movq	0x15473(%rip), %r15     ## Objc message: +[NSNumber numberWithFloat:]
0000000000013f8d	callq	*%r15
0000000000013f90	movq	0x15411(%rip), %rcx     ## literal pool symbol address: _kCFPreferencesAnyApplication
0000000000013f97	movq	(%rcx), %r14
0000000000013f9a	movq	0x1541f(%rip), %rcx     ## literal pool symbol address: _kCFPreferencesCurrentUser
0000000000013fa1	movq	(%rcx), %rbx
0000000000013fa4	movq	0x15405(%rip), %rcx     ## literal pool symbol address: _kCFPreferencesAnyHost
0000000000013fab	movq	(%rcx), %r8
0000000000013fae	leaq	0x16d5b(%rip), %rdi     ## Objc cfstring ref: @"com.apple.springing.delay"
0000000000013fb5	movq	%rax, %rsi
0000000000013fb8	movq	%r14, %rdx
0000000000013fbb	movq	%rbx, %rcx
0000000000013fbe	callq	0x1e556                 ## symbol stub for: _CFPreferencesSetValue
0000000000013fc3	movq	0x153ee(%rip), %rax     ## literal pool symbol address: _kCFPreferencesCurrentHost
0000000000013fca	movq	(%rax), %rdx
0000000000013fcd	movq	%r14, %rdi
0000000000013fd0	movq	%rbx, %rsi
0000000000013fd3	callq	0x1e55c                 ## symbol stub for: _CFPreferencesSynchronize
0000000000013fd8	movq	0x215d1(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_NSDistributedNotificationCenter
0000000000013fdf	movq	0x2034a(%rip), %rsi     ## Objc selector ref: defaultCenter
0000000000013fe6	callq	*%r15
0000000000013fe9	movq	0x20d28(%rip), %rsi     ## Objc selector ref: postNotificationName:object:
0000000000013ff0	leaq	0x16cd9(%rip), %rdx     ## Objc cfstring ref: @"com.apple.springing.prefchanged"
0000000000013ff7	xorl	%ecx, %ecx
0000000000013ff9	movq	%rax, %rdi
0000000000013ffc	movq	%r15, %rax
0000000000013fff	addq	$0x8, %rsp
0000000000014003	popq	%rbx
0000000000014004	popq	%r14
0000000000014006	popq	%r15
0000000000014008	popq	%rbp
0000000000014009	jmpq	*%rax
000000000001400b	pushq	%rbp
000000000001400c	movq	%rsp, %rbp
000000000001400f	pushq	%r14
0000000000014011	pushq	%rbx
0000000000014012	subq	$0x10, %rsp
0000000000014016	movq	0x1538b(%rip), %rax     ## literal pool symbol address: _kCFPreferencesAnyApplication
000000000001401d	movq	(%rax), %rsi
0000000000014020	movq	0x15399(%rip), %rax     ## literal pool symbol address: _kCFPreferencesCurrentUser
0000000000014027	movq	(%rax), %rdx
000000000001402a	movq	0x1537f(%rip), %rax     ## literal pool symbol address: _kCFPreferencesAnyHost
0000000000014031	movq	(%rax), %rcx
0000000000014034	leaq	0x16cd5(%rip), %rdi     ## Objc cfstring ref: @"com.apple.springing.delay"
000000000001403b	callq	0x1e550                 ## symbol stub for: _CFPreferencesCopyValue
0000000000014040	movq	%rax, %rbx
0000000000014043	testq	%rbx, %rbx
0000000000014046	je	0x1407d
0000000000014048	movq	%rbx, %rdi
000000000001404b	callq	0x1e526                 ## symbol stub for: _CFGetTypeID
0000000000014050	movq	%rax, %r14
0000000000014053	callq	0x1e53e                 ## symbol stub for: _CFNumberGetTypeID
0000000000014058	cmpq	%rax, %r14
000000000001405b	je	0x14067
000000000001405d	callq	0x1e56e                 ## symbol stub for: _CFStringGetTypeID
0000000000014062	cmpq	%rax, %r14
0000000000014065	jne	0x14087
0000000000014067	movq	0x2043a(%rip), %rsi     ## Objc selector ref: floatValue
000000000001406e	movq	%rbx, %rdi
0000000000014071	callq	*0x15389(%rip)          ## Objc message: +[NSDistributedNotificationCenter floatValue]
0000000000014077	cvtss2sd	%xmm0, %xmm0
000000000001407b	jmp	0x1408f
000000000001407d	movsd	0x14353(%rip), %xmm1
0000000000014085	jmp	0x140a1
0000000000014087	movsd	0x14349(%rip), %xmm0
000000000001408f	movsd	%xmm0, -0x18(%rbp)
0000000000014094	movq	%rbx, %rdi
0000000000014097	callq	0x1e562                 ## symbol stub for: _CFRelease
000000000001409c	movsd	-0x18(%rbp), %xmm1
00000000000140a1	ucomisd	0x14247(%rip), %xmm1
00000000000140a9	seta	%al
00000000000140ac	xorps	%xmm0, %xmm0
00000000000140af	ucomisd	%xmm1, %xmm0
00000000000140b3	setbe	%cl
00000000000140b6	xorps	%xmm0, %xmm0
00000000000140b9	ja	0x140c2
00000000000140bb	xorps	%xmm0, %xmm0
00000000000140be	cvtsd2ss	%xmm1, %xmm0
00000000000140c2	testb	%cl, %al
00000000000140c4	je	0x140ce
00000000000140c6	movss	0x1425a(%rip), %xmm0
00000000000140ce	addq	$0x10, %rsp
00000000000140d2	popq	%rbx
00000000000140d3	popq	%r14
00000000000140d5	popq	%rbp
00000000000140d6	retq
00000000000140d7	pushq	%rbp
00000000000140d8	movq	%rsp, %rbp
00000000000140db	pushq	%r14
00000000000140dd	pushq	%rbx
00000000000140de	testb	%dl, %dl
00000000000140e0	movq	0x152b1(%rip), %rax     ## literal pool symbol address: _kCFBooleanFalse
00000000000140e7	cmovneq	0x152b1(%rip), %rax     ## literal pool symbol address: _kCFBooleanTrue
00000000000140ef	movq	(%rax), %rsi
00000000000140f2	movq	0x152af(%rip), %rax     ## literal pool symbol address: _kCFPreferencesAnyApplication
00000000000140f9	movq	(%rax), %r14
00000000000140fc	movq	0x152bd(%rip), %rax     ## literal pool symbol address: _kCFPreferencesCurrentUser
0000000000014103	movq	(%rax), %rbx
0000000000014106	movq	0x152a3(%rip), %rax     ## literal pool symbol address: _kCFPreferencesAnyHost
000000000001410d	movq	(%rax), %r8
0000000000014110	leaq	0x16bd9(%rip), %rdi     ## Objc cfstring ref: @"com.apple.springing.enabled"
0000000000014117	movq	%r14, %rdx
000000000001411a	movq	%rbx, %rcx
000000000001411d	callq	0x1e556                 ## symbol stub for: _CFPreferencesSetValue
0000000000014122	movq	0x1528f(%rip), %rax     ## literal pool symbol address: _kCFPreferencesCurrentHost
0000000000014129	movq	(%rax), %rdx
000000000001412c	movq	%r14, %rdi
000000000001412f	movq	%rbx, %rsi
0000000000014132	callq	0x1e55c                 ## symbol stub for: _CFPreferencesSynchronize
0000000000014137	movq	0x21472(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_NSDistributedNotificationCenter
000000000001413e	movq	0x201eb(%rip), %rsi     ## Objc selector ref: defaultCenter
0000000000014145	movq	0x152b4(%rip), %rbx     ## Objc message: +[NSDistributedNotificationCenter defaultCenter]
000000000001414c	callq	*%rbx
000000000001414e	movq	0x20bc3(%rip), %rsi     ## Objc selector ref: postNotificationName:object:
0000000000014155	leaq	0x16b74(%rip), %rdx     ## Objc cfstring ref: @"com.apple.springing.prefchanged"
000000000001415c	xorl	%ecx, %ecx
000000000001415e	movq	%rax, %rdi
0000000000014161	movq	%rbx, %rax
0000000000014164	popq	%rbx
0000000000014165	popq	%r14
0000000000014167	popq	%rbp
0000000000014168	jmpq	*%rax
000000000001416a	pushq	%rbp
000000000001416b	movq	%rsp, %rbp
000000000001416e	pushq	%r15
0000000000014170	pushq	%r14
0000000000014172	pushq	%rbx
0000000000014173	pushq	%rax
0000000000014174	movq	0x1522d(%rip), %rax     ## literal pool symbol address: _kCFPreferencesAnyApplication
000000000001417b	movq	(%rax), %rsi
000000000001417e	movq	0x1523b(%rip), %rax     ## literal pool symbol address: _kCFPreferencesCurrentUser
0000000000014185	movq	(%rax), %rdx
0000000000014188	movq	0x15221(%rip), %rax     ## literal pool symbol address: _kCFPreferencesAnyHost
000000000001418f	movq	(%rax), %rcx
0000000000014192	leaq	0x16b57(%rip), %rdi     ## Objc cfstring ref: @"com.apple.springing.enabled"
0000000000014199	callq	0x1e550                 ## symbol stub for: _CFPreferencesCopyValue
000000000001419e	movq	%rax, %r14
00000000000141a1	movb	$0x1, %bl
00000000000141a3	testq	%r14, %r14
00000000000141a6	je	0x141ee
00000000000141a8	movq	%r14, %rdi
00000000000141ab	callq	0x1e526                 ## symbol stub for: _CFGetTypeID
00000000000141b0	movq	%rax, %rbx
00000000000141b3	callq	0x1e502                 ## symbol stub for: _CFBooleanGetTypeID
00000000000141b8	cmpq	%rax, %rbx
00000000000141bb	je	0x141d4
00000000000141bd	movq	%r14, %rdi
00000000000141c0	callq	0x1e526                 ## symbol stub for: _CFGetTypeID
00000000000141c5	movq	%rax, %r15
00000000000141c8	callq	0x1e53e                 ## symbol stub for: _CFNumberGetTypeID
00000000000141cd	movb	$0x1, %bl
00000000000141cf	cmpq	%rax, %r15
00000000000141d2	jne	0x141e6
00000000000141d4	movq	0x205c5(%rip), %rsi     ## Objc selector ref: boolValue
00000000000141db	movq	%r14, %rdi
00000000000141de	callq	*0x1521c(%rip)          ## Objc message: -[%rdi boolValue]
00000000000141e4	movb	%al, %bl
00000000000141e6	movq	%r14, %rdi
00000000000141e9	callq	0x1e562                 ## symbol stub for: _CFRelease
00000000000141ee	movsbl	%bl, %eax
00000000000141f1	addq	$0x8, %rsp
00000000000141f5	popq	%rbx
00000000000141f6	popq	%r14
00000000000141f8	popq	%r15
00000000000141fa	popq	%rbp
00000000000141fb	retq
00000000000141fc	pushq	%rbp
00000000000141fd	movq	%rsp, %rbp
0000000000014200	pushq	%r14
0000000000014202	pushq	%rbx
0000000000014203	movq	%rdx, %r14
0000000000014206	movq	0x20063(%rip), %rsi     ## Objc selector ref: init
000000000001420d	callq	*0x151ed(%rip)          ## Objc message: -[%rdi init]
0000000000014213	movq	%rax, %rbx
0000000000014216	testq	%rbx, %rbx
0000000000014219	je	0x1422d
000000000001421b	movq	_OBJC_IVAR_$_UAPOptionsViewController._universalAccessPref(%rip), %rsi
0000000000014222	addq	%rbx, %rsi
0000000000014225	movq	%r14, %rdi
0000000000014228	callq	0x1e874                 ## symbol stub for: _objc_assign_weak
000000000001422d	movq	%rbx, %rax
0000000000014230	popq	%rbx
0000000000014231	popq	%r14
0000000000014233	popq	%rbp
0000000000014234	retq
0000000000014235	pushq	%rbp
0000000000014236	movq	%rsp, %rbp
0000000000014239	subq	$0x10, %rsp
000000000001423d	movq	%rdi, -0x10(%rbp)
0000000000014241	movq	0x21510(%rip), %rax     ## Objc class ref: UAPOptionsViewController
0000000000014248	movq	%rax, -0x8(%rbp)
000000000001424c	movq	0x1fff5(%rip), %rsi     ## Objc selector ref: initWithNibName:bundle:
0000000000014253	leaq	-0x10(%rbp), %rdi
0000000000014257	callq	0x1e88c                 ## Objc message: -[[%rdi super] initWithNibName:bundle:]
000000000001425c	addq	$0x10, %rsp
0000000000014260	popq	%rbp
0000000000014261	retq
0000000000014262	pushq	%rbp
0000000000014263	movq	%rsp, %rbp
0000000000014266	pushq	%r14
0000000000014268	pushq	%rbx
0000000000014269	subq	$0x10, %rsp
000000000001426d	movq	%rdi, %rbx
0000000000014270	movq	_OBJC_IVAR_$_UAPOptionsViewController._notificationOfInterest(%rip), %rax
0000000000014277	movq	(%rbx,%rax), %rdi
000000000001427b	movq	0x1fece(%rip), %rsi     ## Objc selector ref: release
0000000000014282	movq	0x15177(%rip), %r14     ## Objc message: -[%rdi release]
0000000000014289	callq	*%r14
000000000001428c	movq	0x2131d(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_NSDistributedNotificationCenter
0000000000014293	movq	0x20096(%rip), %rsi     ## Objc selector ref: defaultCenter
000000000001429a	callq	*%r14
000000000001429d	movq	0x20094(%rip), %rsi     ## Objc selector ref: removeObserver:
00000000000142a4	movq	%rax, %rdi
00000000000142a7	movq	%rbx, %rdx
00000000000142aa	callq	*%r14
00000000000142ad	movq	0x21294(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_NSNotificationCenter
00000000000142b4	movq	0x20075(%rip), %rsi     ## Objc selector ref: defaultCenter
00000000000142bb	callq	*%r14
00000000000142be	movq	0x20073(%rip), %rsi     ## Objc selector ref: removeObserver:
00000000000142c5	movq	%rax, %rdi
00000000000142c8	movq	%rbx, %rdx
00000000000142cb	callq	*%r14
00000000000142ce	movq	%rbx, -0x20(%rbp)
00000000000142d2	movq	0x2147f(%rip), %rax     ## Objc class ref: UAPOptionsViewController
00000000000142d9	movq	%rax, -0x18(%rbp)
00000000000142dd	movq	0x1fe74(%rip), %rsi     ## Objc selector ref: dealloc
00000000000142e4	leaq	-0x20(%rbp), %rdi
00000000000142e8	callq	0x1e88c                 ## Objc message: -[[%rdi super] dealloc]
00000000000142ed	addq	$0x10, %rsp
00000000000142f1	popq	%rbx
00000000000142f2	popq	%r14
00000000000142f4	popq	%rbp
00000000000142f5	retq
00000000000142f6	pushq	%rbp
00000000000142f7	movq	%rsp, %rbp
00000000000142fa	movq	0x20b07(%rip), %rsi     ## Objc selector ref: updateLockedUI
0000000000014301	popq	%rbp
0000000000014302	jmpq	*0x150f8(%rip)          ## Objc message: -[%rdi updateLockedUI]
0000000000014308	pushq	%rbp
0000000000014309	movq	%rsp, %rbp
000000000001430c	popq	%rbp
000000000001430d	retq
000000000001430e	pushq	%rbp
000000000001430f	movq	%rsp, %rbp
0000000000014312	xorl	%eax, %eax
0000000000014314	popq	%rbp
0000000000014315	retq
0000000000014316	pushq	%rbp
0000000000014317	movq	%rsp, %rbp
000000000001431a	pushq	%r14
000000000001431c	pushq	%rbx
000000000001431d	subq	$0x10, %rsp
0000000000014321	movq	%rdi, %rbx
0000000000014324	movq	_OBJC_IVAR_$_UAPOptionsViewController._universalAccessPref(%rip), %rsi
000000000001432b	addq	%rbx, %rsi
000000000001432e	xorl	%edi, %edi
0000000000014330	callq	0x1e874                 ## symbol stub for: _objc_assign_weak
0000000000014335	movq	_OBJC_IVAR_$_UAPOptionsViewController._notificationOfInterest(%rip), %rax
000000000001433c	movq	(%rbx,%rax), %rdi
0000000000014340	movq	0x1fe09(%rip), %rsi     ## Objc selector ref: release
0000000000014347	movq	0x150b2(%rip), %r14     ## Objc message: -[%rdi release]
000000000001434e	callq	*%r14
0000000000014351	movq	_OBJC_IVAR_$_UAPOptionsViewController._notificationOfInterest(%rip), %rdx
0000000000014358	xorl	%edi, %edi
000000000001435a	movq	%rbx, %rsi
000000000001435d	callq	0x1e868                 ## symbol stub for: _objc_assign_ivar
0000000000014362	movq	0x21247(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_NSDistributedNotificationCenter
0000000000014369	movq	0x1ffc0(%rip), %rsi     ## Objc selector ref: defaultCenter
0000000000014370	callq	*%r14
0000000000014373	movq	0x1ffbe(%rip), %rsi     ## Objc selector ref: removeObserver:
000000000001437a	movq	%rax, %rdi
000000000001437d	movq	%rbx, %rdx
0000000000014380	callq	*%r14
0000000000014383	movq	0x211be(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_NSNotificationCenter
000000000001438a	movq	0x1ff9f(%rip), %rsi     ## Objc selector ref: defaultCenter
0000000000014391	callq	*%r14
0000000000014394	movq	0x1ff9d(%rip), %rsi     ## Objc selector ref: removeObserver:
000000000001439b	movq	%rax, %rdi
000000000001439e	movq	%rbx, %rdx
00000000000143a1	callq	*%r14
00000000000143a4	movq	%rbx, -0x20(%rbp)
00000000000143a8	movq	0x213a9(%rip), %rax     ## Objc class ref: UAPOptionsViewController
00000000000143af	movq	%rax, -0x18(%rbp)
00000000000143b3	movq	0x20a56(%rip), %rsi     ## Objc selector ref: finalize
00000000000143ba	leaq	-0x20(%rbp), %rdi
00000000000143be	callq	0x1e88c                 ## Objc message: -[[%rdi super] finalize]
00000000000143c3	addq	$0x10, %rsp
00000000000143c7	popq	%rbx
00000000000143c8	popq	%r14
00000000000143ca	popq	%rbp
00000000000143cb	retq
00000000000143cc	pushq	%rbp
00000000000143cd	movq	%rsp, %rbp
00000000000143d0	pushq	%r14
00000000000143d2	pushq	%rbx
00000000000143d3	movq	%rdi, %rbx
00000000000143d6	movq	0x205bb(%rip), %rsi     ## Objc selector ref: preferenceManager
00000000000143dd	movq	0x1501c(%rip), %r14     ## Objc message: -[%rdi preferenceManager]
00000000000143e4	callq	*%r14
00000000000143e7	movq	0x14dea(%rip), %rcx     ## literal pool symbol address: _UAPreferencesDomain
00000000000143ee	movq	(%rcx), %rdx
00000000000143f1	movq	0x205a8(%rip), %rsi     ## Objc selector ref: synchronizeDomain:
00000000000143f8	movq	%rax, %rdi
00000000000143fb	callq	*%r14
00000000000143fe	callq	0x1e4d2                 ## symbol stub for: _UAPreferencesSynchronize
0000000000014403	movq	0x2033e(%rip), %rsi     ## Objc selector ref: validateControls
000000000001440a	movq	%rbx, %rdi
000000000001440d	movq	%r14, %rax
0000000000014410	popq	%rbx
0000000000014411	popq	%r14
0000000000014413	popq	%rbp
0000000000014414	jmpq	*%rax
0000000000014416	pushq	%rbp
0000000000014417	movq	%rsp, %rbp
000000000001441a	pushq	%r15
000000000001441c	pushq	%r14
000000000001441e	pushq	%rbx
000000000001441f	pushq	%rax
0000000000014420	movq	%rdi, %rbx
0000000000014423	movq	_OBJC_IVAR_$_UAPOptionsViewController._notificationOfInterest(%rip), %r14
000000000001442a	movq	(%rbx,%r14), %rdi
000000000001442e	movq	0x1fcf3(%rip), %rsi     ## Objc selector ref: length
0000000000014435	callq	*0x14fc5(%rip)          ## Objc message: -[%rdi length]
000000000001443b	testq	%rax, %rax
000000000001443e	je	0x1447e
0000000000014440	movq	0x21169(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_NSDistributedNotificationCenter
0000000000014447	movq	0x1fee2(%rip), %rsi     ## Objc selector ref: defaultCenter
000000000001444e	movq	0x14fab(%rip), %r15     ## Objc message: +[NSDistributedNotificationCenter defaultCenter]
0000000000014455	callq	*%r15
0000000000014458	movq	0x202d9(%rip), %rcx     ## Objc selector ref: readPreferences:
000000000001445f	movq	(%rbx,%r14), %r8
0000000000014463	movq	0x202ee(%rip), %rsi     ## Objc selector ref: addObserver:selector:name:object:suspensionBehavior:
000000000001446a	movq	$0x4, (%rsp)
0000000000014472	xorl	%r9d, %r9d
0000000000014475	movq	%rax, %rdi
0000000000014478	movq	%rbx, %rdx
000000000001447b	callq	*%r15
000000000001447e	movl	$0x8, %edi
0000000000014483	addq	$0x8, %rsp
0000000000014487	popq	%rbx
0000000000014488	popq	%r14
000000000001448a	popq	%r15
000000000001448c	popq	%rbp
000000000001448d	jmp	0x1e4c6                 ## symbol stub for: __UniversalAccessDStart
0000000000014492	pushq	%rbp
0000000000014493	movq	%rsp, %rbp
0000000000014496	pushq	%r15
0000000000014498	pushq	%r14
000000000001449a	pushq	%rbx
000000000001449b	pushq	%rax
000000000001449c	movq	%rdi, %rbx
000000000001449f	movq	_OBJC_IVAR_$_UAPOptionsViewController._notificationOfInterest(%rip), %r14
00000000000144a6	movq	(%rbx,%r14), %rdi
00000000000144aa	movq	0x1fc77(%rip), %rsi     ## Objc selector ref: length
00000000000144b1	callq	*0x14f49(%rip)          ## Objc message: -[%rdi length]
00000000000144b7	testq	%rax, %rax
00000000000144ba	je	0x144f7
00000000000144bc	movq	0x210ed(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_NSDistributedNotificationCenter
00000000000144c3	movq	0x1fe66(%rip), %rsi     ## Objc selector ref: defaultCenter
00000000000144ca	movq	0x14f2f(%rip), %r15     ## Objc message: +[NSDistributedNotificationCenter defaultCenter]
00000000000144d1	callq	*%r15
00000000000144d4	movq	(%rbx,%r14), %rcx
00000000000144d8	movq	0x20939(%rip), %rsi     ## Objc selector ref: removeObserver:name:object:
00000000000144df	xorl	%r8d, %r8d
00000000000144e2	movq	%rax, %rdi
00000000000144e5	movq	%rbx, %rdx
00000000000144e8	movq	%r15, %rax
00000000000144eb	addq	$0x8, %rsp
00000000000144ef	popq	%rbx
00000000000144f0	popq	%r14
00000000000144f2	popq	%r15
00000000000144f4	popq	%rbp
00000000000144f5	jmpq	*%rax
00000000000144f7	addq	$0x8, %rsp
00000000000144fb	popq	%rbx
00000000000144fc	popq	%r14
00000000000144fe	popq	%r15
0000000000014500	popq	%rbp
0000000000014501	retq
0000000000014502	pushq	%rbp
0000000000014503	movq	%rsp, %rbp
0000000000014506	addq	_OBJC_IVAR_$_UAPOptionsViewController._universalAccessPref(%rip), %rdi
000000000001450d	callq	0x1e898                 ## symbol stub for: _objc_read_weak
0000000000014512	movq	0x2047f(%rip), %rsi     ## Objc selector ref: preferenceManager
0000000000014519	movq	%rax, %rdi
000000000001451c	popq	%rbp
000000000001451d	jmpq	*0x14edd(%rip)          ## Objc message: -[%rdi preferenceManager]
0000000000014523	pushq	%rbp
0000000000014524	movq	%rsp, %rbp
0000000000014527	pushq	%rbx
0000000000014528	pushq	%rax
0000000000014529	movq	%rdx, %rbx
000000000001452c	addq	_OBJC_IVAR_$_UAPOptionsViewController._universalAccessPref(%rip), %rdi
0000000000014533	callq	0x1e898                 ## symbol stub for: _objc_read_weak
0000000000014538	movq	0x201f1(%rip), %rsi     ## Objc selector ref: switchToPanel:
000000000001453f	movq	%rax, %rdi
0000000000014542	movq	%rbx, %rdx
0000000000014545	addq	$0x8, %rsp
0000000000014549	popq	%rbx
000000000001454a	popq	%rbp
000000000001454b	jmpq	*0x14eaf(%rip)          ## Objc message: -[%rdi switchToPanel:]
0000000000014551	pushq	%rbp
0000000000014552	movq	%rsp, %rbp
0000000000014555	pushq	%r15
0000000000014557	pushq	%r14
0000000000014559	pushq	%rbx
000000000001455a	subq	$0x18, %rsp
000000000001455e	movq	%rdi, %rbx
0000000000014561	movq	%rbx, -0x28(%rbp)
0000000000014565	movq	0x211ec(%rip), %rax     ## Objc class ref: UAPOptionsViewController
000000000001456c	movq	%rax, -0x20(%rbp)
0000000000014570	movq	0x201f9(%rip), %rsi     ## Objc selector ref: loadView
0000000000014577	leaq	-0x28(%rbp), %rdi
000000000001457b	callq	0x1e88c                 ## Objc message: -[[%rdi super] loadView]
0000000000014580	movq	_OBJC_IVAR_$_UAPOptionsViewController._notificationOfInterest(%rip), %r14
0000000000014587	movq	(%rbx,%r14), %rdi
000000000001458b	movq	0x1fb96(%rip), %rsi     ## Objc selector ref: length
0000000000014592	callq	*0x14e68(%rip)          ## Objc message: -[%rdi length]
0000000000014598	testq	%rax, %rax
000000000001459b	je	0x145e8
000000000001459d	movq	0x2017c(%rip), %rsi     ## Objc selector ref: stopListeningForChanges
00000000000145a4	movq	0x14e55(%rip), %r15     ## Objc message: -[%rdi stopListeningForChanges]
00000000000145ab	movq	%rbx, %rdi
00000000000145ae	callq	*%r15
00000000000145b1	movq	0x20ff8(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_NSDistributedNotificationCenter
00000000000145b8	movq	0x1fd71(%rip), %rsi     ## Objc selector ref: defaultCenter
00000000000145bf	callq	*%r15
00000000000145c2	movq	0x2016f(%rip), %rcx     ## Objc selector ref: readPreferences:
00000000000145c9	movq	(%rbx,%r14), %r8
00000000000145cd	movq	0x20184(%rip), %rsi     ## Objc selector ref: addObserver:selector:name:object:suspensionBehavior:
00000000000145d4	movq	$0x4, (%rsp)
00000000000145dc	xorl	%r9d, %r9d
00000000000145df	movq	%rax, %rdi
00000000000145e2	movq	%rbx, %rdx
00000000000145e5	callq	*%r15
00000000000145e8	addq	$0x18, %rsp
00000000000145ec	popq	%rbx
00000000000145ed	popq	%r14
00000000000145ef	popq	%r15
00000000000145f1	popq	%rbp
00000000000145f2	retq
00000000000145f3	pushq	%rbp
00000000000145f4	movq	%rsp, %rbp
00000000000145f7	pushq	%r14
00000000000145f9	pushq	%rbx
00000000000145fa	subq	$0x10, %rsp
00000000000145fe	movq	%rdi, %rbx
0000000000014601	movq	%rbx, -0x20(%rbp)
0000000000014605	movq	0x2114c(%rip), %rax     ## Objc class ref: UAPOptionsViewController
000000000001460c	movq	%rax, -0x18(%rbp)
0000000000014610	movq	0x1fda9(%rip), %rsi     ## Objc selector ref: view
0000000000014617	leaq	-0x20(%rbp), %rdi
000000000001461b	callq	0x1e88c                 ## Objc message: -[[%rdi super] view]
0000000000014620	movq	%rax, %r14
0000000000014623	movq	0x2010e(%rip), %rsi     ## Objc selector ref: readPreferences:
000000000001462a	xorl	%edx, %edx
000000000001462c	movq	%rbx, %rdi
000000000001462f	callq	*0x14dcb(%rip)          ## Objc message: -[%rdi readPreferences:]
0000000000014635	movq	%r14, %rax
0000000000014638	addq	$0x10, %rsp
000000000001463c	popq	%rbx
000000000001463d	popq	%r14
000000000001463f	popq	%rbp
0000000000014640	retq
0000000000014641	pushq	%rbp
0000000000014642	movq	%rsp, %rbp
0000000000014645	xorl	%eax, %eax
0000000000014647	popq	%rbp
0000000000014648	retq
0000000000014649	pushq	%rbp
000000000001464a	movq	%rsp, %rbp
000000000001464d	subq	$0x10, %rsp
0000000000014651	testq	%rdx, %rdx
0000000000014654	je	0x14674
0000000000014656	leaq	-0x8(%rbp), %rsi
000000000001465a	movq	%rdx, %rdi
000000000001465d	callq	0x1e598                 ## symbol stub for: _LSOpenCFURLRef
0000000000014662	testl	%eax, %eax
0000000000014664	jne	0x14674
0000000000014666	movq	-0x8(%rbp), %rdi
000000000001466a	testq	%rdi, %rdi
000000000001466d	je	0x14674
000000000001466f	callq	0x1e562                 ## symbol stub for: _CFRelease
0000000000014674	addq	$0x10, %rsp
0000000000014678	popq	%rbp
0000000000014679	retq
000000000001467a	pushq	%rbp
000000000001467b	movq	%rsp, %rbp
000000000001467e	pushq	%r15
0000000000014680	pushq	%r14
0000000000014682	pushq	%rbx
0000000000014683	pushq	%rax
0000000000014684	movq	%rdx, %rbx
0000000000014687	movq	%rdi, %r14
000000000001468a	xorl	%esi, %esi
000000000001468c	movq	%rbx, %rdi
000000000001468f	callq	0x1e592                 ## symbol stub for: _LSCopyApplicationURLsForBundleIdentifier
0000000000014694	movq	%rax, %r15
0000000000014697	movq	0x20782(%rip), %rsi     ## Objc selector ref: firstObject
000000000001469e	movq	%r15, %rdi
00000000000146a1	callq	*0x14d59(%rip)          ## Objc message: -[%rdi firstObject]
00000000000146a7	testq	%rax, %rax
00000000000146aa	je	0x146c1
00000000000146ac	movq	0x20775(%rip), %rsi     ## Objc selector ref: launchBinaryWithURL:
00000000000146b3	movq	%r14, %rdi
00000000000146b6	movq	%rax, %rdx
00000000000146b9	callq	*0x14d41(%rip)          ## Objc message: -[%rdi launchBinaryWithURL:]
00000000000146bf	jmp	0x1473b
00000000000146c1	movq	0x1fa28(%rip), %rsi     ## Objc selector ref: isEqualToString:
00000000000146c8	leaq	0x16821(%rip), %rdx     ## Objc cfstring ref: @"com.apple.VoiceOverUtility"
00000000000146cf	movq	%rbx, %rdi
00000000000146d2	callq	*0x14d28(%rip)          ## Objc message: -[%rdi isEqualToString:]
00000000000146d8	testb	%al, %al
00000000000146da	je	0x146f3
00000000000146dc	movq	0x20f0d(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_NSURL
00000000000146e3	movq	0x2051e(%rip), %rsi     ## Objc selector ref: fileURLWithPath:
00000000000146ea	leaq	0x1681f(%rip), %rdx     ## Objc cfstring ref: @"/Applications/Utilities/VoiceOver Utility.app"
00000000000146f1	jmp	0x14723
00000000000146f3	movq	0x1f9f6(%rip), %rsi     ## Objc selector ref: isEqualToString:
00000000000146fa	leaq	0x1682f(%rip), %rdx     ## Objc cfstring ref: @"com.apple.VoiceOverQuickstart"
0000000000014701	movq	%rbx, %rdi
0000000000014704	callq	*0x14cf6(%rip)          ## Objc message: +[NSURL isEqualToString:]
000000000001470a	testb	%al, %al
000000000001470c	je	0x1473b
000000000001470e	movq	0x20edb(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_NSURL
0000000000014715	movq	0x204ec(%rip), %rsi     ## Objc selector ref: fileURLWithPath:
000000000001471c	leaq	0x1682d(%rip), %rdx     ## Objc cfstring ref: @"/System/Library/PrivateFrameworks/ScreenReader.framework/Versions/A/Resources/VoiceOver Quickstart.app"
0000000000014723	movq	0x14cd6(%rip), %rbx     ## Objc message: +[NSURL fileURLWithPath:]
000000000001472a	callq	*%rbx
000000000001472c	movq	0x206f5(%rip), %rsi     ## Objc selector ref: launchBinaryWithURL:
0000000000014733	movq	%r14, %rdi
0000000000014736	movq	%rax, %rdx
0000000000014739	callq	*%rbx
000000000001473b	testq	%r15, %r15
000000000001473e	je	0x14752
0000000000014740	movq	%r15, %rdi
0000000000014743	addq	$0x8, %rsp
0000000000014747	popq	%rbx
0000000000014748	popq	%r14
000000000001474a	popq	%r15
000000000001474c	popq	%rbp
000000000001474d	jmp	0x1e562                 ## symbol stub for: _CFRelease
0000000000014752	addq	$0x8, %rsp
0000000000014756	popq	%rbx
0000000000014757	popq	%r14
0000000000014759	popq	%r15
000000000001475b	popq	%rbp
000000000001475c	retq
000000000001475d	pushq	%rbp
000000000001475e	movq	%rsp, %rbp
0000000000014761	addq	_OBJC_IVAR_$_UAPOptionsViewController._universalAccessPref(%rip), %rdi
0000000000014768	popq	%rbp
0000000000014769	jmp	0x1e898                 ## symbol stub for: _objc_read_weak
000000000001476e	pushq	%rbp
000000000001476f	movq	%rsp, %rbp
0000000000014772	movq	%rdi, %rax
0000000000014775	addq	_OBJC_IVAR_$_UAPOptionsViewController._universalAccessPref(%rip), %rax
000000000001477c	movq	%rdx, %rdi
000000000001477f	movq	%rax, %rsi
0000000000014782	popq	%rbp
0000000000014783	jmp	0x1e874                 ## symbol stub for: _objc_assign_weak
0000000000014788	pushq	%rbp
0000000000014789	movq	%rsp, %rbp
000000000001478c	pushq	%r15
000000000001478e	pushq	%r14
0000000000014790	pushq	%rbx
0000000000014791	subq	$0x18, %rsp
0000000000014795	movq	%rdi, %r14
0000000000014798	movq	0x20d61(%rip), %rbx     ## Objc class ref: _OBJC_CLASS_$_NSBundle
000000000001479f	movq	0x20d62(%rip), %rdi     ## Objc class ref: UniversalAccessPref
00000000000147a6	movq	0x1f913(%rip), %rsi     ## Objc selector ref: class
00000000000147ad	movq	0x14c4c(%rip), %r15     ## Objc message: +[UniversalAccessPref class]
00000000000147b4	callq	*%r15
00000000000147b7	movq	0x1f9fa(%rip), %rsi     ## Objc selector ref: bundleForClass:
00000000000147be	movq	%rbx, %rdi
00000000000147c1	movq	%rax, %rdx
00000000000147c4	callq	*%r15
00000000000147c7	movq	%r14, -0x28(%rbp)
00000000000147cb	movq	0x20f8e(%rip), %rcx     ## Objc class ref: UAPVoiceOverViewController
00000000000147d2	movq	%rcx, -0x20(%rbp)
00000000000147d6	movq	0x1fa6b(%rip), %rsi     ## Objc selector ref: initWithNibName:bundle:
00000000000147dd	leaq	0x1678c(%rip), %rdx     ## Objc cfstring ref: @"VoiceOver"
00000000000147e4	leaq	-0x28(%rbp), %rdi
00000000000147e8	movq	%rax, %rcx
00000000000147eb	callq	0x1e88c                 ## Objc message: -[[%rdi super] initWithNibName:bundle:]
00000000000147f0	movq	%rax, %rbx
00000000000147f3	movq	0x14966(%rip), %rax     ## literal pool symbol address: _UADomainCloseViewSettingsDidChangeNotification
00000000000147fa	movq	(%rax), %rdi
00000000000147fd	leaq	_OBJC_IVAR_$_UAPOptionsViewController._notificationOfInterest(%rip), %rax
0000000000014804	movq	(%rax), %rdx
0000000000014807	movq	%rbx, %rsi
000000000001480a	callq	0x1e868                 ## symbol stub for: _objc_assign_ivar
000000000001480f	testq	%rbx, %rbx
0000000000014812	je	0x14851
0000000000014814	movq	0x20d95(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_NSDistributedNotificationCenter
000000000001481b	movq	0x1fb0e(%rip), %rsi     ## Objc selector ref: defaultCenter
0000000000014822	callq	*%r15
0000000000014825	movq	0x20604(%rip), %rcx     ## Objc selector ref: _voiceOverSettingsDidChange:
000000000001482c	movq	0x14955(%rip), %rdx     ## literal pool symbol address: _UADomainVoiceOverSettingsDidChangeNotification
0000000000014833	movq	(%rdx), %r8
0000000000014836	movq	0x1ff1b(%rip), %rsi     ## Objc selector ref: addObserver:selector:name:object:suspensionBehavior:
000000000001483d	movq	$0x4, (%rsp)
0000000000014845	xorl	%r9d, %r9d
0000000000014848	movq	%rax, %rdi
000000000001484b	movq	%rbx, %rdx
000000000001484e	callq	*%r15
0000000000014851	movq	%rbx, %rax
0000000000014854	addq	$0x18, %rsp
0000000000014858	popq	%rbx
0000000000014859	popq	%r14
000000000001485b	popq	%r15
000000000001485d	popq	%rbp
000000000001485e	retq
000000000001485f	pushq	%rbp
0000000000014860	movq	%rsp, %rbp
0000000000014863	movq	0x1fece(%rip), %rsi     ## Objc selector ref: readPreferences:
000000000001486a	popq	%rbp
000000000001486b	jmpq	*0x14b8f(%rip)          ## Objc message: +[NSDistributedNotificationCenter readPreferences:]
0000000000014871	pushq	%rbp
0000000000014872	movq	%rsp, %rbp
0000000000014875	movq	0x205bc(%rip), %rsi     ## Objc selector ref: launchBinaryWithIdentifier:
000000000001487c	leaq	0x1666d(%rip), %rdx     ## Objc cfstring ref: @"com.apple.VoiceOverUtility"
0000000000014883	popq	%rbp
0000000000014884	jmpq	*0x14b76(%rip)          ## Objc message: -[%rdi launchBinaryWithIdentifier:]
000000000001488a	pushq	%rbp
000000000001488b	movq	%rsp, %rbp
000000000001488e	movq	0x205a3(%rip), %rsi     ## Objc selector ref: launchBinaryWithIdentifier:
0000000000014895	leaq	0x16694(%rip), %rdx     ## Objc cfstring ref: @"com.apple.VoiceOverQuickstart"
000000000001489c	popq	%rbp
000000000001489d	jmpq	*0x14b5d(%rip)          ## Objc message: -[%rdi launchBinaryWithIdentifier:]
00000000000148a3	pushq	%rbp
00000000000148a4	movq	%rsp, %rbp
00000000000148a7	pushq	%r15
00000000000148a9	pushq	%r14
00000000000148ab	pushq	%rbx
00000000000148ac	pushq	%rax
00000000000148ad	movq	%rdi, %rbx
00000000000148b0	movq	0x1fe69(%rip), %rsi     ## Objc selector ref: stopListeningForChanges
00000000000148b7	movq	0x14b42(%rip), %r15     ## Objc message: -[%rdi stopListeningForChanges]
00000000000148be	callq	*%r15
00000000000148c1	movq	_OBJC_IVAR_$_UAPVoiceOverViewController._voiceOverButton(%rip), %r14
00000000000148c8	movq	(%rbx,%r14), %rdi
00000000000148cc	movq	0x1fdd5(%rip), %rsi     ## Objc selector ref: state
00000000000148d3	callq	*%r15
00000000000148d6	cmpq	$0x1, %rax
00000000000148da	sete	%al
00000000000148dd	movzbl	%al, %edi
00000000000148e0	callq	0x1e7c6                 ## symbol stub for: _UAVoiceOverSetEnabled
00000000000148e5	movq	0x1fe3c(%rip), %rsi     ## Objc selector ref: startListeningForChanges
00000000000148ec	movq	%rbx, %rdi
00000000000148ef	callq	*%r15
00000000000148f2	movq	0x2009f(%rip), %rsi     ## Objc selector ref: preferenceManager
00000000000148f9	movq	%rbx, %rdi
00000000000148fc	callq	*%r15
00000000000148ff	movq	0x148d2(%rip), %rcx     ## literal pool symbol address: _UAPreferencesDomain
0000000000014906	movq	(%rcx), %rdx
0000000000014909	movq	0x20090(%rip), %rsi     ## Objc selector ref: synchronizeDomain:
0000000000014910	movq	%rax, %rdi
0000000000014913	callq	*%r15
0000000000014916	movq	(%rbx,%r14), %rbx
000000000001491a	callq	0x1e7c0                 ## symbol stub for: _UAVoiceOverIsEnabled
000000000001491f	testb	%al, %al
0000000000014921	setne	%al
0000000000014924	movzbl	%al, %edx
0000000000014927	movq	0x1fb12(%rip), %rsi     ## Objc selector ref: setState:
000000000001492e	movq	%rbx, %rdi
0000000000014931	movq	%r15, %rax
0000000000014934	addq	$0x8, %rsp
0000000000014938	popq	%rbx
0000000000014939	popq	%r14
000000000001493b	popq	%r15
000000000001493d	popq	%rbp
000000000001493e	jmpq	*%rax
0000000000014940	pushq	%rbp
0000000000014941	movq	%rsp, %rbp
0000000000014944	pushq	%r15
0000000000014946	pushq	%r14
0000000000014948	pushq	%r12
000000000001494a	pushq	%rbx
000000000001494b	subq	$0x10, %rsp
000000000001494f	movq	%rdi, %r15
0000000000014952	movq	%r15, -0x30(%rbp)
0000000000014956	movq	0x20e03(%rip), %rax     ## Objc class ref: UAPVoiceOverViewController
000000000001495d	movq	%rax, -0x28(%rbp)
0000000000014961	movq	0x1fdd0(%rip), %rsi     ## Objc selector ref: readPreferences:
0000000000014968	leaq	-0x30(%rbp), %rdi
000000000001496c	callq	0x1e88c                 ## Objc message: -[[%rdi super] readPreferences:]
0000000000014971	movq	_OBJC_IVAR_$_UAPVoiceOverViewController._voiceOverButton(%rip), %rax
0000000000014978	movq	(%r15,%rax), %r14
000000000001497c	callq	0x1e7c0                 ## symbol stub for: _UAVoiceOverIsEnabled
0000000000014981	testb	%al, %al
0000000000014983	setne	%al
0000000000014986	movzbl	%al, %edx
0000000000014989	movq	0x1fab0(%rip), %rsi     ## Objc selector ref: setState:
0000000000014990	movq	0x14a69(%rip), %r12     ## Objc message: -[%rdi setState:]
0000000000014997	movq	%r14, %rdi
000000000001499a	callq	*%r12
000000000001499d	movl	$0x3b, %edi
00000000000149a2	callq	0x1e970                 ## symbol stub for: _CGSIsSymbolicHotKeyEnabled
00000000000149a7	movq	_OBJC_IVAR_$_UAPVoiceOverViewController._voiceOverToggleKeyDescriptionText(%rip), %rcx
00000000000149ae	movq	(%r15,%rcx), %rdi
00000000000149b2	xorb	$0x1, %al
00000000000149b4	movq	0x1fa3d(%rip), %rsi     ## Objc selector ref: setHidden:
00000000000149bb	movzbl	%al, %ebx
00000000000149be	movl	%ebx, %edx
00000000000149c0	callq	*%r12
00000000000149c3	movq	_OBJC_IVAR_$_UAPVoiceOverViewController._voiceOverToggleKeyText(%rip), %r14
00000000000149ca	movq	(%r15,%r14), %rdi
00000000000149ce	movq	0x1fa23(%rip), %rsi     ## Objc selector ref: setHidden:
00000000000149d5	movl	%ebx, %edx
00000000000149d7	callq	*%r12
00000000000149da	movq	0x20c47(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_NSPrefPaneUtils
00000000000149e1	movq	0x1f6d8(%rip), %rsi     ## Objc selector ref: class
00000000000149e8	callq	*%r12
00000000000149eb	movq	0x2044e(%rip), %rsi     ## Objc selector ref: _needFN
00000000000149f2	movq	0x2044f(%rip), %rdx     ## Objc selector ref: _UAPneedFN
00000000000149f9	movq	%rax, %rdi
00000000000149fc	callq	0x14a5f
0000000000014a01	movq	(%r15,%r14), %rbx
0000000000014a05	movq	0x20c1c(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_NSPrefPaneUtils
0000000000014a0c	movq	0x2043d(%rip), %rsi     ## Objc selector ref: stringForSymbolicKey:
0000000000014a13	movl	$0x3b, %edx
0000000000014a18	callq	*%r12
0000000000014a1b	movq	0x1f9f6(%rip), %rsi     ## Objc selector ref: setStringValue:
0000000000014a22	movq	%rbx, %rdi
0000000000014a25	movq	%rax, %rdx
0000000000014a28	callq	*%r12
0000000000014a2b	movq	0x20bf6(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_NSPrefPaneUtils
0000000000014a32	movq	0x1f687(%rip), %rsi     ## Objc selector ref: class
0000000000014a39	callq	*%r12
0000000000014a3c	movq	0x203fd(%rip), %rsi     ## Objc selector ref: _needFN
0000000000014a43	movq	0x203fe(%rip), %rdx     ## Objc selector ref: _UAPneedFN
0000000000014a4a	movq	%rax, %rdi
0000000000014a4d	callq	0x14a5f
0000000000014a52	addq	$0x10, %rsp
0000000000014a56	popq	%rbx
0000000000014a57	popq	%r12
0000000000014a59	popq	%r14
0000000000014a5b	popq	%r15
0000000000014a5d	popq	%rbp
0000000000014a5e	retq
0000000000014a5f	pushq	%rbp
0000000000014a60	movq	%rsp, %rbp
0000000000014a63	pushq	%r15
0000000000014a65	pushq	%r14
0000000000014a67	pushq	%rbx
0000000000014a68	pushq	%rax
0000000000014a69	movq	%rdx, %r14
0000000000014a6c	movq	%rdi, %rbx
0000000000014a6f	callq	0x1e85c                 ## symbol stub for: _class_getClassMethod
0000000000014a74	movq	%rax, %r15
0000000000014a77	movq	%rbx, %rdi
0000000000014a7a	movq	%r14, %rsi
0000000000014a7d	callq	0x1e85c                 ## symbol stub for: _class_getClassMethod
0000000000014a82	testq	%r15, %r15
0000000000014a85	je	0x14aa1
0000000000014a87	testq	%rax, %rax
0000000000014a8a	je	0x14aa1
0000000000014a8c	movq	%r15, %rdi
0000000000014a8f	movq	%rax, %rsi
0000000000014a92	addq	$0x8, %rsp
0000000000014a96	popq	%rbx
0000000000014a97	popq	%r14
0000000000014a99	popq	%r15
0000000000014a9b	popq	%rbp
0000000000014a9c	jmp	0x1e862                 ## symbol stub for: _method_exchangeImplementations
0000000000014aa1	addq	$0x8, %rsp
0000000000014aa5	popq	%rbx
0000000000014aa6	popq	%r14
0000000000014aa8	popq	%r15
0000000000014aaa	popq	%rbp
0000000000014aab	retq
0000000000014aac	pushq	%rbp
0000000000014aad	movq	%rsp, %rbp
0000000000014ab0	pushq	%r14
0000000000014ab2	pushq	%rbx
0000000000014ab3	subq	$0x10, %rsp
0000000000014ab7	movq	%rdi, %rbx
0000000000014aba	movq	_OBJC_IVAR_$_UAPVoiceOverViewController._voiceOverButton(%rip), %rax
0000000000014ac1	movq	(%rbx,%rax), %r14
0000000000014ac5	movq	0x14834(%rip), %rax     ## literal pool symbol address: _UAVoiceOverEnabled
0000000000014acc	movq	(%rax), %rdi
0000000000014acf	callq	0x1e4cc                 ## symbol stub for: _UAPreferenceIsForced
0000000000014ad4	testb	%al, %al
0000000000014ad6	sete	%al
0000000000014ad9	movq	0x1fc60(%rip), %rsi     ## Objc selector ref: setEnabled:
0000000000014ae0	movzbl	%al, %edx
0000000000014ae3	movq	%r14, %rdi
0000000000014ae6	callq	*0x14914(%rip)          ## Objc message: +[NSPrefPaneUtils setEnabled:]
0000000000014aec	movq	%rbx, -0x20(%rbp)
0000000000014af0	movq	0x20c69(%rip), %rax     ## Objc class ref: UAPVoiceOverViewController
0000000000014af7	movq	%rax, -0x18(%rbp)
0000000000014afb	movq	0x1fc46(%rip), %rsi     ## Objc selector ref: validateControls
0000000000014b02	leaq	-0x20(%rbp), %rdi
0000000000014b06	callq	0x1e88c                 ## Objc message: -[[%rdi super] validateControls]
0000000000014b0b	addq	$0x10, %rsp
0000000000014b0f	popq	%rbx
0000000000014b10	popq	%r14
0000000000014b12	popq	%rbp
0000000000014b13	retq
0000000000014b14	pushq	%rbp
0000000000014b15	movq	%rsp, %rbp
0000000000014b18	xorl	%eax, %eax
0000000000014b1a	popq	%rbp
0000000000014b1b	retq
0000000000014b1c	nop
0000000000014b1d	nop
0000000000014b1e	nop
0000000000014b1f	nop
0000000000014b20	pushq	%rbp
0000000000014b21	movq	%rsp, %rbp
0000000000014b24	pushq	%r15
0000000000014b26	pushq	%r14
0000000000014b28	pushq	%rbx
0000000000014b29	subq	$0x18, %rsp
0000000000014b2d	movq	%rdi, %r14
0000000000014b30	movq	0x209c9(%rip), %rbx     ## Objc class ref: _OBJC_CLASS_$_NSBundle
0000000000014b37	movq	0x209ca(%rip), %rdi     ## Objc class ref: UniversalAccessPref
0000000000014b3e	movq	0x1f57b(%rip), %rsi     ## Objc selector ref: class
0000000000014b45	movq	0x148b4(%rip), %r15     ## Objc message: +[UniversalAccessPref class]
0000000000014b4c	callq	*%r15
0000000000014b4f	movq	0x1f662(%rip), %rsi     ## Objc selector ref: bundleForClass:
0000000000014b56	movq	%rbx, %rdi
0000000000014b59	movq	%rax, %rdx
0000000000014b5c	callq	*%r15
0000000000014b5f	movq	%r14, -0x28(%rbp)
0000000000014b63	movq	0x20bfe(%rip), %rcx     ## Objc class ref: UAPZoomViewController
0000000000014b6a	movq	%rcx, -0x20(%rbp)
0000000000014b6e	movq	0x1f6d3(%rip), %rsi     ## Objc selector ref: initWithNibName:bundle:
0000000000014b75	leaq	0x16414(%rip), %rdx     ## Objc cfstring ref: @"Zoom"
0000000000014b7c	leaq	-0x28(%rbp), %rdi
0000000000014b80	movq	%rax, %rcx
0000000000014b83	callq	0x1e88c                 ## Objc message: -[[%rdi super] initWithNibName:bundle:]
0000000000014b88	movq	%rax, %rbx
0000000000014b8b	testq	%rbx, %rbx
0000000000014b8e	je	0x14bac
0000000000014b90	movq	0x145c9(%rip), %rax     ## literal pool symbol address: _UADomainCloseViewSettingsDidChangeNotification
0000000000014b97	movq	(%rax), %rdi
0000000000014b9a	leaq	_OBJC_IVAR_$_UAPOptionsViewController._notificationOfInterest(%rip), %rax
0000000000014ba1	movq	(%rax), %rdx
0000000000014ba4	movq	%rbx, %rsi
0000000000014ba7	callq	0x1e868                 ## symbol stub for: _objc_assign_ivar
0000000000014bac	movq	%rbx, %rax
0000000000014baf	addq	$0x18, %rsp
0000000000014bb3	popq	%rbx
0000000000014bb4	popq	%r14
0000000000014bb6	popq	%r15
0000000000014bb8	popq	%rbp
0000000000014bb9	retq
0000000000014bba	pushq	%rbp
0000000000014bbb	movq	%rsp, %rbp
0000000000014bbe	pushq	%r15
0000000000014bc0	pushq	%r14
0000000000014bc2	pushq	%r13
0000000000014bc4	pushq	%r12
0000000000014bc6	pushq	%rbx
0000000000014bc7	subq	$0xd8, %rsp
0000000000014bce	movq	%rdi, %rbx
0000000000014bd1	movq	0x14780(%rip), %rax     ## literal pool symbol address: ___stack_chk_guard
0000000000014bd8	movq	(%rax), %rax
0000000000014bdb	movq	%rax, -0x30(%rbp)
0000000000014bdf	movl	$0xf, %edi
0000000000014be4	callq	0x1e970                 ## symbol stub for: _CGSIsSymbolicHotKeyEnabled
0000000000014be9	movb	%al, -0xf1(%rbp)
0000000000014bef	xorps	%xmm0, %xmm0
0000000000014bf2	movaps	%xmm0, -0xc0(%rbp)
0000000000014bf9	movaps	%xmm0, -0xd0(%rbp)
0000000000014c00	movaps	%xmm0, -0xe0(%rbp)
0000000000014c07	movaps	%xmm0, -0xf0(%rbp)
0000000000014c0e	movq	_OBJC_IVAR_$_UAPZoomViewController._zoomKeyShortcutsView(%rip), %rax
0000000000014c15	movq	(%rbx,%rax), %rdi
0000000000014c19	movq	0x20238(%rip), %rsi     ## Objc selector ref: subviews
0000000000014c20	movq	0x147d9(%rip), %r15     ## Objc message: -[%rdi subviews]
0000000000014c27	callq	*%r15
0000000000014c2a	movq	%rax, -0x100(%rbp)
0000000000014c31	movq	0x1f4d8(%rip), %rsi     ## Objc selector ref: countByEnumeratingWithState:objects:count:
0000000000014c38	leaq	-0xf0(%rbp), %rdx
0000000000014c3f	leaq	-0xb0(%rbp), %rcx
0000000000014c46	movl	$0x10, %r8d
0000000000014c4c	movq	%rax, %rdi
0000000000014c4f	callq	*%r15
0000000000014c52	movq	%rax, %rbx
0000000000014c55	testq	%rbx, %rbx
0000000000014c58	je	0x14d2c
0000000000014c5e	movq	-0xe0(%rbp), %rax
0000000000014c65	movq	(%rax), %r12
0000000000014c68	xorl	%r13d, %r13d
0000000000014c6b	movq	-0xe0(%rbp), %rax
0000000000014c72	cmpq	%r12, (%rax)
0000000000014c75	je	0x14c83
0000000000014c77	movq	-0x100(%rbp), %rdi
0000000000014c7e	callq	0x1e886                 ## symbol stub for: _objc_enumerationMutation
0000000000014c83	movq	-0xe8(%rbp), %rax
0000000000014c8a	movq	(%rax,%r13,8), %r14
0000000000014c8e	movq	0x2099b(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_NSTextField
0000000000014c95	movq	0x1f424(%rip), %rsi     ## Objc selector ref: class
0000000000014c9c	callq	*%r15
0000000000014c9f	movq	%r14, %rdi
0000000000014ca2	movq	0x1f44f(%rip), %rsi     ## Objc selector ref: isKindOfClass:
0000000000014ca9	movq	%rax, %rdx
0000000000014cac	callq	*%r15
0000000000014caf	testb	%al, %al
0000000000014cb1	je	0x14cec
0000000000014cb3	movq	0x20836(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_NSColor
0000000000014cba	cmpb	$0x0, -0xf1(%rbp)
0000000000014cc1	je	0x14ccc
0000000000014cc3	movq	0x1f7a6(%rip), %rsi     ## Objc selector ref: blackColor
0000000000014cca	jmp	0x14cd3
0000000000014ccc	movq	0x2018d(%rip), %rsi     ## Objc selector ref: disabledControlTextColor
0000000000014cd3	callq	*0x14727(%rip)          ## Objc message: +[NSColor disabledControlTextColor]
0000000000014cd9	movq	%r14, %rdi
0000000000014cdc	movq	0x20185(%rip), %rsi     ## Objc selector ref: setTextColor:
0000000000014ce3	movq	%rax, %rdx
0000000000014ce6	callq	*0x14714(%rip)          ## Objc message: -[%rdi setTextColor:]
0000000000014cec	incq	%r13
0000000000014cef	cmpq	%rbx, %r13
0000000000014cf2	jb	0x14c6b
0000000000014cf8	movl	$0x10, %r8d
0000000000014cfe	movq	-0x100(%rbp), %rdi
0000000000014d05	movq	0x1f404(%rip), %rsi     ## Objc selector ref: countByEnumeratingWithState:objects:count:
0000000000014d0c	leaq	-0xf0(%rbp), %rdx
0000000000014d13	leaq	-0xb0(%rbp), %rcx
0000000000014d1a	callq	*0x146e0(%rip)          ## Objc message: -[%rdi countByEnumeratingWithState:objects:count:]
0000000000014d20	movq	%rax, %rbx
0000000000014d23	testq	%rbx, %rbx
0000000000014d26	jne	0x14c68
0000000000014d2c	movq	0x14625(%rip), %rax     ## literal pool symbol address: ___stack_chk_guard
0000000000014d33	movq	(%rax), %rax
0000000000014d36	cmpq	-0x30(%rbp), %rax
0000000000014d3a	jne	0x14d4e
0000000000014d3c	addq	$0xd8, %rsp
0000000000014d43	popq	%rbx
0000000000014d44	popq	%r12
0000000000014d46	popq	%r13
0000000000014d48	popq	%r14
0000000000014d4a	popq	%r15
0000000000014d4c	popq	%rbp
0000000000014d4d	retq
0000000000014d4e	callq	0x1e8b6                 ## symbol stub for: ___stack_chk_fail
0000000000014d53	pushq	%rbp
0000000000014d54	movq	%rsp, %rbp
0000000000014d57	pushq	%r14
0000000000014d59	pushq	%rbx
0000000000014d5a	movq	%rdi, %rbx
0000000000014d5d	movq	_OBJC_IVAR_$_UAPZoomViewController._scrollWheelModifierController(%rip), %rax
0000000000014d64	movq	(%rbx,%rax), %rdi
0000000000014d68	movq	0x1f3e1(%rip), %rsi     ## Objc selector ref: release
0000000000014d6f	movq	0x1468a(%rip), %r14     ## Objc message: -[%rdi release]
0000000000014d76	callq	*%r14
0000000000014d79	movq	_OBJC_IVAR_$_UAPZoomViewController._scrollWheelModifierController(%rip), %rdx
0000000000014d80	xorl	%edi, %edi
0000000000014d82	movq	%rbx, %rsi
0000000000014d85	callq	0x1e868                 ## symbol stub for: _objc_assign_ivar
0000000000014d8a	movq	_OBJC_IVAR_$_UAPZoomViewController._scrollZoomSheetController(%rip), %rax
0000000000014d91	movq	(%rbx,%rax), %rdi
0000000000014d95	movq	0x1f3b4(%rip), %rsi     ## Objc selector ref: release
0000000000014d9c	callq	*%r14
0000000000014d9f	movq	_OBJC_IVAR_$_UAPZoomViewController._scrollZoomSheetController(%rip), %rdx
0000000000014da6	xorl	%edi, %edi
0000000000014da8	movq	%rbx, %rsi
0000000000014dab	popq	%rbx
0000000000014dac	popq	%r14
0000000000014dae	popq	%rbp
0000000000014daf	jmp	0x1e868                 ## symbol stub for: _objc_assign_ivar
0000000000014db4	pushq	%rbp
0000000000014db5	movq	%rsp, %rbp
0000000000014db8	pushq	%r14
0000000000014dba	pushq	%rbx
0000000000014dbb	subq	$0x10, %rsp
0000000000014dbf	movq	%rdi, %rbx
0000000000014dc2	movq	_OBJC_IVAR_$_UAPZoomViewController._scrollWheelOptionsView(%rip), %rax
0000000000014dc9	movq	(%rbx,%rax), %rdi
0000000000014dcd	movq	0x1f37c(%rip), %rsi     ## Objc selector ref: release
0000000000014dd4	movq	0x14625(%rip), %r14     ## Objc message: -[%rdi release]
0000000000014ddb	callq	*%r14
0000000000014dde	movq	0x2008b(%rip), %rsi     ## Objc selector ref: _cleanupBeforeDeallocUAPZoomViewController
0000000000014de5	movq	%rbx, %rdi
0000000000014de8	callq	*%r14
0000000000014deb	movq	%rbx, -0x20(%rbp)
0000000000014def	movq	0x20972(%rip), %rax     ## Objc class ref: UAPZoomViewController
0000000000014df6	movq	%rax, -0x18(%rbp)
0000000000014dfa	movq	0x1f357(%rip), %rsi     ## Objc selector ref: dealloc
0000000000014e01	leaq	-0x20(%rbp), %rdi
0000000000014e05	callq	0x1e88c                 ## Objc message: -[[%rdi super] dealloc]
0000000000014e0a	addq	$0x10, %rsp
0000000000014e0e	popq	%rbx
0000000000014e0f	popq	%r14
0000000000014e11	popq	%rbp
0000000000014e12	retq
0000000000014e13	pushq	%rbp
0000000000014e14	movq	%rsp, %rbp
0000000000014e17	pushq	%rbx
0000000000014e18	subq	$0x18, %rsp
0000000000014e1c	movq	%rdi, %rbx
0000000000014e1f	movq	0x2004a(%rip), %rsi     ## Objc selector ref: _cleanupBeforeDeallocUAPZoomViewController
0000000000014e26	callq	*0x145d4(%rip)          ## Objc message: -[%rdi _cleanupBeforeDeallocUAPZoomViewController]
0000000000014e2c	movq	%rbx, -0x18(%rbp)
0000000000014e30	movq	0x20931(%rip), %rax     ## Objc class ref: UAPZoomViewController
0000000000014e37	movq	%rax, -0x10(%rbp)
0000000000014e3b	movq	0x1ffce(%rip), %rsi     ## Objc selector ref: finalize
0000000000014e42	leaq	-0x18(%rbp), %rdi
0000000000014e46	callq	0x1e88c                 ## Objc message: -[[%rdi super] finalize]
0000000000014e4b	addq	$0x18, %rsp
0000000000014e4f	popq	%rbx
0000000000014e50	popq	%rbp
0000000000014e51	retq
0000000000014e52	pushq	%rbp
0000000000014e53	movq	%rsp, %rbp
0000000000014e56	pushq	%r15
0000000000014e58	pushq	%r14
0000000000014e5a	pushq	%rbx
0000000000014e5b	pushq	%rax
0000000000014e5c	movq	%rdx, %rbx
0000000000014e5f	movq	0x1f562(%rip), %rsi     ## Objc selector ref: window
0000000000014e66	movq	0x14593(%rip), %r15     ## Objc message: -[%rdi window]
0000000000014e6d	movq	%rbx, %rdi
0000000000014e70	callq	*%r15
0000000000014e73	movq	0x1f556(%rip), %rsi     ## Objc selector ref: orderOut:
0000000000014e7a	xorl	%edx, %edx
0000000000014e7c	movq	%rax, %rdi
0000000000014e7f	callq	*%r15
0000000000014e82	movq	0x14257(%rip), %rax     ## literal pool symbol address: _NSApp
0000000000014e89	movq	(%rax), %r14
0000000000014e8c	movq	0x1f535(%rip), %rsi     ## Objc selector ref: window
0000000000014e93	movq	%rbx, %rdi
0000000000014e96	callq	*%r15
0000000000014e99	movq	0x1f788(%rip), %rsi     ## Objc selector ref: endSheet:
0000000000014ea0	movq	%r14, %rdi
0000000000014ea3	movq	%rax, %rdx
0000000000014ea6	movq	%r15, %rax
0000000000014ea9	addq	$0x8, %rsp
0000000000014ead	popq	%rbx
0000000000014eae	popq	%r14
0000000000014eb0	popq	%r15
0000000000014eb2	popq	%rbp
0000000000014eb3	jmpq	*%rax
0000000000014eb5	pushq	%rbp
0000000000014eb6	movq	%rsp, %rbp
0000000000014eb9	pushq	%r15
0000000000014ebb	pushq	%r14
0000000000014ebd	pushq	%r13
0000000000014ebf	pushq	%r12
0000000000014ec1	pushq	%rbx
0000000000014ec2	pushq	%rax
0000000000014ec3	movq	%rdx, %r14
0000000000014ec6	movq	%rdi, %rbx
0000000000014ec9	movq	0x1f4f8(%rip), %rsi     ## Objc selector ref: window
0000000000014ed0	movq	%r14, %rdi
0000000000014ed3	callq	*0x14527(%rip)          ## Objc message: -[%rdi window]
0000000000014ed9	movq	_OBJC_IVAR_$_UAPZoomViewController._zoomOptionsWindow(%rip), %rcx
0000000000014ee0	cmpq	(%rbx,%rcx), %rax
0000000000014ee4	jne	0x150f4
0000000000014eea	movq	_OBJC_IVAR_$_UAPZoomViewController._cachedMaxZoomLevelSliderValue(%rip), %r12
0000000000014ef1	movss	(%rbx,%r12), %xmm0
0000000000014ef7	movss	%xmm0, -0x2c(%rbp)
0000000000014efc	movq	_OBJC_IVAR_$_UAPZoomViewController._minZoomLevelSlider(%rip), %r15
0000000000014f03	movq	(%rbx,%r15), %rdi
0000000000014f07	movq	0x1f59a(%rip), %rsi     ## Objc selector ref: floatValue
0000000000014f0e	callq	*0x144ec(%rip)          ## Objc message: -[%rdi floatValue]
0000000000014f14	ucomiss	-0x2c(%rbp), %xmm0
0000000000014f18	jbe	0x14fb7
0000000000014f1e	movq	(%rbx,%r15), %rdi
0000000000014f22	movq	0x1f57f(%rip), %rsi     ## Objc selector ref: floatValue
0000000000014f29	callq	*0x144d1(%rip)          ## Objc message: -[%rdi floatValue]
0000000000014f2f	movaps	%xmm0, %xmm1
0000000000014f32	movq	_OBJC_IVAR_$_UAPZoomViewController._cachedMinZoomLevelSliderValue(%rip), %rax
0000000000014f39	movss	(%rbx,%rax), %xmm0
0000000000014f3e	ucomiss	%xmm0, %xmm1
0000000000014f41	jne	0x14f45
0000000000014f43	jnp	0x14f6a
0000000000014f45	movq	(%rbx,%r15), %rdi
0000000000014f49	movq	0x1f868(%rip), %rsi     ## Objc selector ref: setFloatValue:
0000000000014f50	movq	0x144a9(%rip), %r15     ## Objc message: -[%rdi setFloatValue:]
0000000000014f57	callq	*%r15
0000000000014f5a	movq	0x1ff17(%rip), %rsi     ## Objc selector ref: adjustMinZoomLevel:
0000000000014f61	movq	%rbx, %rdi
0000000000014f64	movq	%rbx, %rdx
0000000000014f67	callq	*%r15
0000000000014f6a	movq	_OBJC_IVAR_$_UAPZoomViewController._maxZoomLevelSlider(%rip), %r15
0000000000014f71	movq	(%rbx,%r15), %rdi
0000000000014f75	movq	0x1f52c(%rip), %rsi     ## Objc selector ref: floatValue
0000000000014f7c	callq	*0x1447e(%rip)          ## Objc message: -[%rdi floatValue]
0000000000014f82	movaps	%xmm0, %xmm1
0000000000014f85	movss	(%rbx,%r12), %xmm0
0000000000014f8b	ucomiss	%xmm0, %xmm1
0000000000014f8e	jne	0x14f96
0000000000014f90	jnp	0x15050
0000000000014f96	movq	(%rbx,%r15), %rdi
0000000000014f9a	movq	0x1f817(%rip), %rsi     ## Objc selector ref: setFloatValue:
0000000000014fa1	movq	0x14458(%rip), %r15     ## Objc message: -[%rdi setFloatValue:]
0000000000014fa8	callq	*%r15
0000000000014fab	movq	0x1fece(%rip), %rsi     ## Objc selector ref: adjustMaxZoomLevel:
0000000000014fb2	jmp	0x15047
0000000000014fb7	movq	_OBJC_IVAR_$_UAPZoomViewController._maxZoomLevelSlider(%rip), %r13
0000000000014fbe	movq	(%rbx,%r13), %rdi
0000000000014fc2	movq	0x1f4df(%rip), %rsi     ## Objc selector ref: floatValue
0000000000014fc9	callq	*0x14431(%rip)          ## Objc message: -[%rdi floatValue]
0000000000014fcf	movaps	%xmm0, %xmm1
0000000000014fd2	movss	(%rbx,%r12), %xmm0
0000000000014fd8	ucomiss	%xmm0, %xmm1
0000000000014fdb	jne	0x14fdf
0000000000014fdd	jnp	0x15004
0000000000014fdf	movq	(%rbx,%r13), %rdi
0000000000014fe3	movq	0x1f7ce(%rip), %rsi     ## Objc selector ref: setFloatValue:
0000000000014fea	movq	0x1440f(%rip), %r12     ## Objc message: -[%rdi setFloatValue:]
0000000000014ff1	callq	*%r12
0000000000014ff4	movq	0x1fe85(%rip), %rsi     ## Objc selector ref: adjustMaxZoomLevel:
0000000000014ffb	movq	%rbx, %rdi
0000000000014ffe	movq	%rbx, %rdx
0000000000015001	callq	*%r12
0000000000015004	movq	(%rbx,%r15), %rdi
0000000000015008	movq	0x1f499(%rip), %rsi     ## Objc selector ref: floatValue
000000000001500f	callq	*0x143eb(%rip)          ## Objc message: -[%rdi floatValue]
0000000000015015	movaps	%xmm0, %xmm1
0000000000015018	movq	_OBJC_IVAR_$_UAPZoomViewController._cachedMinZoomLevelSliderValue(%rip), %rax
000000000001501f	movss	(%rbx,%rax), %xmm0
0000000000015024	ucomiss	%xmm0, %xmm1
0000000000015027	jne	0x1502b
0000000000015029	jnp	0x15050
000000000001502b	movq	(%rbx,%r15), %rdi
000000000001502f	movq	0x1f782(%rip), %rsi     ## Objc selector ref: setFloatValue:
0000000000015036	movq	0x143c3(%rip), %r15     ## Objc message: -[%rdi setFloatValue:]
000000000001503d	callq	*%r15
0000000000015040	movq	0x1fe31(%rip), %rsi     ## Objc selector ref: adjustMinZoomLevel:
0000000000015047	movq	%rbx, %rdi
000000000001504a	movq	%rbx, %rdx
000000000001504d	callq	*%r15
0000000000015050	movq	_OBJC_IVAR_$_UAPZoomViewController._showPreviewRectangleCheckbox(%rip), %r15
0000000000015057	movq	(%rbx,%r15), %rdi
000000000001505b	movq	0x1f646(%rip), %rsi     ## Objc selector ref: state
0000000000015062	callq	*0x14398(%rip)          ## Objc message: -[%rdi state]
0000000000015068	movq	_OBJC_IVAR_$_UAPZoomViewController._cachedShowPreviewRectangleCheckboxState(%rip), %rcx
000000000001506f	movq	(%rbx,%rcx), %rdx
0000000000015073	cmpq	%rdx, %rax
0000000000015076	je	0x1509d
0000000000015078	movq	(%rbx,%r15), %rdi
000000000001507c	movq	0x1f3bd(%rip), %rsi     ## Objc selector ref: setState:
0000000000015083	movq	0x14376(%rip), %r15     ## Objc message: -[%rdi setState:]
000000000001508a	callq	*%r15
000000000001508d	movq	0x1fdf4(%rip), %rsi     ## Objc selector ref: showPreviewRectangle:
0000000000015094	movq	%rbx, %rdi
0000000000015097	movq	%rbx, %rdx
000000000001509a	callq	*%r15
000000000001509d	movq	_OBJC_IVAR_$_UAPZoomViewController._fullscreenPanningModeMatrix(%rip), %r12
00000000000150a4	movq	(%rbx,%r12), %rdi
00000000000150a8	movq	0x1fde1(%rip), %rsi     ## Objc selector ref: selectedCell
00000000000150af	movq	0x1434a(%rip), %r15     ## Objc message: -[%rdi selectedCell]
00000000000150b6	callq	*%r15
00000000000150b9	movq	0x1f5d0(%rip), %rsi     ## Objc selector ref: tag
00000000000150c0	movq	%rax, %rdi
00000000000150c3	callq	*%r15
00000000000150c6	movq	_OBJC_IVAR_$_UAPZoomViewController._cachedFullscreenPanningModeMatrixSelectedTag(%rip), %rcx
00000000000150cd	movq	(%rbx,%rcx), %rdx
00000000000150d1	cmpq	%rdx, %rax
00000000000150d4	je	0x150f4
00000000000150d6	movq	(%rbx,%r12), %rdi
00000000000150da	movq	0x1fdb7(%rip), %rsi     ## Objc selector ref: selectCellWithTag:
00000000000150e1	callq	*%r15
00000000000150e4	movq	0x1fdb5(%rip), %rsi     ## Objc selector ref: fullscreenPanningMode:
00000000000150eb	movq	%rbx, %rdi
00000000000150ee	movq	%rbx, %rdx
00000000000150f1	callq	*%r15
00000000000150f4	movq	0x1f2cd(%rip), %rsi     ## Objc selector ref: window
00000000000150fb	movq	0x142fe(%rip), %r15     ## Objc message: -[%rdi window]
0000000000015102	movq	%r14, %rdi
0000000000015105	callq	*%r15
0000000000015108	movq	0x1f2c1(%rip), %rsi     ## Objc selector ref: orderOut:
000000000001510f	xorl	%edx, %edx
0000000000015111	movq	%rax, %rdi
0000000000015114	callq	*%r15
0000000000015117	movq	0x13fc2(%rip), %rax     ## literal pool symbol address: _NSApp
000000000001511e	movq	(%rax), %rbx
0000000000015121	movq	0x1f2a0(%rip), %rsi     ## Objc selector ref: window
0000000000015128	movq	%r14, %rdi
000000000001512b	callq	*%r15
000000000001512e	movq	0x1f4f3(%rip), %rsi     ## Objc selector ref: endSheet:
0000000000015135	movq	%rbx, %rdi
0000000000015138	movq	%rax, %rdx
000000000001513b	movq	%r15, %rax
000000000001513e	addq	$0x8, %rsp
0000000000015142	popq	%rbx
0000000000015143	popq	%r12
0000000000015145	popq	%r13
0000000000015147	popq	%r14
0000000000015149	popq	%r15
000000000001514b	popq	%rbp
000000000001514c	jmpq	*%rax
000000000001514e	pushq	%rbp
000000000001514f	movq	%rsp, %rbp
0000000000015152	pushq	%r15
0000000000015154	pushq	%r14
0000000000015156	pushq	%r13
0000000000015158	pushq	%r12
000000000001515a	pushq	%rbx
000000000001515b	pushq	%rax
000000000001515c	movq	%rdi, %r14
000000000001515f	movq	0x1f5ba(%rip), %rsi     ## Objc selector ref: stopListeningForChanges
0000000000015166	movq	0x14293(%rip), %r13     ## Objc message: -[%rdi stopListeningForChanges]
000000000001516d	callq	*%r13
0000000000015170	movq	_OBJC_IVAR_$_UAPZoomViewController._useKeyboardZoomCheckbox(%rip), %rbx
0000000000015177	movq	(%r14,%rbx), %rdi
000000000001517b	movq	0x1f526(%rip), %rsi     ## Objc selector ref: state
0000000000015182	callq	*%r13
0000000000015185	cmpq	$0x1, %rax
0000000000015189	sete	%al
000000000001518c	movzbl	%al, %edi
000000000001518f	callq	0x1e60a                 ## symbol stub for: _UAKeyboardZoomSetEnabled
0000000000015194	movq	0x1f58d(%rip), %rsi     ## Objc selector ref: startListeningForChanges
000000000001519b	movq	%r14, %rdi
000000000001519e	callq	*%r13
00000000000151a1	movq	0x203a0(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_NSNotificationCenter
00000000000151a8	movq	0x1f181(%rip), %rsi     ## Objc selector ref: defaultCenter
00000000000151af	callq	*%r13
00000000000151b2	movq	0x1f5ef(%rip), %rsi     ## Objc selector ref: postNotificationName:object:userInfo:
00000000000151b9	leaq	0x15710(%rip), %rdx     ## Objc cfstring ref: @"UAApplyMacManagerSettingsNotification"
00000000000151c0	xorl	%ecx, %ecx
00000000000151c2	xorl	%r8d, %r8d
00000000000151c5	movq	%rax, %rdi
00000000000151c8	callq	*%r13
00000000000151cb	movq	(%r14,%rbx), %rbx
00000000000151cf	movl	$0xf, %edi
00000000000151d4	callq	0x1e970                 ## symbol stub for: _CGSIsSymbolicHotKeyEnabled
00000000000151d9	movzbl	%al, %edx
00000000000151dc	movq	0x1f25d(%rip), %rsi     ## Objc selector ref: setState:
00000000000151e3	movq	%rbx, %rdi
00000000000151e6	callq	*%r13
00000000000151e9	movq	0x141d0(%rip), %rax     ## literal pool symbol address: _kCFPreferencesCurrentUser
00000000000151f0	movq	(%rax), %r15
00000000000151f3	movq	0x141b6(%rip), %rax     ## literal pool symbol address: _kCFPreferencesAnyHost
00000000000151fa	movq	(%rax), %rbx
00000000000151fd	leaq	0x15dac(%rip), %rdi     ## Objc cfstring ref: @"UserAssignableHotKeys"
0000000000015204	leaq	0x15dc5(%rip), %r12     ## Objc cfstring ref: @"com.apple.universalaccess"
000000000001520b	xorl	%esi, %esi
000000000001520d	movq	%r12, %rdx
0000000000015210	movq	%r15, %rcx
0000000000015213	movq	%rbx, %r8
0000000000015216	callq	0x1e556                 ## symbol stub for: _CFPreferencesSetValue
000000000001521b	movq	%r12, %rdi
000000000001521e	movq	%r15, %rsi
0000000000015221	movq	%rbx, %rdx
0000000000015224	callq	0x1e55c                 ## symbol stub for: _CFPreferencesSynchronize
0000000000015229	movq	0x1fc78(%rip), %rsi     ## Objc selector ref: _updateShortcutsEnabled
0000000000015230	movq	%r14, %rdi
0000000000015233	movq	%r13, %rax
0000000000015236	addq	$0x8, %rsp
000000000001523a	popq	%rbx
000000000001523b	popq	%r12
000000000001523d	popq	%r13
000000000001523f	popq	%r14
0000000000015241	popq	%r15
0000000000015243	popq	%rbp
0000000000015244	jmpq	*%rax
0000000000015246	pushq	%rbp
0000000000015247	movq	%rsp, %rbp
000000000001524a	pushq	%r15
000000000001524c	pushq	%r14
000000000001524e	pushq	%r12
0000000000015250	pushq	%rbx
0000000000015251	movq	%rdi, %rbx
0000000000015254	movq	_OBJC_IVAR_$_UAPZoomViewController._useScrollZoomCheckbox(%rip), %rax
000000000001525b	movq	(%rbx,%rax), %rdi
000000000001525f	movq	0x1f442(%rip), %rsi     ## Objc selector ref: state
0000000000015266	movq	0x14193(%rip), %r12     ## Objc message: +[NSNotificationCenter state]
000000000001526d	callq	*%r12
0000000000015270	cmpq	$0x1, %rax
0000000000015274	sete	%r14b
0000000000015278	movq	0x1f4a1(%rip), %rsi     ## Objc selector ref: stopListeningForChanges
000000000001527f	movq	%rbx, %rdi
0000000000015282	callq	*%r12
0000000000015285	movzbl	%r14b, %r14d
0000000000015289	movl	%r14d, %edi
000000000001528c	callq	0x1e66a                 ## symbol stub for: _UAScrollZoomSetEnabled
0000000000015291	movq	0x1f490(%rip), %rsi     ## Objc selector ref: startListeningForChanges
0000000000015298	movq	%rbx, %rdi
000000000001529b	callq	*%r12
000000000001529e	callq	0x1e664                 ## symbol stub for: _UAScrollZoomModifiers
00000000000152a3	movl	%eax, %eax
00000000000152a5	movq	_OBJC_IVAR_$_UAPZoomViewController._scrollWheelModifiers(%rip), %rcx
00000000000152ac	movq	%rax, (%rbx,%rcx)
00000000000152b0	movq	_OBJC_IVAR_$_UAPZoomViewController._scrollWheelModifierController(%rip), %r15
00000000000152b7	movq	(%rbx,%r15), %rdi
00000000000152bb	movq	0x1f47e(%rip), %rsi     ## Objc selector ref: setEnabled:
00000000000152c2	movl	%r14d, %edx
00000000000152c5	callq	*%r12
00000000000152c8	movq	(%rbx,%r15), %rdi
00000000000152cc	movq	0x1fbdd(%rip), %rsi     ## Objc selector ref: update
00000000000152d3	movq	%r12, %rax
00000000000152d6	popq	%rbx
00000000000152d7	popq	%r12
00000000000152d9	popq	%r14
00000000000152db	popq	%r15
00000000000152dd	popq	%rbp
00000000000152de	jmpq	*%rax
00000000000152e0	pushq	%rbp
00000000000152e1	movq	%rsp, %rbp
00000000000152e4	pushq	%r14
00000000000152e6	pushq	%rbx
00000000000152e7	movq	%rdi, %rbx
00000000000152ea	movq	0x1f42f(%rip), %rsi     ## Objc selector ref: stopListeningForChanges
00000000000152f1	movq	0x14108(%rip), %r14     ## Objc message: -[%rdi stopListeningForChanges]
00000000000152f8	callq	*%r14
00000000000152fb	movq	_OBJC_IVAR_$_UAPZoomViewController._zoomStyle(%rip), %rax
0000000000015302	movq	(%rbx,%rax), %rdi
0000000000015306	movq	0x1f293(%rip), %rsi     ## Objc selector ref: selectedItem
000000000001530d	callq	*%r14
0000000000015310	movq	0x1f379(%rip), %rsi     ## Objc selector ref: tag
0000000000015317	movq	%rax, %rdi
000000000001531a	callq	*%r14
000000000001531d	movl	%eax, %edi
000000000001531f	callq	0x1e808                 ## symbol stub for: _UAZoomSetMode
0000000000015324	movq	0x1f3fd(%rip), %rsi     ## Objc selector ref: startListeningForChanges
000000000001532b	movq	%rbx, %rdi
000000000001532e	movq	%r14, %rax
0000000000015331	popq	%rbx
0000000000015332	popq	%r14
0000000000015334	popq	%rbp
0000000000015335	jmpq	*%rax
0000000000015337	pushq	%rbp
0000000000015338	movq	%rsp, %rbp
000000000001533b	pushq	%r14
000000000001533d	pushq	%rbx
000000000001533e	movq	%rdi, %rbx
0000000000015341	movq	0x1f3d8(%rip), %rsi     ## Objc selector ref: stopListeningForChanges
0000000000015348	movq	0x140b1(%rip), %r14     ## Objc message: -[%rdi stopListeningForChanges]
000000000001534f	callq	*%r14
0000000000015352	movq	_OBJC_IVAR_$_UAPZoomViewController._followsKeyboardFocus(%rip), %rax
0000000000015359	movq	(%rbx,%rax), %rdi
000000000001535d	movq	0x1f344(%rip), %rsi     ## Objc selector ref: state
0000000000015364	callq	*%r14
0000000000015367	cmpq	$0x1, %rax
000000000001536b	sete	%al
000000000001536e	movzbl	%al, %edi
0000000000015371	callq	0x1e7e4                 ## symbol stub for: _UAZoomFocusFollowsKeyboardSetEnabled
0000000000015376	movq	0x1f3ab(%rip), %rsi     ## Objc selector ref: startListeningForChanges
000000000001537d	movq	%rbx, %rdi
0000000000015380	movq	%r14, %rax
0000000000015383	popq	%rbx
0000000000015384	popq	%r14
0000000000015386	popq	%rbp
0000000000015387	jmpq	*%rax
0000000000015389	pushq	%rbp
000000000001538a	movq	%rsp, %rbp
000000000001538d	pushq	%r15
000000000001538f	pushq	%r14
0000000000015391	pushq	%r12
0000000000015393	pushq	%rbx
0000000000015394	subq	$0x30, %rsp
0000000000015398	movq	%rdi, %rbx
000000000001539b	movq	0x1f426(%rip), %rsi     ## Objc selector ref: _readPreferences:cacheSettings:
00000000000153a2	movq	0x14057(%rip), %r12     ## Objc message: -[%rdi _readPreferences:cacheSettings:]
00000000000153a9	xorl	%edx, %edx
00000000000153ab	movl	$0x1, %ecx
00000000000153b0	callq	*%r12
00000000000153b3	movq	0x1f006(%rip), %rsi     ## Objc selector ref: view
00000000000153ba	movq	%rbx, %rdi
00000000000153bd	callq	*%r12
00000000000153c0	movq	0x1f001(%rip), %rsi     ## Objc selector ref: window
00000000000153c7	movq	%rax, %rdi
00000000000153ca	callq	*%r12
00000000000153cd	movq	%rax, %r14
00000000000153d0	testq	%r14, %r14
00000000000153d3	jne	0x153f9
00000000000153d5	movq	_OBJC_IVAR_$_UAPZoomViewController._useScrollZoomCheckbox(%rip), %rax
00000000000153dc	movq	(%rbx,%rax), %rdi
00000000000153e0	movq	0x1efe1(%rip), %rsi     ## Objc selector ref: window
00000000000153e7	callq	*0x14013(%rip)          ## Objc message: -[%rdi window]
00000000000153ed	movq	%rax, %r14
00000000000153f0	testq	%r14, %r14
00000000000153f3	je	0x154cb
00000000000153f9	callq	0x1e7d8                 ## symbol stub for: _UAZoomCurrentMode
00000000000153fe	cmpl	$0x1, %eax
0000000000015401	jne	0x1546a
0000000000015403	movq	_OBJC_IVAR_$_UAPZoomViewController._scrollZoomSheetController(%rip), %rax
000000000001540a	movq	(%rbx,%rax), %rdi
000000000001540e	testq	%rdi, %rdi
0000000000015411	je	0x15420
0000000000015413	movq	0x1ed36(%rip), %rsi     ## Objc selector ref: release
000000000001541a	callq	*0x13fe0(%rip)          ## Objc message: -[%rdi release]
0000000000015420	movq	0x20211(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_UAScrollZoomSheetController
0000000000015427	movq	0x1ef32(%rip), %rsi     ## Objc selector ref: allocWithZone:
000000000001542e	xorl	%edx, %edx
0000000000015430	callq	*%r12
0000000000015433	movq	0x1ee36(%rip), %rsi     ## Objc selector ref: init
000000000001543a	movq	%rax, %rdi
000000000001543d	callq	*%r12
0000000000015440	movq	_OBJC_IVAR_$_UAPZoomViewController._scrollZoomSheetController(%rip), %r15
0000000000015447	movq	%rax, %rdi
000000000001544a	movq	%rbx, %rsi
000000000001544d	movq	%r15, %rdx
0000000000015450	callq	0x1e868                 ## symbol stub for: _objc_assign_ivar
0000000000015455	movq	(%rbx,%r15), %rdi
0000000000015459	movq	0x1fa58(%rip), %rsi     ## Objc selector ref: beginSheetOnWindow:completionHandler:
0000000000015460	xorl	%ecx, %ecx
0000000000015462	movq	%r14, %rdx
0000000000015465	callq	*%r12
0000000000015468	jmp	0x154cb
000000000001546a	testl	%eax, %eax
000000000001546c	jne	0x154cb
000000000001546e	movq	_OBJC_IVAR_$_UAPZoomViewController._zoomOptionsWindow(%rip), %rax
0000000000015475	movq	(%rbx,%rax), %r15
0000000000015479	movq	0x13ec8(%rip), %rax     ## literal pool symbol address: __NSConcreteStackBlock
0000000000015480	movq	%rax, -0x48(%rbp)
0000000000015484	movl	$0x42000000, -0x40(%rbp) ## imm = 0x42000000
000000000001548b	movl	$0x0, -0x3c(%rbp)
0000000000015492	leaq	0x3f(%rip), %rax
0000000000015499	movq	%rax, -0x38(%rbp)
000000000001549d	leaq	0x14a7c(%rip), %rax
00000000000154a4	movq	%rax, -0x30(%rbp)
00000000000154a8	leaq	-0x28(%rbp), %rsi
00000000000154ac	movq	%rbx, %rdi
00000000000154af	callq	0x1e86e                 ## symbol stub for: _objc_assign_strongCast
00000000000154b4	movq	0x1ef1d(%rip), %rsi     ## Objc selector ref: beginSheet:completionHandler:
00000000000154bb	leaq	-0x48(%rbp), %rcx
00000000000154bf	movq	%r14, %rdi
00000000000154c2	movq	%r15, %rdx
00000000000154c5	callq	*0x13f35(%rip)          ## Objc message: +[UAScrollZoomSheetController beginSheet:completionHandler:]
00000000000154cb	addq	$0x30, %rsp
00000000000154cf	popq	%rbx
00000000000154d0	popq	%r12
00000000000154d2	popq	%r14
00000000000154d4	popq	%r15
00000000000154d6	popq	%rbp
00000000000154d7	retq
00000000000154d8	pushq	%rbp
00000000000154d9	movq	%rsp, %rbp
00000000000154dc	movq	0x20(%rdi), %rax
00000000000154e0	movq	_OBJC_IVAR_$_UAPZoomViewController._zoomOptionsWindow(%rip), %rcx
00000000000154e7	movq	(%rax,%rcx), %rdi
00000000000154eb	movq	0x1eede(%rip), %rsi     ## Objc selector ref: orderOut:
00000000000154f2	xorl	%edx, %edx
00000000000154f4	popq	%rbp
00000000000154f5	jmpq	*0x13f05(%rip)          ## Objc message: -[%rdi orderOut:]
00000000000154fb	nopl	(%rax,%rax)
0000000000015500	pushq	%rbp
0000000000015501	movq	%rsp, %rbp
0000000000015504	addq	$0x20, %rdi
0000000000015508	movq	0x20(%rsi), %rsi
000000000001550c	movl	$0x3, %edx
0000000000015511	popq	%rbp
0000000000015512	jmp	0x1e8a4                 ## symbol stub for: __Block_object_assign
0000000000015517	nopw	(%rax,%rax)
0000000000015520	pushq	%rbp
0000000000015521	movq	%rsp, %rbp
0000000000015524	movq	0x20(%rdi), %rdi
0000000000015528	movl	$0x3, %esi
000000000001552d	popq	%rbp
000000000001552e	jmp	0x1e8aa                 ## symbol stub for: __Block_object_dispose
0000000000015533	pushq	%rbp
0000000000015534	movq	%rsp, %rbp
0000000000015537	pushq	%r15
0000000000015539	pushq	%r14
000000000001553b	pushq	%r13
000000000001553d	pushq	%r12
000000000001553f	pushq	%rbx
0000000000015540	pushq	%rax
0000000000015541	movq	%rdi, %rbx
0000000000015544	movq	_OBJC_IVAR_$_UAPZoomViewController._maxZoomLevelSlider(%rip), %r13
000000000001554b	movq	(%rbx,%r13), %rdi
000000000001554f	movq	0x1f96a(%rip), %rsi     ## Objc selector ref: constrainValueWhileDragging
0000000000015556	movq	0x13ea3(%rip), %r15     ## Objc message: -[%rdi constrainValueWhileDragging]
000000000001555d	callq	*%r15
0000000000015560	movq	_OBJC_IVAR_$_UAPZoomViewController._minZoomLevelSlider(%rip), %r12
0000000000015567	movq	(%rbx,%r12), %r14
000000000001556b	movq	(%rbx,%r13), %rdi
000000000001556f	movq	0x1ef32(%rip), %rsi     ## Objc selector ref: floatValue
0000000000015576	callq	*%r15
0000000000015579	cvtss2sd	%xmm0, %xmm0
000000000001557d	movq	0x1f944(%rip), %rsi     ## Objc selector ref: setMaxValidValue:
0000000000015584	movq	%r14, %rdi
0000000000015587	callq	*%r15
000000000001558a	movq	(%rbx,%r12), %rdi
000000000001558e	movq	0x1f93b(%rip), %rsi     ## Objc selector ref: setNeedsDisplay:
0000000000015595	movl	$0x1, %edx
000000000001559a	callq	*%r15
000000000001559d	movq	(%rbx,%r13), %rdi
00000000000155a1	movq	0x1ef00(%rip), %rsi     ## Objc selector ref: floatValue
00000000000155a8	callq	*%r15
00000000000155ab	callq	0x1e7fc                 ## symbol stub for: _UAZoomSetMaximum
00000000000155b0	movq	(%rbx,%r12), %rdi
00000000000155b4	movq	0x1eeed(%rip), %rsi     ## Objc selector ref: floatValue
00000000000155bb	callq	*%r15
00000000000155be	addq	$0x8, %rsp
00000000000155c2	popq	%rbx
00000000000155c3	popq	%r12
00000000000155c5	popq	%r13
00000000000155c7	popq	%r14
00000000000155c9	popq	%r15
00000000000155cb	popq	%rbp
00000000000155cc	jmp	0x1e802                 ## symbol stub for: _UAZoomSetMinimum
00000000000155d1	pushq	%rbp
00000000000155d2	movq	%rsp, %rbp
00000000000155d5	pushq	%r15
00000000000155d7	pushq	%r14
00000000000155d9	pushq	%r13
00000000000155db	pushq	%r12
00000000000155dd	pushq	%rbx
00000000000155de	pushq	%rax
00000000000155df	movq	%rdi, %rbx
00000000000155e2	movq	_OBJC_IVAR_$_UAPZoomViewController._minZoomLevelSlider(%rip), %r12
00000000000155e9	movq	(%rbx,%r12), %rdi
00000000000155ed	movq	0x1f8cc(%rip), %rsi     ## Objc selector ref: constrainValueWhileDragging
00000000000155f4	movq	0x13e05(%rip), %r15     ## Objc message: -[%rdi constrainValueWhileDragging]
00000000000155fb	callq	*%r15
00000000000155fe	movq	_OBJC_IVAR_$_UAPZoomViewController._maxZoomLevelSlider(%rip), %r13
0000000000015605	movq	(%rbx,%r13), %r14
0000000000015609	movq	(%rbx,%r12), %rdi
000000000001560d	movq	0x1ee94(%rip), %rsi     ## Objc selector ref: floatValue
0000000000015614	callq	*%r15
0000000000015617	cvtss2sd	%xmm0, %xmm0
000000000001561b	movq	0x1f8b6(%rip), %rsi     ## Objc selector ref: setMinValidValue:
0000000000015622	movq	%r14, %rdi
0000000000015625	callq	*%r15
0000000000015628	movq	(%rbx,%r13), %rdi
000000000001562c	movq	0x1f89d(%rip), %rsi     ## Objc selector ref: setNeedsDisplay:
0000000000015633	movl	$0x1, %edx
0000000000015638	callq	*%r15
000000000001563b	movq	(%rbx,%r13), %rdi
000000000001563f	movq	0x1ee62(%rip), %rsi     ## Objc selector ref: floatValue
0000000000015646	callq	*%r15
0000000000015649	callq	0x1e7fc                 ## symbol stub for: _UAZoomSetMaximum
000000000001564e	movq	(%rbx,%r12), %rdi
0000000000015652	movq	0x1ee4f(%rip), %rsi     ## Objc selector ref: floatValue
0000000000015659	callq	*%r15
000000000001565c	addq	$0x8, %rsp
0000000000015660	popq	%rbx
0000000000015661	popq	%r12
0000000000015663	popq	%r13
0000000000015665	popq	%r14
0000000000015667	popq	%r15
0000000000015669	popq	%rbp
000000000001566a	jmp	0x1e802                 ## symbol stub for: _UAZoomSetMinimum
000000000001566f	pushq	%rbp
0000000000015670	movq	%rsp, %rbp
0000000000015673	pushq	%r14
0000000000015675	pushq	%rbx
0000000000015676	movq	%rdi, %rbx
0000000000015679	movq	0x1f0a0(%rip), %rsi     ## Objc selector ref: stopListeningForChanges
0000000000015680	movq	0x13d79(%rip), %r14     ## Objc message: -[%rdi stopListeningForChanges]
0000000000015687	callq	*%r14
000000000001568a	movq	_OBJC_IVAR_$_UAPZoomViewController._showPreviewRectangleCheckbox(%rip), %rax
0000000000015691	movq	(%rbx,%rax), %rdi
0000000000015695	movq	0x1f00c(%rip), %rsi     ## Objc selector ref: state
000000000001569c	callq	*%r14
000000000001569f	cmpq	$0x1, %rax
00000000000156a3	sete	%al
00000000000156a6	movzbl	%al, %edi
00000000000156a9	callq	0x1e81a                 ## symbol stub for: _UAZoomShowPreviewSetEnabled
00000000000156ae	movq	0x1f073(%rip), %rsi     ## Objc selector ref: startListeningForChanges
00000000000156b5	movq	%rbx, %rdi
00000000000156b8	movq	%r14, %rax
00000000000156bb	popq	%rbx
00000000000156bc	popq	%r14
00000000000156be	popq	%rbp
00000000000156bf	jmpq	*%rax
00000000000156c1	pushq	%rbp
00000000000156c2	movq	%rsp, %rbp
00000000000156c5	pushq	%r15
00000000000156c7	pushq	%r14
00000000000156c9	pushq	%rbx
00000000000156ca	pushq	%rax
00000000000156cb	movq	%rdi, %r14
00000000000156ce	movq	_OBJC_IVAR_$_UAPZoomViewController._fullscreenPanningModeMatrix(%rip), %rax
00000000000156d5	movq	(%r14,%rax), %rdi
00000000000156d9	movq	0x1f7b0(%rip), %rsi     ## Objc selector ref: selectedCell
00000000000156e0	movq	0x13d19(%rip), %rbx     ## Objc message: -[%rdi selectedCell]
00000000000156e7	callq	*%rbx
00000000000156e9	movq	0x1efa0(%rip), %rsi     ## Objc selector ref: tag
00000000000156f0	movq	%rax, %rdi
00000000000156f3	callq	*%rbx
00000000000156f5	movq	%rbx, %rcx
00000000000156f8	xorl	%r15d, %r15d
00000000000156fb	testq	%rax, %rax
00000000000156fe	je	0x15714
0000000000015700	cmpq	$0x2, %rax
0000000000015704	jne	0x1570e
0000000000015706	movl	$0x2, %r15d
000000000001570c	jmp	0x15714
000000000001570e	movl	$0x1, %r15d
0000000000015714	movq	0x1f005(%rip), %rsi     ## Objc selector ref: stopListeningForChanges
000000000001571b	movq	%r14, %rdi
000000000001571e	movq	%rcx, %rbx
0000000000015721	callq	*%rbx
0000000000015723	movl	%r15d, %edi
0000000000015726	callq	0x1e80e                 ## symbol stub for: _UAZoomSetPanningMode
000000000001572b	movq	0x1eff6(%rip), %rsi     ## Objc selector ref: startListeningForChanges
0000000000015732	movq	%r14, %rdi
0000000000015735	movq	%rbx, %rax
0000000000015738	addq	$0x8, %rsp
000000000001573c	popq	%rbx
000000000001573d	popq	%r14
000000000001573f	popq	%r15
0000000000015741	popq	%rbp
0000000000015742	jmpq	*%rax
0000000000015744	pushq	%rbp
0000000000015745	movq	%rsp, %rbp
0000000000015748	pushq	%r14
000000000001574a	pushq	%rbx
000000000001574b	movq	%rdi, %rbx
000000000001574e	movq	0x1efcb(%rip), %rsi     ## Objc selector ref: stopListeningForChanges
0000000000015755	movq	0x13ca4(%rip), %r14     ## Objc message: -[%rdi stopListeningForChanges]
000000000001575c	callq	*%r14
000000000001575f	movq	_OBJC_IVAR_$_UAPZoomViewController._smoothImagesCheckbox(%rip), %rax
0000000000015766	movq	(%rbx,%rax), %rdi
000000000001576a	movq	0x1ef37(%rip), %rsi     ## Objc selector ref: state
0000000000015771	callq	*%r14
0000000000015774	cmpq	$0x1, %rax
0000000000015778	sete	%al
000000000001577b	movzbl	%al, %edi
000000000001577e	callq	0x1e826                 ## symbol stub for: _UAZoomSmoothImagesSetEnabled
0000000000015783	movq	0x1ef9e(%rip), %rsi     ## Objc selector ref: startListeningForChanges
000000000001578a	movq	%rbx, %rdi
000000000001578d	movq	%r14, %rax
0000000000015790	popq	%rbx
0000000000015791	popq	%r14
0000000000015793	popq	%rbp
0000000000015794	jmpq	*%rax
0000000000015796	pushq	%rbp
0000000000015797	movq	%rsp, %rbp
000000000001579a	movq	0x1f027(%rip), %rsi     ## Objc selector ref: _readPreferences:cacheSettings:
00000000000157a1	xorl	%ecx, %ecx
00000000000157a3	popq	%rbp
00000000000157a4	jmpq	*0x13c56(%rip)          ## Objc message: -[%rdi _readPreferences:cacheSettings:]
00000000000157aa	pushq	%rbp
00000000000157ab	movq	%rsp, %rbp
00000000000157ae	pushq	%r15
00000000000157b0	pushq	%r14
00000000000157b2	pushq	%r12
00000000000157b4	pushq	%rbx
00000000000157b5	movq	%rdx, %r15
00000000000157b8	movq	%rdi, %r14
00000000000157bb	movq	0x1fe66(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_NSPrefPaneUtils
00000000000157c2	movq	0x1f687(%rip), %rsi     ## Objc selector ref: stringForSymbolicKey:
00000000000157c9	movq	0x13c30(%rip), %r12     ## Objc message: +[NSPrefPaneUtils stringForSymbolicKey:]
00000000000157d0	movq	%rcx, %rdx
00000000000157d3	callq	*%r12
00000000000157d6	movq	%rax, %rbx
00000000000157d9	movq	0x1fd30(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_NSCharacterSet
00000000000157e0	movq	0x1ea11(%rip), %rsi     ## Objc selector ref: whitespaceAndNewlineCharacterSet
00000000000157e7	callq	*%r12
00000000000157ea	movq	0x1e9ff(%rip), %rsi     ## Objc selector ref: stringByTrimmingCharactersInSet:
00000000000157f1	movq	%rbx, %rdi
00000000000157f4	movq	%rax, %rdx
00000000000157f7	callq	*%r12
00000000000157fa	movq	0x1e927(%rip), %rsi     ## Objc selector ref: length
0000000000015801	movq	%rax, %rdi
0000000000015804	callq	*%r12
0000000000015807	movq	0x1fce2(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_NSColor
000000000001580e	testq	%rax, %rax
0000000000015811	je	0x1582f
0000000000015813	movq	0x1f6c6(%rip), %rsi     ## Objc selector ref: controlTextColor
000000000001581a	callq	*%r12
000000000001581d	movq	0x1f644(%rip), %rsi     ## Objc selector ref: setTextColor:
0000000000015824	movq	%r15, %rdi
0000000000015827	movq	%rax, %rdx
000000000001582a	callq	*%r12
000000000001582d	jmp	0x1588e
000000000001582f	movq	0x1f62a(%rip), %rsi     ## Objc selector ref: disabledControlTextColor
0000000000015836	callq	*%r12
0000000000015839	movq	0x1f628(%rip), %rsi     ## Objc selector ref: setTextColor:
0000000000015840	movq	%r15, %rdi
0000000000015843	movq	%rax, %rdx
0000000000015846	callq	*%r12
0000000000015849	movq	0x1fcb0(%rip), %rbx     ## Objc class ref: _OBJC_CLASS_$_NSBundle
0000000000015850	movq	0x1e869(%rip), %rsi     ## Objc selector ref: class
0000000000015857	movq	%r14, %rdi
000000000001585a	callq	*%r12
000000000001585d	movq	0x1e954(%rip), %rsi     ## Objc selector ref: bundleForClass:
0000000000015864	movq	%rbx, %rdi
0000000000015867	movq	%rax, %rdx
000000000001586a	callq	*%r12
000000000001586d	movq	0x1e94c(%rip), %rsi     ## Objc selector ref: localizedStringForKey:value:table:
0000000000015874	leaq	0x15775(%rip), %rdx     ## Objc cfstring ref: @"HOTKEY_UNASSIGNED"
000000000001587b	leaq	0x1488e(%rip), %rcx     ## Objc cfstring ref: @""
0000000000015882	xorl	%r8d, %r8d
0000000000015885	movq	%rax, %rdi
0000000000015888	callq	*%r12
000000000001588b	movq	%rax, %rbx
000000000001588e	movq	0x1eb83(%rip), %rsi     ## Objc selector ref: setStringValue:
0000000000015895	movq	%r15, %rdi
0000000000015898	movq	%rbx, %rdx
000000000001589b	popq	%rbx
000000000001589c	popq	%r12
000000000001589e	popq	%r14
00000000000158a0	popq	%r15
00000000000158a2	popq	%rbp
00000000000158a3	jmpq	*0x13b57(%rip)          ## Objc message: +[NSBundle setStringValue:]
00000000000158a9	pushq	%rbp
00000000000158aa	movq	%rsp, %rbp
00000000000158ad	pushq	%r15
00000000000158af	pushq	%r14
00000000000158b1	pushq	%r13
00000000000158b3	pushq	%r12
00000000000158b5	pushq	%rbx
00000000000158b6	subq	$0x18, %rsp
00000000000158ba	movl	%ecx, -0x3c(%rbp)
00000000000158bd	movq	%rdi, %rbx
00000000000158c0	movq	%rbx, -0x38(%rbp)
00000000000158c4	movq	0x1fe9d(%rip), %rax     ## Objc class ref: UAPZoomViewController
00000000000158cb	movq	%rax, -0x30(%rbp)
00000000000158cf	movq	0x1ee62(%rip), %rsi     ## Objc selector ref: readPreferences:
00000000000158d6	leaq	-0x38(%rbp), %rdi
00000000000158da	callq	0x1e88c                 ## Objc message: -[[%rdi super] readPreferences:]
00000000000158df	callq	0x1e664                 ## symbol stub for: _UAScrollZoomModifiers
00000000000158e4	movq	_OBJC_IVAR_$_UAPZoomViewController._scrollWheelModifiers(%rip), %rcx
00000000000158eb	movq	%rax, (%rbx,%rcx)
00000000000158ef	callq	0x1e65e                 ## symbol stub for: _UAScrollZoomIsEnabled
00000000000158f4	movq	_OBJC_IVAR_$_UAPZoomViewController._scrollWheelModifierController(%rip), %r14
00000000000158fb	movq	(%rbx,%r14), %rdi
00000000000158ff	movq	0x1ee3a(%rip), %rsi     ## Objc selector ref: setEnabled:
0000000000015906	movsbl	%al, %r15d
000000000001590a	movq	0x13aef(%rip), %r13     ## Objc message: -[%rdi setEnabled:]
0000000000015911	movl	%r15d, %edx
0000000000015914	callq	*%r13
0000000000015917	movq	(%rbx,%r14), %rdi
000000000001591b	movq	0x1f58e(%rip), %rsi     ## Objc selector ref: update
0000000000015922	callq	*%r13
0000000000015925	movq	_OBJC_IVAR_$_UAPZoomViewController._zoomStyle(%rip), %rax
000000000001592c	movq	(%rbx,%rax), %r12
0000000000015930	callq	0x1e7d8                 ## symbol stub for: _UAZoomCurrentMode
0000000000015935	movl	%eax, %edx
0000000000015937	movq	0x1eb3a(%rip), %rsi     ## Objc selector ref: selectItemWithTag:
000000000001593e	movq	%r12, %rdi
0000000000015941	callq	*%r13
0000000000015944	movq	_OBJC_IVAR_$_UAPZoomViewController._useKeyboardZoomCheckbox(%rip), %rax
000000000001594b	movq	(%rbx,%rax), %r12
000000000001594f	callq	0x1e604                 ## symbol stub for: _UAKeyboardZoomIsEnabled
0000000000015954	testb	%al, %al
0000000000015956	setne	%al
0000000000015959	movzbl	%al, %edx
000000000001595c	movq	0x1eadd(%rip), %rsi     ## Objc selector ref: setState:
0000000000015963	movq	%r12, %rdi
0000000000015966	callq	*%r13
0000000000015969	movq	_OBJC_IVAR_$_UAPZoomViewController._useScrollZoomCheckbox(%rip), %rax
0000000000015970	movq	(%rbx,%rax), %rdi
0000000000015974	testb	%r15b, %r15b
0000000000015977	setne	%al
000000000001597a	movzbl	%al, %edx
000000000001597d	movq	0x1eabc(%rip), %rsi     ## Objc selector ref: setState:
0000000000015984	callq	*%r13
0000000000015987	movq	_OBJC_IVAR_$_UAPZoomViewController._showPreviewRectangleCheckbox(%rip), %rax
000000000001598e	movq	(%rbx,%rax), %r15
0000000000015992	callq	0x1e814                 ## symbol stub for: _UAZoomShowPreviewIsEnabled
0000000000015997	testb	%al, %al
0000000000015999	setne	%al
000000000001599c	movzbl	%al, %edx
000000000001599f	movq	0x1ea9a(%rip), %rsi     ## Objc selector ref: setState:
00000000000159a6	movq	%r15, %rdi
00000000000159a9	callq	*%r13
00000000000159ac	movq	_OBJC_IVAR_$_UAPZoomViewController._smoothImagesCheckbox(%rip), %rax
00000000000159b3	movq	(%rbx,%rax), %r15
00000000000159b7	callq	0x1e820                 ## symbol stub for: _UAZoomSmoothImagesIsEnabled
00000000000159bc	testb	%al, %al
00000000000159be	setne	%al
00000000000159c1	movzbl	%al, %edx
00000000000159c4	movq	0x1ea75(%rip), %rsi     ## Objc selector ref: setState:
00000000000159cb	movq	%r15, %rdi
00000000000159ce	callq	*%r13
00000000000159d1	movq	_OBJC_IVAR_$_UAPZoomViewController._followsKeyboardFocus(%rip), %rax
00000000000159d8	movq	(%rbx,%rax), %r15
00000000000159dc	callq	0x1e7de                 ## symbol stub for: _UAZoomFocusFollowsKeyboardIsEnabled
00000000000159e1	testb	%al, %al
00000000000159e3	setne	%al
00000000000159e6	movzbl	%al, %edx
00000000000159e9	movq	0x1ea50(%rip), %rsi     ## Objc selector ref: setState:
00000000000159f0	movq	%r15, %rdi
00000000000159f3	callq	*%r13
00000000000159f6	movq	_OBJC_IVAR_$_UAPZoomViewController._maxZoomLevelSlider(%rip), %r12
00000000000159fd	movq	(%rbx,%r12), %r15
0000000000015a01	callq	0x1e7ea                 ## symbol stub for: _UAZoomMaximum
0000000000015a06	movq	0x1edab(%rip), %rsi     ## Objc selector ref: setFloatValue:
0000000000015a0d	movq	%r15, %rdi
0000000000015a10	callq	*%r13
0000000000015a13	movq	_OBJC_IVAR_$_UAPZoomViewController._minZoomLevelSlider(%rip), %r14
0000000000015a1a	movq	(%rbx,%r14), %r15
0000000000015a1e	callq	0x1e7f0                 ## symbol stub for: _UAZoomMinimum
0000000000015a23	movq	0x1ed8e(%rip), %rsi     ## Objc selector ref: setFloatValue:
0000000000015a2a	movq	%r15, %rdi
0000000000015a2d	callq	*%r13
0000000000015a30	movq	(%rbx,%r12), %r15
0000000000015a34	movq	(%rbx,%r14), %rdi
0000000000015a38	movq	0x1ea69(%rip), %rsi     ## Objc selector ref: floatValue
0000000000015a3f	callq	*%r13
0000000000015a42	cvtss2sd	%xmm0, %xmm0
0000000000015a46	movq	0x1f48b(%rip), %rsi     ## Objc selector ref: setMinValidValue:
0000000000015a4d	movq	%r15, %rdi
0000000000015a50	callq	*%r13
0000000000015a53	movq	(%rbx,%r14), %r15
0000000000015a57	movq	(%rbx,%r12), %rdi
0000000000015a5b	movq	0x1ea46(%rip), %rsi     ## Objc selector ref: floatValue
0000000000015a62	callq	*%r13
0000000000015a65	cvtss2sd	%xmm0, %xmm0
0000000000015a69	movq	0x1f458(%rip), %rsi     ## Objc selector ref: setMaxValidValue:
0000000000015a70	movq	%r15, %rdi
0000000000015a73	callq	*%r13
0000000000015a76	callq	0x1e7f6                 ## symbol stub for: _UAZoomPanningMode
0000000000015a7b	xorl	%edx, %edx
0000000000015a7d	cmpl	$0x2, %eax
0000000000015a80	ja	0x15a8f
0000000000015a82	cltq
0000000000015a84	leaq	0x12a15(%rip), %rcx
0000000000015a8b	movq	(%rcx,%rax,8), %rdx
0000000000015a8f	movq	_OBJC_IVAR_$_UAPZoomViewController._fullscreenPanningModeMatrix(%rip), %r15
0000000000015a96	movq	(%rbx,%r15), %rdi
0000000000015a9a	movq	0x1f3f7(%rip), %rsi     ## Objc selector ref: selectCellWithTag:
0000000000015aa1	callq	*%r13
0000000000015aa4	movq	0x1f3fd(%rip), %rsi     ## Objc selector ref: _updateShortcutsEnabled
0000000000015aab	movq	%rbx, %rdi
0000000000015aae	callq	*%r13
0000000000015ab1	movq	_OBJC_IVAR_$_UAPZoomViewController._zoomInKeyText(%rip), %rax
0000000000015ab8	movq	(%rbx,%rax), %rdx
0000000000015abc	movq	0x1f425(%rip), %rsi     ## Objc selector ref: _setHotkeyText:symbolicKey:
0000000000015ac3	movl	$0x11, %ecx
0000000000015ac8	movq	%rbx, %rdi
0000000000015acb	callq	*%r13
0000000000015ace	movq	_OBJC_IVAR_$_UAPZoomViewController._zoomOutKeyText(%rip), %rax
0000000000015ad5	movq	(%rbx,%rax), %rdx
0000000000015ad9	movq	0x1f408(%rip), %rsi     ## Objc selector ref: _setHotkeyText:symbolicKey:
0000000000015ae0	movl	$0x13, %ecx
0000000000015ae5	movq	%rbx, %rdi
0000000000015ae8	callq	*%r13
0000000000015aeb	movq	_OBJC_IVAR_$_UAPZoomViewController._smoothKeyText(%rip), %rax
0000000000015af2	movq	(%rbx,%rax), %rdx
0000000000015af6	movq	0x1f3eb(%rip), %rsi     ## Objc selector ref: _setHotkeyText:symbolicKey:
0000000000015afd	movl	$0x17, %ecx
0000000000015b02	movq	%rbx, %rdi
0000000000015b05	callq	*%r13
0000000000015b08	movq	_OBJC_IVAR_$_UAPZoomViewController._followFocusKeyText(%rip), %rax
0000000000015b0f	movq	(%rbx,%rax), %rdx
0000000000015b13	movq	0x1f3ce(%rip), %rsi     ## Objc selector ref: _setHotkeyText:symbolicKey:
0000000000015b1a	movl	$0xb3, %ecx
0000000000015b1f	movq	%rbx, %rdi
0000000000015b22	callq	*%r13
0000000000015b25	movq	_OBJC_IVAR_$_UAPZoomViewController._zoomToggleKeyText(%rip), %rax
0000000000015b2c	movq	(%rbx,%rax), %rdx
0000000000015b30	movq	0x1f3b1(%rip), %rsi     ## Objc selector ref: _setHotkeyText:symbolicKey:
0000000000015b37	movl	$0xf, %ecx
0000000000015b3c	movq	%rbx, %rdi
0000000000015b3f	callq	*%r13
0000000000015b42	movl	-0x3c(%rbp), %eax
0000000000015b45	testb	%al, %al
0000000000015b47	je	0x15bb6
0000000000015b49	movq	(%rbx,%r12), %rdi
0000000000015b4d	movq	0x1e954(%rip), %rsi     ## Objc selector ref: floatValue
0000000000015b54	callq	*%r13
0000000000015b57	movq	_OBJC_IVAR_$_UAPZoomViewController._cachedMaxZoomLevelSliderValue(%rip), %rax
0000000000015b5e	movss	%xmm0, (%rbx,%rax)
0000000000015b63	movq	(%rbx,%r14), %rdi
0000000000015b67	movq	0x1e93a(%rip), %rsi     ## Objc selector ref: floatValue
0000000000015b6e	callq	*%r13
0000000000015b71	movq	_OBJC_IVAR_$_UAPZoomViewController._cachedMinZoomLevelSliderValue(%rip), %rax
0000000000015b78	movss	%xmm0, (%rbx,%rax)
0000000000015b7d	movq	_OBJC_IVAR_$_UAPZoomViewController._showPreviewRectangleCheckbox(%rip), %rax
0000000000015b84	movq	(%rbx,%rax), %rdi
0000000000015b88	movq	0x1eb19(%rip), %rsi     ## Objc selector ref: state
0000000000015b8f	callq	*%r13
0000000000015b92	movq	_OBJC_IVAR_$_UAPZoomViewController._cachedShowPreviewRectangleCheckboxState(%rip), %rcx
0000000000015b99	movq	%rax, (%rbx,%rcx)
0000000000015b9d	movq	(%rbx,%r15), %rdi
0000000000015ba1	movq	0x1ec28(%rip), %rsi     ## Objc selector ref: selectedTag
0000000000015ba8	callq	*%r13
0000000000015bab	movq	_OBJC_IVAR_$_UAPZoomViewController._cachedFullscreenPanningModeMatrixSelectedTag(%rip), %rcx
0000000000015bb2	movq	%rax, (%rbx,%rcx)
0000000000015bb6	addq	$0x18, %rsp
0000000000015bba	popq	%rbx
0000000000015bbb	popq	%r12
0000000000015bbd	popq	%r13
0000000000015bbf	popq	%r14
0000000000015bc1	popq	%r15
0000000000015bc3	popq	%rbp
0000000000015bc4	retq
0000000000015bc5	pushq	%rbp
0000000000015bc6	movq	%rsp, %rbp
0000000000015bc9	pushq	%rbx
0000000000015bca	pushq	%rax
0000000000015bcb	movq	%rdi, %rbx
0000000000015bce	movq	_OBJC_IVAR_$_UAPZoomViewController._scrollWheelModifierCombo(%rip), %rax
0000000000015bd5	movq	(%rbx,%rax), %rax
0000000000015bd9	movq	0x1e8f0(%rip), %rsi     ## Objc selector ref: isEqual:
0000000000015be0	movq	%rdx, %rdi
0000000000015be3	movq	%rax, %rdx
0000000000015be6	callq	*0x13814(%rip)          ## Objc message: -[%rdi isEqual:]
0000000000015bec	testb	%al, %al
0000000000015bee	je	0x15c0e
0000000000015bf0	movq	_OBJC_IVAR_$_UAPZoomViewController._scrollWheelModifierController(%rip), %rax
0000000000015bf7	movq	(%rbx,%rax), %rdi
0000000000015bfb	movq	0x1f2ee(%rip), %rsi     ## Objc selector ref: modifiersFieldEditor
0000000000015c02	addq	$0x8, %rsp
0000000000015c06	popq	%rbx
0000000000015c07	popq	%rbp
0000000000015c08	jmpq	*0x137f2(%rip)          ## Objc message: -[%rdi modifiersFieldEditor]
0000000000015c0e	xorl	%eax, %eax
0000000000015c10	addq	$0x8, %rsp
0000000000015c14	popq	%rbx
0000000000015c15	popq	%rbp
0000000000015c16	retq
0000000000015c17	pushq	%rbp
0000000000015c18	movq	%rsp, %rbp
0000000000015c1b	pushq	%r14
0000000000015c1d	pushq	%rbx
0000000000015c1e	subq	$0x10, %rsp
0000000000015c22	movq	%rdi, %rbx
0000000000015c25	movq	%rbx, -0x20(%rbp)
0000000000015c29	movq	0x1fb38(%rip), %rax     ## Objc class ref: UAPZoomViewController
0000000000015c30	movq	%rax, -0x18(%rbp)
0000000000015c34	movq	0x1eb35(%rip), %rsi     ## Objc selector ref: loadView
0000000000015c3b	leaq	-0x20(%rbp), %rdi
0000000000015c3f	callq	0x1e88c                 ## Objc message: -[[%rdi super] loadView]
0000000000015c44	movq	0x1e775(%rip), %rsi     ## Objc selector ref: view
0000000000015c4b	movq	0x137ae(%rip), %r14     ## Objc message: -[%rdi view]
0000000000015c52	movq	%rbx, %rdi
0000000000015c55	callq	*%r14
0000000000015c58	movq	_OBJC_IVAR_$_UAPZoomViewController._scrollWheelOptionsView(%rip), %rax
0000000000015c5f	movq	(%rbx,%rax), %rdi
0000000000015c63	movq	0x1e5fe(%rip), %rsi     ## Objc selector ref: retain
0000000000015c6a	callq	*%r14
0000000000015c6d	movq	0x1f9cc(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_UAModifiersController
0000000000015c74	movq	0x1e4ed(%rip), %rsi     ## Objc selector ref: alloc
0000000000015c7b	callq	*%r14
0000000000015c7e	movq	_OBJC_IVAR_$_UAPZoomViewController._scrollWheelModifierCombo(%rip), %rcx
0000000000015c85	movq	(%rbx,%rcx), %rdx
0000000000015c89	movq	0x1f268(%rip), %rsi     ## Objc selector ref: initWithComboBox:
0000000000015c90	movq	%rax, %rdi
0000000000015c93	callq	*%r14
0000000000015c96	movq	_OBJC_IVAR_$_UAPZoomViewController._scrollWheelModifierController(%rip), %rdx
0000000000015c9d	movq	%rax, %rdi
0000000000015ca0	movq	%rbx, %rsi
0000000000015ca3	callq	0x1e868                 ## symbol stub for: _objc_assign_ivar
0000000000015ca8	addq	$0x10, %rsp
0000000000015cac	popq	%rbx
0000000000015cad	popq	%r14
0000000000015caf	popq	%rbp
0000000000015cb0	retq
0000000000015cb1	pushq	%rbp
0000000000015cb2	movq	%rsp, %rbp
0000000000015cb5	pushq	%r15
0000000000015cb7	pushq	%r14
0000000000015cb9	pushq	%rbx
0000000000015cba	subq	$0x18, %rsp
0000000000015cbe	movq	%rdi, %rbx
0000000000015cc1	movq	_OBJC_IVAR_$_UAPZoomViewController._useKeyboardZoomCheckbox(%rip), %rax
0000000000015cc8	movq	(%rbx,%rax), %r14
0000000000015ccc	movq	0x134cd(%rip), %rax     ## literal pool symbol address: _UAKeyboardZoomEnabledKey
0000000000015cd3	movq	(%rax), %rdi
0000000000015cd6	callq	0x1e4cc                 ## symbol stub for: _UAPreferenceIsForced
0000000000015cdb	testb	%al, %al
0000000000015cdd	sete	%al
0000000000015ce0	movq	0x1ea59(%rip), %rsi     ## Objc selector ref: setEnabled:
0000000000015ce7	movzbl	%al, %edx
0000000000015cea	movq	0x1370f(%rip), %r15     ## Objc message: +[UAModifiersController setEnabled:]
0000000000015cf1	movq	%r14, %rdi
0000000000015cf4	callq	*%r15
0000000000015cf7	movq	_OBJC_IVAR_$_UAPZoomViewController._useScrollZoomCheckbox(%rip), %rax
0000000000015cfe	movq	(%rbx,%rax), %r14
0000000000015d02	movq	0x134d7(%rip), %rax     ## literal pool symbol address: _UAScrollZoomEnabledKey
0000000000015d09	movq	(%rax), %rdi
0000000000015d0c	callq	0x1e4cc                 ## symbol stub for: _UAPreferenceIsForced
0000000000015d11	testb	%al, %al
0000000000015d13	sete	%al
0000000000015d16	movq	0x1ea23(%rip), %rsi     ## Objc selector ref: setEnabled:
0000000000015d1d	movzbl	%al, %edx
0000000000015d20	movq	%r14, %rdi
0000000000015d23	callq	*%r15
0000000000015d26	movq	_OBJC_IVAR_$_UAPZoomViewController._scrollWheelModifierCombo(%rip), %rax
0000000000015d2d	movq	(%rbx,%rax), %r14
0000000000015d31	movq	0x134b0(%rip), %rax     ## literal pool symbol address: _UAScrollZoomModifiersKey
0000000000015d38	movq	(%rax), %rdi
0000000000015d3b	callq	0x1e4cc                 ## symbol stub for: _UAPreferenceIsForced
0000000000015d40	testb	%al, %al
0000000000015d42	sete	%al
0000000000015d45	movq	0x1e9f4(%rip), %rsi     ## Objc selector ref: setEnabled:
0000000000015d4c	movzbl	%al, %edx
0000000000015d4f	movq	%r14, %rdi
0000000000015d52	callq	*%r15
0000000000015d55	movq	_OBJC_IVAR_$_UAPZoomViewController._smoothImagesCheckbox(%rip), %rax
0000000000015d5c	movq	(%rbx,%rax), %r14
0000000000015d60	movq	0x135d9(%rip), %rax     ## literal pool symbol address: _UAZoomSmoothImagesKey
0000000000015d67	movq	(%rax), %rdi
0000000000015d6a	callq	0x1e4cc                 ## symbol stub for: _UAPreferenceIsForced
0000000000015d6f	testb	%al, %al
0000000000015d71	sete	%al
0000000000015d74	movq	0x1e9c5(%rip), %rsi     ## Objc selector ref: setEnabled:
0000000000015d7b	movzbl	%al, %edx
0000000000015d7e	movq	%r14, %rdi
0000000000015d81	callq	*%r15
0000000000015d84	movq	_OBJC_IVAR_$_UAPZoomViewController._showPreviewRectangleCheckbox(%rip), %rax
0000000000015d8b	movq	(%rbx,%rax), %r14
0000000000015d8f	movq	0x135a2(%rip), %rax     ## literal pool symbol address: _UAZoomShowPreviewKey
0000000000015d96	movq	(%rax), %rdi
0000000000015d99	callq	0x1e4cc                 ## symbol stub for: _UAPreferenceIsForced
0000000000015d9e	testb	%al, %al
0000000000015da0	sete	%al
0000000000015da3	movq	0x1e996(%rip), %rsi     ## Objc selector ref: setEnabled:
0000000000015daa	movzbl	%al, %edx
0000000000015dad	movq	%r14, %rdi
0000000000015db0	callq	*%r15
0000000000015db3	movq	_OBJC_IVAR_$_UAPZoomViewController._followsKeyboardFocus(%rip), %rax
0000000000015dba	movq	(%rbx,%rax), %r14
0000000000015dbe	movq	0x1354b(%rip), %rax     ## literal pool symbol address: _UAZoomFocusFollowsKeyboardKey
0000000000015dc5	movq	(%rax), %rdi
0000000000015dc8	callq	0x1e4cc                 ## symbol stub for: _UAPreferenceIsForced
0000000000015dcd	testb	%al, %al
0000000000015dcf	sete	%al
0000000000015dd2	movq	0x1e967(%rip), %rsi     ## Objc selector ref: setEnabled:
0000000000015dd9	movzbl	%al, %edx
0000000000015ddc	movq	%r14, %rdi
0000000000015ddf	callq	*%r15
0000000000015de2	movq	_OBJC_IVAR_$_UAPZoomViewController._zoomStyle(%rip), %rax
0000000000015de9	movq	(%rbx,%rax), %r14
0000000000015ded	movq	0x13534(%rip), %rax     ## literal pool symbol address: _UAZoomModeKey
0000000000015df4	movq	(%rax), %rdi
0000000000015df7	callq	0x1e4cc                 ## symbol stub for: _UAPreferenceIsForced
0000000000015dfc	testb	%al, %al
0000000000015dfe	sete	%al
0000000000015e01	movq	0x1e938(%rip), %rsi     ## Objc selector ref: setEnabled:
0000000000015e08	movzbl	%al, %edx
0000000000015e0b	movq	%r14, %rdi
0000000000015e0e	callq	*%r15
0000000000015e11	movq	_OBJC_IVAR_$_UAPZoomViewController._maxZoomLevelSlider(%rip), %rax
0000000000015e18	movq	(%rbx,%rax), %r14
0000000000015e1c	movq	0x134f5(%rip), %rax     ## literal pool symbol address: _UAZoomMaximumKey
0000000000015e23	movq	(%rax), %rdi
0000000000015e26	callq	0x1e4cc                 ## symbol stub for: _UAPreferenceIsForced
0000000000015e2b	testb	%al, %al
0000000000015e2d	sete	%al
0000000000015e30	movq	0x1e909(%rip), %rsi     ## Objc selector ref: setEnabled:
0000000000015e37	movzbl	%al, %edx
0000000000015e3a	movq	%r14, %rdi
0000000000015e3d	callq	*%r15
0000000000015e40	movq	_OBJC_IVAR_$_UAPZoomViewController._minZoomLevelSlider(%rip), %rax
0000000000015e47	movq	(%rbx,%rax), %r14
0000000000015e4b	movq	0x134ce(%rip), %rax     ## literal pool symbol address: _UAZoomMinimumKey
0000000000015e52	movq	(%rax), %rdi
0000000000015e55	callq	0x1e4cc                 ## symbol stub for: _UAPreferenceIsForced
0000000000015e5a	testb	%al, %al
0000000000015e5c	sete	%al
0000000000015e5f	movq	0x1e8da(%rip), %rsi     ## Objc selector ref: setEnabled:
0000000000015e66	movzbl	%al, %edx
0000000000015e69	movq	%r14, %rdi
0000000000015e6c	callq	*%r15
0000000000015e6f	movq	_OBJC_IVAR_$_UAPZoomViewController._fullscreenPanningModeMatrix(%rip), %rax
0000000000015e76	movq	(%rbx,%rax), %r14
0000000000015e7a	movq	0x134af(%rip), %rax     ## literal pool symbol address: _UAZoomPanningModeKey
0000000000015e81	movq	(%rax), %rdi
0000000000015e84	callq	0x1e4cc                 ## symbol stub for: _UAPreferenceIsForced
0000000000015e89	testb	%al, %al
0000000000015e8b	sete	%al
0000000000015e8e	movq	0x1e8ab(%rip), %rsi     ## Objc selector ref: setEnabled:
0000000000015e95	movzbl	%al, %edx
0000000000015e98	movq	%r14, %rdi
0000000000015e9b	callq	*%r15
0000000000015e9e	movq	%rbx, -0x28(%rbp)
0000000000015ea2	movq	0x1f8bf(%rip), %rax     ## Objc class ref: UAPZoomViewController
0000000000015ea9	movq	%rax, -0x20(%rbp)
0000000000015ead	movq	0x1e894(%rip), %rsi     ## Objc selector ref: validateControls
0000000000015eb4	leaq	-0x28(%rbp), %rdi
0000000000015eb8	callq	0x1e88c                 ## Objc message: -[[%rdi super] validateControls]
0000000000015ebd	addq	$0x18, %rsp
0000000000015ec1	popq	%rbx
0000000000015ec2	popq	%r14
0000000000015ec4	popq	%r15
0000000000015ec6	popq	%rbp
0000000000015ec7	retq
0000000000015ec8	pushq	%rbp
0000000000015ec9	movq	%rsp, %rbp
0000000000015ecc	pushq	%rbx
0000000000015ecd	pushq	%rax
0000000000015ece	movq	0x1f02b(%rip), %rsi     ## Objc selector ref: cell
0000000000015ed5	movq	0x13524(%rip), %rbx     ## Objc message: -[%rdi cell]
0000000000015edc	callq	*%rbx
0000000000015ede	movq	0x1f023(%rip), %rsi     ## Objc selector ref: cellSize
0000000000015ee5	movq	%rax, %rdi
0000000000015ee8	movq	%rbx, %rax
0000000000015eeb	addq	$0x8, %rsp
0000000000015eef	popq	%rbx
0000000000015ef0	popq	%rbp
0000000000015ef1	jmpq	*%rax
0000000000015ef3	pushq	%rbp
0000000000015ef4	movq	%rsp, %rbp
0000000000015ef7	pushq	%r14
0000000000015ef9	pushq	%rbx
0000000000015efa	movq	%rdi, %rbx
0000000000015efd	movq	0x1f744(%rip), %rdi     ## Objc class ref: UAPZoomSlider
0000000000015f04	movq	0x1e1b5(%rip), %rsi     ## Objc selector ref: class
0000000000015f0b	callq	*0x134ef(%rip)          ## Objc message: +[UAPZoomSlider class]
0000000000015f11	cmpq	%rbx, %rax
0000000000015f14	je	0x15f1b
0000000000015f16	popq	%rbx
0000000000015f17	popq	%r14
0000000000015f19	popq	%rbp
0000000000015f1a	retq
0000000000015f1b	movq	0x1f72e(%rip), %rdi     ## Objc class ref: UAPZoomSliderCell
0000000000015f22	movq	0x1e197(%rip), %rsi     ## Objc selector ref: class
0000000000015f29	movq	0x134d0(%rip), %r14     ## Objc message: +[UAPZoomSliderCell class]
0000000000015f30	callq	*%r14
0000000000015f33	movq	0x1efd6(%rip), %rsi     ## Objc selector ref: setCellClass:
0000000000015f3a	movq	%rbx, %rdi
0000000000015f3d	movq	%rax, %rdx
0000000000015f40	movq	%r14, %rax
0000000000015f43	popq	%rbx
0000000000015f44	popq	%r14
0000000000015f46	popq	%rbp
0000000000015f47	jmpq	*%rax
0000000000015f49	pushq	%rbp
0000000000015f4a	movq	%rsp, %rbp
0000000000015f4d	pushq	%rbx
0000000000015f4e	subq	$0x38, %rsp
0000000000015f52	movq	%rdi, -0x18(%rbp)
0000000000015f56	movq	0x1f813(%rip), %rax     ## Objc class ref: UAPCaptioningPreviewCloudView
0000000000015f5d	movq	%rax, -0x10(%rbp)
0000000000015f61	movq	0x1e1d8(%rip), %rsi     ## Objc selector ref: initWithFrame:
0000000000015f68	movq	0x28(%rbp), %rax
0000000000015f6c	movq	%rax, 0x18(%rsp)
0000000000015f71	movq	0x20(%rbp), %rax
0000000000015f75	movq	%rax, 0x10(%rsp)
0000000000015f7a	movq	0x10(%rbp), %rax
0000000000015f7e	movq	0x18(%rbp), %rcx
0000000000015f82	movq	%rcx, 0x8(%rsp)
0000000000015f87	movq	%rax, (%rsp)
0000000000015f8b	leaq	-0x18(%rbp), %rdi
0000000000015f8f	callq	0x1e88c                 ## Objc message: -[[%rdi super] initWithFrame:]
0000000000015f94	movq	%rax, %rbx
0000000000015f97	testq	%rbx, %rbx
0000000000015f9a	je	0x15fac
0000000000015f9c	movq	0x1e1a5(%rip), %rsi     ## Objc selector ref: setup
0000000000015fa3	movq	%rbx, %rdi
0000000000015fa6	callq	*0x13454(%rip)          ## Objc message: -[%rdi setup]
0000000000015fac	movq	%rbx, %rax
0000000000015faf	addq	$0x38, %rsp
0000000000015fb3	popq	%rbx
0000000000015fb4	popq	%rbp
0000000000015fb5	retq
0000000000015fb6	pushq	%rbp
0000000000015fb7	movq	%rsp, %rbp
0000000000015fba	pushq	%r14
0000000000015fbc	pushq	%rbx
0000000000015fbd	subq	$0x10, %rsp
0000000000015fc1	movq	%rdi, %rbx
0000000000015fc4	movq	_OBJC_IVAR_$_UAPCaptioningPreviewCloudView._cloudImages(%rip), %rax
0000000000015fcb	movq	(%rbx,%rax), %rdi
0000000000015fcf	movq	0x1e17a(%rip), %rsi     ## Objc selector ref: release
0000000000015fd6	movq	0x13423(%rip), %r14     ## Objc message: -[%rdi release]
0000000000015fdd	callq	*%r14
0000000000015fe0	movq	_OBJC_IVAR_$_UAPCaptioningPreviewCloudView._animationTimer(%rip), %rax
0000000000015fe7	movq	(%rbx,%rax), %rdi
0000000000015feb	movq	0x1e15e(%rip), %rsi     ## Objc selector ref: release
0000000000015ff2	callq	*%r14
0000000000015ff5	movq	%rbx, -0x20(%rbp)
0000000000015ff9	movq	0x1f770(%rip), %rax     ## Objc class ref: UAPCaptioningPreviewCloudView
0000000000016000	movq	%rax, -0x18(%rbp)
0000000000016004	movq	0x1e14d(%rip), %rsi     ## Objc selector ref: dealloc
000000000001600b	leaq	-0x20(%rbp), %rdi
000000000001600f	callq	0x1e88c                 ## Objc message: -[[%rdi super] dealloc]
0000000000016014	addq	$0x10, %rsp
0000000000016018	popq	%rbx
0000000000016019	popq	%r14
000000000001601b	popq	%rbp
000000000001601c	retq
000000000001601d	pushq	%rbp
000000000001601e	movq	%rsp, %rbp
0000000000016021	pushq	%r15
0000000000016023	pushq	%r14
0000000000016025	pushq	%r13
0000000000016027	pushq	%r12
0000000000016029	pushq	%rbx
000000000001602a	subq	$0x48, %rsp
000000000001602e	movq	%rdi, %rbx
0000000000016031	movq	0x1eee0(%rip), %rsi     ## Objc selector ref: cloudImages
0000000000016038	movq	0x133c1(%rip), %r13     ## Objc message: -[%rdi cloudImages]
000000000001603f	callq	*%r13
0000000000016042	movq	0x1e21f(%rip), %rsi     ## Objc selector ref: retain
0000000000016049	movq	%rax, %rdi
000000000001604c	callq	*%r13
000000000001604f	movq	_OBJC_IVAR_$_UAPCaptioningPreviewCloudView._cloudImages(%rip), %rdx
0000000000016056	movq	%rax, %rdi
0000000000016059	movq	%rbx, %rsi
000000000001605c	callq	0x1e868                 ## symbol stub for: _objc_assign_ivar
0000000000016061	movq	_OBJC_IVAR_$_UAPCaptioningPreviewCloudView._cloudImageIndex(%rip), %rax
0000000000016068	movq	$0x0, (%rbx,%rax)
0000000000016070	movq	0x1e261(%rip), %rsi     ## Objc selector ref: setWantsLayer:
0000000000016077	movl	$0x1, %edx
000000000001607c	movq	%rbx, %rdi
000000000001607f	callq	*%r13
0000000000016082	movq	0x1ee97(%rip), %rsi     ## Objc selector ref: setLayerContentsRedrawPolicy:
0000000000016089	movl	$0x1, %edx
000000000001608e	movq	%rbx, %rdi
0000000000016091	callq	*%r13
0000000000016094	movq	0x1ee8d(%rip), %rsi     ## Objc selector ref: layer
000000000001609b	movq	%rbx, %rdi
000000000001609e	callq	*%r13
00000000000160a1	movq	%rax, %r15
00000000000160a4	movq	0x1f5ad(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_CALayer
00000000000160ab	movq	0x1e0b6(%rip), %rsi     ## Objc selector ref: alloc
00000000000160b2	callq	*%r13
00000000000160b5	movq	0x1e1b4(%rip), %rsi     ## Objc selector ref: init
00000000000160bc	movq	%rax, %rdi
00000000000160bf	callq	*%r13
00000000000160c2	movq	_OBJC_IVAR_$_UAPCaptioningPreviewCloudView._rootLayer(%rip), %r14
00000000000160c9	movq	%rax, %rdi
00000000000160cc	movq	%rbx, %rsi
00000000000160cf	movq	%r14, %rdx
00000000000160d2	callq	0x1e868                 ## symbol stub for: _objc_assign_ivar
00000000000160d7	movq	(%rbx,%r14), %rdi
00000000000160db	movq	0x1ee4e(%rip), %rsi     ## Objc selector ref: setAnchorPoint:
00000000000160e2	movsd	0x122ee(%rip), %xmm0
00000000000160ea	movaps	%xmm0, %xmm1
00000000000160ed	callq	*%r13
00000000000160f0	movq	(%rbx,%r14), %rdi
00000000000160f4	movq	0x1ee3d(%rip), %rsi     ## Objc selector ref: setAutoresizingMask:
00000000000160fb	movl	$0x12, %edx
0000000000016100	callq	*%r13
0000000000016103	movq	(%rbx,%r14), %rdx
0000000000016107	movq	0x1ee32(%rip), %rsi     ## Objc selector ref: addSublayer:
000000000001610e	movq	%r15, %rdi
0000000000016111	callq	*%r13
0000000000016114	movq	(%rbx,%r14), %rdi
0000000000016118	movq	0x1e031(%rip), %rsi     ## Objc selector ref: release
000000000001611f	callq	*%r13
0000000000016122	movq	0x1f3d7(%rip), %r15     ## Objc class ref: _OBJC_CLASS_$_NSBundle
0000000000016129	movq	0x1df90(%rip), %rsi     ## Objc selector ref: class
0000000000016130	movq	%rbx, %rdi
0000000000016133	callq	*%r13
0000000000016136	movq	0x1e07b(%rip), %rsi     ## Objc selector ref: bundleForClass:
000000000001613d	movq	%r15, %rdi
0000000000016140	movq	%rax, %rdx
0000000000016143	callq	*%r13
0000000000016146	movq	0x1edfb(%rip), %rsi     ## Objc selector ref: imageForResource:
000000000001614d	leaq	0x14ebc(%rip), %rdx     ## Objc cfstring ref: @"BoxTopContentMask"
0000000000016154	movq	%rax, %rdi
0000000000016157	callq	*%r13
000000000001615a	movq	%rax, %r12
000000000001615d	movq	0x1f4f4(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_CALayer
0000000000016164	movq	0x1dffd(%rip), %rsi     ## Objc selector ref: alloc
000000000001616b	callq	*%r13
000000000001616e	movq	0x1e0fb(%rip), %rsi     ## Objc selector ref: init
0000000000016175	movq	%rax, %rdi
0000000000016178	callq	*%r13
000000000001617b	movq	_OBJC_IVAR_$_UAPCaptioningPreviewCloudView._maskLayer(%rip), %r15
0000000000016182	movq	%rax, %rdi
0000000000016185	movq	%rbx, %rsi
0000000000016188	movq	%r15, %rdx
000000000001618b	callq	0x1e868                 ## symbol stub for: _objc_assign_ivar
0000000000016190	movq	(%rbx,%r15), %rdi
0000000000016194	movq	0x1ed95(%rip), %rsi     ## Objc selector ref: setAnchorPoint:
000000000001619b	movsd	0x12235(%rip), %xmm0
00000000000161a3	movaps	%xmm0, %xmm1
00000000000161a6	callq	*%r13
00000000000161a9	movq	(%rbx,%r15), %rdi
00000000000161ad	movq	0x1ed84(%rip), %rsi     ## Objc selector ref: setAutoresizingMask:
00000000000161b4	movl	$0x12, %edx
00000000000161b9	callq	*%r13
00000000000161bc	movq	(%rbx,%r15), %rdi
00000000000161c0	movaps	0x12309(%rip), %xmm0
00000000000161c7	movaps	%xmm0, -0x50(%rbp)
00000000000161cb	movaps	0x1230e(%rip), %xmm0
00000000000161d2	movaps	%xmm0, -0x40(%rbp)
00000000000161d6	movq	0x1ed73(%rip), %rsi     ## Objc selector ref: setContentsCenter:
00000000000161dd	movq	-0x38(%rbp), %rax
00000000000161e1	movq	%rax, 0x18(%rsp)
00000000000161e6	movq	-0x40(%rbp), %rax
00000000000161ea	movq	%rax, 0x10(%rsp)
00000000000161ef	movq	-0x50(%rbp), %rax
00000000000161f3	movq	-0x48(%rbp), %rcx
00000000000161f7	movq	%rcx, 0x8(%rsp)
00000000000161fc	movq	%rax, (%rsp)
0000000000016200	callq	*%r13
0000000000016203	movq	(%rbx,%r15), %rdi
0000000000016207	movq	0x1ed4a(%rip), %rsi     ## Objc selector ref: setContents:
000000000001620e	movq	%r12, %rdx
0000000000016211	callq	*%r13
0000000000016214	movq	(%rbx,%r15), %rdi
0000000000016218	movq	0x1ed41(%rip), %rsi     ## Objc selector ref: setZPosition:
000000000001621f	movsd	0x12151(%rip), %xmm0
0000000000016227	callq	*%r13
000000000001622a	movq	(%rbx,%r14), %rdi
000000000001622e	movq	(%rbx,%r15), %rdx
0000000000016232	movq	0x1ed2f(%rip), %rsi     ## Objc selector ref: setMask:
0000000000016239	callq	*%r13
000000000001623c	movq	(%rbx,%r15), %rdi
0000000000016240	movq	0x1df09(%rip), %rsi     ## Objc selector ref: release
0000000000016247	callq	*%r13
000000000001624a	movq	0x1f407(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_CALayer
0000000000016251	movq	0x1df10(%rip), %rsi     ## Objc selector ref: alloc
0000000000016258	callq	*%r13
000000000001625b	movq	0x1e00e(%rip), %rsi     ## Objc selector ref: init
0000000000016262	movq	%rax, %rdi
0000000000016265	callq	*%r13
0000000000016268	movq	_OBJC_IVAR_$_UAPCaptioningPreviewCloudView._cloudLayer(%rip), %r15
000000000001626f	movq	%rax, %rdi
0000000000016272	movq	%rbx, %rsi
0000000000016275	movq	%r15, %rdx
0000000000016278	callq	0x1e868                 ## symbol stub for: _objc_assign_ivar
000000000001627d	movq	(%rbx,%r14), %rdi
0000000000016281	movq	(%rbx,%r15), %rdx
0000000000016285	movq	0x1ecb4(%rip), %rsi     ## Objc selector ref: addSublayer:
000000000001628c	callq	*%r13
000000000001628f	movq	(%rbx,%r15), %rdi
0000000000016293	movq	0x1deb6(%rip), %rsi     ## Objc selector ref: release
000000000001629a	callq	*%r13
000000000001629d	movq	0x1f3b4(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_CALayer
00000000000162a4	movq	0x1debd(%rip), %rsi     ## Objc selector ref: alloc
00000000000162ab	callq	*%r13
00000000000162ae	movq	0x1dfbb(%rip), %rsi     ## Objc selector ref: init
00000000000162b5	movq	%rax, %rdi
00000000000162b8	callq	*%r13
00000000000162bb	movq	_OBJC_IVAR_$_UAPCaptioningPreviewCloudView._nextCloudLayer(%rip), %r15
00000000000162c2	movq	%rax, %rdi
00000000000162c5	movq	%rbx, %rsi
00000000000162c8	movq	%r15, %rdx
00000000000162cb	callq	0x1e868                 ## symbol stub for: _objc_assign_ivar
00000000000162d0	movq	(%rbx,%r14), %rdi
00000000000162d4	movq	(%rbx,%r15), %rdx
00000000000162d8	movq	0x1ec61(%rip), %rsi     ## Objc selector ref: addSublayer:
00000000000162df	callq	*%r13
00000000000162e2	movq	(%rbx,%r15), %rdi
00000000000162e6	movq	0x1de63(%rip), %rsi     ## Objc selector ref: release
00000000000162ed	callq	*%r13
00000000000162f0	addq	$0x48, %rsp
00000000000162f4	popq	%rbx
00000000000162f5	popq	%r12
00000000000162f7	popq	%r13
00000000000162f9	popq	%r14
00000000000162fb	popq	%r15
00000000000162fd	popq	%rbp
00000000000162fe	retq
00000000000162ff	pushq	%rbp
0000000000016300	movq	%rsp, %rbp
0000000000016303	pushq	%r15
0000000000016305	pushq	%r14
0000000000016307	pushq	%r13
0000000000016309	pushq	%r12
000000000001630b	pushq	%rbx
000000000001630c	pushq	%rax
000000000001630d	movq	%rdi, %r15
0000000000016310	movq	0x1f241(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_NSMutableArray
0000000000016317	movq	0x1de4a(%rip), %rsi     ## Objc selector ref: alloc
000000000001631e	movq	0x130db(%rip), %r14     ## Objc message: +[NSMutableArray alloc]
0000000000016325	callq	*%r14
0000000000016328	movq	0x1df41(%rip), %rsi     ## Objc selector ref: init
000000000001632f	movq	%rax, %rdi
0000000000016332	callq	*%r14
0000000000016335	movq	%rax, -0x30(%rbp)
0000000000016339	movq	0x1f1c0(%rip), %rbx     ## Objc class ref: _OBJC_CLASS_$_NSBundle
0000000000016340	movq	0x1dd79(%rip), %rsi     ## Objc selector ref: class
0000000000016347	movq	%r15, %rdi
000000000001634a	callq	*%r14
000000000001634d	movq	0x1de64(%rip), %rsi     ## Objc selector ref: bundleForClass:
0000000000016354	movq	%rbx, %rdi
0000000000016357	movq	%rax, %rdx
000000000001635a	callq	*%r14
000000000001635d	movq	%rax, %rbx
0000000000016360	movq	$-0x5, %r15
0000000000016367	movq	0x1f1aa(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_NSString
000000000001636e	leal	0x6(%r15), %ecx
0000000000016372	xorl	%eax, %eax
0000000000016374	movq	0x1de85(%rip), %rsi     ## Objc selector ref: stringWithFormat:
000000000001637b	leaq	0x14cae(%rip), %rdx     ## Objc cfstring ref: @"clouds0%i"
0000000000016382	callq	*%r14
0000000000016385	movq	%rax, %r13
0000000000016388	movq	%rbx, %rdi
000000000001638b	movq	0x1ebb6(%rip), %rsi     ## Objc selector ref: imageForResource:
0000000000016392	movq	%r13, %rdx
0000000000016395	callq	*%r14
0000000000016398	movq	%rax, %r12
000000000001639b	movq	%r12, %rdi
000000000001639e	movq	0x1ebcb(%rip), %rsi     ## Objc selector ref: setName:
00000000000163a5	movq	%r13, %rdx
00000000000163a8	callq	*%r14
00000000000163ab	testq	%r12, %r12
00000000000163ae	je	0x163c4
00000000000163b0	movq	-0x30(%rbp), %rdi
00000000000163b4	movq	0x1dfc5(%rip), %rsi     ## Objc selector ref: addObject:
00000000000163bb	movq	%r12, %rdx
00000000000163be	callq	*0x1303c(%rip)          ## Objc message: +[NSString addObject:]
00000000000163c4	incq	%r15
00000000000163c7	jne	0x16367
00000000000163c9	movq	0x1dd38(%rip), %rsi     ## Objc selector ref: autorelease
00000000000163d0	movq	-0x30(%rbp), %rdi
00000000000163d4	addq	$0x8, %rsp
00000000000163d8	popq	%rbx
00000000000163d9	popq	%r12
00000000000163db	popq	%r13
00000000000163dd	popq	%r14
00000000000163df	popq	%r15
00000000000163e1	popq	%rbp
00000000000163e2	jmpq	*0x13018(%rip)          ## Objc message: -[%rdi autorelease]
00000000000163e8	pushq	%rbp
00000000000163e9	movq	%rsp, %rbp
00000000000163ec	pushq	%r15
00000000000163ee	pushq	%r14
00000000000163f0	pushq	%r13
00000000000163f2	pushq	%r12
00000000000163f4	pushq	%rbx
00000000000163f5	pushq	%rax
00000000000163f6	movq	%rdi, %rbx
00000000000163f9	movq	_OBJC_IVAR_$_UAPCaptioningPreviewCloudView._cloudImages(%rip), %rax
0000000000016400	movq	(%rbx,%rax), %rdi
0000000000016404	movq	%rax, %r12
0000000000016407	movq	_OBJC_IVAR_$_UAPCaptioningPreviewCloudView._cloudImageIndex(%rip), %r13
000000000001640e	movq	(%rbx,%r13), %rdx
0000000000016412	movq	0x1eb5f(%rip), %rsi     ## Objc selector ref: objectAtIndexedSubscript:
0000000000016419	movq	0x12fe0(%rip), %r14     ## Objc message: -[%rdi objectAtIndexedSubscript:]
0000000000016420	callq	*%r14
0000000000016423	movq	%r14, %rcx
0000000000016426	movq	%rax, %r14
0000000000016429	movq	(%rbx,%r13), %r15
000000000001642d	incq	%r15
0000000000016430	movq	(%rbx,%r12), %rdi
0000000000016434	movq	0x1df2d(%rip), %rsi     ## Objc selector ref: count
000000000001643b	callq	*%rcx
000000000001643d	movq	%rax, %rcx
0000000000016440	xorl	%edx, %edx
0000000000016442	movq	%r15, %rax
0000000000016445	divq	%rcx
0000000000016448	movq	%rdx, (%rbx,%r13)
000000000001644c	movq	%r14, %rax
000000000001644f	addq	$0x8, %rsp
0000000000016453	popq	%rbx
0000000000016454	popq	%r12
0000000000016456	popq	%r13
0000000000016458	popq	%r14
000000000001645a	popq	%r15
000000000001645c	popq	%rbp
000000000001645d	retq
000000000001645e	pushq	%rbp
000000000001645f	movq	%rsp, %rbp
0000000000016462	pushq	%r15
0000000000016464	pushq	%r14
0000000000016466	pushq	%rbx
0000000000016467	subq	$0x58, %rsp
000000000001646b	movq	%rcx, %r14
000000000001646e	movq	%rdx, %r15
0000000000016471	movq	%rdi, %rbx
0000000000016474	movq	0x1eb05(%rip), %rsi     ## Objc selector ref: size
000000000001647b	movq	%r15, %rdi
000000000001647e	callq	*0x12f7c(%rip)          ## Objc message: -[%rdi size]
0000000000016484	movsd	%xmm0, -0x48(%rbp)
0000000000016489	testq	%rbx, %rbx
000000000001648c	je	0x164a8
000000000001648e	movsd	%xmm1, -0x50(%rbp)
0000000000016493	movq	0x1de4e(%rip), %rdx     ## Objc selector ref: bounds
000000000001649a	leaq	-0x40(%rbp), %rdi
000000000001649e	movq	%rbx, %rsi
00000000000164a1	callq	0x1e892                 ## symbol stub for: _objc_msgSend_stret
00000000000164a6	jmp	0x164b8
00000000000164a8	movsd	%xmm1, -0x50(%rbp)
00000000000164ad	xorps	%xmm0, %xmm0
00000000000164b0	movaps	%xmm0, -0x30(%rbp)
00000000000164b4	movaps	%xmm0, -0x40(%rbp)
00000000000164b8	movq	-0x28(%rbp), %rax
00000000000164bc	movq	%rax, 0x18(%rsp)
00000000000164c1	movq	-0x30(%rbp), %rax
00000000000164c5	movq	%rax, 0x10(%rsp)
00000000000164ca	movq	-0x40(%rbp), %rax
00000000000164ce	movq	-0x38(%rbp), %rcx
00000000000164d2	movq	%rcx, 0x8(%rsp)
00000000000164d7	movq	%rax, (%rsp)
00000000000164db	callq	0x1e83e                 ## symbol stub for: _NSIsEmptyRect
00000000000164e0	testb	%al, %al
00000000000164e2	movsd	-0x48(%rbp), %xmm0
00000000000164e7	jne	0x165df
00000000000164ed	xorps	%xmm1, %xmm1
00000000000164f0	ucomisd	%xmm1, %xmm0
00000000000164f4	jbe	0x165df
00000000000164fa	movsd	-0x30(%rbp), %xmm2
00000000000164ff	addsd	%xmm2, %xmm2
0000000000016503	divsd	%xmm0, %xmm2
0000000000016507	mulsd	%xmm2, %xmm0
000000000001650b	ucomisd	0x11e55(%rip), %xmm0
0000000000016513	movsd	-0x50(%rbp), %xmm1
0000000000016518	jbe	0x16538
000000000001651a	mulsd	%xmm2, %xmm1
000000000001651e	ucomisd	0x11e42(%rip), %xmm1
0000000000016526	jbe	0x16538
0000000000016528	movq	0x1ea59(%rip), %rsi     ## Objc selector ref: setSize:
000000000001652f	movq	%r15, %rdi
0000000000016532	callq	*0x12ec8(%rip)          ## Objc message: -[%rdi setSize:]
0000000000016538	movq	0x1f121(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_CATransaction
000000000001653f	movq	0x1ea4a(%rip), %rsi     ## Objc selector ref: begin
0000000000016546	movq	0x12eb3(%rip), %rbx     ## Objc message: +[CATransaction begin]
000000000001654d	callq	*%rbx
000000000001654f	movq	0x1f10a(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_CATransaction
0000000000016556	movq	0x1ea3b(%rip), %rsi     ## Objc selector ref: setDisableActions:
000000000001655d	movl	$0x1, %edx
0000000000016562	callq	*%rbx
0000000000016564	movq	0x12ba5(%rip), %rax     ## literal pool symbol address: _NSZeroRect
000000000001656b	movq	0x18(%rax), %rcx
000000000001656f	movq	%rcx, -0x28(%rbp)
0000000000016573	movq	0x10(%rax), %rcx
0000000000016577	movq	%rcx, -0x30(%rbp)
000000000001657b	movq	(%rax), %rcx
000000000001657e	movq	0x8(%rax), %rax
0000000000016582	movq	%rax, -0x38(%rbp)
0000000000016586	movq	%rcx, -0x40(%rbp)
000000000001658a	movq	0x1e9ef(%rip), %rsi     ## Objc selector ref: size
0000000000016591	movq	%r15, %rdi
0000000000016594	callq	*%rbx
0000000000016596	movsd	%xmm0, -0x30(%rbp)
000000000001659b	movsd	%xmm1, -0x28(%rbp)
00000000000165a0	movq	0x1e9f9(%rip), %rsi     ## Objc selector ref: setFrame:
00000000000165a7	movq	-0x28(%rbp), %rax
00000000000165ab	movq	%rax, 0x18(%rsp)
00000000000165b0	movq	-0x30(%rbp), %rax
00000000000165b4	movq	%rax, 0x10(%rsp)
00000000000165b9	movq	-0x40(%rbp), %rax
00000000000165bd	movq	-0x38(%rbp), %rcx
00000000000165c1	movq	%rcx, 0x8(%rsp)
00000000000165c6	movq	%rax, (%rsp)
00000000000165ca	movq	%r14, %rdi
00000000000165cd	callq	*%rbx
00000000000165cf	movq	0x1f08a(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_CATransaction
00000000000165d6	movq	0x1e9cb(%rip), %rsi     ## Objc selector ref: commit
00000000000165dd	callq	*%rbx
00000000000165df	movq	0x1e972(%rip), %rsi     ## Objc selector ref: setContents:
00000000000165e6	movq	%r14, %rdi
00000000000165e9	movq	%r15, %rdx
00000000000165ec	callq	*0x12e0e(%rip)          ## Objc message: +[CATransaction setContents:]
00000000000165f2	addq	$0x58, %rsp
00000000000165f6	popq	%rbx
00000000000165f7	popq	%r14
00000000000165f9	popq	%r15
00000000000165fb	popq	%rbp
00000000000165fc	retq
00000000000165fd	pushq	%rbp
00000000000165fe	movq	%rsp, %rbp
0000000000016601	pushq	%r14
0000000000016603	pushq	%rbx
0000000000016604	subq	$0x40, %rsp
0000000000016608	movq	%rdi, %rbx
000000000001660b	testq	%rbx, %rbx
000000000001660e	je	0x16637
0000000000016610	movq	0x1e539(%rip), %rdx     ## Objc selector ref: frame
0000000000016617	leaq	-0x30(%rbp), %rdi
000000000001661b	movq	%rbx, %rsi
000000000001661e	callq	0x1e892                 ## symbol stub for: _objc_msgSend_stret
0000000000016623	movsd	-0x20(%rbp), %xmm0
0000000000016628	mulsd	0x11e88(%rip), %xmm0
0000000000016630	cvttsd2si	%xmm0, %r14d
0000000000016635	jmp	0x16645
0000000000016637	xorps	%xmm0, %xmm0
000000000001663a	movaps	%xmm0, -0x20(%rbp)
000000000001663e	movaps	%xmm0, -0x30(%rbp)
0000000000016642	xorl	%r14d, %r14d
0000000000016645	movq	_OBJC_IVAR_$_UAPCaptioningPreviewCloudView._nextCloudLayer(%rip), %rax
000000000001664c	movq	(%rbx,%rax), %rdi
0000000000016650	movq	0x1e959(%rip), %rsi     ## Objc selector ref: position
0000000000016657	callq	*0x12da3(%rip)          ## Objc message: -[%rdi position]
000000000001665d	movsd	%xmm1, -0x38(%rbp)
0000000000016662	callq	0x1e8e0                 ## symbol stub for: _rand
0000000000016667	cltd
0000000000016668	idivl	%r14d
000000000001666b	xorps	%xmm0, %xmm0
000000000001666e	cvtsi2sdl	%edx, %xmm0
0000000000016672	movsd	%xmm0, -0x40(%rbp)
0000000000016677	callq	0x1e8e0                 ## symbol stub for: _rand
000000000001667c	testb	$0x1, %al
000000000001667e	je	0x1668a
0000000000016680	xorps	%xmm0, %xmm0
0000000000016683	movsd	%xmm0, -0x48(%rbp)
0000000000016688	jmp	0x1669c
000000000001668a	movsd	-0x40(%rbp), %xmm0
000000000001668f	movsd	%xmm0, -0x48(%rbp)
0000000000016694	xorps	%xmm0, %xmm0
0000000000016697	movsd	%xmm0, -0x40(%rbp)
000000000001669c	movq	0x1efc5(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_CABasicAnimation
00000000000166a3	movq	0x1e90e(%rip), %rsi     ## Objc selector ref: animationWithKeyPath:
00000000000166aa	leaq	0x1499f(%rip), %rdx     ## Objc cfstring ref: @"position"
00000000000166b1	movq	0x12d48(%rip), %r14     ## Objc message: +[CABasicAnimation animationWithKeyPath:]
00000000000166b8	callq	*%r14
00000000000166bb	movq	%rax, %rbx
00000000000166be	movq	0x1e8fb(%rip), %rsi     ## Objc selector ref: setDuration:
00000000000166c5	movsd	0x11df3(%rip), %xmm0
00000000000166cd	movq	%rbx, %rdi
00000000000166d0	callq	*%r14
00000000000166d3	movq	0x1ef96(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_CAMediaTimingFunction
00000000000166da	movq	0x12ca7(%rip), %rax     ## literal pool symbol address: _kCAMediaTimingFunctionLinear
00000000000166e1	movq	(%rax), %rdx
00000000000166e4	movq	0x1e8dd(%rip), %rsi     ## Objc selector ref: functionWithName:
00000000000166eb	callq	*%r14
00000000000166ee	movq	0x1e8db(%rip), %rsi     ## Objc selector ref: setTimingFunction:
00000000000166f5	movq	%rbx, %rdi
00000000000166f8	movq	%rax, %rdx
00000000000166fb	callq	*%r14
00000000000166fe	movq	0x1ef73(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_NSValue
0000000000016705	movq	0x1e8cc(%rip), %rsi     ## Objc selector ref: valueWithPoint:
000000000001670c	movsd	-0x40(%rbp), %xmm0
0000000000016711	movsd	-0x38(%rbp), %xmm1
0000000000016716	callq	*%r14
0000000000016719	movq	0x1e8c0(%rip), %rsi     ## Objc selector ref: setFromValue:
0000000000016720	movq	%rbx, %rdi
0000000000016723	movq	%rax, %rdx
0000000000016726	callq	*%r14
0000000000016729	movq	0x1ef48(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_NSValue
0000000000016730	movq	0x1e8a1(%rip), %rsi     ## Objc selector ref: valueWithPoint:
0000000000016737	movsd	-0x48(%rbp), %xmm0
000000000001673c	movsd	-0x38(%rbp), %xmm1
0000000000016741	callq	*%r14
0000000000016744	movq	0x1e89d(%rip), %rsi     ## Objc selector ref: setToValue:
000000000001674b	movq	%rbx, %rdi
000000000001674e	movq	%rax, %rdx
0000000000016751	callq	*%r14
0000000000016754	movq	%rbx, %rax
0000000000016757	addq	$0x40, %rsp
000000000001675b	popq	%rbx
000000000001675c	popq	%r14
000000000001675e	popq	%rbp
000000000001675f	retq
0000000000016760	pushq	%rbp
0000000000016761	movq	%rsp, %rbp
0000000000016764	pushq	%r14
0000000000016766	pushq	%rbx
0000000000016767	movq	0x1eefa(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_CABasicAnimation
000000000001676e	movq	0x1e843(%rip), %rsi     ## Objc selector ref: animationWithKeyPath:
0000000000016775	leaq	0x148f4(%rip), %rdx     ## Objc cfstring ref: @"opacity"
000000000001677c	movq	0x12c7d(%rip), %r14     ## Objc message: +[CABasicAnimation animationWithKeyPath:]
0000000000016783	callq	*%r14
0000000000016786	movq	%rax, %rbx
0000000000016789	movq	0x1e830(%rip), %rsi     ## Objc selector ref: setDuration:
0000000000016790	movsd	0x11c20(%rip), %xmm0
0000000000016798	movq	%rbx, %rdi
000000000001679b	callq	*%r14
000000000001679e	movq	0x1eecb(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_CAMediaTimingFunction
00000000000167a5	movq	0x12bdc(%rip), %rax     ## literal pool symbol address: _kCAMediaTimingFunctionLinear
00000000000167ac	movq	(%rax), %rdx
00000000000167af	movq	0x1e812(%rip), %rsi     ## Objc selector ref: functionWithName:
00000000000167b6	callq	*%r14
00000000000167b9	movq	0x1e810(%rip), %rsi     ## Objc selector ref: setTimingFunction:
00000000000167c0	movq	%rbx, %rdi
00000000000167c3	movq	%rax, %rdx
00000000000167c6	callq	*%r14
00000000000167c9	movq	0x1ed90(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_NSNumber
00000000000167d0	movq	0x1ddd1(%rip), %rsi     ## Objc selector ref: numberWithFloat:
00000000000167d7	xorps	%xmm0, %xmm0
00000000000167da	callq	*%r14
00000000000167dd	movq	0x1e7fc(%rip), %rsi     ## Objc selector ref: setFromValue:
00000000000167e4	movq	%rbx, %rdi
00000000000167e7	movq	%rax, %rdx
00000000000167ea	callq	*%r14
00000000000167ed	movq	0x1ed6c(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_NSNumber
00000000000167f4	movq	0x1ddad(%rip), %rsi     ## Objc selector ref: numberWithFloat:
00000000000167fb	movss	0x11b25(%rip), %xmm0
0000000000016803	callq	*%r14
0000000000016806	movq	0x1e7db(%rip), %rsi     ## Objc selector ref: setToValue:
000000000001680d	movq	%rbx, %rdi
0000000000016810	movq	%rax, %rdx
0000000000016813	callq	*%r14
0000000000016816	movq	%rbx, %rax
0000000000016819	popq	%rbx
000000000001681a	popq	%r14
000000000001681c	popq	%rbp
000000000001681d	retq
000000000001681e	pushq	%rbp
000000000001681f	movq	%rsp, %rbp
0000000000016822	pushq	%r14
0000000000016824	pushq	%rbx
0000000000016825	movq	%rdi, %rbx
0000000000016828	movq	_OBJC_IVAR_$_UAPCaptioningPreviewCloudView._animationTimer(%rip), %rax
000000000001682f	cmpq	$0x0, (%rbx,%rax)
0000000000016834	jne	0x16888
0000000000016836	movq	0x1ee43(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_NSTimer
000000000001683d	movq	0x1e7ac(%rip), %rcx     ## Objc selector ref: animate
0000000000016844	movq	0x1e7ad(%rip), %rsi     ## Objc selector ref: scheduledTimerWithTimeInterval:target:selector:userInfo:repeats:
000000000001684b	movq	0x12bae(%rip), %r14     ## Objc message: +[NSTimer scheduledTimerWithTimeInterval:target:selector:userInfo:repeats:]
0000000000016852	movsd	0x11c6e(%rip), %xmm0
000000000001685a	xorl	%r8d, %r8d
000000000001685d	movl	$0x1, %r9d
0000000000016863	movq	%rbx, %rdx
0000000000016866	callq	*%r14
0000000000016869	movq	0x1d9f8(%rip), %rsi     ## Objc selector ref: retain
0000000000016870	movq	%rax, %rdi
0000000000016873	callq	*%r14
0000000000016876	movq	_OBJC_IVAR_$_UAPCaptioningPreviewCloudView._animationTimer(%rip), %rdx
000000000001687d	movq	%rax, %rdi
0000000000016880	movq	%rbx, %rsi
0000000000016883	callq	0x1e868                 ## symbol stub for: _objc_assign_ivar
0000000000016888	movq	0x1db39(%rip), %rsi     ## Objc selector ref: window
000000000001688f	movq	0x12b6a(%rip), %r14     ## Objc message: -[%rdi window]
0000000000016896	movq	%rbx, %rdi
0000000000016899	callq	*%r14
000000000001689c	movq	0x1e75d(%rip), %rsi     ## Objc selector ref: backingScaleFactor
00000000000168a3	movq	%rax, %rdi
00000000000168a6	callq	*%r14
00000000000168a9	movq	_OBJC_IVAR_$_UAPCaptioningPreviewCloudView._maskLayer(%rip), %rax
00000000000168b0	movq	(%rbx,%rax), %rdi
00000000000168b4	movq	0x1e74d(%rip), %rsi     ## Objc selector ref: setContentsScale:
00000000000168bb	callq	*%r14
00000000000168be	movq	0x1e72b(%rip), %rsi     ## Objc selector ref: animate
00000000000168c5	movq	%rbx, %rdi
00000000000168c8	movq	%r14, %rax
00000000000168cb	popq	%rbx
00000000000168cc	popq	%r14
00000000000168ce	popq	%rbp
00000000000168cf	jmpq	*%rax
00000000000168d1	pushq	%rbp
00000000000168d2	movq	%rsp, %rbp
00000000000168d5	pushq	%r15
00000000000168d7	pushq	%r14
00000000000168d9	pushq	%rbx
00000000000168da	pushq	%rax
00000000000168db	movq	%rdi, %rbx
00000000000168de	movq	0x1e72b(%rip), %rsi     ## Objc selector ref: slideAnimation
00000000000168e5	movq	0x12b14(%rip), %r15     ## Objc message: -[%rdi slideAnimation]
00000000000168ec	callq	*%r15
00000000000168ef	movq	%rax, %r14
00000000000168f2	movq	0x1e71f(%rip), %rsi     ## Objc selector ref: fadeAnimation
00000000000168f9	movq	%rbx, %rdi
00000000000168fc	callq	*%r15
00000000000168ff	movq	0x1e71a(%rip), %rsi     ## Objc selector ref: animateWithSlideAnimation:fadeAnimation:
0000000000016906	movq	%rbx, %rdi
0000000000016909	movq	%r14, %rdx
000000000001690c	movq	%rax, %rcx
000000000001690f	movq	%r15, %rax
0000000000016912	addq	$0x8, %rsp
0000000000016916	popq	%rbx
0000000000016917	popq	%r14
0000000000016919	popq	%r15
000000000001691b	popq	%rbp
000000000001691c	jmpq	*%rax
000000000001691e	pushq	%rbp
000000000001691f	movq	%rsp, %rbp
0000000000016922	pushq	%r15
0000000000016924	pushq	%r14
0000000000016926	pushq	%r12
0000000000016928	pushq	%rbx
0000000000016929	movq	%rcx, %r14
000000000001692c	movq	%rdx, %r15
000000000001692f	movq	%rdi, %rbx
0000000000016932	movq	0x1e6ef(%rip), %rsi     ## Objc selector ref: nextCloudImage
0000000000016939	movq	0x12ac0(%rip), %r12     ## Objc message: -[%rdi nextCloudImage]
0000000000016940	callq	*%r12
0000000000016943	movq	_OBJC_IVAR_$_UAPCaptioningPreviewCloudView._nextCloudLayer(%rip), %rcx
000000000001694a	movq	(%rbx,%rcx), %rcx
000000000001694e	movq	0x1e6db(%rip), %rsi     ## Objc selector ref: setImage:forLayer:
0000000000016955	movq	%rbx, %rdi
0000000000016958	movq	%rax, %rdx
000000000001695b	callq	*%r12
000000000001695e	movq	0x1e6d3(%rip), %rsi     ## Objc selector ref: setupForSlideAnimation:fadeAnimation:
0000000000016965	movq	%rbx, %rdi
0000000000016968	movq	%r15, %rdx
000000000001696b	movq	%r14, %rcx
000000000001696e	callq	*%r12
0000000000016971	movq	0x1e6c8(%rip), %rsi     ## Objc selector ref: runSlideAnimation:fadeAnimation:
0000000000016978	movq	%rbx, %rdi
000000000001697b	movq	%r15, %rdx
000000000001697e	movq	%r14, %rcx
0000000000016981	callq	*%r12
0000000000016984	movq	0x1e6bd(%rip), %rsi     ## Objc selector ref: cleanupAfterSlideAnimation:fadeAnimation:
000000000001698b	movq	%rbx, %rdi
000000000001698e	movq	%r15, %rdx
0000000000016991	movq	%r14, %rcx
0000000000016994	callq	*%r12
0000000000016997	movq	0x1e6b2(%rip), %rsi     ## Objc selector ref: swapCloudLayerWithNextCloudLayer
000000000001699e	movq	%rbx, %rdi
00000000000169a1	movq	%r12, %rax
00000000000169a4	popq	%rbx
00000000000169a5	popq	%r12
00000000000169a7	popq	%r14
00000000000169a9	popq	%r15
00000000000169ab	popq	%rbp
00000000000169ac	jmpq	*%rax
00000000000169ae	pushq	%rbp
00000000000169af	movq	%rsp, %rbp
00000000000169b2	pushq	%r15
00000000000169b4	pushq	%r14
00000000000169b6	pushq	%r13
00000000000169b8	pushq	%r12
00000000000169ba	pushq	%rbx
00000000000169bb	pushq	%rax
00000000000169bc	movq	%rcx, %r14
00000000000169bf	movq	%rdx, %r15
00000000000169c2	movq	%rdi, %rbx
00000000000169c5	movq	0x1ec94(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_CATransaction
00000000000169cc	movq	0x1e5bd(%rip), %rsi     ## Objc selector ref: begin
00000000000169d3	movq	0x12a26(%rip), %r13     ## Objc message: +[CATransaction begin]
00000000000169da	callq	*%r13
00000000000169dd	movq	0x1ec7c(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_CATransaction
00000000000169e4	movq	0x1e5ad(%rip), %rsi     ## Objc selector ref: setDisableActions:
00000000000169eb	movl	$0x1, %edx
00000000000169f0	callq	*%r13
00000000000169f3	movq	_OBJC_IVAR_$_UAPCaptioningPreviewCloudView._nextCloudLayer(%rip), %r12
00000000000169fa	movq	(%rbx,%r12), %rdx
00000000000169fe	movq	0x1e653(%rip), %rsi     ## Objc selector ref: setupLayer:forSlideAnimation:
0000000000016a05	movq	%rbx, %rdi
0000000000016a08	movq	%r15, %rcx
0000000000016a0b	callq	*%r13
0000000000016a0e	movq	_OBJC_IVAR_$_UAPCaptioningPreviewCloudView._cloudLayer(%rip), %rax
0000000000016a15	movq	(%rbx,%rax), %rdx
0000000000016a19	movq	(%rbx,%r12), %rcx
0000000000016a1d	movq	0x1e63c(%rip), %rsi     ## Objc selector ref: setupCurrentLayer:nextLayer:forFadeAnimation:
0000000000016a24	movq	%rbx, %rdi
0000000000016a27	movq	%r14, %r8
0000000000016a2a	callq	*%r13
0000000000016a2d	movq	0x1ec2c(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_CATransaction
0000000000016a34	movq	0x1e56d(%rip), %rsi     ## Objc selector ref: commit
0000000000016a3b	movq	%r13, %rax
0000000000016a3e	addq	$0x8, %rsp
0000000000016a42	popq	%rbx
0000000000016a43	popq	%r12
0000000000016a45	popq	%r13
0000000000016a47	popq	%r14
0000000000016a49	popq	%r15
0000000000016a4b	popq	%rbp
0000000000016a4c	jmpq	*%rax
0000000000016a4e	pushq	%rbp
0000000000016a4f	movq	%rsp, %rbp
0000000000016a52	pushq	%r15
0000000000016a54	pushq	%r14
0000000000016a56	pushq	%r13
0000000000016a58	pushq	%r12
0000000000016a5a	pushq	%rbx
0000000000016a5b	subq	$0x28, %rsp
0000000000016a5f	movq	%rcx, %rbx
0000000000016a62	movq	%rbx, -0x48(%rbp)
0000000000016a66	movq	%rdx, %r12
0000000000016a69	movq	%rdi, -0x50(%rbp)
0000000000016a6d	movq	0x128e4(%rip), %rax     ## literal pool symbol address: ___stack_chk_guard
0000000000016a74	movq	(%rax), %rax
0000000000016a77	movq	%rax, -0x30(%rbp)
0000000000016a7b	movq	0x1ec06(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_CAAnimationGroup
0000000000016a82	movq	0x1e5df(%rip), %rsi     ## Objc selector ref: animation
0000000000016a89	movq	0x12970(%rip), %r14     ## Objc message: +[CAAnimationGroup animation]
0000000000016a90	callq	*%r14
0000000000016a93	movq	%rax, %r15
0000000000016a96	leaq	-0x40(%rbp), %r13
0000000000016a9a	movq	%rbx, %rdi
0000000000016a9d	movq	%r13, %rsi
0000000000016aa0	callq	0x1e86e                 ## symbol stub for: _objc_assign_strongCast
0000000000016aa5	leaq	-0x38(%rbp), %rsi
0000000000016aa9	movq	%r12, %rdi
0000000000016aac	callq	0x1e86e                 ## symbol stub for: _objc_assign_strongCast
0000000000016ab1	movq	0x1ea30(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_NSArray
0000000000016ab8	movq	0x1da61(%rip), %rsi     ## Objc selector ref: arrayWithObjects:count:
0000000000016abf	movl	$0x2, %ecx
0000000000016ac4	movq	%r13, %rdx
0000000000016ac7	callq	*%r14
0000000000016aca	movq	0x1e59f(%rip), %rsi     ## Objc selector ref: setAnimations:
0000000000016ad1	movq	%r15, %rdi
0000000000016ad4	movq	%rax, %rdx
0000000000016ad7	callq	*%r14
0000000000016ada	movq	0x1e4df(%rip), %rsi     ## Objc selector ref: setDuration:
0000000000016ae1	movsd	0x119d7(%rip), %xmm0
0000000000016ae9	movq	%r15, %rdi
0000000000016aec	callq	*%r14
0000000000016aef	movq	0x1eb6a(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_CATransaction
0000000000016af6	movq	0x1e493(%rip), %rsi     ## Objc selector ref: begin
0000000000016afd	callq	*%r14
0000000000016b00	movq	_OBJC_IVAR_$_UAPCaptioningPreviewCloudView._nextCloudLayer(%rip), %r15
0000000000016b07	movq	-0x50(%rbp), %rbx
0000000000016b0b	movq	(%rbx,%r15), %rdi
0000000000016b0f	movq	0x1e562(%rip), %rsi     ## Objc selector ref: addAnimation:forKey:
0000000000016b16	leaq	0x14573(%rip), %rcx     ## Objc cfstring ref: @"positionAnimation"
0000000000016b1d	movq	%r12, %rdx
0000000000016b20	callq	*%r14
0000000000016b23	movq	(%rbx,%r15), %rdi
0000000000016b27	movq	0x1e54a(%rip), %rsi     ## Objc selector ref: addAnimation:forKey:
0000000000016b2e	leaq	0x1457b(%rip), %rcx     ## Objc cfstring ref: @"opacityAnimation"
0000000000016b35	movq	-0x48(%rbp), %rdx
0000000000016b39	callq	*%r14
0000000000016b3c	movq	0x1eb1d(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_CATransaction
0000000000016b43	movq	0x1e45e(%rip), %rsi     ## Objc selector ref: commit
0000000000016b4a	callq	*%r14
0000000000016b4d	movq	0x12804(%rip), %rax     ## literal pool symbol address: ___stack_chk_guard
0000000000016b54	movq	(%rax), %rax
0000000000016b57	cmpq	-0x30(%rbp), %rax
0000000000016b5b	jne	0x16b6c
0000000000016b5d	addq	$0x28, %rsp
0000000000016b61	popq	%rbx
0000000000016b62	popq	%r12
0000000000016b64	popq	%r13
0000000000016b66	popq	%r14
0000000000016b68	popq	%r15
0000000000016b6a	popq	%rbp
0000000000016b6b	retq
0000000000016b6c	callq	0x1e8b6                 ## symbol stub for: ___stack_chk_fail
0000000000016b71	pushq	%rbp
0000000000016b72	movq	%rsp, %rbp
0000000000016b75	pushq	%r15
0000000000016b77	pushq	%r14
0000000000016b79	pushq	%r13
0000000000016b7b	pushq	%r12
0000000000016b7d	pushq	%rbx
0000000000016b7e	pushq	%rax
0000000000016b7f	movq	%rcx, %r15
0000000000016b82	movq	%rdx, %r14
0000000000016b85	movq	%rdi, %rbx
0000000000016b88	movq	0x1ead1(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_CATransaction
0000000000016b8f	movq	0x1e3fa(%rip), %rsi     ## Objc selector ref: begin
0000000000016b96	movq	0x12863(%rip), %r13     ## Objc message: +[CATransaction begin]
0000000000016b9d	callq	*%r13
0000000000016ba0	movq	0x1eab9(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_CATransaction
0000000000016ba7	movq	0x1e3ea(%rip), %rsi     ## Objc selector ref: setDisableActions:
0000000000016bae	movl	$0x1, %edx
0000000000016bb3	callq	*%r13
0000000000016bb6	movq	_OBJC_IVAR_$_UAPCaptioningPreviewCloudView._cloudLayer(%rip), %rax
0000000000016bbd	movq	(%rbx,%rax), %rdx
0000000000016bc1	movq	_OBJC_IVAR_$_UAPCaptioningPreviewCloudView._nextCloudLayer(%rip), %r12
0000000000016bc8	movq	(%rbx,%r12), %rcx
0000000000016bcc	movq	0x1e4ad(%rip), %rsi     ## Objc selector ref: cleanupCurrentLayer:nextLayer:afterFadeAnimation:
0000000000016bd3	movq	%rbx, %rdi
0000000000016bd6	movq	%r15, %r8
0000000000016bd9	callq	*%r13
0000000000016bdc	movq	(%rbx,%r12), %rdx
0000000000016be0	movq	0x1e4a1(%rip), %rsi     ## Objc selector ref: cleanupLayer:afterSlideAnimation:
0000000000016be7	movq	%rbx, %rdi
0000000000016bea	movq	%r14, %rcx
0000000000016bed	callq	*%r13
0000000000016bf0	movq	0x1ea69(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_CATransaction
0000000000016bf7	movq	0x1e3aa(%rip), %rsi     ## Objc selector ref: commit
0000000000016bfe	movq	%r13, %rax
0000000000016c01	addq	$0x8, %rsp
0000000000016c05	popq	%rbx
0000000000016c06	popq	%r12
0000000000016c08	popq	%r13
0000000000016c0a	popq	%r14
0000000000016c0c	popq	%r15
0000000000016c0e	popq	%rbp
0000000000016c0f	jmpq	*%rax
0000000000016c11	pushq	%rbp
0000000000016c12	movq	%rsp, %rbp
0000000000016c15	pushq	%r14
0000000000016c17	pushq	%rbx
0000000000016c18	movq	%rdx, %rbx
0000000000016c1b	movq	0x1e46e(%rip), %rsi     ## Objc selector ref: fromValue
0000000000016c22	movq	0x127d7(%rip), %r14     ## Objc message: +[CATransaction fromValue]
0000000000016c29	movq	%rcx, %rdi
0000000000016c2c	callq	*%r14
0000000000016c2f	movq	0x1e462(%rip), %rsi     ## Objc selector ref: pointValue
0000000000016c36	movq	%rax, %rdi
0000000000016c39	callq	*%r14
0000000000016c3c	movq	0x1e45d(%rip), %rsi     ## Objc selector ref: setPosition:
0000000000016c43	movq	%rbx, %rdi
0000000000016c46	movq	%r14, %rax
0000000000016c49	popq	%rbx
0000000000016c4a	popq	%r14
0000000000016c4c	popq	%rbp
0000000000016c4d	jmpq	*%rax
0000000000016c4f	pushq	%rbp
0000000000016c50	movq	%rsp, %rbp
0000000000016c53	pushq	%r14
0000000000016c55	pushq	%rbx
0000000000016c56	movq	%rdx, %rbx
0000000000016c59	movq	0x1e448(%rip), %rsi     ## Objc selector ref: toValue
0000000000016c60	movq	0x12799(%rip), %r14     ## Objc message: -[%rdi toValue]
0000000000016c67	movq	%rcx, %rdi
0000000000016c6a	callq	*%r14
0000000000016c6d	movq	0x1e424(%rip), %rsi     ## Objc selector ref: pointValue
0000000000016c74	movq	%rax, %rdi
0000000000016c77	callq	*%r14
0000000000016c7a	movq	0x1e41f(%rip), %rsi     ## Objc selector ref: setPosition:
0000000000016c81	movq	%rbx, %rdi
0000000000016c84	movq	%r14, %rax
0000000000016c87	popq	%rbx
0000000000016c88	popq	%r14
0000000000016c8a	popq	%rbp
0000000000016c8b	jmpq	*%rax
0000000000016c8d	pushq	%rbp
0000000000016c8e	movq	%rsp, %rbp
0000000000016c91	pushq	%r15
0000000000016c93	pushq	%r14
0000000000016c95	pushq	%rbx
0000000000016c96	pushq	%rax
0000000000016c97	movq	%rcx, %rbx
0000000000016c9a	movq	%rdx, %r14
0000000000016c9d	movq	0x1e40c(%rip), %rsi     ## Objc selector ref: setOpacity:
0000000000016ca4	movq	0x12755(%rip), %r15     ## Objc message: -[%rdi setOpacity:]
0000000000016cab	xorps	%xmm0, %xmm0
0000000000016cae	movq	%rbx, %rdi
0000000000016cb1	callq	*%r15
0000000000016cb4	movq	0x1e2a5(%rip), %rsi     ## Objc selector ref: setZPosition:
0000000000016cbb	movsd	0x1162d(%rip), %xmm0
0000000000016cc3	movq	%rbx, %rdi
0000000000016cc6	callq	*%r15
0000000000016cc9	movq	0x1e3e0(%rip), %rsi     ## Objc selector ref: setOpacity:
0000000000016cd0	movss	0x11650(%rip), %xmm0
0000000000016cd8	movq	%r14, %rdi
0000000000016cdb	callq	*%r15
0000000000016cde	movq	0x1e27b(%rip), %rsi     ## Objc selector ref: setZPosition:
0000000000016ce5	xorps	%xmm0, %xmm0
0000000000016ce8	movq	%r14, %rdi
0000000000016ceb	movq	%r15, %rax
0000000000016cee	addq	$0x8, %rsp
0000000000016cf2	popq	%rbx
0000000000016cf3	popq	%r14
0000000000016cf5	popq	%r15
0000000000016cf7	popq	%rbp
0000000000016cf8	jmpq	*%rax
0000000000016cfa	pushq	%rbp
0000000000016cfb	movq	%rsp, %rbp
0000000000016cfe	movq	0x1e3ab(%rip), %rsi     ## Objc selector ref: setOpacity:
0000000000016d05	movss	0x1161b(%rip), %xmm0
0000000000016d0d	movq	%rcx, %rdi
0000000000016d10	popq	%rbp
0000000000016d11	jmpq	*0x126e9(%rip)          ## Objc message: -[%rdi setOpacity:]
0000000000016d17	pushq	%rbp
0000000000016d18	movq	%rsp, %rbp
0000000000016d1b	pushq	%r14
0000000000016d1d	pushq	%rbx
0000000000016d1e	movq	%rdi, %rbx
0000000000016d21	movq	_OBJC_IVAR_$_UAPCaptioningPreviewCloudView._cloudLayer(%rip), %rdx
0000000000016d28	movq	(%rbx,%rdx), %r14
0000000000016d2c	movq	_OBJC_IVAR_$_UAPCaptioningPreviewCloudView._nextCloudLayer(%rip), %rax
0000000000016d33	movq	(%rbx,%rax), %rdi
0000000000016d37	movq	%rbx, %rsi
0000000000016d3a	callq	0x1e868                 ## symbol stub for: _objc_assign_ivar
0000000000016d3f	movq	_OBJC_IVAR_$_UAPCaptioningPreviewCloudView._nextCloudLayer(%rip), %rdx
0000000000016d46	movq	%r14, %rdi
0000000000016d49	movq	%rbx, %rsi
0000000000016d4c	popq	%rbx
0000000000016d4d	popq	%r14
0000000000016d4f	popq	%rbp
0000000000016d50	jmp	0x1e868                 ## symbol stub for: _objc_assign_ivar
0000000000016d55	pushq	%rbp
0000000000016d56	movq	%rsp, %rbp
0000000000016d59	pushq	%r15
0000000000016d5b	pushq	%r14
0000000000016d5d	pushq	%rbx
0000000000016d5e	subq	$0x18, %rsp
0000000000016d62	movq	%rdi, %r14
0000000000016d65	movq	0x1e794(%rip), %rbx     ## Objc class ref: _OBJC_CLASS_$_NSBundle
0000000000016d6c	movq	0x1e795(%rip), %rdi     ## Objc class ref: UniversalAccessPref
0000000000016d73	movq	0x1d346(%rip), %rsi     ## Objc selector ref: class
0000000000016d7a	movq	0x1267f(%rip), %r15     ## Objc message: +[UniversalAccessPref class]
0000000000016d81	callq	*%r15
0000000000016d84	movq	0x1d42d(%rip), %rsi     ## Objc selector ref: bundleForClass:
0000000000016d8b	movq	%rbx, %rdi
0000000000016d8e	movq	%rax, %rdx
0000000000016d91	callq	*%r15
0000000000016d94	movq	%r14, -0x28(%rbp)
0000000000016d98	movq	0x1e9d9(%rip), %rcx     ## Objc class ref: UAPDescriptionsViewController
0000000000016d9f	movq	%rcx, -0x20(%rbp)
0000000000016da3	movq	0x1d49e(%rip), %rsi     ## Objc selector ref: initWithNibName:bundle:
0000000000016daa	leaq	0x1431f(%rip), %rdx     ## Objc cfstring ref: @"Descriptions"
0000000000016db1	leaq	-0x28(%rbp), %rdi
0000000000016db5	movq	%rax, %rcx
0000000000016db8	callq	0x1e88c                 ## Objc message: -[[%rdi super] initWithNibName:bundle:]
0000000000016dbd	movq	%rax, %rbx
0000000000016dc0	movq	0x123b1(%rip), %rax     ## literal pool symbol address: _UADomainSoundSettingsDidChangeNotification
0000000000016dc7	movq	(%rax), %rdi
0000000000016dca	leaq	_OBJC_IVAR_$_UAPOptionsViewController._notificationOfInterest(%rip), %rax
0000000000016dd1	movq	(%rax), %rdx
0000000000016dd4	movq	%rbx, %rsi
0000000000016dd7	callq	0x1e868                 ## symbol stub for: _objc_assign_ivar
0000000000016ddc	movq	%rbx, %rax
0000000000016ddf	addq	$0x18, %rsp
0000000000016de3	popq	%rbx
0000000000016de4	popq	%r14
0000000000016de6	popq	%r15
0000000000016de8	popq	%rbp
0000000000016de9	retq
0000000000016dea	pushq	%rbp
0000000000016deb	movq	%rsp, %rbp
0000000000016dee	movq	_OBJC_IVAR_$_UAPDescriptionsViewController._preferVideoDescriptionsCheckbox(%rip), %rax
0000000000016df5	movq	(%rdi,%rax), %rdi
0000000000016df9	movq	0x1d8a8(%rip), %rsi     ## Objc selector ref: state
0000000000016e00	callq	*0x125fa(%rip)          ## Objc message: -[%rdi state]
0000000000016e06	cmpq	$0x1, %rax
0000000000016e0a	movq	0x12587(%rip), %rax     ## literal pool symbol address: _kCFBooleanFalse
0000000000016e11	cmoveq	0x12587(%rip), %rax     ## literal pool symbol address: _kCFBooleanTrue
0000000000016e19	movq	(%rax), %rdi
0000000000016e1c	popq	%rbp
0000000000016e1d	jmp	0x1e42a                 ## symbol stub for: _MAAudibleMediaPrefSetPreferDescriptiveVideo
0000000000016e22	pushq	%rbp
0000000000016e23	movq	%rsp, %rbp
0000000000016e26	pushq	%r15
0000000000016e28	pushq	%r14
0000000000016e2a	pushq	%rbx
0000000000016e2b	subq	$0x18, %rsp
0000000000016e2f	movq	%rdi, %rbx
0000000000016e32	movq	%rbx, -0x28(%rbp)
0000000000016e36	movq	0x1e93b(%rip), %rax     ## Objc class ref: UAPDescriptionsViewController
0000000000016e3d	movq	%rax, -0x20(%rbp)
0000000000016e41	movq	0x1d8f0(%rip), %rsi     ## Objc selector ref: readPreferences:
0000000000016e48	leaq	-0x28(%rbp), %rdi
0000000000016e4c	callq	0x1e88c                 ## Objc message: -[[%rdi super] readPreferences:]
0000000000016e51	callq	0x1e424                 ## symbol stub for: _MAAudibleMediaPrefCopyPreferDescriptiveVideo
0000000000016e56	movq	%rax, %r15
0000000000016e59	testq	%r15, %r15
0000000000016e5c	movq	_OBJC_IVAR_$_UAPDescriptionsViewController._preferVideoDescriptionsCheckbox(%rip), %rax
0000000000016e63	movq	(%rbx,%rax), %r14
0000000000016e67	je	0x16e93
0000000000016e69	movq	%r15, %rdi
0000000000016e6c	callq	0x1e508                 ## symbol stub for: _CFBooleanGetValue
0000000000016e71	testb	%al, %al
0000000000016e73	setne	%al
0000000000016e76	movzbl	%al, %edx
0000000000016e79	movq	0x1d5c0(%rip), %rsi     ## Objc selector ref: setState:
0000000000016e80	movq	%r14, %rdi
0000000000016e83	callq	*0x12577(%rip)          ## Objc message: -[%rdi setState:]
0000000000016e89	movq	%r15, %rdi
0000000000016e8c	callq	0x1e562                 ## symbol stub for: _CFRelease
0000000000016e91	jmp	0x16ea5
0000000000016e93	movq	0x1d5a6(%rip), %rsi     ## Objc selector ref: setState:
0000000000016e9a	xorl	%edx, %edx
0000000000016e9c	movq	%r14, %rdi
0000000000016e9f	callq	*0x1255b(%rip)          ## Objc message: -[%rdi setState:]
0000000000016ea5	addq	$0x18, %rsp
0000000000016ea9	popq	%rbx
0000000000016eaa	popq	%r14
0000000000016eac	popq	%r15
0000000000016eae	popq	%rbp
0000000000016eaf	retq
0000000000016eb0	pushq	%rbp
0000000000016eb1	movq	%rsp, %rbp
0000000000016eb4	pushq	%r15
0000000000016eb6	pushq	%r14
0000000000016eb8	pushq	%rbx
0000000000016eb9	pushq	%rax
0000000000016eba	movq	%rdx, %r14
0000000000016ebd	movq	0x1e6fc(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_NSNumberFormatter
0000000000016ec4	movq	0x1d29d(%rip), %rsi     ## Objc selector ref: alloc
0000000000016ecb	movq	0x1252e(%rip), %r15     ## Objc message: +[NSNumberFormatter alloc]
0000000000016ed2	callq	*%r15
0000000000016ed5	movq	0x1d394(%rip), %rsi     ## Objc selector ref: init
0000000000016edc	movq	%rax, %rdi
0000000000016edf	callq	*%r15
0000000000016ee2	movq	0x1d21f(%rip), %rsi     ## Objc selector ref: autorelease
0000000000016ee9	movq	%rax, %rdi
0000000000016eec	callq	*%r15
0000000000016eef	movq	%rax, %rbx
0000000000016ef2	movq	0x1d92f(%rip), %rsi     ## Objc selector ref: setNumberStyle:
0000000000016ef9	movl	$0x1, %edx
0000000000016efe	movq	%rbx, %rdi
0000000000016f01	callq	*%r15
0000000000016f04	movq	0x1d945(%rip), %rsi     ## Objc selector ref: setMaximumFractionDigits:
0000000000016f0b	xorl	%edx, %edx
0000000000016f0d	movq	%rbx, %rdi
0000000000016f10	callq	*%r15
0000000000016f13	movq	0x1e646(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_NSNumber
0000000000016f1a	movq	0x1d7af(%rip), %rsi     ## Objc selector ref: numberWithInteger:
0000000000016f21	movq	%r14, %rdx
0000000000016f24	callq	*%r15
0000000000016f27	movq	0x1d9ea(%rip), %rsi     ## Objc selector ref: stringFromNumber:
0000000000016f2e	movq	%rbx, %rdi
0000000000016f31	movq	%rax, %rdx
0000000000016f34	callq	*%r15
0000000000016f37	movq	%rax, %r14
0000000000016f3a	movq	0x1e5bf(%rip), %rbx     ## Objc class ref: _OBJC_CLASS_$_NSBundle
0000000000016f41	movq	0x1e5c0(%rip), %rdi     ## Objc class ref: UniversalAccessPref
0000000000016f48	movq	0x1d171(%rip), %rsi     ## Objc selector ref: class
0000000000016f4f	callq	*%r15
0000000000016f52	movq	0x1d25f(%rip), %rsi     ## Objc selector ref: bundleForClass:
0000000000016f59	movq	%rbx, %rdi
0000000000016f5c	movq	%rax, %rdx
0000000000016f5f	callq	*%r15
0000000000016f62	movq	0x1d257(%rip), %rsi     ## Objc selector ref: localizedStringForKey:value:table:
0000000000016f69	leaq	0x14180(%rip), %rdx     ## Objc cfstring ref: @"switch.button.generic.format"
0000000000016f70	leaq	0x13199(%rip), %rcx     ## Objc cfstring ref: @""
0000000000016f77	xorl	%r8d, %r8d
0000000000016f7a	movq	%rax, %rdi
0000000000016f7d	callq	*%r15
0000000000016f80	movq	%rax, %rcx
0000000000016f83	movq	0x1e58e(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_NSString
0000000000016f8a	movq	0x1d26f(%rip), %rsi     ## Objc selector ref: stringWithFormat:
0000000000016f91	xorl	%eax, %eax
0000000000016f93	movq	%rcx, %rdx
0000000000016f96	movq	%r14, %rcx
0000000000016f99	movq	%r15, %r8
0000000000016f9c	addq	$0x8, %rsp
0000000000016fa0	popq	%rbx
0000000000016fa1	popq	%r14
0000000000016fa3	popq	%r15
0000000000016fa5	popq	%rbp
0000000000016fa6	jmpq	*%r8
0000000000016fa9	pushq	%rbp
0000000000016faa	movq	%rsp, %rbp
0000000000016fad	pushq	%r15
0000000000016faf	pushq	%r14
0000000000016fb1	pushq	%rbx
0000000000016fb2	pushq	%rax
0000000000016fb3	movq	%rdx, %rbx
0000000000016fb6	cmpq	$0x1, %rbx
0000000000016fba	jne	0x16ffb
0000000000016fbc	movq	0x1e53d(%rip), %rbx     ## Objc class ref: _OBJC_CLASS_$_NSBundle
0000000000016fc3	movq	0x1e53e(%rip), %rdi     ## Objc class ref: UniversalAccessPref
0000000000016fca	movq	0x1d0ef(%rip), %rsi     ## Objc selector ref: class
0000000000016fd1	movq	0x12428(%rip), %r14     ## Objc message: +[UniversalAccessPref class]
0000000000016fd8	callq	*%r14
0000000000016fdb	movq	0x1d1d6(%rip), %rsi     ## Objc selector ref: bundleForClass:
0000000000016fe2	movq	%rbx, %rdi
0000000000016fe5	movq	%rax, %rdx
0000000000016fe8	callq	*%r14
0000000000016feb	movq	0x1d1ce(%rip), %rsi     ## Objc selector ref: localizedStringForKey:value:table:
0000000000016ff2	leaq	0x14137(%rip), %rdx     ## Objc cfstring ref: @"switch.button.rightMouse.displayName"
0000000000016ff9	jmp	0x1703d
0000000000016ffb	testq	%rbx, %rbx
0000000000016ffe	jne	0x17059
0000000000017000	movq	0x1e4f9(%rip), %rbx     ## Objc class ref: _OBJC_CLASS_$_NSBundle
0000000000017007	movq	0x1e4fa(%rip), %rdi     ## Objc class ref: UniversalAccessPref
000000000001700e	movq	0x1d0ab(%rip), %rsi     ## Objc selector ref: class
0000000000017015	movq	0x123e4(%rip), %r14     ## Objc message: +[UniversalAccessPref class]
000000000001701c	callq	*%r14
000000000001701f	movq	0x1d192(%rip), %rsi     ## Objc selector ref: bundleForClass:
0000000000017026	movq	%rbx, %rdi
0000000000017029	movq	%rax, %rdx
000000000001702c	callq	*%r14
000000000001702f	movq	0x1d18a(%rip), %rsi     ## Objc selector ref: localizedStringForKey:value:table:
0000000000017036	leaq	0x140d3(%rip), %rdx     ## Objc cfstring ref: @"switch.button.leftMouse.displayName"
000000000001703d	leaq	0x130cc(%rip), %rcx     ## Objc cfstring ref: @""
0000000000017044	xorl	%r8d, %r8d
0000000000017047	movq	%rax, %rdi
000000000001704a	movq	%r14, %rax
000000000001704d	addq	$0x8, %rsp
0000000000017051	popq	%rbx
0000000000017052	popq	%r14
0000000000017054	popq	%r15
0000000000017056	popq	%rbp
0000000000017057	jmpq	*%rax
0000000000017059	movq	0x1e560(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_NSNumberFormatter
0000000000017060	movq	0x1d101(%rip), %rsi     ## Objc selector ref: alloc
0000000000017067	movq	0x12392(%rip), %r15     ## Objc message: +[NSNumberFormatter alloc]
000000000001706e	callq	*%r15
0000000000017071	movq	0x1d1f8(%rip), %rsi     ## Objc selector ref: init
0000000000017078	movq	%rax, %rdi
000000000001707b	callq	*%r15
000000000001707e	movq	0x1d083(%rip), %rsi     ## Objc selector ref: autorelease
0000000000017085	movq	%rax, %rdi
0000000000017088	callq	*%r15
000000000001708b	movq	%rax, %r14
000000000001708e	movq	0x1d793(%rip), %rsi     ## Objc selector ref: setNumberStyle:
0000000000017095	movl	$0x1, %edx
000000000001709a	movq	%r14, %rdi
000000000001709d	callq	*%r15
00000000000170a0	movq	0x1d7a9(%rip), %rsi     ## Objc selector ref: setMaximumFractionDigits:
00000000000170a7	xorl	%edx, %edx
00000000000170a9	movq	%r14, %rdi
00000000000170ac	callq	*%r15
00000000000170af	movq	0x1e4aa(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_NSNumber
00000000000170b6	movq	0x1d613(%rip), %rsi     ## Objc selector ref: numberWithInteger:
00000000000170bd	movq	%rbx, %rdx
00000000000170c0	callq	*%r15
00000000000170c3	movq	0x1d84e(%rip), %rsi     ## Objc selector ref: stringFromNumber:
00000000000170ca	movq	%r14, %rdi
00000000000170cd	movq	%rax, %rdx
00000000000170d0	callq	*%r15
00000000000170d3	movq	%rax, %r14
00000000000170d6	movq	0x1e423(%rip), %rbx     ## Objc class ref: _OBJC_CLASS_$_NSBundle
00000000000170dd	movq	0x1e424(%rip), %rdi     ## Objc class ref: UniversalAccessPref
00000000000170e4	movq	0x1cfd5(%rip), %rsi     ## Objc selector ref: class
00000000000170eb	callq	*%r15
00000000000170ee	movq	0x1d0c3(%rip), %rsi     ## Objc selector ref: bundleForClass:
00000000000170f5	movq	%rbx, %rdi
00000000000170f8	movq	%rax, %rdx
00000000000170fb	callq	*%r15
00000000000170fe	movq	0x1d0bb(%rip), %rsi     ## Objc selector ref: localizedStringForKey:value:table:
0000000000017105	leaq	0x14044(%rip), %rdx     ## Objc cfstring ref: @"switch.button.otherMouse.format"
000000000001710c	leaq	0x12ffd(%rip), %rcx     ## Objc cfstring ref: @""
0000000000017113	xorl	%r8d, %r8d
0000000000017116	movq	%rax, %rdi
0000000000017119	callq	*%r15
000000000001711c	movq	%rax, %rcx
000000000001711f	movq	0x1e3f2(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_NSString
0000000000017126	movq	0x1d0d3(%rip), %rsi     ## Objc selector ref: stringWithFormat:
000000000001712d	xorl	%eax, %eax
000000000001712f	movq	%rcx, %rdx
0000000000017132	movq	%r14, %rcx
0000000000017135	movq	%r15, %r8
0000000000017138	addq	$0x8, %rsp
000000000001713c	popq	%rbx
000000000001713d	popq	%r14
000000000001713f	popq	%r15
0000000000017141	popq	%rbp
0000000000017142	jmpq	*%r8
0000000000017145	pushq	%rbp
0000000000017146	movq	%rsp, %rbp
0000000000017149	pushq	%r15
000000000001714b	pushq	%r14
000000000001714d	pushq	%r13
000000000001714f	pushq	%r12
0000000000017151	pushq	%rbx
0000000000017152	pushq	%rax
0000000000017153	movq	%rcx, %r14
0000000000017156	movl	%edx, %r15d
0000000000017159	movq	0x1e4c8(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_NSPrefPaneUtils
0000000000017160	movq	0x1df51(%rip), %rsi     ## Objc selector ref: stringForVirtualKey:modifiers:
0000000000017167	movq	0x12292(%rip), %rbx     ## Objc message: +[NSPrefPaneUtils stringForVirtualKey:modifiers:]
000000000001716e	movq	%r15, %rdx
0000000000017171	callq	*%rbx
0000000000017173	movq	%rax, %r12
0000000000017176	movq	0x1e393(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_NSCharacterSet
000000000001717d	movq	0x1d064(%rip), %rsi     ## Objc selector ref: controlCharacterSet
0000000000017184	callq	*%rbx
0000000000017186	movq	0x1d063(%rip), %rsi     ## Objc selector ref: stringByTrimmingCharactersInSet:
000000000001718d	movq	%r12, %rdi
0000000000017190	movq	%rax, %rdx
0000000000017193	callq	*%rbx
0000000000017195	movq	%rax, %r12
0000000000017198	movq	0x1e371(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_NSCharacterSet
000000000001719f	movq	0x1d052(%rip), %rsi     ## Objc selector ref: whitespaceAndNewlineCharacterSet
00000000000171a6	callq	*%rbx
00000000000171a8	movq	0x1d041(%rip), %rsi     ## Objc selector ref: stringByTrimmingCharactersInSet:
00000000000171af	movq	%r12, %rdi
00000000000171b2	movq	%rax, %rdx
00000000000171b5	callq	*%rbx
00000000000171b7	movq	%rax, %r12
00000000000171ba	movq	0x1cf67(%rip), %rsi     ## Objc selector ref: length
00000000000171c1	movq	%r12, %rdi
00000000000171c4	callq	*%rbx
00000000000171c6	movq	%rbx, %r13
00000000000171c9	testq	%rax, %rax
00000000000171cc	jne	0x17248
00000000000171ce	movq	0x1e4bb(%rip), %rbx     ## Objc class ref: _OBJC_CLASS_$_ACSHKeyboardLayout
00000000000171d5	callq	0x1e59e                 ## symbol stub for: _LMGetKbdType
00000000000171da	movzbl	%al, %edx
00000000000171dd	movq	0x1dedc(%rip), %rsi     ## Objc selector ref: keyboardLayoutForHWType:
00000000000171e4	movq	%rbx, %rdi
00000000000171e7	movq	%r13, %rbx
00000000000171ea	callq	*%rbx
00000000000171ec	movq	0x1ded5(%rip), %rsi     ## Objc selector ref: stringFromMacKeyCode:modifiers:
00000000000171f3	movq	%rax, %rdi
00000000000171f6	movq	%r15, %rdx
00000000000171f9	movl	%r14d, %ecx
00000000000171fc	callq	*%rbx
00000000000171fe	movq	%rax, %r14
0000000000017201	movq	0x1e308(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_NSCharacterSet
0000000000017208	movq	0x1cfd9(%rip), %rsi     ## Objc selector ref: controlCharacterSet
000000000001720f	callq	*%rbx
0000000000017211	movq	0x1cfd8(%rip), %rsi     ## Objc selector ref: stringByTrimmingCharactersInSet:
0000000000017218	movq	%r14, %rdi
000000000001721b	movq	%rax, %rdx
000000000001721e	callq	*%rbx
0000000000017220	movq	%rax, %r14
0000000000017223	movq	0x1e2e6(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_NSCharacterSet
000000000001722a	movq	0x1cfc7(%rip), %rsi     ## Objc selector ref: whitespaceAndNewlineCharacterSet
0000000000017231	callq	*%rbx
0000000000017233	movq	0x1cfb6(%rip), %rsi     ## Objc selector ref: stringByTrimmingCharactersInSet:
000000000001723a	movq	%r14, %rdi
000000000001723d	movq	%rax, %rdx
0000000000017240	callq	*%rbx
0000000000017242	movq	%rbx, %r13
0000000000017245	movq	%rax, %r12
0000000000017248	movq	0x1e2b1(%rip), %rbx     ## Objc class ref: _OBJC_CLASS_$_NSBundle
000000000001724f	movq	0x1e2b2(%rip), %rdi     ## Objc class ref: UniversalAccessPref
0000000000017256	movq	0x1ce63(%rip), %rsi     ## Objc selector ref: class
000000000001725d	callq	*%r13
0000000000017260	movq	0x1cf51(%rip), %rsi     ## Objc selector ref: bundleForClass:
0000000000017267	movq	%rbx, %rdi
000000000001726a	movq	%rax, %rdx
000000000001726d	callq	*%r13
0000000000017270	movq	0x1cf49(%rip), %rsi     ## Objc selector ref: localizedStringForKey:value:table:
0000000000017277	leaq	0x13ef2(%rip), %rdx     ## Objc cfstring ref: @"switch.button.key.format"
000000000001727e	leaq	0x12e8b(%rip), %rcx     ## Objc cfstring ref: @""
0000000000017285	xorl	%r8d, %r8d
0000000000017288	movq	%rax, %rdi
000000000001728b	callq	*%r13
000000000001728e	movq	%rax, %rcx
0000000000017291	movq	0x1e280(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_NSString
0000000000017298	movq	0x1cf61(%rip), %rsi     ## Objc selector ref: stringWithFormat:
000000000001729f	xorl	%eax, %eax
00000000000172a1	movq	%rcx, %rdx
00000000000172a4	movq	%r12, %rcx
00000000000172a7	movq	%r13, %r8
00000000000172aa	addq	$0x8, %rsp
00000000000172ae	popq	%rbx
00000000000172af	popq	%r12
00000000000172b1	popq	%r13
00000000000172b3	popq	%r14
00000000000172b5	popq	%r15
00000000000172b7	popq	%rbp
00000000000172b8	jmpq	*%r8
00000000000172bb	pushq	%rbp
00000000000172bc	movq	%rsp, %rbp
00000000000172bf	subq	$0x10, %rsp
00000000000172c3	movq	%rdi, -0x10(%rbp)
00000000000172c7	movq	0x1e4b2(%rip), %rax     ## Objc class ref: UAPZoomSliderCell
00000000000172ce	movq	%rax, -0x8(%rbp)
00000000000172d2	movq	0x1ce3f(%rip), %rsi     ## Objc selector ref: accessibilityAttributeNames
00000000000172d9	leaq	-0x10(%rbp), %rdi
00000000000172dd	callq	0x1e88c                 ## Objc message: -[[%rdi super] accessibilityAttributeNames]
00000000000172e2	movq	0x11def(%rip), %rcx     ## literal pool symbol address: _NSAccessibilityValueDescriptionAttribute
00000000000172e9	movq	(%rcx), %rdx
00000000000172ec	movq	0x1dddd(%rip), %rsi     ## Objc selector ref: arrayByAddingObject:
00000000000172f3	movq	%rax, %rdi
00000000000172f6	callq	*0x12104(%rip)          ## Objc message: -[%rdi arrayByAddingObject:]
00000000000172fc	addq	$0x10, %rsp
0000000000017300	popq	%rbp
0000000000017301	retq
0000000000017302	pushq	%rbp
0000000000017303	movq	%rsp, %rbp
0000000000017306	pushq	%r14
0000000000017308	pushq	%rbx
0000000000017309	subq	$0x10, %rsp
000000000001730d	movq	%rdx, %rbx
0000000000017310	movq	%rdi, %r14
0000000000017313	movq	0x11dbe(%rip), %rax     ## literal pool symbol address: _NSAccessibilityValueDescriptionAttribute
000000000001731a	movq	(%rax), %rdx
000000000001731d	movq	0x1cdcc(%rip), %rsi     ## Objc selector ref: isEqualToString:
0000000000017324	movq	%rbx, %rdi
0000000000017327	callq	*0x120d3(%rip)          ## Objc message: -[%rdi isEqualToString:]
000000000001732d	testb	%al, %al
000000000001732f	je	0x17335
0000000000017331	xorl	%eax, %eax
0000000000017333	jmp	0x17357
0000000000017335	movq	%r14, -0x20(%rbp)
0000000000017339	movq	0x1e440(%rip), %rax     ## Objc class ref: UAPZoomSliderCell
0000000000017340	movq	%rax, -0x18(%rbp)
0000000000017344	movq	0x1dd8d(%rip), %rsi     ## Objc selector ref: accessibilityIsAttributeSettable:
000000000001734b	leaq	-0x20(%rbp), %rdi
000000000001734f	movq	%rbx, %rdx
0000000000017352	callq	0x1e88c                 ## Objc message: -[[%rdi super] accessibilityIsAttributeSettable:]
0000000000017357	movsbl	%al, %eax
000000000001735a	addq	$0x10, %rsp
000000000001735e	popq	%rbx
000000000001735f	popq	%r14
0000000000017361	popq	%rbp
0000000000017362	retq
0000000000017363	pushq	%rbp
0000000000017364	movq	%rsp, %rbp
0000000000017367	pushq	%r15
0000000000017369	pushq	%r14
000000000001736b	pushq	%r12
000000000001736d	pushq	%rbx
000000000001736e	subq	$0x10, %rsp
0000000000017372	movq	%rdx, %rbx
0000000000017375	movq	%rdi, %r14
0000000000017378	movq	0x11d59(%rip), %rax     ## literal pool symbol address: _NSAccessibilityValueDescriptionAttribute
000000000001737f	movq	(%rax), %rdx
0000000000017382	movq	0x1cd67(%rip), %rsi     ## Objc selector ref: isEqualToString:
0000000000017389	movq	%rbx, %rdi
000000000001738c	callq	*0x1206e(%rip)          ## Objc message: -[%rdi isEqualToString:]
0000000000017392	testb	%al, %al
0000000000017394	je	0x1740e
0000000000017396	movq	0x1e163(%rip), %rbx     ## Objc class ref: _OBJC_CLASS_$_NSBundle
000000000001739d	movq	0x1cd1c(%rip), %rsi     ## Objc selector ref: class
00000000000173a4	movq	0x12055(%rip), %r12     ## Objc message: +[NSBundle class]
00000000000173ab	movq	%r14, %rdi
00000000000173ae	callq	*%r12
00000000000173b1	movq	0x1ce00(%rip), %rsi     ## Objc selector ref: bundleForClass:
00000000000173b8	movq	%rbx, %rdi
00000000000173bb	movq	%rax, %rdx
00000000000173be	callq	*%r12
00000000000173c1	movq	0x1cdf8(%rip), %rsi     ## Objc selector ref: localizedStringForKey:value:table:
00000000000173c8	leaq	0x13dc1(%rip), %rdx     ## Objc cfstring ref: @"ZOOM_SLIDER_ACCESSIBILITY_VALUE"
00000000000173cf	leaq	0x12d3a(%rip), %rcx     ## Objc cfstring ref: @""
00000000000173d6	xorl	%r8d, %r8d
00000000000173d9	movq	%rax, %rdi
00000000000173dc	callq	*%r12
00000000000173df	movq	%rax, %r15
00000000000173e2	movq	0x1e12f(%rip), %rbx     ## Objc class ref: _OBJC_CLASS_$_NSString
00000000000173e9	movq	0x1d0b8(%rip), %rsi     ## Objc selector ref: floatValue
00000000000173f0	movq	%r14, %rdi
00000000000173f3	callq	*%r12
00000000000173f6	cvtss2sd	%xmm0, %xmm0
00000000000173fa	movq	0x1cdff(%rip), %rsi     ## Objc selector ref: stringWithFormat:
0000000000017401	movb	$0x1, %al
0000000000017403	movq	%rbx, %rdi
0000000000017406	movq	%r15, %rdx
0000000000017409	callq	*%r12
000000000001740c	jmp	0x17430
000000000001740e	movq	%r14, -0x30(%rbp)
0000000000017412	movq	0x1e367(%rip), %rax     ## Objc class ref: UAPZoomSliderCell
0000000000017419	movq	%rax, -0x28(%rbp)
000000000001741d	movq	0x1ccc4(%rip), %rsi     ## Objc selector ref: accessibilityAttributeValue:
0000000000017424	leaq	-0x30(%rbp), %rdi
0000000000017428	movq	%rbx, %rdx
000000000001742b	callq	0x1e88c                 ## Objc message: -[[%rdi super] accessibilityAttributeValue:]
0000000000017430	addq	$0x10, %rsp
0000000000017434	popq	%rbx
0000000000017435	popq	%r12
0000000000017437	popq	%r14
0000000000017439	popq	%r15
000000000001743b	popq	%rbp
000000000001743c	retq
000000000001743d	nop
000000000001743e	nop
000000000001743f	nop
0000000000017440	pushq	%rbp
0000000000017441	movq	%rsp, %rbp
0000000000017444	pushq	%r15
0000000000017446	pushq	%r14
0000000000017448	pushq	%rbx
0000000000017449	pushq	%rax
000000000001744a	movq	%rdx, %r14
000000000001744d	movq	%rdi, %rbx
0000000000017450	movq	_OBJC_IVAR_$_UniversalAccessPref._prefPanesCenter(%rip), %rax
0000000000017457	movq	(%rbx,%rax), %rdi
000000000001745b	testq	%rdi, %rdi
000000000001745e	jne	0x17491
0000000000017460	movq	0x1e231(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_NSPrefPanesCenter
0000000000017467	movq	0x1dc72(%rip), %rsi     ## Objc selector ref: sharedPreferencesCenter
000000000001746e	callq	*0x11f8c(%rip)          ## Objc message: +[NSPrefPanesCenter sharedPreferencesCenter]
0000000000017474	movq	_OBJC_IVAR_$_UniversalAccessPref._prefPanesCenter(%rip), %rdx
000000000001747b	movq	%rax, %rdi
000000000001747e	movq	%rbx, %rsi
0000000000017481	callq	0x1e868                 ## symbol stub for: _objc_assign_ivar
0000000000017486	movq	_OBJC_IVAR_$_UniversalAccessPref._prefPanesCenter(%rip), %rax
000000000001748d	movq	(%rbx,%rax), %rdi
0000000000017491	movq	0x1dc50(%rip), %rsi     ## Objc selector ref: prefPaneBundleWithIdentifier:
0000000000017498	movq	0x11f61(%rip), %rbx     ## Objc message: -[%rdi prefPaneBundleWithIdentifier:]
000000000001749f	movq	%r14, %rdx
00000000000174a2	callq	*%rbx
00000000000174a4	movq	0x1dc45(%rip), %rsi     ## Objc selector ref: icon
00000000000174ab	movq	%rax, %rdi
00000000000174ae	callq	*%rbx
00000000000174b0	testq	%rax, %rax
00000000000174b3	jne	0x1751c
00000000000174b5	movq	0x1e0d4(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_NSImage
00000000000174bc	movq	0x1cca5(%rip), %rsi     ## Objc selector ref: alloc
00000000000174c3	callq	*%rbx
00000000000174c5	movq	%rax, %r14
00000000000174c8	movq	0x1e031(%rip), %r15     ## Objc class ref: _OBJC_CLASS_$_NSBundle
00000000000174cf	movq	0x1e032(%rip), %rdi     ## Objc class ref: UniversalAccessPref
00000000000174d6	movq	0x1cbe3(%rip), %rsi     ## Objc selector ref: class
00000000000174dd	callq	*%rbx
00000000000174df	movq	0x1ccd2(%rip), %rsi     ## Objc selector ref: bundleForClass:
00000000000174e6	movq	%r15, %rdi
00000000000174e9	movq	%rax, %rdx
00000000000174ec	callq	*%rbx
00000000000174ee	movq	0x1d21b(%rip), %rsi     ## Objc selector ref: pathForImageResource:
00000000000174f5	leaq	0x13cb4(%rip), %rdx     ## Objc cfstring ref: @"UniversalAccessPref"
00000000000174fc	movq	%rax, %rdi
00000000000174ff	callq	*%rbx
0000000000017501	movq	0x1d210(%rip), %rsi     ## Objc selector ref: initWithContentsOfFile:
0000000000017508	movq	%r14, %rdi
000000000001750b	movq	%rax, %rdx
000000000001750e	callq	*%rbx
0000000000017510	movq	0x1cbf1(%rip), %rsi     ## Objc selector ref: autorelease
0000000000017517	movq	%rax, %rdi
000000000001751a	callq	*%rbx
000000000001751c	addq	$0x8, %rsp
0000000000017520	popq	%rbx
0000000000017521	popq	%r14
0000000000017523	popq	%r15
0000000000017525	popq	%rbp
0000000000017526	retq
0000000000017527	pushq	%rbp
0000000000017528	movq	%rsp, %rbp
000000000001752b	pushq	%r15
000000000001752d	pushq	%r14
000000000001752f	pushq	%r13
0000000000017531	pushq	%r12
0000000000017533	pushq	%rbx
0000000000017534	subq	$0x118, %rsp            ## imm = 0x118
000000000001753b	movq	%rdi, -0xf8(%rbp)
0000000000017542	movq	%rdi, %rbx
0000000000017545	movq	0x11e0c(%rip), %rax     ## literal pool symbol address: ___stack_chk_guard
000000000001754c	movq	(%rax), %rax
000000000001754f	movq	%rax, -0x30(%rbp)
0000000000017553	movq	0x1dffe(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_NSMutableArray
000000000001755a	movq	0x1cc07(%rip), %rsi     ## Objc selector ref: alloc
0000000000017561	movq	0x11e98(%rip), %r13     ## Objc message: +[NSMutableArray alloc]
0000000000017568	callq	*%r13
000000000001756b	movq	0x1ccfe(%rip), %rsi     ## Objc selector ref: init
0000000000017572	movq	%rax, %rdi
0000000000017575	callq	*%r13
0000000000017578	movq	_OBJC_IVAR_$_UniversalAccessPref._featureTableContents(%rip), %rdx
000000000001757f	movq	%rax, %rdi
0000000000017582	movq	%rbx, %rsi
0000000000017585	movq	%rbx, %r15
0000000000017588	callq	0x1e868                 ## symbol stub for: _objc_assign_ivar
000000000001758d	movq	0x1dfc4(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_NSMutableArray
0000000000017594	movq	0x1cbcd(%rip), %rsi     ## Objc selector ref: alloc
000000000001759b	callq	*%r13
000000000001759e	movq	0x1cccb(%rip), %rsi     ## Objc selector ref: init
00000000000175a5	movq	%rax, %rdi
00000000000175a8	callq	*%r13
00000000000175ab	movq	%rax, -0x110(%rbp)
00000000000175b2	movq	%rax, %r12
00000000000175b5	movq	0x1df74(%rip), %rax     ## Objc class ref: _OBJC_CLASS_$_NSDictionary
00000000000175bc	movq	%rax, -0x100(%rbp)
00000000000175c3	movq	0x1df96(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_NSNumber
00000000000175ca	movq	0x1d0ff(%rip), %rsi     ## Objc selector ref: numberWithInteger:
00000000000175d1	movl	$0x1, %edx
00000000000175d6	callq	*%r13
00000000000175d9	movq	%rax, -0x108(%rbp)
00000000000175e0	movq	0x1df19(%rip), %rbx     ## Objc class ref: _OBJC_CLASS_$_NSBundle
00000000000175e7	movq	0x1df1a(%rip), %rdi     ## Objc class ref: UniversalAccessPref
00000000000175ee	movq	0x1cacb(%rip), %rsi     ## Objc selector ref: class
00000000000175f5	callq	*%r13
00000000000175f8	movq	0x1cbb9(%rip), %rsi     ## Objc selector ref: bundleForClass:
00000000000175ff	movq	%rbx, %rdi
0000000000017602	movq	%rax, %rdx
0000000000017605	callq	*%r13
0000000000017608	movq	0x1cbb1(%rip), %rsi     ## Objc selector ref: localizedStringForKey:value:table:
000000000001760f	leaq	0x13bda(%rip), %rdx     ## Objc cfstring ref: @"feature.display.title"
0000000000017616	leaq	0x12af3(%rip), %rcx     ## Objc cfstring ref: @""
000000000001761d	xorl	%r8d, %r8d
0000000000017620	movq	%rax, %rdi
0000000000017623	movq	%rcx, %r14
0000000000017626	callq	*%r13
0000000000017629	movq	%rax, %rbx
000000000001762c	movq	0x1dac5(%rip), %rsi     ## Objc selector ref: _iconForPrefPaneBundleID:
0000000000017633	leaq	0x13bf6(%rip), %rdx     ## Objc cfstring ref: @"com.apple.preference.displays"
000000000001763a	movq	%r15, %rdi
000000000001763d	callq	*%r13
0000000000017640	movq	0x1dab9(%rip), %rsi     ## Objc selector ref: dictionaryWithObjectsAndKeys:
0000000000017647	leaq	0x13c42(%rip), %rcx     ## Objc cfstring ref: @"featureControllerName"
000000000001764e	movq	%rcx, 0x18(%rsp)
0000000000017653	leaq	0x13c16(%rip), %rcx     ## Objc cfstring ref: @"UAPDisplayViewController"
000000000001765a	movq	%rcx, 0x10(%rsp)
000000000001765f	leaq	0x13bea(%rip), %rcx     ## Objc cfstring ref: @"featureIcon"
0000000000017666	movq	%rcx, 0x8(%rsp)
000000000001766b	movq	%rax, (%rsp)
000000000001766f	movq	$0x0, 0x20(%rsp)
0000000000017678	leaq	0x13b51(%rip), %rcx     ## Objc cfstring ref: @"featureID"
000000000001767f	leaq	0x13b8a(%rip), %r9      ## Objc cfstring ref: @"featureTitle"
0000000000017686	xorl	%eax, %eax
0000000000017688	movq	-0x108(%rbp), %rdx
000000000001768f	movq	-0x100(%rbp), %rdi
0000000000017696	movq	%rbx, %r8
0000000000017699	callq	*%r13
000000000001769c	movq	0x1ccdd(%rip), %rsi     ## Objc selector ref: addObject:
00000000000176a3	movq	%r12, %rdi
00000000000176a6	movq	%rax, %rdx
00000000000176a9	callq	*%r13
00000000000176ac	movq	0x1de7d(%rip), %rax     ## Objc class ref: _OBJC_CLASS_$_NSDictionary
00000000000176b3	movq	%rax, -0x100(%rbp)
00000000000176ba	movq	0x1de9f(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_NSNumber
00000000000176c1	movq	0x1d008(%rip), %rsi     ## Objc selector ref: numberWithInteger:
00000000000176c8	movl	$0x3, %edx
00000000000176cd	callq	*%r13
00000000000176d0	movq	%rax, %r15
00000000000176d3	movq	0x1de26(%rip), %rbx     ## Objc class ref: _OBJC_CLASS_$_NSBundle
00000000000176da	movq	0x1de27(%rip), %rdi     ## Objc class ref: UniversalAccessPref
00000000000176e1	movq	0x1c9d8(%rip), %rsi     ## Objc selector ref: class
00000000000176e8	callq	*%r13
00000000000176eb	movq	0x1cac6(%rip), %rsi     ## Objc selector ref: bundleForClass:
00000000000176f2	movq	%rbx, %rdi
00000000000176f5	movq	%rax, %rdx
00000000000176f8	callq	*%r13
00000000000176fb	movq	0x1cabe(%rip), %rsi     ## Objc selector ref: localizedStringForKey:value:table:
0000000000017702	leaq	0x13ba7(%rip), %rdx     ## Objc cfstring ref: @"feature.zoom.title"
0000000000017709	xorl	%r8d, %r8d
000000000001770c	movq	%rax, %rdi
000000000001770f	movq	%r14, %rcx
0000000000017712	callq	*%r13
0000000000017715	movq	%rax, %rbx
0000000000017718	movq	0x1de71(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_NSImage
000000000001771f	movq	0x1ca42(%rip), %rsi     ## Objc selector ref: alloc
0000000000017726	callq	*%r13
0000000000017729	movq	%rax, %r12
000000000001772c	movq	0x1ddcd(%rip), %r14     ## Objc class ref: _OBJC_CLASS_$_NSBundle
0000000000017733	movq	0x1ddce(%rip), %rdi     ## Objc class ref: UniversalAccessPref
000000000001773a	movq	0x1c97f(%rip), %rsi     ## Objc selector ref: class
0000000000017741	callq	*%r13
0000000000017744	movq	0x1ca6d(%rip), %rsi     ## Objc selector ref: bundleForClass:
000000000001774b	movq	%r14, %rdi
000000000001774e	movq	%rax, %rdx
0000000000017751	callq	*%r13
0000000000017754	movq	0x1cfb5(%rip), %rsi     ## Objc selector ref: pathForImageResource:
000000000001775b	leaq	0x1382e(%rip), %rdx     ## Objc cfstring ref: @"Zoom"
0000000000017762	movq	%rax, %rdi
0000000000017765	callq	*%r13
0000000000017768	movq	0x1cfa9(%rip), %rsi     ## Objc selector ref: initWithContentsOfFile:
000000000001776f	movq	%r12, %rdi
0000000000017772	movq	%rax, %rdx
0000000000017775	callq	*%r13
0000000000017778	movq	0x1c989(%rip), %rsi     ## Objc selector ref: autorelease
000000000001777f	movq	%rax, %rdi
0000000000017782	callq	*%r13
0000000000017785	movq	0x1d974(%rip), %rsi     ## Objc selector ref: dictionaryWithObjectsAndKeys:
000000000001778c	leaq	0x13afd(%rip), %r14     ## Objc cfstring ref: @"featureControllerName"
0000000000017793	movq	%r14, 0x18(%rsp)
0000000000017798	leaq	0x13b31(%rip), %rcx     ## Objc cfstring ref: @"UAPZoomViewController"
000000000001779f	movq	%rcx, 0x10(%rsp)
00000000000177a4	leaq	0x13aa5(%rip), %rcx     ## Objc cfstring ref: @"featureIcon"
00000000000177ab	movq	%rcx, 0x8(%rsp)
00000000000177b0	movq	%rax, (%rsp)
00000000000177b4	movq	$0x0, 0x20(%rsp)
00000000000177bd	xorl	%eax, %eax
00000000000177bf	movq	%r15, %rdx
00000000000177c2	leaq	0x13a07(%rip), %r15     ## Objc cfstring ref: @"featureID"
00000000000177c9	movq	%r15, %rcx
00000000000177cc	movq	-0x100(%rbp), %rdi
00000000000177d3	movq	%rbx, %r8
00000000000177d6	leaq	0x13a33(%rip), %r9      ## Objc cfstring ref: @"featureTitle"
00000000000177dd	callq	*%r13
00000000000177e0	movq	0x1cb99(%rip), %rsi     ## Objc selector ref: addObject:
00000000000177e7	movq	-0x110(%rbp), %rdi
00000000000177ee	movq	%rax, %rdx
00000000000177f1	callq	*%r13
00000000000177f4	movq	0x1dd35(%rip), %rax     ## Objc class ref: _OBJC_CLASS_$_NSDictionary
00000000000177fb	movq	%rax, -0x100(%rbp)
0000000000017802	movq	0x1dd57(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_NSNumber
0000000000017809	movq	0x1cec0(%rip), %rsi     ## Objc selector ref: numberWithInteger:
0000000000017810	movl	$0x2, %edx
0000000000017815	callq	*%r13
0000000000017818	movq	%rax, -0x108(%rbp)
000000000001781f	movq	0x1dcda(%rip), %rbx     ## Objc class ref: _OBJC_CLASS_$_NSBundle
0000000000017826	movq	0x1dcdb(%rip), %rdi     ## Objc class ref: UniversalAccessPref
000000000001782d	movq	0x1c88c(%rip), %rsi     ## Objc selector ref: class
0000000000017834	callq	*%r13
0000000000017837	movq	0x1c97a(%rip), %rsi     ## Objc selector ref: bundleForClass:
000000000001783e	movq	%rbx, %rdi
0000000000017841	movq	%rax, %rdx
0000000000017844	callq	*%r13
0000000000017847	movq	0x1c972(%rip), %rsi     ## Objc selector ref: localizedStringForKey:value:table:
000000000001784e	leaq	0x13a9b(%rip), %rdx     ## Objc cfstring ref: @"feature.voiceover.title"
0000000000017855	xorl	%r8d, %r8d
0000000000017858	movq	%rax, %rdi
000000000001785b	leaq	0x128ae(%rip), %rcx     ## Objc cfstring ref: @""
0000000000017862	callq	*%r13
0000000000017865	movq	%rax, -0x118(%rbp)
000000000001786c	movq	0x1dd1d(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_NSImage
0000000000017873	movq	0x1c8ee(%rip), %rsi     ## Objc selector ref: alloc
000000000001787a	callq	*%r13
000000000001787d	movq	%rax, %r12
0000000000017880	movq	0x1dc79(%rip), %rbx     ## Objc class ref: _OBJC_CLASS_$_NSBundle
0000000000017887	movq	0x1dc7a(%rip), %rdi     ## Objc class ref: UniversalAccessPref
000000000001788e	movq	0x1c82b(%rip), %rsi     ## Objc selector ref: class
0000000000017895	callq	*%r13
0000000000017898	movq	0x1c919(%rip), %rsi     ## Objc selector ref: bundleForClass:
000000000001789f	movq	%rbx, %rdi
00000000000178a2	movq	%rax, %rdx
00000000000178a5	callq	*%r13
00000000000178a8	movq	0x1ce61(%rip), %rsi     ## Objc selector ref: pathForImageResource:
00000000000178af	leaq	0x136ba(%rip), %rdx     ## Objc cfstring ref: @"VoiceOver"
00000000000178b6	movq	%rax, %rdi
00000000000178b9	callq	*%r13
00000000000178bc	movq	0x1ce55(%rip), %rsi     ## Objc selector ref: initWithContentsOfFile:
00000000000178c3	movq	%r12, %rdi
00000000000178c6	movq	%rax, %rdx
00000000000178c9	callq	*%r13
00000000000178cc	movq	0x1c835(%rip), %rsi     ## Objc selector ref: autorelease
00000000000178d3	movq	%rax, %rdi
00000000000178d6	callq	*%r13
00000000000178d9	movq	0x1d820(%rip), %rsi     ## Objc selector ref: dictionaryWithObjectsAndKeys:
00000000000178e0	movq	%r14, 0x18(%rsp)
00000000000178e5	leaq	0x13a24(%rip), %rcx     ## Objc cfstring ref: @"UAPVoiceOverViewController"
00000000000178ec	movq	%rcx, 0x10(%rsp)
00000000000178f1	leaq	0x13958(%rip), %rcx     ## Objc cfstring ref: @"featureIcon"
00000000000178f8	movq	%rcx, 0x8(%rsp)
00000000000178fd	movq	%rax, (%rsp)
0000000000017901	movq	$0x0, 0x20(%rsp)
000000000001790a	xorl	%eax, %eax
000000000001790c	movq	-0x108(%rbp), %rdx
0000000000017913	movq	%r15, %rcx
0000000000017916	movq	-0x100(%rbp), %rdi
000000000001791d	movq	-0x118(%rbp), %r8
0000000000017924	leaq	0x138e5(%rip), %r9      ## Objc cfstring ref: @"featureTitle"
000000000001792b	callq	*%r13
000000000001792e	movq	0x1ca4b(%rip), %rsi     ## Objc selector ref: addObject:
0000000000017935	movq	-0x110(%rbp), %rdi
000000000001793c	movq	%rax, %rdx
000000000001793f	callq	*%r13
0000000000017942	movq	-0xf8(%rbp), %r12
0000000000017949	movq	_OBJC_IVAR_$_UniversalAccessPref._featureTableContents(%rip), %r14
0000000000017950	movq	%r14, %rbx
0000000000017953	movq	(%r12,%rbx), %rax
0000000000017957	movq	%rax, -0x100(%rbp)
000000000001795e	movq	0x1db9b(%rip), %r15     ## Objc class ref: _OBJC_CLASS_$_NSBundle
0000000000017965	movq	0x1db9c(%rip), %rdi     ## Objc class ref: UniversalAccessPref
000000000001796c	movq	0x1c74d(%rip), %rsi     ## Objc selector ref: class
0000000000017973	callq	*%r13
0000000000017976	movq	0x1c83b(%rip), %rsi     ## Objc selector ref: bundleForClass:
000000000001797d	movq	%r15, %rdi
0000000000017980	movq	%rax, %rdx
0000000000017983	callq	*%r13
0000000000017986	movq	0x1c833(%rip), %rsi     ## Objc selector ref: localizedStringForKey:value:table:
000000000001798d	leaq	0x1399c(%rip), %rdx     ## Objc cfstring ref: @"category.seeing.title"
0000000000017994	xorl	%r8d, %r8d
0000000000017997	movq	%rax, %rdi
000000000001799a	leaq	0x1276f(%rip), %r14     ## Objc cfstring ref: @""
00000000000179a1	movq	%r14, %rcx
00000000000179a4	callq	*%r13
00000000000179a7	movq	0x1c9d2(%rip), %rsi     ## Objc selector ref: addObject:
00000000000179ae	movq	-0x100(%rbp), %rdi
00000000000179b5	movq	%rax, %rdx
00000000000179b8	callq	*%r13
00000000000179bb	movq	(%r12,%rbx), %rdi
00000000000179bf	movq	0x1c9ca(%rip), %rsi     ## Objc selector ref: addObjectsFromArray:
00000000000179c6	movq	-0x110(%rbp), %rbx
00000000000179cd	movq	%rbx, %rdx
00000000000179d0	callq	*%r13
00000000000179d3	movq	0x1d72e(%rip), %rsi     ## Objc selector ref: removeAllObjects
00000000000179da	movq	%rbx, %rdi
00000000000179dd	callq	*%r13
00000000000179e0	movq	0x1db49(%rip), %rax     ## Objc class ref: _OBJC_CLASS_$_NSDictionary
00000000000179e7	movq	%rax, -0x100(%rbp)
00000000000179ee	movq	0x1db6b(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_NSNumber
00000000000179f5	movq	0x1ccd4(%rip), %rsi     ## Objc selector ref: numberWithInteger:
00000000000179fc	movl	$0x5, %edx
0000000000017a01	callq	*%r13
0000000000017a04	movq	%rax, -0x108(%rbp)
0000000000017a0b	movq	0x1daee(%rip), %rbx     ## Objc class ref: _OBJC_CLASS_$_NSBundle
0000000000017a12	movq	0x1daef(%rip), %rdi     ## Objc class ref: UniversalAccessPref
0000000000017a19	movq	0x1c6a0(%rip), %rsi     ## Objc selector ref: class
0000000000017a20	callq	*%r13
0000000000017a23	movq	0x1c78e(%rip), %rsi     ## Objc selector ref: bundleForClass:
0000000000017a2a	movq	%rbx, %rdi
0000000000017a2d	movq	%rax, %rdx
0000000000017a30	callq	*%r13
0000000000017a33	movq	0x1c786(%rip), %rsi     ## Objc selector ref: localizedStringForKey:value:table:
0000000000017a3a	leaq	0x1390f(%rip), %rdx     ## Objc cfstring ref: @"feature.descriptions.title"
0000000000017a41	xorl	%r8d, %r8d
0000000000017a44	movq	%rax, %rdi
0000000000017a47	movq	%r14, %rcx
0000000000017a4a	callq	*%r13
0000000000017a4d	movq	%rax, %r15
0000000000017a50	movq	0x1db39(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_NSImage
0000000000017a57	movq	0x1c70a(%rip), %rsi     ## Objc selector ref: alloc
0000000000017a5e	callq	*%r13
0000000000017a61	movq	%rax, %r12
0000000000017a64	movq	0x1da95(%rip), %rbx     ## Objc class ref: _OBJC_CLASS_$_NSBundle
0000000000017a6b	movq	0x1da96(%rip), %rdi     ## Objc class ref: UniversalAccessPref
0000000000017a72	movq	0x1c647(%rip), %rsi     ## Objc selector ref: class
0000000000017a79	callq	*%r13
0000000000017a7c	movq	0x1c735(%rip), %rsi     ## Objc selector ref: bundleForClass:
0000000000017a83	movq	%rbx, %rdi
0000000000017a86	movq	%rax, %rdx
0000000000017a89	callq	*%r13
0000000000017a8c	movq	0x1cc7d(%rip), %rsi     ## Objc selector ref: pathForImageResource:
0000000000017a93	leaq	0x138d6(%rip), %rdx     ## Objc cfstring ref: @"MediaDescriptions"
0000000000017a9a	movq	%rax, %rdi
0000000000017a9d	callq	*%r13
0000000000017aa0	movq	0x1cc71(%rip), %rsi     ## Objc selector ref: initWithContentsOfFile:
0000000000017aa7	movq	%r12, %rdi
0000000000017aaa	movq	%rax, %rdx
0000000000017aad	callq	*%r13
0000000000017ab0	movq	0x1c651(%rip), %rsi     ## Objc selector ref: autorelease
0000000000017ab7	movq	%rax, %rdi
0000000000017aba	callq	*%r13
0000000000017abd	movq	0x1d63c(%rip), %rsi     ## Objc selector ref: dictionaryWithObjectsAndKeys:
0000000000017ac4	leaq	0x137c5(%rip), %rcx     ## Objc cfstring ref: @"featureControllerName"
0000000000017acb	movq	%rcx, 0x18(%rsp)
0000000000017ad0	leaq	0x138b9(%rip), %rcx     ## Objc cfstring ref: @"UAPDescriptionsViewController"
0000000000017ad7	movq	%rcx, 0x10(%rsp)
0000000000017adc	leaq	0x1376d(%rip), %r14     ## Objc cfstring ref: @"featureIcon"
0000000000017ae3	movq	%r14, 0x8(%rsp)
0000000000017ae8	movq	%rax, (%rsp)
0000000000017aec	movq	$0x0, 0x20(%rsp)
0000000000017af5	xorl	%eax, %eax
0000000000017af7	movq	-0x108(%rbp), %rdx
0000000000017afe	leaq	0x136cb(%rip), %rcx     ## Objc cfstring ref: @"featureID"
0000000000017b05	movq	-0x100(%rbp), %rdi
0000000000017b0c	movq	%r15, %r8
0000000000017b0f	leaq	0x136fa(%rip), %r15     ## Objc cfstring ref: @"featureTitle"
0000000000017b16	movq	%r15, %r9
0000000000017b19	callq	*%r13
0000000000017b1c	movq	0x1c85d(%rip), %rsi     ## Objc selector ref: addObject:
0000000000017b23	movq	-0x110(%rbp), %rdi
0000000000017b2a	movq	%rax, %rdx
0000000000017b2d	callq	*%r13
0000000000017b30	movq	0x1d9f9(%rip), %rax     ## Objc class ref: _OBJC_CLASS_$_NSDictionary
0000000000017b37	movq	%rax, -0x100(%rbp)
0000000000017b3e	movq	0x1da1b(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_NSNumber
0000000000017b45	movq	0x1cb84(%rip), %rsi     ## Objc selector ref: numberWithInteger:
0000000000017b4c	movl	$0x8, %edx
0000000000017b51	callq	*%r13
0000000000017b54	movq	%rax, -0x108(%rbp)
0000000000017b5b	movq	0x1d99e(%rip), %rbx     ## Objc class ref: _OBJC_CLASS_$_NSBundle
0000000000017b62	movq	0x1d99f(%rip), %rdi     ## Objc class ref: UniversalAccessPref
0000000000017b69	movq	0x1c550(%rip), %rsi     ## Objc selector ref: class
0000000000017b70	callq	*%r13
0000000000017b73	movq	0x1c63e(%rip), %rsi     ## Objc selector ref: bundleForClass:
0000000000017b7a	movq	%rbx, %rdi
0000000000017b7d	movq	%rax, %rdx
0000000000017b80	callq	*%r13
0000000000017b83	movq	0x1c636(%rip), %rsi     ## Objc selector ref: localizedStringForKey:value:table:
0000000000017b8a	leaq	0x1381f(%rip), %rdx     ## Objc cfstring ref: @"feature.captioning.title"
0000000000017b91	xorl	%r8d, %r8d
0000000000017b94	movq	%rax, %rdi
0000000000017b97	leaq	0x12572(%rip), %rcx     ## Objc cfstring ref: @""
0000000000017b9e	callq	*%r13
0000000000017ba1	movq	%rax, -0x118(%rbp)
0000000000017ba8	movq	0x1d9e1(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_NSImage
0000000000017baf	movq	0x1c5b2(%rip), %rsi     ## Objc selector ref: alloc
0000000000017bb6	callq	*%r13
0000000000017bb9	movq	%rax, %r12
0000000000017bbc	movq	0x1d93d(%rip), %rbx     ## Objc class ref: _OBJC_CLASS_$_NSBundle
0000000000017bc3	movq	0x1d93e(%rip), %rdi     ## Objc class ref: UniversalAccessPref
0000000000017bca	movq	0x1c4ef(%rip), %rsi     ## Objc selector ref: class
0000000000017bd1	callq	*%r13
0000000000017bd4	movq	0x1c5dd(%rip), %rsi     ## Objc selector ref: bundleForClass:
0000000000017bdb	movq	%rbx, %rdi
0000000000017bde	movq	%rax, %rdx
0000000000017be1	callq	*%r13
0000000000017be4	movq	0x1cb25(%rip), %rsi     ## Objc selector ref: pathForImageResource:
0000000000017beb	leaq	0x1255e(%rip), %rdx     ## Objc cfstring ref: @"Captioning"
0000000000017bf2	movq	%rax, %rdi
0000000000017bf5	callq	*%r13
0000000000017bf8	movq	0x1cb19(%rip), %rsi     ## Objc selector ref: initWithContentsOfFile:
0000000000017bff	movq	%r12, %rdi
0000000000017c02	movq	%rax, %rdx
0000000000017c05	callq	*%r13
0000000000017c08	movq	0x1c4f9(%rip), %rsi     ## Objc selector ref: autorelease
0000000000017c0f	movq	%rax, %rdi
0000000000017c12	callq	*%r13
0000000000017c15	movq	0x1d4e4(%rip), %rsi     ## Objc selector ref: dictionaryWithObjectsAndKeys:
0000000000017c1c	leaq	0x1366d(%rip), %rcx     ## Objc cfstring ref: @"featureControllerName"
0000000000017c23	movq	%rcx, 0x18(%rsp)
0000000000017c28	leaq	0x137a1(%rip), %rcx     ## Objc cfstring ref: @"UAPCaptioningViewController"
0000000000017c2f	movq	%rcx, 0x10(%rsp)
0000000000017c34	movq	%r14, 0x8(%rsp)
0000000000017c39	movq	%rax, (%rsp)
0000000000017c3d	movq	$0x0, 0x20(%rsp)
0000000000017c46	xorl	%eax, %eax
0000000000017c48	movq	-0x108(%rbp), %rdx
0000000000017c4f	leaq	0x1357a(%rip), %rcx     ## Objc cfstring ref: @"featureID"
0000000000017c56	movq	-0x100(%rbp), %rdi
0000000000017c5d	movq	-0x118(%rbp), %r8
0000000000017c64	movq	%r15, %r9
0000000000017c67	callq	*%r13
0000000000017c6a	movq	0x1c70f(%rip), %rsi     ## Objc selector ref: addObject:
0000000000017c71	movq	-0x110(%rbp), %r14
0000000000017c78	movq	%r14, %rdi
0000000000017c7b	movq	%rax, %rdx
0000000000017c7e	callq	*%r13
0000000000017c81	movq	-0xf8(%rbp), %r12
0000000000017c88	movq	_OBJC_IVAR_$_UniversalAccessPref._featureTableContents(%rip), %rbx
0000000000017c8f	movq	(%r12,%rbx), %rax
0000000000017c93	movq	%rax, -0x100(%rbp)
0000000000017c9a	movq	0x1d85f(%rip), %r15     ## Objc class ref: _OBJC_CLASS_$_NSBundle
0000000000017ca1	movq	0x1d860(%rip), %rdi     ## Objc class ref: UniversalAccessPref
0000000000017ca8	movq	0x1c411(%rip), %rsi     ## Objc selector ref: class
0000000000017caf	callq	*%r13
0000000000017cb2	movq	0x1c4ff(%rip), %rsi     ## Objc selector ref: bundleForClass:
0000000000017cb9	movq	%r15, %rdi
0000000000017cbc	movq	%rax, %rdx
0000000000017cbf	callq	*%r13
0000000000017cc2	movq	0x1c4f7(%rip), %rsi     ## Objc selector ref: localizedStringForKey:value:table:
0000000000017cc9	leaq	0x13720(%rip), %rdx     ## Objc cfstring ref: @"category.media.title"
0000000000017cd0	xorl	%r8d, %r8d
0000000000017cd3	movq	%rax, %rdi
0000000000017cd6	leaq	0x12433(%rip), %r15     ## Objc cfstring ref: @""
0000000000017cdd	movq	%r15, %rcx
0000000000017ce0	callq	*%r13
0000000000017ce3	movq	0x1c696(%rip), %rsi     ## Objc selector ref: addObject:
0000000000017cea	movq	-0x100(%rbp), %rdi
0000000000017cf1	movq	%rax, %rdx
0000000000017cf4	callq	*%r13
0000000000017cf7	movq	(%r12,%rbx), %rdi
0000000000017cfb	movq	0x1c68e(%rip), %rsi     ## Objc selector ref: addObjectsFromArray:
0000000000017d02	movq	%r14, %rbx
0000000000017d05	movq	%rbx, %rdx
0000000000017d08	callq	*%r13
0000000000017d0b	movq	0x1d3f6(%rip), %rsi     ## Objc selector ref: removeAllObjects
0000000000017d12	movq	%rbx, %rdi
0000000000017d15	movq	%rbx, %r14
0000000000017d18	callq	*%r13
0000000000017d1b	movq	0x1d80e(%rip), %rax     ## Objc class ref: _OBJC_CLASS_$_NSDictionary
0000000000017d22	movq	%rax, -0x100(%rbp)
0000000000017d29	movq	0x1d830(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_NSNumber
0000000000017d30	movq	0x1c999(%rip), %rsi     ## Objc selector ref: numberWithInteger:
0000000000017d37	movl	$0x4, %edx
0000000000017d3c	callq	*%r13
0000000000017d3f	movq	%rax, -0x108(%rbp)
0000000000017d46	movq	0x1d7b3(%rip), %rbx     ## Objc class ref: _OBJC_CLASS_$_NSBundle
0000000000017d4d	movq	0x1d7b4(%rip), %rdi     ## Objc class ref: UniversalAccessPref
0000000000017d54	movq	0x1c365(%rip), %rsi     ## Objc selector ref: class
0000000000017d5b	callq	*%r13
0000000000017d5e	movq	0x1c453(%rip), %rsi     ## Objc selector ref: bundleForClass:
0000000000017d65	movq	%rbx, %rdi
0000000000017d68	movq	%rax, %rdx
0000000000017d6b	callq	*%r13
0000000000017d6e	movq	0x1c44b(%rip), %rsi     ## Objc selector ref: localizedStringForKey:value:table:
0000000000017d75	leaq	0x13694(%rip), %rdx     ## Objc cfstring ref: @"feature.audio.title"
0000000000017d7c	xorl	%r8d, %r8d
0000000000017d7f	movq	%rax, %rdi
0000000000017d82	movq	%r15, %r12
0000000000017d85	movq	%r12, %rcx
0000000000017d88	callq	*%r13
0000000000017d8b	movq	%rax, %r15
0000000000017d8e	movq	0x1d363(%rip), %rsi     ## Objc selector ref: _iconForPrefPaneBundleID:
0000000000017d95	leaq	0x13694(%rip), %rdx     ## Objc cfstring ref: @"com.apple.preference.sound"
0000000000017d9c	movq	-0xf8(%rbp), %rbx
0000000000017da3	movq	%rbx, %rdi
0000000000017da6	callq	*%r13
0000000000017da9	movq	0x1d350(%rip), %rsi     ## Objc selector ref: dictionaryWithObjectsAndKeys:
0000000000017db0	leaq	0x134d9(%rip), %rcx     ## Objc cfstring ref: @"featureControllerName"
0000000000017db7	movq	%rcx, 0x18(%rsp)
0000000000017dbc	leaq	0x1368d(%rip), %rcx     ## Objc cfstring ref: @"UAPAudioViewController"
0000000000017dc3	movq	%rcx, 0x10(%rsp)
0000000000017dc8	leaq	0x13481(%rip), %rcx     ## Objc cfstring ref: @"featureIcon"
0000000000017dcf	movq	%rcx, 0x8(%rsp)
0000000000017dd4	movq	%rax, (%rsp)
0000000000017dd8	movq	$0x0, 0x20(%rsp)
0000000000017de1	xorl	%eax, %eax
0000000000017de3	movq	-0x108(%rbp), %rdx
0000000000017dea	leaq	0x133df(%rip), %rcx     ## Objc cfstring ref: @"featureID"
0000000000017df1	movq	-0x100(%rbp), %rdi
0000000000017df8	movq	%r15, %r8
0000000000017dfb	leaq	0x1340e(%rip), %r9      ## Objc cfstring ref: @"featureTitle"
0000000000017e02	callq	*%r13
0000000000017e05	movq	0x1c574(%rip), %rsi     ## Objc selector ref: addObject:
0000000000017e0c	movq	%r14, %rdi
0000000000017e0f	movq	%rax, %rdx
0000000000017e12	callq	*%r13
0000000000017e15	movq	_OBJC_IVAR_$_UniversalAccessPref._featureTableContents(%rip), %r14
0000000000017e1c	movq	(%rbx,%r14), %rax
0000000000017e20	movq	%rax, -0x100(%rbp)
0000000000017e27	movq	0x1d6d2(%rip), %r15     ## Objc class ref: _OBJC_CLASS_$_NSBundle
0000000000017e2e	movq	0x1d6d3(%rip), %rdi     ## Objc class ref: UniversalAccessPref
0000000000017e35	movq	0x1c284(%rip), %rsi     ## Objc selector ref: class
0000000000017e3c	callq	*%r13
0000000000017e3f	movq	0x1c372(%rip), %rsi     ## Objc selector ref: bundleForClass:
0000000000017e46	movq	%r15, %rdi
0000000000017e49	movq	%rax, %rdx
0000000000017e4c	callq	*%r13
0000000000017e4f	movq	0x1c36a(%rip), %rsi     ## Objc selector ref: localizedStringForKey:value:table:
0000000000017e56	leaq	0x13613(%rip), %rdx     ## Objc cfstring ref: @"category.hearing.title"
0000000000017e5d	xorl	%r8d, %r8d
0000000000017e60	movq	%rax, %rdi
0000000000017e63	movq	%r12, %rcx
0000000000017e66	movq	%r12, %r15
0000000000017e69	callq	*%r13
0000000000017e6c	movq	0x1c50d(%rip), %rsi     ## Objc selector ref: addObject:
0000000000017e73	movq	-0x100(%rbp), %rdi
0000000000017e7a	movq	%rax, %rdx
0000000000017e7d	callq	*%r13
0000000000017e80	movq	(%rbx,%r14), %rdi
0000000000017e84	movq	0x1c505(%rip), %rsi     ## Objc selector ref: addObjectsFromArray:
0000000000017e8b	movq	-0x110(%rbp), %rbx
0000000000017e92	movq	%rbx, %rdx
0000000000017e95	callq	*%r13
0000000000017e98	movq	0x1d269(%rip), %rsi     ## Objc selector ref: removeAllObjects
0000000000017e9f	movq	%rbx, %rdi
0000000000017ea2	callq	*%r13
0000000000017ea5	movq	0x1d684(%rip), %rax     ## Objc class ref: _OBJC_CLASS_$_NSDictionary
0000000000017eac	movq	%rax, -0x100(%rbp)
0000000000017eb3	movq	0x1d6a6(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_NSNumber
0000000000017eba	movq	0x1c80f(%rip), %rsi     ## Objc selector ref: numberWithInteger:
0000000000017ec1	movl	$0x7, %edx
0000000000017ec6	callq	*%r13
0000000000017ec9	movq	%rax, -0x108(%rbp)
0000000000017ed0	movq	0x1d629(%rip), %rbx     ## Objc class ref: _OBJC_CLASS_$_NSBundle
0000000000017ed7	movq	0x1d62a(%rip), %rdi     ## Objc class ref: UniversalAccessPref
0000000000017ede	movq	0x1c1db(%rip), %rsi     ## Objc selector ref: class
0000000000017ee5	callq	*%r13
0000000000017ee8	movq	0x1c2c9(%rip), %rsi     ## Objc selector ref: bundleForClass:
0000000000017eef	movq	%rbx, %rdi
0000000000017ef2	movq	%rax, %rdx
0000000000017ef5	callq	*%r13
0000000000017ef8	movq	0x1c2c1(%rip), %rsi     ## Objc selector ref: localizedStringForKey:value:table:
0000000000017eff	leaq	0x1358a(%rip), %rdx     ## Objc cfstring ref: @"feature.keyboard.title"
0000000000017f06	xorl	%r8d, %r8d
0000000000017f09	movq	%rax, %rdi
0000000000017f0c	movq	%r15, %rcx
0000000000017f0f	callq	*%r13
0000000000017f12	movq	%rax, %r14
0000000000017f15	movq	0x1d674(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_NSImage
0000000000017f1c	movq	0x1c245(%rip), %rsi     ## Objc selector ref: alloc
0000000000017f23	callq	*%r13
0000000000017f26	movq	%rax, %r12
0000000000017f29	movq	0x1d5d0(%rip), %rbx     ## Objc class ref: _OBJC_CLASS_$_NSBundle
0000000000017f30	movq	0x1d5d1(%rip), %rdi     ## Objc class ref: UniversalAccessPref
0000000000017f37	movq	0x1c182(%rip), %rsi     ## Objc selector ref: class
0000000000017f3e	callq	*%r13
0000000000017f41	movq	0x1c270(%rip), %rsi     ## Objc selector ref: bundleForClass:
0000000000017f48	movq	%rbx, %rdi
0000000000017f4b	movq	%rax, %rdx
0000000000017f4e	callq	*%r13
0000000000017f51	movq	0x1c7b8(%rip), %rsi     ## Objc selector ref: pathForImageResource:
0000000000017f58	leaq	0x128d1(%rip), %rdx     ## Objc cfstring ref: @"Keyboard"
0000000000017f5f	movq	%rax, %rdi
0000000000017f62	callq	*%r13
0000000000017f65	movq	0x1c7ac(%rip), %rsi     ## Objc selector ref: initWithContentsOfFile:
0000000000017f6c	movq	%r12, %rdi
0000000000017f6f	movq	%rax, %rdx
0000000000017f72	callq	*%r13
0000000000017f75	movq	0x1c18c(%rip), %rsi     ## Objc selector ref: autorelease
0000000000017f7c	movq	%rax, %rdi
0000000000017f7f	callq	*%r13
0000000000017f82	movq	0x1d177(%rip), %rsi     ## Objc selector ref: dictionaryWithObjectsAndKeys:
0000000000017f89	leaq	0x13300(%rip), %r15     ## Objc cfstring ref: @"featureControllerName"
0000000000017f90	movq	%r15, 0x18(%rsp)
0000000000017f95	leaq	0x13514(%rip), %rcx     ## Objc cfstring ref: @"UAPKeyboardViewController"
0000000000017f9c	movq	%rcx, 0x10(%rsp)
0000000000017fa1	leaq	0x132a8(%rip), %rcx     ## Objc cfstring ref: @"featureIcon"
0000000000017fa8	movq	%rcx, 0x8(%rsp)
0000000000017fad	movq	%rax, (%rsp)
0000000000017fb1	movq	$0x0, 0x20(%rsp)
0000000000017fba	xorl	%eax, %eax
0000000000017fbc	movq	-0x108(%rbp), %rdx
0000000000017fc3	leaq	0x13206(%rip), %rcx     ## Objc cfstring ref: @"featureID"
0000000000017fca	movq	-0x100(%rbp), %rdi
0000000000017fd1	movq	%r14, %r8
0000000000017fd4	leaq	0x13235(%rip), %r9      ## Objc cfstring ref: @"featureTitle"
0000000000017fdb	callq	*%r13
0000000000017fde	movq	0x1c39b(%rip), %rsi     ## Objc selector ref: addObject:
0000000000017fe5	movq	-0x110(%rbp), %rdi
0000000000017fec	movq	%rax, %rdx
0000000000017fef	callq	*%r13
0000000000017ff2	movq	0x1d537(%rip), %rax     ## Objc class ref: _OBJC_CLASS_$_NSDictionary
0000000000017ff9	movq	%rax, -0x100(%rbp)
0000000000018000	movq	0x1d559(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_NSNumber
0000000000018007	movq	0x1c6c2(%rip), %rsi     ## Objc selector ref: numberWithInteger:
000000000001800e	movl	$0x6, %edx
0000000000018013	callq	*%r13
0000000000018016	movq	%rax, %r14
0000000000018019	movq	0x1d4e0(%rip), %rbx     ## Objc class ref: _OBJC_CLASS_$_NSBundle
0000000000018020	movq	0x1d4e1(%rip), %rdi     ## Objc class ref: UniversalAccessPref
0000000000018027	movq	0x1c092(%rip), %rsi     ## Objc selector ref: class
000000000001802e	callq	*%r13
0000000000018031	movq	0x1c180(%rip), %rsi     ## Objc selector ref: bundleForClass:
0000000000018038	movq	%rbx, %rdi
000000000001803b	movq	%rax, %rdx
000000000001803e	callq	*%r13
0000000000018041	movq	0x1c178(%rip), %rsi     ## Objc selector ref: localizedStringForKey:value:table:
0000000000018048	leaq	0x13481(%rip), %rdx     ## Objc cfstring ref: @"feature.mouseAndTrackpad.title"
000000000001804f	xorl	%r8d, %r8d
0000000000018052	movq	%rax, %rdi
0000000000018055	leaq	0x120b4(%rip), %rcx     ## Objc cfstring ref: @""
000000000001805c	callq	*%r13
000000000001805f	movq	%rax, -0x108(%rbp)
0000000000018066	movq	0x1d523(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_NSImage
000000000001806d	movq	0x1c0f4(%rip), %rsi     ## Objc selector ref: alloc
0000000000018074	callq	*%r13
0000000000018077	movq	%rax, %r12
000000000001807a	movq	0x1d47f(%rip), %rbx     ## Objc class ref: _OBJC_CLASS_$_NSBundle
0000000000018081	movq	0x1d480(%rip), %rdi     ## Objc class ref: UniversalAccessPref
0000000000018088	movq	0x1c031(%rip), %rsi     ## Objc selector ref: class
000000000001808f	callq	*%r13
0000000000018092	movq	0x1c11f(%rip), %rsi     ## Objc selector ref: bundleForClass:
0000000000018099	movq	%rbx, %rdi
000000000001809c	movq	%rax, %rdx
000000000001809f	callq	*%r13
00000000000180a2	movq	0x1c667(%rip), %rsi     ## Objc selector ref: pathForImageResource:
00000000000180a9	leaq	0x127a0(%rip), %rdx     ## Objc cfstring ref: @"MouseTrackpad"
00000000000180b0	movq	%rax, %rdi
00000000000180b3	callq	*%r13
00000000000180b6	movq	0x1c65b(%rip), %rsi     ## Objc selector ref: initWithContentsOfFile:
00000000000180bd	movq	%r12, %rdi
00000000000180c0	movq	%rax, %rdx
00000000000180c3	callq	*%r13
00000000000180c6	movq	0x1c03b(%rip), %rsi     ## Objc selector ref: autorelease
00000000000180cd	movq	%rax, %rdi
00000000000180d0	callq	*%r13
00000000000180d3	movq	0x1d026(%rip), %rsi     ## Objc selector ref: dictionaryWithObjectsAndKeys:
00000000000180da	movq	%r15, 0x18(%rsp)
00000000000180df	leaq	0x1340a(%rip), %rcx     ## Objc cfstring ref: @"UAPMouseAndTrackpadViewController"
00000000000180e6	movq	%rcx, 0x10(%rsp)
00000000000180eb	leaq	0x1315e(%rip), %r15     ## Objc cfstring ref: @"featureIcon"
00000000000180f2	movq	%r15, 0x8(%rsp)
00000000000180f7	movq	%rax, (%rsp)
00000000000180fb	movq	$0x0, 0x20(%rsp)
0000000000018104	xorl	%eax, %eax
0000000000018106	movq	%r14, %rdx
0000000000018109	leaq	0x130c0(%rip), %r14     ## Objc cfstring ref: @"featureID"
0000000000018110	movq	%r14, %rcx
0000000000018113	movq	-0x100(%rbp), %rdi
000000000001811a	movq	-0x108(%rbp), %r8
0000000000018121	leaq	0x130e8(%rip), %r9      ## Objc cfstring ref: @"featureTitle"
0000000000018128	callq	*%r13
000000000001812b	movq	0x1c24e(%rip), %rsi     ## Objc selector ref: addObject:
0000000000018132	movq	-0x110(%rbp), %rdi
0000000000018139	movq	%rax, %rdx
000000000001813c	callq	*%r13
000000000001813f	movq	0x1d3ea(%rip), %rax     ## Objc class ref: _OBJC_CLASS_$_NSDictionary
0000000000018146	movq	%rax, -0x100(%rbp)
000000000001814d	movq	0x1d40c(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_NSNumber
0000000000018154	movq	0x1c575(%rip), %rsi     ## Objc selector ref: numberWithInteger:
000000000001815b	movl	$0xa, %edx
0000000000018160	callq	*%r13
0000000000018163	movq	%rax, -0x108(%rbp)
000000000001816a	movq	0x1d38f(%rip), %rbx     ## Objc class ref: _OBJC_CLASS_$_NSBundle
0000000000018171	movq	0x1d390(%rip), %rdi     ## Objc class ref: UniversalAccessPref
0000000000018178	movq	0x1bf41(%rip), %rsi     ## Objc selector ref: class
000000000001817f	callq	*%r13
0000000000018182	movq	0x1c02f(%rip), %rsi     ## Objc selector ref: bundleForClass:
0000000000018189	movq	%rbx, %rdi
000000000001818c	movq	%rax, %rdx
000000000001818f	callq	*%r13
0000000000018192	movq	0x1c027(%rip), %rsi     ## Objc selector ref: localizedStringForKey:value:table:
0000000000018199	leaq	0x13370(%rip), %rdx     ## Objc cfstring ref: @"feature.switch.title"
00000000000181a0	xorl	%r8d, %r8d
00000000000181a3	movq	%rax, %rdi
00000000000181a6	leaq	0x11f63(%rip), %rcx     ## Objc cfstring ref: @""
00000000000181ad	callq	*%r13
00000000000181b0	movq	%rax, -0x118(%rbp)
00000000000181b7	movq	0x1d3d2(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_NSImage
00000000000181be	movq	0x1bfa3(%rip), %rsi     ## Objc selector ref: alloc
00000000000181c5	callq	*%r13
00000000000181c8	movq	%rax, %r12
00000000000181cb	movq	0x1d32e(%rip), %rbx     ## Objc class ref: _OBJC_CLASS_$_NSBundle
00000000000181d2	movq	0x1d32f(%rip), %rdi     ## Objc class ref: UniversalAccessPref
00000000000181d9	movq	0x1bee0(%rip), %rsi     ## Objc selector ref: class
00000000000181e0	callq	*%r13
00000000000181e3	movq	0x1bfce(%rip), %rsi     ## Objc selector ref: bundleForClass:
00000000000181ea	movq	%rbx, %rdi
00000000000181ed	movq	%rax, %rdx
00000000000181f0	callq	*%r13
00000000000181f3	movq	0x1c516(%rip), %rsi     ## Objc selector ref: pathForImageResource:
00000000000181fa	leaq	0x1270f(%rip), %rdx     ## Objc cfstring ref: @"Switch"
0000000000018201	movq	%rax, %rdi
0000000000018204	callq	*%r13
0000000000018207	movq	0x1c50a(%rip), %rsi     ## Objc selector ref: initWithContentsOfFile:
000000000001820e	movq	%r12, %rdi
0000000000018211	movq	%rax, %rdx
0000000000018214	callq	*%r13
0000000000018217	movq	0x1beea(%rip), %rsi     ## Objc selector ref: autorelease
000000000001821e	movq	%rax, %rdi
0000000000018221	callq	*%r13
0000000000018224	movq	0x1ced5(%rip), %rsi     ## Objc selector ref: dictionaryWithObjectsAndKeys:
000000000001822b	leaq	0x1305e(%rip), %rcx     ## Objc cfstring ref: @"featureControllerName"
0000000000018232	movq	%rcx, 0x18(%rsp)
0000000000018237	leaq	0x132f2(%rip), %rcx     ## Objc cfstring ref: @"UAPSwitchViewController"
000000000001823e	movq	%rcx, 0x10(%rsp)
0000000000018243	movq	%r15, 0x8(%rsp)
0000000000018248	movq	%rax, (%rsp)
000000000001824c	movq	$0x0, 0x20(%rsp)
0000000000018255	xorl	%eax, %eax
0000000000018257	movq	-0x108(%rbp), %rdx
000000000001825e	movq	%r14, %rcx
0000000000018261	movq	-0x100(%rbp), %rdi
0000000000018268	movq	-0x118(%rbp), %r8
000000000001826f	leaq	0x12f9a(%rip), %r15     ## Objc cfstring ref: @"featureTitle"
0000000000018276	movq	%r15, %r9
0000000000018279	callq	*%r13
000000000001827c	movq	0x1c0fd(%rip), %rsi     ## Objc selector ref: addObject:
0000000000018283	movq	-0x110(%rbp), %r15
000000000001828a	movq	%r15, %rdi
000000000001828d	movq	%rax, %rdx
0000000000018290	callq	*%r13
0000000000018293	movq	0x1d296(%rip), %rax     ## Objc class ref: _OBJC_CLASS_$_NSDictionary
000000000001829a	movq	%rax, -0x100(%rbp)
00000000000182a1	movq	0x1d2b8(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_NSNumber
00000000000182a8	movq	0x1c421(%rip), %rsi     ## Objc selector ref: numberWithInteger:
00000000000182af	movl	$0xb, %edx
00000000000182b4	callq	*%r13
00000000000182b7	movq	%rax, -0x108(%rbp)
00000000000182be	movq	0x1d23b(%rip), %rbx     ## Objc class ref: _OBJC_CLASS_$_NSBundle
00000000000182c5	movq	0x1d23c(%rip), %rdi     ## Objc class ref: UniversalAccessPref
00000000000182cc	movq	0x1bded(%rip), %rsi     ## Objc selector ref: class
00000000000182d3	callq	*%r13
00000000000182d6	movq	0x1bedb(%rip), %rsi     ## Objc selector ref: bundleForClass:
00000000000182dd	movq	%rbx, %rdi
00000000000182e0	movq	%rax, %rdx
00000000000182e3	callq	*%r13
00000000000182e6	movq	0x1bed3(%rip), %rsi     ## Objc selector ref: localizedStringForKey:value:table:
00000000000182ed	leaq	0x1325c(%rip), %rdx     ## Objc cfstring ref: @"feature.speakableItems.title"
00000000000182f4	xorl	%r8d, %r8d
00000000000182f7	movq	%rax, %rdi
00000000000182fa	leaq	0x11e0f(%rip), %rcx     ## Objc cfstring ref: @""
0000000000018301	callq	*%r13
0000000000018304	movq	%rax, %r14
0000000000018307	movq	0x1d282(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_NSImage
000000000001830e	movq	0x1be53(%rip), %rsi     ## Objc selector ref: alloc
0000000000018315	callq	*%r13
0000000000018318	movq	%rax, %r12
000000000001831b	movq	0x1d1de(%rip), %rbx     ## Objc class ref: _OBJC_CLASS_$_NSBundle
0000000000018322	movq	0x1d1df(%rip), %rdi     ## Objc class ref: UniversalAccessPref
0000000000018329	movq	0x1bd90(%rip), %rsi     ## Objc selector ref: class
0000000000018330	callq	*%r13
0000000000018333	movq	0x1be7e(%rip), %rsi     ## Objc selector ref: bundleForClass:
000000000001833a	movq	%rbx, %rdi
000000000001833d	movq	%rax, %rdx
0000000000018340	callq	*%r13
0000000000018343	movq	0x1c3c6(%rip), %rsi     ## Objc selector ref: pathForImageResource:
000000000001834a	leaq	0x1321f(%rip), %rdx     ## Objc cfstring ref: @"SpeakableItems"
0000000000018351	movq	%rax, %rdi
0000000000018354	callq	*%r13
0000000000018357	movq	0x1c3ba(%rip), %rsi     ## Objc selector ref: initWithContentsOfFile:
000000000001835e	movq	%r12, %rdi
0000000000018361	movq	%rax, %rdx
0000000000018364	callq	*%r13
0000000000018367	movq	0x1bd9a(%rip), %rsi     ## Objc selector ref: autorelease
000000000001836e	movq	%rax, %rdi
0000000000018371	callq	*%r13
0000000000018374	movq	0x1cd85(%rip), %rsi     ## Objc selector ref: dictionaryWithObjectsAndKeys:
000000000001837b	leaq	0x12f0e(%rip), %rcx     ## Objc cfstring ref: @"featureControllerName"
0000000000018382	movq	%rcx, 0x18(%rsp)
0000000000018387	leaq	0x13202(%rip), %rcx     ## Objc cfstring ref: @"UAPSpeakableItemsViewController"
000000000001838e	movq	%rcx, 0x10(%rsp)
0000000000018393	leaq	0x12eb6(%rip), %rcx     ## Objc cfstring ref: @"featureIcon"
000000000001839a	movq	%rcx, 0x8(%rsp)
000000000001839f	movq	%rax, (%rsp)
00000000000183a3	movq	$0x0, 0x20(%rsp)
00000000000183ac	xorl	%eax, %eax
00000000000183ae	movq	-0x108(%rbp), %rdx
00000000000183b5	leaq	0x12e14(%rip), %rcx     ## Objc cfstring ref: @"featureID"
00000000000183bc	movq	-0x100(%rbp), %rdi
00000000000183c3	movq	%r13, %rbx
00000000000183c6	movq	%r14, %r8
00000000000183c9	leaq	0x12e40(%rip), %r9      ## Objc cfstring ref: @"featureTitle"
00000000000183d0	callq	*%rbx
00000000000183d2	movq	0x1bfa7(%rip), %rsi     ## Objc selector ref: addObject:
00000000000183d9	movq	%r15, %rdi
00000000000183dc	movq	%rax, %rdx
00000000000183df	callq	*%rbx
00000000000183e1	movq	_OBJC_IVAR_$_UniversalAccessPref._featureTableContents(%rip), %r12
00000000000183e8	movq	-0xf8(%rbp), %r13
00000000000183ef	movq	(%r13,%r12), %r14
00000000000183f4	movq	0x1d105(%rip), %r15     ## Objc class ref: _OBJC_CLASS_$_NSBundle
00000000000183fb	movq	0x1d106(%rip), %rdi     ## Objc class ref: UniversalAccessPref
0000000000018402	movq	0x1bcb7(%rip), %rsi     ## Objc selector ref: class
0000000000018409	callq	*%rbx
000000000001840b	movq	0x1bda6(%rip), %rsi     ## Objc selector ref: bundleForClass:
0000000000018412	movq	%r15, %rdi
0000000000018415	movq	%rax, %rdx
0000000000018418	callq	*%rbx
000000000001841a	movq	0x1bd9f(%rip), %rsi     ## Objc selector ref: localizedStringForKey:value:table:
0000000000018421	leaq	0x13188(%rip), %rdx     ## Objc cfstring ref: @"category.interacting.title"
0000000000018428	xorl	%r8d, %r8d
000000000001842b	movq	%rax, %rdi
000000000001842e	leaq	0x11cdb(%rip), %rcx     ## Objc cfstring ref: @""
0000000000018435	callq	*%rbx
0000000000018437	movq	0x1bf42(%rip), %rsi     ## Objc selector ref: addObject:
000000000001843e	movq	%r14, %rdi
0000000000018441	movq	%rax, %rdx
0000000000018444	callq	*%rbx
0000000000018446	movq	%r13, %r14
0000000000018449	movq	%r12, %r15
000000000001844c	movq	(%r14,%r15), %rdi
0000000000018450	movq	0x1bf39(%rip), %rsi     ## Objc selector ref: addObjectsFromArray:
0000000000018457	movq	-0x110(%rbp), %r12
000000000001845e	movq	%r12, %rdx
0000000000018461	callq	*%rbx
0000000000018463	movq	0x1cc9e(%rip), %rsi     ## Objc selector ref: removeAllObjects
000000000001846a	movq	%r12, %rdi
000000000001846d	callq	*%rbx
000000000001846f	xorps	%xmm0, %xmm0
0000000000018472	movaps	%xmm0, -0xc0(%rbp)
0000000000018479	movaps	%xmm0, -0xd0(%rbp)
0000000000018480	movaps	%xmm0, -0xe0(%rbp)
0000000000018487	movaps	%xmm0, -0xf0(%rbp)
000000000001848e	movq	(%r14,%r15), %rdi
0000000000018492	movq	%rdi, -0x108(%rbp)
0000000000018499	movq	0x1bc70(%rip), %rsi     ## Objc selector ref: countByEnumeratingWithState:objects:count:
00000000000184a0	leaq	-0xf0(%rbp), %rdx
00000000000184a7	leaq	-0xb0(%rbp), %rcx
00000000000184ae	movl	$0x10, %r8d
00000000000184b4	callq	*%rbx
00000000000184b6	movq	%rax, -0xf8(%rbp)
00000000000184bd	testq	%rax, %rax
00000000000184c0	je	0x185a6
00000000000184c6	movq	-0xe0(%rbp), %rax
00000000000184cd	movq	(%rax), %rax
00000000000184d0	movq	%rax, -0x100(%rbp)
00000000000184d7	movq	0x1bcea(%rip), %r12     ## Objc selector ref: objectForKey:
00000000000184de	xorl	%r13d, %r13d
00000000000184e1	movq	-0xe0(%rbp), %rax
00000000000184e8	movq	-0x100(%rbp), %rcx
00000000000184ef	cmpq	%rcx, (%rax)
00000000000184f2	je	0x18500
00000000000184f4	movq	-0x108(%rbp), %rdi
00000000000184fb	callq	0x1e886                 ## symbol stub for: _objc_enumerationMutation
0000000000018500	movq	-0xe8(%rbp), %rax
0000000000018507	movq	(%rax,%r13,8), %r14
000000000001850b	movq	0x1d01e(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_NSDictionary
0000000000018512	movq	0x1bba7(%rip), %rsi     ## Objc selector ref: class
0000000000018519	callq	*%rbx
000000000001851b	movq	%r14, %rdi
000000000001851e	movq	0x1bbd3(%rip), %rsi     ## Objc selector ref: isKindOfClass:
0000000000018525	movq	%rax, %rdx
0000000000018528	callq	*%rbx
000000000001852a	testb	%al, %al
000000000001852c	je	0x1855e
000000000001852e	movq	%r14, %rdi
0000000000018531	movq	%r12, %rsi
0000000000018534	leaq	0x12d15(%rip), %rdx     ## Objc cfstring ref: @"featureIcon"
000000000001853b	callq	*%rbx
000000000001853d	movq	%rax, %r15
0000000000018540	movq	%r14, %rdi
0000000000018543	movq	%r12, %rsi
0000000000018546	leaq	0x12cc3(%rip), %rdx     ## Objc cfstring ref: @"featureTitle"
000000000001854d	callq	*%rbx
000000000001854f	movq	%r15, %rdi
0000000000018552	movq	0x1cbb7(%rip), %rsi     ## Objc selector ref: setAccessibilityDescription:
0000000000018559	movq	%rax, %rdx
000000000001855c	callq	*%rbx
000000000001855e	incq	%r13
0000000000018561	cmpq	-0xf8(%rbp), %r13
0000000000018568	jb	0x184e1
000000000001856e	movl	$0x10, %r8d
0000000000018574	movq	-0x108(%rbp), %rdi
000000000001857b	movq	0x1bb8e(%rip), %rsi     ## Objc selector ref: countByEnumeratingWithState:objects:count:
0000000000018582	leaq	-0xf0(%rbp), %rdx
0000000000018589	leaq	-0xb0(%rbp), %rcx
0000000000018590	callq	*0x10e6a(%rip)          ## Objc message: +[NSDictionary countByEnumeratingWithState:objects:count:]
0000000000018596	movq	%rax, -0xf8(%rbp)
000000000001859d	testq	%rax, %rax
00000000000185a0	jne	0x184de
00000000000185a6	movq	0x1bba3(%rip), %rsi     ## Objc selector ref: release
00000000000185ad	movq	-0x110(%rbp), %rdi
00000000000185b4	callq	*0x10e46(%rip)          ## Objc message: -[%rdi release]
00000000000185ba	movq	0x10d97(%rip), %rax     ## literal pool symbol address: ___stack_chk_guard
00000000000185c1	movq	(%rax), %rax
00000000000185c4	cmpq	-0x30(%rbp), %rax
00000000000185c8	jne	0x185dc
00000000000185ca	addq	$0x118, %rsp            ## imm = 0x118
00000000000185d1	popq	%rbx
00000000000185d2	popq	%r12
00000000000185d4	popq	%r13
00000000000185d6	popq	%r14
00000000000185d8	popq	%r15
00000000000185da	popq	%rbp
00000000000185db	retq
00000000000185dc	callq	0x1e8b6                 ## symbol stub for: ___stack_chk_fail
00000000000185e1	pushq	%rbp
00000000000185e2	movq	%rsp, %rbp
00000000000185e5	pushq	%r15
00000000000185e7	pushq	%r14
00000000000185e9	pushq	%r13
00000000000185eb	pushq	%r12
00000000000185ed	pushq	%rbx
00000000000185ee	pushq	%rax
00000000000185ef	movl	%edx, %ebx
00000000000185f1	movq	%rdi, %r13
00000000000185f4	movq	_OBJC_IVAR_$_UniversalAccessPref._featureTableContents(%rip), %rax
00000000000185fb	movq	(%r13,%rax), %rdi
0000000000018600	movq	0x1bd61(%rip), %rsi     ## Objc selector ref: count
0000000000018607	callq	*0x10df3(%rip)          ## Objc message: -[%rdi count]
000000000001860d	movq	%rax, %r12
0000000000018610	testq	%r12, %r12
0000000000018613	je	0x186ad
0000000000018619	movl	%ebx, %eax
000000000001861b	movq	%rax, -0x30(%rbp)
000000000001861f	xorl	%ebx, %ebx
0000000000018621	movq	0x10dd8(%rip), %r14     ## Objc message: -[%rdi count]
0000000000018628	movq	_OBJC_IVAR_$_UniversalAccessPref._featureTableContents(%rip), %rax
000000000001862f	movq	(%r13,%rax), %rdi
0000000000018634	movq	%r13, %r15
0000000000018637	movq	0x1bd32(%rip), %rsi     ## Objc selector ref: objectAtIndex:
000000000001863e	movq	%rbx, %rdx
0000000000018641	callq	*%r14
0000000000018644	movq	%rax, %r13
0000000000018647	movq	0x1cee2(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_NSDictionary
000000000001864e	movq	0x1ba6b(%rip), %rsi     ## Objc selector ref: class
0000000000018655	callq	*%r14
0000000000018658	movq	%r13, %rdi
000000000001865b	movq	0x1ba96(%rip), %rsi     ## Objc selector ref: isKindOfClass:
0000000000018662	movq	%rax, %rdx
0000000000018665	callq	*%r14
0000000000018668	testb	%al, %al
000000000001866a	je	0x1869e
000000000001866c	movq	%r13, %rdi
000000000001866f	movq	0x1bb52(%rip), %rsi     ## Objc selector ref: objectForKey:
0000000000018676	leaq	0x12b53(%rip), %rdx     ## Objc cfstring ref: @"featureID"
000000000001867d	callq	*0x10d7d(%rip)          ## Objc message: +[NSDictionary objectForKey:]
0000000000018683	testq	%rax, %rax
0000000000018686	je	0x1869e
0000000000018688	movq	%rax, %rdi
000000000001868b	movq	0x1baa6(%rip), %rsi     ## Objc selector ref: integerValue
0000000000018692	callq	*0x10d68(%rip)          ## Objc message: -[%rdi integerValue]
0000000000018698	cmpq	-0x30(%rbp), %rax
000000000001869c	je	0x1871d
000000000001869e	incq	%rbx
00000000000186a1	cmpq	%r12, %rbx
00000000000186a4	movq	%r15, %r13
00000000000186a7	jb	0x18628
00000000000186ad	movq	_OBJC_IVAR_$_UniversalAccessPref._featureTable(%rip), %r14
00000000000186b4	movq	(%r13,%r14), %rdi
00000000000186b9	movq	0x1ca58(%rip), %rsi     ## Objc selector ref: selectedRowIndexes
00000000000186c0	movq	0x10d39(%rip), %rbx     ## Objc message: -[%rdi selectedRowIndexes]
00000000000186c7	callq	*%rbx
00000000000186c9	movq	0x1bc98(%rip), %rsi     ## Objc selector ref: count
00000000000186d0	movq	%rax, %rdi
00000000000186d3	callq	*%rbx
00000000000186d5	movq	%rbx, %rcx
00000000000186d8	testq	%rax, %rax
00000000000186db	je	0x186ec
00000000000186dd	addq	$0x8, %rsp
00000000000186e1	popq	%rbx
00000000000186e2	popq	%r12
00000000000186e4	popq	%r13
00000000000186e6	popq	%r14
00000000000186e8	popq	%r15
00000000000186ea	popq	%rbp
00000000000186eb	retq
00000000000186ec	movq	(%r13,%r14), %r14
00000000000186f1	movq	0x1ce78(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_NSIndexSet
00000000000186f8	movq	0x1bd51(%rip), %rsi     ## Objc selector ref: indexSetWithIndex:
00000000000186ff	movl	$0x1, %edx
0000000000018704	movq	%rcx, %rbx
0000000000018707	callq	*%rbx
0000000000018709	movq	0x1bd48(%rip), %rsi     ## Objc selector ref: selectRowIndexes:byExtendingSelection:
0000000000018710	xorl	%ecx, %ecx
0000000000018712	movq	%r14, %rdi
0000000000018715	movq	%rax, %rdx
0000000000018718	movq	%rbx, %rax
000000000001871b	jmp	0x1874e
000000000001871d	movq	_OBJC_IVAR_$_UniversalAccessPref._featureTable(%rip), %rax
0000000000018724	movq	(%r15,%rax), %r15
0000000000018728	movq	0x1ce41(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_NSIndexSet
000000000001872f	movq	0x1bd1a(%rip), %rsi     ## Objc selector ref: indexSetWithIndex:
0000000000018736	movq	%rbx, %rdx
0000000000018739	callq	*%r14
000000000001873c	movq	0x1bd15(%rip), %rsi     ## Objc selector ref: selectRowIndexes:byExtendingSelection:
0000000000018743	xorl	%ecx, %ecx
0000000000018745	movq	%r15, %rdi
0000000000018748	movq	%rax, %rdx
000000000001874b	movq	%r14, %rax
000000000001874e	addq	$0x8, %rsp
0000000000018752	popq	%rbx
0000000000018753	popq	%r12
0000000000018755	popq	%r13
0000000000018757	popq	%r14
0000000000018759	popq	%r15
000000000001875b	popq	%rbp
000000000001875c	jmpq	*%rax
000000000001875e	pushq	%rbp
000000000001875f	movq	%rsp, %rbp
0000000000018762	pushq	%r15
0000000000018764	pushq	%r14
0000000000018766	pushq	%r13
0000000000018768	pushq	%r12
000000000001876a	pushq	%rbx
000000000001876b	subq	$0x108, %rsp            ## imm = 0x108
0000000000018772	movq	%rdi, -0x30(%rbp)
0000000000018776	movq	0x1cdb3(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_NSDictionary
000000000001877d	movq	0x1b9e4(%rip), %rsi     ## Objc selector ref: alloc
0000000000018784	movq	0x10c75(%rip), %r14     ## Objc message: +[NSDictionary alloc]
000000000001878b	callq	*%r14
000000000001878e	movq	%rax, -0x38(%rbp)
0000000000018792	movq	0x1cdc7(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_NSNumber
0000000000018799	movq	0x1bf30(%rip), %rsi     ## Objc selector ref: numberWithInteger:
00000000000187a0	movl	$0x1, %edx
00000000000187a5	callq	*%r14
00000000000187a8	movq	%rax, -0x40(%rbp)
00000000000187ac	movq	0x1cdad(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_NSNumber
00000000000187b3	movq	0x1bf16(%rip), %rsi     ## Objc selector ref: numberWithInteger:
00000000000187ba	movl	$0x1, %edx
00000000000187bf	callq	*%r14
00000000000187c2	movq	%rax, -0x48(%rbp)
00000000000187c6	movq	0x1cd93(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_NSNumber
00000000000187cd	movq	0x1befc(%rip), %rsi     ## Objc selector ref: numberWithInteger:
00000000000187d4	movl	$0x1, %edx
00000000000187d9	callq	*%r14
00000000000187dc	movq	%rax, -0x50(%rbp)
00000000000187e0	movq	0x1cd79(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_NSNumber
00000000000187e7	movq	0x1bee2(%rip), %rsi     ## Objc selector ref: numberWithInteger:
00000000000187ee	movl	$0x2, %edx
00000000000187f3	callq	*%r14
00000000000187f6	movq	%rax, -0x58(%rbp)
00000000000187fa	movq	0x1cd5f(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_NSNumber
0000000000018801	movq	0x1bec8(%rip), %rsi     ## Objc selector ref: numberWithInteger:
0000000000018808	movl	$0x3, %edx
000000000001880d	callq	*%r14
0000000000018810	movq	%rax, -0x60(%rbp)
0000000000018814	movq	0x1cd45(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_NSNumber
000000000001881b	movq	0x1beae(%rip), %rsi     ## Objc selector ref: numberWithInteger:
0000000000018822	movl	$0x3, %edx
0000000000018827	callq	*%r14
000000000001882a	movq	%rax, -0x68(%rbp)
000000000001882e	movq	0x1cd2b(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_NSNumber
0000000000018835	movq	0x1be94(%rip), %rsi     ## Objc selector ref: numberWithInteger:
000000000001883c	movl	$0x4, %edx
0000000000018841	callq	*%r14
0000000000018844	movq	%rax, -0x70(%rbp)
0000000000018848	movq	0x1cd11(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_NSNumber
000000000001884f	movq	0x1be7a(%rip), %rsi     ## Objc selector ref: numberWithInteger:
0000000000018856	movl	$0x7, %edx
000000000001885b	callq	*%r14
000000000001885e	movq	%rax, -0x78(%rbp)
0000000000018862	movq	0x1ccf7(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_NSNumber
0000000000018869	movq	0x1be60(%rip), %rsi     ## Objc selector ref: numberWithInteger:
0000000000018870	movl	$0x6, %edx
0000000000018875	callq	*%r14
0000000000018878	movq	%rax, %rbx
000000000001887b	movq	0x1ccde(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_NSNumber
0000000000018882	movq	0x1be47(%rip), %rsi     ## Objc selector ref: numberWithInteger:
0000000000018889	movl	$0xa, %edx
000000000001888e	callq	*%r14
0000000000018891	movq	%rax, %r15
0000000000018894	movq	0x1ccc5(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_NSNumber
000000000001889b	movq	0x1be2e(%rip), %rsi     ## Objc selector ref: numberWithInteger:
00000000000188a2	movl	$0xb, %edx
00000000000188a7	callq	*%r14
00000000000188aa	movq	%rax, %r12
00000000000188ad	movq	0x1ccac(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_NSNumber
00000000000188b4	movq	0x1be15(%rip), %rsi     ## Objc selector ref: numberWithInteger:
00000000000188bb	movl	$0x8, %edx
00000000000188c0	callq	*%r14
00000000000188c3	movq	%rax, %r13
00000000000188c6	movq	0x1cc93(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_NSNumber
00000000000188cd	movq	0x1bdfc(%rip), %rsi     ## Objc selector ref: numberWithInteger:
00000000000188d4	movl	$0x5, %edx
00000000000188d9	callq	*%r14
00000000000188dc	movq	0x1bc55(%rip), %rsi     ## Objc selector ref: initWithObjectsAndKeys:
00000000000188e3	leaq	0x12de6(%rip), %rcx     ## Objc cfstring ref: @"Media_Descriptions"
00000000000188ea	movq	%rcx, 0xa8(%rsp)
00000000000188f2	movq	%rax, 0xa0(%rsp)
00000000000188fa	leaq	0x1184f(%rip), %rax     ## Objc cfstring ref: @"Captioning"
0000000000018901	movq	%rax, 0x98(%rsp)
0000000000018909	movq	%r13, 0x90(%rsp)
0000000000018911	leaq	0x12c58(%rip), %rax     ## Objc cfstring ref: @"SpeakableItems"
0000000000018918	movq	%rax, 0x88(%rsp)
0000000000018920	movq	%r12, 0x80(%rsp)
0000000000018928	leaq	0x11fe1(%rip), %rax     ## Objc cfstring ref: @"Switch"
000000000001892f	movq	%rax, 0x78(%rsp)
0000000000018934	movq	%r15, 0x70(%rsp)
0000000000018939	leaq	0x12d70(%rip), %rax     ## Objc cfstring ref: @"Mouse"
0000000000018940	movq	%rax, 0x68(%rsp)
0000000000018945	movq	%rbx, 0x60(%rsp)
000000000001894a	leaq	0x11edf(%rip), %rax     ## Objc cfstring ref: @"Keyboard"
0000000000018951	movq	%rax, 0x58(%rsp)
0000000000018956	movq	-0x78(%rbp), %rax
000000000001895a	movq	%rax, 0x50(%rsp)
000000000001895f	leaq	0x12d2a(%rip), %rax     ## Objc cfstring ref: @"Hearing"
0000000000018966	movq	%rax, 0x48(%rsp)
000000000001896b	movq	-0x70(%rbp), %rax
000000000001896f	movq	%rax, 0x40(%rsp)
0000000000018974	leaq	0x12cf5(%rip), %rax     ## Objc cfstring ref: @"Seeing_Zoom_Options"
000000000001897b	movq	%rax, 0x38(%rsp)
0000000000018980	movq	-0x68(%rbp), %rax
0000000000018984	movq	%rax, 0x30(%rsp)
0000000000018989	leaq	0x12cc0(%rip), %rax     ## Objc cfstring ref: @"Seeing_Zoom"
0000000000018990	movq	%rax, 0x28(%rsp)
0000000000018995	movq	-0x60(%rbp), %rax
0000000000018999	movq	%rax, 0x20(%rsp)
000000000001899e	leaq	0x12c8b(%rip), %rax     ## Objc cfstring ref: @"Seeing_VoiceOver"
00000000000189a5	movq	%rax, 0x18(%rsp)
00000000000189aa	movq	-0x58(%rbp), %rax
00000000000189ae	movq	%rax, 0x10(%rsp)
00000000000189b3	leaq	0x12c56(%rip), %rax     ## Objc cfstring ref: @"Seeing_Display"
00000000000189ba	movq	%rax, 0x8(%rsp)
00000000000189bf	movq	-0x50(%rbp), %rax
00000000000189c3	movq	%rax, (%rsp)
00000000000189c7	movq	$0x0, 0xb0(%rsp)
00000000000189d3	leaq	0x12bf6(%rip), %rcx     ## Objc cfstring ref: @"EnableUntrustedAccessibilitySoftware"
00000000000189da	leaq	0x12c0f(%rip), %r9      ## Objc cfstring ref: @"Seeing"
00000000000189e1	xorl	%eax, %eax
00000000000189e3	movq	-0x40(%rbp), %rdx
00000000000189e7	movq	-0x38(%rbp), %rdi
00000000000189eb	movq	-0x48(%rbp), %r8
00000000000189ef	callq	*%r14
00000000000189f2	movq	_OBJC_IVAR_$_UniversalAccessPref._searchTermToFeature(%rip), %rdx
00000000000189f9	movq	%rax, %rdi
00000000000189fc	movq	-0x30(%rbp), %rsi
0000000000018a00	callq	0x1e868                 ## symbol stub for: _objc_assign_ivar
0000000000018a05	movq	0x1cb24(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_NSDictionary
0000000000018a0c	movq	0x1b755(%rip), %rsi     ## Objc selector ref: alloc
0000000000018a13	callq	*%r14
0000000000018a16	movq	%rax, -0x38(%rbp)
0000000000018a1a	movq	0x1cb3f(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_NSNumber
0000000000018a21	movq	0x1bca8(%rip), %rsi     ## Objc selector ref: numberWithInteger:
0000000000018a28	movl	$0x1, %edx
0000000000018a2d	callq	*%r14
0000000000018a30	movq	%rax, -0x40(%rbp)
0000000000018a34	movq	0x1cb25(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_NSNumber
0000000000018a3b	movq	0x1bc8e(%rip), %rsi     ## Objc selector ref: numberWithInteger:
0000000000018a42	movl	$0x2, %edx
0000000000018a47	callq	*%r14
0000000000018a4a	movq	%rax, -0x48(%rbp)
0000000000018a4e	movq	0x1cb0b(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_NSNumber
0000000000018a55	movq	0x1bc74(%rip), %rsi     ## Objc selector ref: numberWithInteger:
0000000000018a5c	movl	$0x3, %edx
0000000000018a61	callq	*%r14
0000000000018a64	movq	%rax, -0x50(%rbp)
0000000000018a68	movq	0x1caf1(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_NSNumber
0000000000018a6f	movq	0x1bc5a(%rip), %rsi     ## Objc selector ref: numberWithInteger:
0000000000018a76	movl	$0x4, %edx
0000000000018a7b	callq	*%r14
0000000000018a7e	movq	%rax, -0x58(%rbp)
0000000000018a82	movq	0x1cad7(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_NSNumber
0000000000018a89	movq	0x1bc40(%rip), %rsi     ## Objc selector ref: numberWithInteger:
0000000000018a90	movl	$0x6, %edx
0000000000018a95	callq	*%r14
0000000000018a98	movq	%rax, -0x60(%rbp)
0000000000018a9c	movq	0x1cabd(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_NSNumber
0000000000018aa3	movq	0x1bc26(%rip), %rsi     ## Objc selector ref: numberWithInteger:
0000000000018aaa	movl	$0x7, %edx
0000000000018aaf	callq	*%r14
0000000000018ab2	movq	%rax, -0x68(%rbp)
0000000000018ab6	movq	0x1caa3(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_NSNumber
0000000000018abd	movq	0x1bc0c(%rip), %rsi     ## Objc selector ref: numberWithInteger:
0000000000018ac4	movl	$0xb, %edx
0000000000018ac9	callq	*%r14
0000000000018acc	movq	%rax, %r12
0000000000018acf	movq	0x1ca8a(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_NSNumber
0000000000018ad6	movq	0x1bbf3(%rip), %rsi     ## Objc selector ref: numberWithInteger:
0000000000018add	movl	$0x8, %edx
0000000000018ae2	callq	*%r14
0000000000018ae5	movq	%rax, %r13
0000000000018ae8	movq	0x1ca71(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_NSNumber
0000000000018aef	movq	0x1bbda(%rip), %rsi     ## Objc selector ref: numberWithInteger:
0000000000018af6	movl	$0xa, %edx
0000000000018afb	callq	*%r14
0000000000018afe	movq	%rax, %rbx
0000000000018b01	movq	0x1ca58(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_NSNumber
0000000000018b08	movq	0x1bbc1(%rip), %rsi     ## Objc selector ref: numberWithInteger:
0000000000018b0f	movl	$0x9, %edx
0000000000018b14	callq	*%r14
0000000000018b17	movq	%rax, %r15
0000000000018b1a	movq	0x1ca3f(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_NSNumber
0000000000018b21	movq	0x1bba8(%rip), %rsi     ## Objc selector ref: numberWithInteger:
0000000000018b28	movl	$0x5, %edx
0000000000018b2d	callq	*%r14
0000000000018b30	movq	0x1ba01(%rip), %rsi     ## Objc selector ref: initWithObjectsAndKeys:
0000000000018b37	movq	%rax, 0x88(%rsp)
0000000000018b3f	leaq	0x12cea(%rip), %rax     ## Objc cfstring ref: @"mchl2a14f1c5"
0000000000018b46	movq	%rax, 0x80(%rsp)
0000000000018b4e	movq	%r15, 0x78(%rsp)
0000000000018b53	leaq	0x12cb6(%rip), %rax     ## Objc cfstring ref: @"mh43185"
0000000000018b5a	movq	%rax, 0x70(%rsp)
0000000000018b5f	movq	%rbx, 0x68(%rsp)
0000000000018b64	leaq	0x12c85(%rip), %rax     ## Objc cfstring ref: @"mh43182"
0000000000018b6b	movq	%rax, 0x60(%rsp)
0000000000018b70	movq	%r13, 0x58(%rsp)
0000000000018b75	leaq	0x12c54(%rip), %rax     ## Objc cfstring ref: @"mh43180"
0000000000018b7c	movq	%rax, 0x50(%rsp)
0000000000018b81	movq	%r12, 0x48(%rsp)
0000000000018b86	leaq	0x12c23(%rip), %rax     ## Objc cfstring ref: @"spc002"
0000000000018b8d	movq	%rax, 0x40(%rsp)
0000000000018b92	movq	-0x68(%rbp), %rax
0000000000018b96	movq	%rax, 0x38(%rsp)
0000000000018b9b	leaq	0x12bee(%rip), %rax     ## Objc cfstring ref: @"mh40580"
0000000000018ba2	movq	%rax, 0x30(%rsp)
0000000000018ba7	movq	-0x60(%rbp), %rax
0000000000018bab	movq	%rax, 0x28(%rsp)
0000000000018bb0	leaq	0x12bb9(%rip), %rax     ## Objc cfstring ref: @"unac899"
0000000000018bb7	movq	%rax, 0x20(%rsp)
0000000000018bbc	movq	-0x58(%rbp), %rax
0000000000018bc0	movq	%rax, 0x18(%rsp)
0000000000018bc5	leaq	0x12b84(%rip), %rax     ## Objc cfstring ref: @"unac611"
0000000000018bcc	movq	%rax, 0x10(%rsp)
0000000000018bd1	movq	-0x50(%rbp), %rax
0000000000018bd5	movq	%rax, 0x8(%rsp)
0000000000018bda	leaq	0x12b4f(%rip), %rax     ## Objc cfstring ref: @"mh40579"
0000000000018be1	movq	%rax, (%rsp)
0000000000018be5	movq	$0x0, 0x90(%rsp)
0000000000018bf1	leaq	0x12af8(%rip), %rdx     ## Objc cfstring ref: @"unac089"
0000000000018bf8	leaq	0x12b11(%rip), %r8      ## Objc cfstring ref: @"mh40578"
0000000000018bff	xorl	%eax, %eax
0000000000018c01	movq	-0x40(%rbp), %rcx
0000000000018c05	movq	-0x38(%rbp), %rdi
0000000000018c09	movq	-0x48(%rbp), %r9
0000000000018c0d	callq	*%r14
0000000000018c10	movq	_OBJC_IVAR_$_UniversalAccessPref._featureToHelpAnchor(%rip), %rdx
0000000000018c17	movq	%rax, %rdi
0000000000018c1a	movq	-0x30(%rbp), %rsi
0000000000018c1e	addq	$0x108, %rsp            ## imm = 0x108
0000000000018c25	popq	%rbx
0000000000018c26	popq	%r12
0000000000018c28	popq	%r13
0000000000018c2a	popq	%r14
0000000000018c2c	popq	%r15
0000000000018c2e	popq	%rbp
0000000000018c2f	jmp	0x1e868                 ## symbol stub for: _objc_assign_ivar
0000000000018c34	pushq	%rbp
0000000000018c35	movq	%rsp, %rbp
0000000000018c38	pushq	%r14
0000000000018c3a	pushq	%rbx
0000000000018c3b	subq	$0x30, %rsp
0000000000018c3f	movq	%rdi, %rbx
0000000000018c42	movq	_OBJC_IVAR_$_UniversalAccessPref._featureTable(%rip), %rax
0000000000018c49	movq	(%rbx,%rax), %rsi
0000000000018c4d	testq	%rsi, %rsi
0000000000018c50	je	0x18c79
0000000000018c52	movq	0x1bef7(%rip), %rdx     ## Objc selector ref: frame
0000000000018c59	leaq	-0x30(%rbp), %rdi
0000000000018c5d	callq	0x1e892                 ## symbol stub for: _objc_msgSend_stret
0000000000018c62	movsd	-0x20(%rbp), %xmm0
0000000000018c67	movsd	%xmm0, -0x38(%rbp)
0000000000018c6c	movq	_OBJC_IVAR_$_UniversalAccessPref._featureTable(%rip), %rax
0000000000018c73	movq	(%rbx,%rax), %rdi
0000000000018c77	jmp	0x18c8e
0000000000018c79	xorps	%xmm0, %xmm0
0000000000018c7c	movaps	%xmm0, -0x20(%rbp)
0000000000018c80	movaps	%xmm0, -0x30(%rbp)
0000000000018c84	xorps	%xmm0, %xmm0
0000000000018c87	movsd	%xmm0, -0x38(%rbp)
0000000000018c8c	xorl	%edi, %edi
0000000000018c8e	movq	0x1c48b(%rip), %rsi     ## Objc selector ref: superview
0000000000018c95	movq	0x10764(%rip), %r14     ## Objc message: +[NSNumber superview]
0000000000018c9c	callq	*%r14
0000000000018c9f	movq	0x1c47a(%rip), %rsi     ## Objc selector ref: superview
0000000000018ca6	movq	%rax, %rdi
0000000000018ca9	callq	*%r14
0000000000018cac	movq	%rax, %rbx
0000000000018caf	movq	0x1c9ea(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_NSScrollView
0000000000018cb6	movq	0x1b403(%rip), %rsi     ## Objc selector ref: class
0000000000018cbd	callq	*%r14
0000000000018cc0	movq	0x1b431(%rip), %rsi     ## Objc selector ref: isKindOfClass:
0000000000018cc7	movq	%rbx, %rdi
0000000000018cca	movq	%rax, %rdx
0000000000018ccd	callq	*%r14
0000000000018cd0	testb	%al, %al
0000000000018cd2	movsd	-0x38(%rbp), %xmm0
0000000000018cd7	je	0x18cf1
0000000000018cd9	movq	0x1c448(%rip), %rsi     ## Objc selector ref: contentSize
0000000000018ce0	movq	%rbx, %rdi
0000000000018ce3	callq	*0x10717(%rip)          ## Objc message: +[NSScrollView contentSize]
0000000000018ce9	addsd	0xf83f(%rip), %xmm0
0000000000018cf1	cvttsd2si	%xmm0, %rax
0000000000018cf6	addq	$0x30, %rsp
0000000000018cfa	popq	%rbx
0000000000018cfb	popq	%r14
0000000000018cfd	popq	%rbp
0000000000018cfe	retq
0000000000018cff	pushq	%rbp
0000000000018d00	movq	%rsp, %rbp
0000000000018d03	pushq	%r15
0000000000018d05	pushq	%r14
0000000000018d07	pushq	%r13
0000000000018d09	pushq	%r12
0000000000018d0b	pushq	%rbx
0000000000018d0c	subq	$0xe8, %rsp
0000000000018d13	movq	%rdi, %rbx
0000000000018d16	movq	0x1063b(%rip), %rcx     ## literal pool symbol address: ___stack_chk_guard
0000000000018d1d	movq	(%rcx), %rax
0000000000018d20	movq	%rax, -0x30(%rbp)
0000000000018d24	movq	_OBJC_IVAR_$_UniversalAccessPref._didAwakeFromNib(%rip), %rax
0000000000018d2b	cmpb	$0x0, (%rbx,%rax)
0000000000018d2f	jne	0x18fae
0000000000018d35	movb	$0x1, (%rbx,%rax)
0000000000018d39	movq	0x1c7f8(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_NSMutableDictionary
0000000000018d40	movq	0x1b421(%rip), %rsi     ## Objc selector ref: alloc
0000000000018d47	movq	0x106b2(%rip), %r15     ## Objc message: +[NSMutableDictionary alloc]
0000000000018d4e	callq	*%r15
0000000000018d51	movq	0x1b518(%rip), %rsi     ## Objc selector ref: init
0000000000018d58	movq	%rax, %rdi
0000000000018d5b	callq	*%r15
0000000000018d5e	movq	_OBJC_IVAR_$_UniversalAccessPref._paneControllers(%rip), %rdx
0000000000018d65	movq	%rax, %rdi
0000000000018d68	movq	%rbx, %rsi
0000000000018d6b	callq	0x1e868                 ## symbol stub for: _objc_assign_ivar
0000000000018d70	movq	0x10479(%rip), %rax     ## literal pool symbol address: _UASelectedTabKey
0000000000018d77	movq	(%rax), %rdx
0000000000018d7a	movq	0x10457(%rip), %rax     ## literal pool symbol address: _UAPreferencesDomain
0000000000018d81	movq	(%rax), %rcx
0000000000018d84	movq	0x1c3a5(%rip), %rsi     ## Objc selector ref: objectForKey:inDomain:
0000000000018d8b	movq	%rbx, %rdi
0000000000018d8e	callq	*%r15
0000000000018d91	movq	%rax, -0x108(%rbp)
0000000000018d98	movq	0x1c399(%rip), %rsi     ## Objc selector ref: _createTableModel
0000000000018d9f	movq	%rbx, %rdi
0000000000018da2	callq	*%r15
0000000000018da5	movq	_OBJC_IVAR_$_UniversalAccessPref._featureTable(%rip), %r14
0000000000018dac	movq	(%rbx,%r14), %rdi
0000000000018db0	movq	0x1c389(%rip), %rsi     ## Objc selector ref: setGroupRowStyle:
0000000000018db7	xorl	%edx, %edx
0000000000018db9	callq	*%r15
0000000000018dbc	movq	(%rbx,%r14), %rdi
0000000000018dc0	movq	0x1c381(%rip), %rsi     ## Objc selector ref: setFloatsGroupRows:
0000000000018dc7	xorl	%edx, %edx
0000000000018dc9	callq	*%r15
0000000000018dcc	movq	(%rbx,%r14), %rdi
0000000000018dd0	movq	0x1c379(%rip), %rsi     ## Objc selector ref: setAllowsColumnResizing:
0000000000018dd7	xorl	%edx, %edx
0000000000018dd9	callq	*%r15
0000000000018ddc	xorps	%xmm0, %xmm0
0000000000018ddf	movaps	%xmm0, -0xc0(%rbp)
0000000000018de6	movaps	%xmm0, -0xd0(%rbp)
0000000000018ded	movaps	%xmm0, -0xe0(%rbp)
0000000000018df4	movaps	%xmm0, -0xf0(%rbp)
0000000000018dfb	movq	(%rbx,%r14), %rdi
0000000000018dff	movq	%rbx, -0xf8(%rbp)
0000000000018e06	movq	0x1c34b(%rip), %rsi     ## Objc selector ref: tableColumns
0000000000018e0d	callq	*%r15
0000000000018e10	movq	%rax, -0x100(%rbp)
0000000000018e17	movq	0x1b2f2(%rip), %rsi     ## Objc selector ref: countByEnumeratingWithState:objects:count:
0000000000018e1e	leaq	-0xf0(%rbp), %rdx
0000000000018e25	leaq	-0xb0(%rbp), %rcx
0000000000018e2c	movl	$0x10, %r8d
0000000000018e32	movq	%rax, %rdi
0000000000018e35	callq	*%r15
0000000000018e38	movq	%r15, %r14
0000000000018e3b	movq	%rax, %rbx
0000000000018e3e	testq	%rbx, %rbx
0000000000018e41	je	0x18ed6
0000000000018e47	movq	-0xe0(%rbp), %rax
0000000000018e4e	movq	(%rax), %r12
0000000000018e51	xorl	%r13d, %r13d
0000000000018e54	movq	-0xe0(%rbp), %rax
0000000000018e5b	cmpq	%r12, (%rax)
0000000000018e5e	je	0x18e6c
0000000000018e60	movq	-0x100(%rbp), %rdi
0000000000018e67	callq	0x1e886                 ## symbol stub for: _objc_enumerationMutation
0000000000018e6c	movq	-0xe8(%rbp), %rax
0000000000018e73	movq	(%rax,%r13,8), %r15
0000000000018e77	movq	-0xf8(%rbp), %rdi
0000000000018e7e	movq	0x1c2db(%rip), %rsi     ## Objc selector ref: _columnWidth
0000000000018e85	callq	*%r14
0000000000018e88	cvtsi2sdq	%rax, %xmm0
0000000000018e8d	movq	%r15, %rdi
0000000000018e90	movq	0x1c2d1(%rip), %rsi     ## Objc selector ref: setWidth:
0000000000018e97	callq	*%r14
0000000000018e9a	incq	%r13
0000000000018e9d	cmpq	%rbx, %r13
0000000000018ea0	jb	0x18e54
0000000000018ea2	movl	$0x10, %r8d
0000000000018ea8	movq	-0x100(%rbp), %rdi
0000000000018eaf	movq	0x1b25a(%rip), %rsi     ## Objc selector ref: countByEnumeratingWithState:objects:count:
0000000000018eb6	leaq	-0xf0(%rbp), %rdx
0000000000018ebd	leaq	-0xb0(%rbp), %rcx
0000000000018ec4	callq	*0x10536(%rip)          ## Objc message: -[%rdi countByEnumeratingWithState:objects:count:]
0000000000018eca	movq	%rax, %rbx
0000000000018ecd	testq	%rbx, %rbx
0000000000018ed0	jne	0x18e51
0000000000018ed6	movq	-0xf8(%rbp), %r12
0000000000018edd	movq	_OBJC_IVAR_$_UniversalAccessPref._featureTable(%rip), %rbx
0000000000018ee4	movq	(%r12,%rbx), %rdi
0000000000018ee8	movq	0x1b731(%rip), %rsi     ## Objc selector ref: reloadData
0000000000018eef	callq	*0x1050b(%rip)          ## Objc message: -[%rdi reloadData]
0000000000018ef5	movq	-0x108(%rbp), %rdi
0000000000018efc	testq	%rdi, %rdi
0000000000018eff	je	0x18f1d
0000000000018f01	movq	0x1b230(%rip), %rsi     ## Objc selector ref: integerValue
0000000000018f08	movq	%r14, %rbx
0000000000018f0b	callq	*%rbx
0000000000018f0d	movq	0x1c25c(%rip), %rsi     ## Objc selector ref: _selectRowForFeatureID:
0000000000018f14	movq	%r12, %rdi
0000000000018f17	movl	%eax, %edx
0000000000018f19	callq	*%rbx
0000000000018f1b	jmp	0x18f4a
0000000000018f1d	movq	(%r12,%rbx), %r15
0000000000018f21	movq	0x1c648(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_NSIndexSet
0000000000018f28	movq	0x1b521(%rip), %rsi     ## Objc selector ref: indexSetWithIndex:
0000000000018f2f	movl	$0x1, %edx
0000000000018f34	movq	%r14, %rbx
0000000000018f37	callq	*%rbx
0000000000018f39	movq	0x1b518(%rip), %rsi     ## Objc selector ref: selectRowIndexes:byExtendingSelection:
0000000000018f40	xorl	%ecx, %ecx
0000000000018f42	movq	%r15, %rdi
0000000000018f45	movq	%rax, %rdx
0000000000018f48	callq	*%rbx
0000000000018f4a	movq	_OBJC_IVAR_$_UniversalAccessPref._boxView(%rip), %r14
0000000000018f51	movq	(%r12,%r14), %rdi
0000000000018f55	movq	0x1c21c(%rip), %rsi     ## Objc selector ref: setIdentifier:
0000000000018f5c	leaq	0x128ed(%rip), %rdx     ## Objc cfstring ref: @"boxView"
0000000000018f63	callq	*%rbx
0000000000018f65	movq	(%r12,%r14), %rdi
0000000000018f69	movq	0x1c1b0(%rip), %rsi     ## Objc selector ref: superview
0000000000018f70	callq	*%rbx
0000000000018f72	movq	0x1b35f(%rip), %rsi     ## Objc selector ref: setWantsLayer:
0000000000018f79	movl	$0x1, %edx
0000000000018f7e	movq	%rax, %rdi
0000000000018f81	callq	*%rbx
0000000000018f83	movq	0x1c1f6(%rip), %rsi     ## Objc selector ref: _menuExtraUpdateStatus
0000000000018f8a	movq	%r12, %rdi
0000000000018f8d	callq	*%rbx
0000000000018f8f	movq	0x1c1f2(%rip), %rsi     ## Objc selector ref: _sortViews
0000000000018f96	movq	%r12, %rdi
0000000000018f99	callq	*%rbx
0000000000018f9b	movq	0x1c1ee(%rip), %rsi     ## Objc selector ref: _updateTree
0000000000018fa2	movq	%r12, %rdi
0000000000018fa5	callq	*%rbx
0000000000018fa7	movq	0x103aa(%rip), %rcx     ## literal pool symbol address: ___stack_chk_guard
0000000000018fae	movq	(%rcx), %rax
0000000000018fb1	cmpq	-0x30(%rbp), %rax
0000000000018fb5	jne	0x18fc9
0000000000018fb7	addq	$0xe8, %rsp
0000000000018fbe	popq	%rbx
0000000000018fbf	popq	%r12
0000000000018fc1	popq	%r13
0000000000018fc3	popq	%r14
0000000000018fc5	popq	%r15
0000000000018fc7	popq	%rbp
0000000000018fc8	retq
0000000000018fc9	callq	0x1e8b6                 ## symbol stub for: ___stack_chk_fail
0000000000018fce	pushq	%rbp
0000000000018fcf	movq	%rsp, %rbp
0000000000018fd2	pushq	%r15
0000000000018fd4	pushq	%r14
0000000000018fd6	pushq	%rbx
0000000000018fd7	pushq	%rax
0000000000018fd8	movq	%rdi, %r14
0000000000018fdb	movq	_OBJC_IVAR_$_UniversalAccessPref._boxView(%rip), %rax
0000000000018fe2	movq	(%r14,%rax), %rdi
0000000000018fe6	movq	0x1c133(%rip), %rsi     ## Objc selector ref: superview
0000000000018fed	movq	0x1040c(%rip), %r15     ## Objc message: +[NSIndexSet superview]
0000000000018ff4	callq	*%r15
0000000000018ff7	movq	%rax, %rbx
0000000000018ffa	movq	0x1b2d7(%rip), %rsi     ## Objc selector ref: setWantsLayer:
0000000000019001	xorl	%edx, %edx
0000000000019003	movq	%rbx, %rdi
0000000000019006	callq	*%r15
0000000000019009	movq	0x1b2c8(%rip), %rsi     ## Objc selector ref: setWantsLayer:
0000000000019010	movl	$0x1, %edx
0000000000019015	movq	%rbx, %rdi
0000000000019018	callq	*%r15
000000000001901b	movq	0x1bf06(%rip), %rsi     ## Objc selector ref: layer
0000000000019022	movq	%rbx, %rdi
0000000000019025	callq	*%r15
0000000000019028	movq	0x1c169(%rip), %rsi     ## Objc selector ref: setOpaque:
000000000001902f	movl	$0x1, %edx
0000000000019034	movq	%rax, %rdi
0000000000019037	callq	*%r15
000000000001903a	movq	0x1bee7(%rip), %rsi     ## Objc selector ref: layer
0000000000019041	movq	%rbx, %rdi
0000000000019044	callq	*%r15
0000000000019047	movq	0x1c152(%rip), %rsi     ## Objc selector ref: context
000000000001904e	movq	%rax, %rdi
0000000000019051	callq	*%r15
0000000000019054	testq	%rax, %rax
0000000000019057	je	0x19064
0000000000019059	addq	$0x8, %rsp
000000000001905d	popq	%rbx
000000000001905e	popq	%r14
0000000000019060	popq	%r15
0000000000019062	popq	%rbp
0000000000019063	retq
0000000000019064	movq	0x1c125(%rip), %rdx     ## Objc selector ref: _updateTree
000000000001906b	movq	0x1b79e(%rip), %rsi     ## Objc selector ref: performSelector:withObject:afterDelay:
0000000000019072	movsd	0xf2f6(%rip), %xmm0
000000000001907a	xorl	%ecx, %ecx
000000000001907c	movq	%r14, %rdi
000000000001907f	addq	$0x8, %rsp
0000000000019083	popq	%rbx
0000000000019084	popq	%r14
0000000000019086	popq	%r15
0000000000019088	popq	%rbp
0000000000019089	jmpq	*0x10371(%rip)          ## Objc message: -[%rdi performSelector:withObject:afterDelay:]
000000000001908f	pushq	%rbp
0000000000019090	movq	%rsp, %rbp
0000000000019093	pushq	%r15
0000000000019095	pushq	%r14
0000000000019097	pushq	%r13
0000000000019099	pushq	%r12
000000000001909b	pushq	%rbx
000000000001909c	subq	$0x18, %rsp
00000000000190a0	movq	%rdi, %rbx
00000000000190a3	movq	0x102ae(%rip), %r12     ## literal pool symbol address: ___stack_chk_guard
00000000000190aa	movq	(%r12), %rax
00000000000190ae	movq	%rax, -0x30(%rbp)
00000000000190b2	movq	_OBJC_IVAR_$_UniversalAccessPref._optionsViewHolder(%rip), %r15
00000000000190b9	movq	(%rbx,%r15), %rdi
00000000000190bd	movq	0x1c05c(%rip), %rsi     ## Objc selector ref: superview
00000000000190c4	movq	0x10335(%rip), %r13     ## Objc message: -[%rdi superview]
00000000000190cb	callq	*%r13
00000000000190ce	movq	%rax, %r14
00000000000190d1	movq	(%rbx,%r15), %rdi
00000000000190d5	leaq	-0x40(%rbp), %r15
00000000000190d9	movq	%r15, %rsi
00000000000190dc	callq	0x1e86e                 ## symbol stub for: _objc_assign_strongCast
00000000000190e1	leaq	-0x38(%rbp), %rsi
00000000000190e5	movq	_OBJC_IVAR_$_UniversalAccessPref._boxView(%rip), %rax
00000000000190ec	movq	(%rbx,%rax), %rdi
00000000000190f0	callq	0x1e86e                 ## symbol stub for: _objc_assign_strongCast
00000000000190f5	movq	0x1c3ec(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_NSArray
00000000000190fc	movq	0x1b41d(%rip), %rsi     ## Objc selector ref: arrayWithObjects:count:
0000000000019103	movl	$0x2, %ecx
0000000000019108	movq	%r15, %rdx
000000000001910b	callq	*%r13
000000000001910e	movq	0x1c093(%rip), %rsi     ## Objc selector ref: sortSubviewsUsingFunction:context:
0000000000019115	leaq	0x27(%rip), %rdx
000000000001911c	movq	%r14, %rdi
000000000001911f	movq	%rax, %rcx
0000000000019122	callq	*%r13
0000000000019125	movq	(%r12), %rax
0000000000019129	cmpq	-0x30(%rbp), %rax
000000000001912d	jne	0x1913e
000000000001912f	addq	$0x18, %rsp
0000000000019133	popq	%rbx
0000000000019134	popq	%r12
0000000000019136	popq	%r13
0000000000019138	popq	%r14
000000000001913a	popq	%r15
000000000001913c	popq	%rbp
000000000001913d	retq
000000000001913e	callq	0x1e8b6                 ## symbol stub for: ___stack_chk_fail
0000000000019143	pushq	%rbp
0000000000019144	movq	%rsp, %rbp
0000000000019147	pushq	%r14
0000000000019149	pushq	%rbx
000000000001914a	movq	%rdx, %rbx
000000000001914d	movq	%rdi, %r14
0000000000019150	movq	0x1b219(%rip), %rsi     ## Objc selector ref: objectAtIndex:
0000000000019157	xorl	%edx, %edx
0000000000019159	movq	%rbx, %rdi
000000000001915c	callq	*0x1029e(%rip)          ## Objc message: +[NSArray objectAtIndex:]
0000000000019162	movq	%rax, %rcx
0000000000019165	movq	$-0x1, %rax
000000000001916c	cmpq	%r14, %rcx
000000000001916f	je	0x1918f
0000000000019171	movq	0x1b1f8(%rip), %rsi     ## Objc selector ref: objectAtIndex:
0000000000019178	movl	$0x1, %edx
000000000001917d	movq	%rbx, %rdi
0000000000019180	callq	*0x1027a(%rip)          ## Objc message: -[%rdi objectAtIndex:]
0000000000019186	cmpq	%r14, %rax
0000000000019189	sete	%al
000000000001918c	movzbl	%al, %eax
000000000001918f	popq	%rbx
0000000000019190	popq	%r14
0000000000019192	popq	%rbp
0000000000019193	retq
0000000000019194	pushq	%rbp
0000000000019195	movq	%rsp, %rbp
0000000000019198	pushq	%r15
000000000001919a	pushq	%r14
000000000001919c	pushq	%rbx
000000000001919d	pushq	%rax
000000000001919e	movq	%rdi, %rbx
00000000000191a1	callq	0x1e4d2                 ## symbol stub for: _UAPreferencesSynchronize
00000000000191a6	movq	_OBJC_IVAR_$_UniversalAccessPref._currentController(%rip), %r14
00000000000191ad	movq	(%rbx,%r14), %rdi
00000000000191b1	movq	0x1b580(%rip), %rsi     ## Objc selector ref: readPreferences:
00000000000191b8	movq	0x10241(%rip), %r15     ## Objc message: -[%rdi readPreferences:]
00000000000191bf	xorl	%edx, %edx
00000000000191c1	callq	*%r15
00000000000191c4	movq	(%rbx,%r14), %rdi
00000000000191c8	movq	0x1b579(%rip), %rsi     ## Objc selector ref: validateControls
00000000000191cf	movq	%r15, %rax
00000000000191d2	addq	$0x8, %rsp
00000000000191d6	popq	%rbx
00000000000191d7	popq	%r14
00000000000191d9	popq	%r15
00000000000191db	popq	%rbp
00000000000191dc	jmpq	*%rax
00000000000191de	pushq	%rbp
00000000000191df	movq	%rsp, %rbp
00000000000191e2	pushq	%rbx
00000000000191e3	subq	$0x18, %rsp
00000000000191e7	movq	%rdi, %rbx
00000000000191ea	callq	0x1e82c                 ## symbol stub for: _AuthorizationDismiss
00000000000191ef	movq	%rbx, -0x18(%rbp)
00000000000191f3	movq	0x1c58e(%rip), %rax     ## Objc class ref: UniversalAccessPref
00000000000191fa	movq	%rax, -0x10(%rbp)
00000000000191fe	movq	0x1bfab(%rip), %rsi     ## Objc selector ref: willUnselect
0000000000019205	leaq	-0x18(%rbp), %rdi
0000000000019209	callq	0x1e88c                 ## Objc message: -[[%rdi super] willUnselect]
000000000001920e	addq	$0x18, %rsp
0000000000019212	popq	%rbx
0000000000019213	popq	%rbp
0000000000019214	retq
0000000000019215	pushq	%rbp
0000000000019216	movq	%rsp, %rbp
0000000000019219	pushq	%r15
000000000001921b	pushq	%r14
000000000001921d	pushq	%r13
000000000001921f	pushq	%r12
0000000000019221	pushq	%rbx
0000000000019222	subq	$0xe8, %rsp
0000000000019229	movq	%rdi, %rbx
000000000001922c	movq	%rbx, -0x108(%rbp)
0000000000019233	movq	0x1011e(%rip), %rax     ## literal pool symbol address: ___stack_chk_guard
000000000001923a	movq	(%rax), %rax
000000000001923d	movq	%rax, -0x30(%rbp)
0000000000019241	movq	%rbx, -0xc0(%rbp)
0000000000019248	movq	0x1c539(%rip), %rax     ## Objc class ref: UniversalAccessPref
000000000001924f	movq	%rax, -0xb8(%rbp)
0000000000019256	movq	0x1bf5b(%rip), %rsi     ## Objc selector ref: mainViewDidLoad
000000000001925d	leaq	-0xc0(%rbp), %rdi
0000000000019264	callq	0x1e88c                 ## Objc message: -[[%rdi super] mainViewDidLoad]
0000000000019269	movq	0x1bf50(%rip), %rsi     ## Objc selector ref: _initializeLookupTables
0000000000019270	movq	0x10189(%rip), %r15     ## Objc message: -[%rdi _initializeLookupTables]
0000000000019277	movq	%rbx, %rdi
000000000001927a	callq	*%r15
000000000001927d	movq	0xff54(%rip), %rax      ## literal pool symbol address: _UAPreferencesDomain
0000000000019284	movq	(%rax), %r14
0000000000019287	movq	0x1bf3a(%rip), %rsi     ## Objc selector ref: addRelevantDomain:
000000000001928e	movq	%rbx, %rdi
0000000000019291	movq	%r14, %rdx
0000000000019294	callq	*%r15
0000000000019297	movq	0xfe82(%rip), %rax      ## literal pool symbol address: _OBJC_IVAR_$_NSPreference._prefs
000000000001929e	movq	(%rax), %rax
00000000000192a1	movq	(%rbx,%rax), %r13
00000000000192a5	movq	0x1c284(%rip), %r12     ## Objc class ref: _OBJC_CLASS_$_NSDictionary
00000000000192ac	movq	0x1bf1d(%rip), %rsi     ## Objc selector ref: bundle
00000000000192b3	movq	%rbx, %rdi
00000000000192b6	callq	*%r15
00000000000192b9	movq	0x1bf18(%rip), %rsi     ## Objc selector ref: pathForResource:ofType:
00000000000192c0	leaq	0x125a9(%rip), %rdx     ## Objc cfstring ref: @"UARegistrationDomain"
00000000000192c7	leaq	0x125c2(%rip), %rcx     ## Objc cfstring ref: @"plist"
00000000000192ce	movq	%rax, %rdi
00000000000192d1	callq	*%r15
00000000000192d4	movq	0x1bf05(%rip), %rsi     ## Objc selector ref: dictionaryWithContentsOfFile:
00000000000192db	movq	%r12, %rdi
00000000000192de	movq	%rax, %rdx
00000000000192e1	callq	*%r15
00000000000192e4	movq	0x1befd(%rip), %rsi     ## Objc selector ref: registerDefaults:forDomain:
00000000000192eb	movq	%r13, %rdi
00000000000192ee	movq	%rax, %rdx
00000000000192f1	movq	%r14, %rcx
00000000000192f4	callq	*%r15
00000000000192f7	movq	0x1c24a(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_NSNotificationCenter
00000000000192fe	movq	0x1b02b(%rip), %rsi     ## Objc selector ref: defaultCenter
0000000000019305	callq	*%r15
0000000000019308	movq	0x1bee1(%rip), %rcx     ## Objc selector ref: _applyMCXSettings:
000000000001930f	movq	0x1b452(%rip), %rsi     ## Objc selector ref: addObserver:selector:name:object:
0000000000019316	leaq	0x115b3(%rip), %r8      ## Objc cfstring ref: @"UAApplyMacManagerSettingsNotification"
000000000001931d	xorl	%r9d, %r9d
0000000000019320	movq	%rax, %rdi
0000000000019323	movq	%rbx, %rdx
0000000000019326	callq	*%r15
0000000000019329	movq	_OBJC_IVAR_$_UniversalAccessPref._currentController(%rip), %rax
0000000000019330	movq	(%rbx,%rax), %rdi
0000000000019334	movq	0x1b40d(%rip), %rsi     ## Objc selector ref: validateControls
000000000001933b	callq	*%r15
000000000001933e	xorps	%xmm0, %xmm0
0000000000019341	movaps	%xmm0, -0xd0(%rbp)
0000000000019348	movaps	%xmm0, -0xe0(%rbp)
000000000001934f	movaps	%xmm0, -0xf0(%rbp)
0000000000019356	movaps	%xmm0, -0x100(%rbp)
000000000001935d	movq	_OBJC_IVAR_$_UniversalAccessPref._featureTable(%rip), %rax
0000000000019364	movq	(%rbx,%rax), %rdi
0000000000019368	movq	0x1bde9(%rip), %rsi     ## Objc selector ref: tableColumns
000000000001936f	callq	*%r15
0000000000019372	movq	%rax, -0x110(%rbp)
0000000000019379	movq	0x1ad90(%rip), %rsi     ## Objc selector ref: countByEnumeratingWithState:objects:count:
0000000000019380	leaq	-0x100(%rbp), %rdx
0000000000019387	leaq	-0xb0(%rbp), %rcx
000000000001938e	movl	$0x10, %r8d
0000000000019394	movq	%rax, %rdi
0000000000019397	callq	*%r15
000000000001939a	movq	%r15, %r13
000000000001939d	movq	%rax, %rbx
00000000000193a0	testq	%rbx, %rbx
00000000000193a3	je	0x19438
00000000000193a9	movq	-0xf0(%rbp), %rax
00000000000193b0	movq	(%rax), %r15
00000000000193b3	xorl	%r12d, %r12d
00000000000193b6	movq	-0xf0(%rbp), %rax
00000000000193bd	cmpq	%r15, (%rax)
00000000000193c0	je	0x193ce
00000000000193c2	movq	-0x110(%rbp), %rdi
00000000000193c9	callq	0x1e886                 ## symbol stub for: _objc_enumerationMutation
00000000000193ce	movq	-0xf8(%rbp), %rax
00000000000193d5	movq	(%rax,%r12,8), %r14
00000000000193d9	movq	-0x108(%rbp), %rdi
00000000000193e0	movq	0x1bd79(%rip), %rsi     ## Objc selector ref: _columnWidth
00000000000193e7	callq	*%r13
00000000000193ea	cvtsi2sdq	%rax, %xmm0
00000000000193ef	movq	%r14, %rdi
00000000000193f2	movq	0x1bd6f(%rip), %rsi     ## Objc selector ref: setWidth:
00000000000193f9	callq	*%r13
00000000000193fc	incq	%r12
00000000000193ff	cmpq	%rbx, %r12
0000000000019402	jb	0x193b6
0000000000019404	movl	$0x10, %r8d
000000000001940a	movq	-0x110(%rbp), %rdi
0000000000019411	movq	0x1acf8(%rip), %rsi     ## Objc selector ref: countByEnumeratingWithState:objects:count:
0000000000019418	leaq	-0x100(%rbp), %rdx
000000000001941f	leaq	-0xb0(%rbp), %rcx
0000000000019426	callq	*0xffd4(%rip)           ## Objc message: +[NSNotificationCenter countByEnumeratingWithState:objects:count:]
000000000001942c	movq	%rax, %rbx
000000000001942f	testq	%rbx, %rbx
0000000000019432	jne	0x193b3
0000000000019438	movq	0xff19(%rip), %rax      ## literal pool symbol address: ___stack_chk_guard
000000000001943f	movq	(%rax), %rax
0000000000019442	cmpq	-0x30(%rbp), %rax
0000000000019446	jne	0x1945a
0000000000019448	addq	$0xe8, %rsp
000000000001944f	popq	%rbx
0000000000019450	popq	%r12
0000000000019452	popq	%r13
0000000000019454	popq	%r14
0000000000019456	popq	%r15
0000000000019458	popq	%rbp
0000000000019459	retq
000000000001945a	callq	0x1e8b6                 ## symbol stub for: ___stack_chk_fail
000000000001945f	pushq	%rbp
0000000000019460	movq	%rsp, %rbp
0000000000019463	movq	0x1bd8e(%rip), %rsi     ## Objc selector ref: applyMacManagerSettings
000000000001946a	popq	%rbp
000000000001946b	jmpq	*0xff8f(%rip)           ## Objc message: -[%rdi applyMacManagerSettings]
0000000000019471	pushq	%rbp
0000000000019472	movq	%rsp, %rbp
0000000000019475	movq	_OBJC_IVAR_$_UniversalAccessPref._currentController(%rip), %rax
000000000001947c	movq	(%rdi,%rax), %rdi
0000000000019480	movq	0x1b2c1(%rip), %rsi     ## Objc selector ref: validateControls
0000000000019487	popq	%rbp
0000000000019488	jmpq	*0xff72(%rip)           ## Objc message: -[%rdi validateControls]
000000000001948e	pushq	%rbp
000000000001948f	movq	%rsp, %rbp
0000000000019492	pushq	%r15
0000000000019494	pushq	%r14
0000000000019496	pushq	%r13
0000000000019498	pushq	%r12
000000000001949a	pushq	%rbx
000000000001949b	pushq	%rax
000000000001949c	movq	%rdx, %rbx
000000000001949f	movq	%rdi, %r14
00000000000194a2	movq	0x1c087(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_NSDictionary
00000000000194a9	movq	0x1ac10(%rip), %rsi     ## Objc selector ref: class
00000000000194b0	movq	0xff49(%rip), %r13      ## Objc message: +[NSDictionary class]
00000000000194b7	callq	*%r13
00000000000194ba	movq	0x1ac37(%rip), %rsi     ## Objc selector ref: isKindOfClass:
00000000000194c1	movq	%rbx, %rdi
00000000000194c4	movq	%rax, %rdx
00000000000194c7	callq	*%r13
00000000000194ca	xorl	%r12d, %r12d
00000000000194cd	testb	%al, %al
00000000000194cf	je	0x195d6
00000000000194d5	movq	0x1acec(%rip), %rsi     ## Objc selector ref: objectForKey:
00000000000194dc	leaq	0x11dad(%rip), %rdx     ## Objc cfstring ref: @"featureControllerName"
00000000000194e3	movq	%rbx, %rdi
00000000000194e6	callq	*%r13
00000000000194e9	movq	%rax, %r15
00000000000194ec	movq	0x1ac35(%rip), %rsi     ## Objc selector ref: length
00000000000194f3	movq	%r15, %rdi
00000000000194f6	callq	*%r13
00000000000194f9	xorl	%r12d, %r12d
00000000000194fc	testq	%rax, %rax
00000000000194ff	je	0x195d6
0000000000019505	movq	_OBJC_IVAR_$_UniversalAccessPref._paneControllers(%rip), %rax
000000000001950c	movq	(%r14,%rax), %rdi
0000000000019510	movq	0x1acb1(%rip), %rsi     ## Objc selector ref: objectForKey:
0000000000019517	movq	%r15, %rdx
000000000001951a	callq	*0xfee0(%rip)           ## Objc message: -[%rdi objectForKey:]
0000000000019520	movq	%rax, %r12
0000000000019523	testq	%r12, %r12
0000000000019526	jne	0x195d6
000000000001952c	movq	%r15, %rdi
000000000001952f	callq	0x1e838                 ## symbol stub for: _NSClassFromString
0000000000019534	testq	%rax, %rax
0000000000019537	je	0x195d6
000000000001953d	movq	0x1ac24(%rip), %rsi     ## Objc selector ref: alloc
0000000000019544	movq	%rax, %rdi
0000000000019547	callq	*%r13
000000000001954a	movq	%rax, %rbx
000000000001954d	movq	0x1c154(%rip), %rdi     ## Objc class ref: UAPOptionsViewController
0000000000019554	movq	0x1ab65(%rip), %rsi     ## Objc selector ref: class
000000000001955b	callq	*%r13
000000000001955e	movq	0x1ab93(%rip), %rsi     ## Objc selector ref: isKindOfClass:
0000000000019565	movq	%rbx, %rdi
0000000000019568	movq	%rax, %rdx
000000000001956b	callq	*%r13
000000000001956e	testb	%al, %al
0000000000019570	je	0x195b3
0000000000019572	movq	0x1bc87(%rip), %rsi     ## Objc selector ref: initWithUAPref:
0000000000019579	movq	%rbx, %rdi
000000000001957c	movq	%r14, %rdx
000000000001957f	callq	*0xfe7b(%rip)           ## Objc message: +[UAPOptionsViewController initWithUAPref:]
0000000000019585	movq	%rax, %rbx
0000000000019588	xorl	%r12d, %r12d
000000000001958b	testq	%rbx, %rbx
000000000001958e	je	0x195c6
0000000000019590	movq	_OBJC_IVAR_$_UniversalAccessPref._paneControllers(%rip), %rax
0000000000019597	movq	(%r14,%rax), %rdi
000000000001959b	movq	0x1ac7e(%rip), %rsi     ## Objc selector ref: setObject:forKey:
00000000000195a2	movq	%rbx, %rdx
00000000000195a5	movq	%r15, %rcx
00000000000195a8	callq	*0xfe52(%rip)           ## Objc message: -[%rdi setObject:forKey:]
00000000000195ae	movq	%rbx, %r12
00000000000195b1	jmp	0x195c6
00000000000195b3	movq	0x1ab96(%rip), %rsi     ## Objc selector ref: release
00000000000195ba	movq	%rbx, %rdi
00000000000195bd	callq	*0xfe3d(%rip)           ## Objc message: -[%rdi release]
00000000000195c3	xorl	%r12d, %r12d
00000000000195c6	movq	0x1ab83(%rip), %rsi     ## Objc selector ref: release
00000000000195cd	movq	%r12, %rdi
00000000000195d0	callq	*0xfe2a(%rip)           ## Objc message: -[%rdi release]
00000000000195d6	movq	%r12, %rax
00000000000195d9	addq	$0x8, %rsp
00000000000195dd	popq	%rbx
00000000000195de	popq	%r12
00000000000195e0	popq	%r13
00000000000195e2	popq	%r14
00000000000195e4	popq	%r15
00000000000195e6	popq	%rbp
00000000000195e7	retq
00000000000195e8	pushq	%rbp
00000000000195e9	movq	%rsp, %rbp
00000000000195ec	pushq	%rbx
00000000000195ed	subq	$0x28, %rsp
00000000000195f1	movq	0x1c0b8(%rip), %rdi     ## Objc class ref: UAFeatureTableRowView
00000000000195f8	movq	0x1ab69(%rip), %rsi     ## Objc selector ref: alloc
00000000000195ff	movq	0xfdfa(%rip), %rbx      ## Objc message: +[UAFeatureTableRowView alloc]
0000000000019606	callq	*%rbx
0000000000019608	movq	0x1ab31(%rip), %rsi     ## Objc selector ref: initWithFrame:
000000000001960f	movq	0xfafa(%rip), %rcx      ## literal pool symbol address: _NSZeroRect
0000000000019616	movq	0x18(%rcx), %rdx
000000000001961a	movq	%rdx, 0x18(%rsp)
000000000001961f	movq	0x10(%rcx), %rdx
0000000000019623	movq	%rdx, 0x10(%rsp)
0000000000019628	movq	(%rcx), %rdx
000000000001962b	movq	0x8(%rcx), %rcx
000000000001962f	movq	%rcx, 0x8(%rsp)
0000000000019634	movq	%rdx, (%rsp)
0000000000019638	movq	%rax, %rdi
000000000001963b	callq	*%rbx
000000000001963d	movq	0x1aac4(%rip), %rsi     ## Objc selector ref: autorelease
0000000000019644	movq	%rax, %rdi
0000000000019647	movq	%rbx, %rax
000000000001964a	addq	$0x28, %rsp
000000000001964e	popq	%rbx
000000000001964f	popq	%rbp
0000000000019650	jmpq	*%rax
0000000000019652	pushq	%rbp
0000000000019653	movq	%rsp, %rbp
0000000000019656	pushq	%r15
0000000000019658	pushq	%r14
000000000001965a	pushq	%r13
000000000001965c	pushq	%r12
000000000001965e	pushq	%rbx
000000000001965f	subq	$0x108, %rsp            ## imm = 0x108
0000000000019666	movq	%rdi, %rbx
0000000000019669	movq	0xfce8(%rip), %r14      ## literal pool symbol address: ___stack_chk_guard
0000000000019670	movq	(%r14), %rax
0000000000019673	movq	%rax, -0x30(%rbp)
0000000000019677	callq	0x1e82c                 ## symbol stub for: _AuthorizationDismiss
000000000001967c	movq	_OBJC_IVAR_$_UniversalAccessPref._featureTable(%rip), %r13
0000000000019683	movq	(%rbx,%r13), %rdi
0000000000019687	movq	0x1ad2a(%rip), %rsi     ## Objc selector ref: selectedRow
000000000001968e	movq	0xfd6b(%rip), %r15      ## Objc message: -[%rdi selectedRow]
0000000000019695	callq	*%r15
0000000000019698	movq	_OBJC_IVAR_$_UniversalAccessPref._featureTableContents(%rip), %rcx
000000000001969f	movq	(%rbx,%rcx), %rdi
00000000000196a3	movq	0x1acc6(%rip), %rsi     ## Objc selector ref: objectAtIndex:
00000000000196aa	movq	%rax, %rdx
00000000000196ad	callq	*%r15
00000000000196b0	movq	%rax, %r12
00000000000196b3	movq	0x1be76(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_NSDictionary
00000000000196ba	movq	0x1a9ff(%rip), %rsi     ## Objc selector ref: class
00000000000196c1	callq	*%r15
00000000000196c4	movq	0x1aa2d(%rip), %rsi     ## Objc selector ref: isKindOfClass:
00000000000196cb	movq	%r12, %rdi
00000000000196ce	movq	%rax, %rdx
00000000000196d1	callq	*%r15
00000000000196d4	testb	%al, %al
00000000000196d6	je	0x19732
00000000000196d8	movq	0x1aae9(%rip), %rsi     ## Objc selector ref: objectForKey:
00000000000196df	leaq	0x11aea(%rip), %rdx     ## Objc cfstring ref: @"featureID"
00000000000196e6	movq	%r12, %rdi
00000000000196e9	callq	*0xfd11(%rip)           ## Objc message: +[NSDictionary objectForKey:]
00000000000196ef	testq	%rax, %rax
00000000000196f2	je	0x19732
00000000000196f4	movq	0x1aa3d(%rip), %rsi     ## Objc selector ref: integerValue
00000000000196fb	movq	%rax, %rdi
00000000000196fe	callq	*%r15
0000000000019701	movq	0xfae8(%rip), %rcx      ## literal pool symbol address: _UASelectedTabKey
0000000000019708	movq	(%rcx), %rcx
000000000001970b	movq	0xfac6(%rip), %rdx      ## literal pool symbol address: _UAPreferencesDomain
0000000000019712	movq	(%rdx), %r8
0000000000019715	movq	0x1baec(%rip), %rsi     ## Objc selector ref: setInteger:forKey:inDomain:
000000000001971c	movq	%rbx, %rdi
000000000001971f	movq	%rax, %rdx
0000000000019722	callq	*%r15
0000000000019725	movq	0x1bae4(%rip), %rsi     ## Objc selector ref: synchronizePrefs
000000000001972c	movq	%rbx, %rdi
000000000001972f	callq	*%r15
0000000000019732	movq	0x1badf(%rip), %rsi     ## Objc selector ref: _viewControllerForEntity:
0000000000019739	movq	%rbx, %rdi
000000000001973c	movq	%r12, %rdx
000000000001973f	callq	*0xfcbb(%rip)           ## Objc message: -[%rdi _viewControllerForEntity:]
0000000000019745	movq	%rbx, %r12
0000000000019748	movq	%rax, %rbx
000000000001974b	testq	%rbx, %rbx
000000000001974e	je	0x19ad5
0000000000019754	movq	0x1ac65(%rip), %rsi     ## Objc selector ref: view
000000000001975b	movq	%rbx, %rdi
000000000001975e	callq	*0xfc9c(%rip)           ## Objc message: -[%rdi view]
0000000000019764	testq	%rax, %rax
0000000000019767	je	0x19ad5
000000000001976d	movq	%rax, -0x120(%rbp)
0000000000019774	movq	0x1afcd(%rip), %rsi     ## Objc selector ref: validateControls
000000000001977b	movq	%rbx, %rdi
000000000001977e	movq	%rbx, -0x118(%rbp)
0000000000019785	callq	*%r15
0000000000019788	xorps	%xmm0, %xmm0
000000000001978b	movaps	%xmm0, -0xc0(%rbp)
0000000000019792	movaps	%xmm0, -0xd0(%rbp)
0000000000019799	movaps	%xmm0, -0xe0(%rbp)
00000000000197a0	movaps	%xmm0, -0xf0(%rbp)
00000000000197a7	movq	_OBJC_IVAR_$_UniversalAccessPref._optionsViewHolder(%rip), %rax
00000000000197ae	movq	(%r12,%rax), %rdi
00000000000197b2	movq	%r12, -0x110(%rbp)
00000000000197b9	movq	0x1b698(%rip), %rsi     ## Objc selector ref: subviews
00000000000197c0	callq	*%r15
00000000000197c3	movq	%rax, %r13
00000000000197c6	movq	0x1a943(%rip), %rsi     ## Objc selector ref: countByEnumeratingWithState:objects:count:
00000000000197cd	leaq	-0xf0(%rbp), %rdx
00000000000197d4	leaq	-0xb0(%rbp), %rcx
00000000000197db	movl	$0x10, %r8d
00000000000197e1	movq	%r13, %rdi
00000000000197e4	callq	*%r15
00000000000197e7	movq	%rax, %r14
00000000000197ea	testq	%r14, %r14
00000000000197ed	je	0x1985f
00000000000197ef	movq	-0xe0(%rbp), %rax
00000000000197f6	movq	(%rax), %r12
00000000000197f9	movq	0x1ba20(%rip), %rbx     ## Objc selector ref: removeFromSuperview
0000000000019800	xorl	%r15d, %r15d
0000000000019803	movq	-0xe0(%rbp), %rax
000000000001980a	cmpq	%r12, (%rax)
000000000001980d	je	0x19817
000000000001980f	movq	%r13, %rdi
0000000000019812	callq	0x1e886                 ## symbol stub for: _objc_enumerationMutation
0000000000019817	movq	-0xe8(%rbp), %rax
000000000001981e	movq	(%rax,%r15,8), %rdi
0000000000019822	movq	%rbx, %rsi
0000000000019825	callq	*0xfbd5(%rip)           ## Objc message: -[%rdi removeFromSuperview]
000000000001982b	incq	%r15
000000000001982e	cmpq	%r14, %r15
0000000000019831	jb	0x19803
0000000000019833	movl	$0x10, %r8d
0000000000019839	movq	%r13, %rdi
000000000001983c	movq	0x1a8cd(%rip), %rsi     ## Objc selector ref: countByEnumeratingWithState:objects:count:
0000000000019843	leaq	-0xf0(%rbp), %rdx
000000000001984a	leaq	-0xb0(%rbp), %rcx
0000000000019851	callq	*0xfba9(%rip)           ## Objc message: -[%rdi countByEnumeratingWithState:objects:count:]
0000000000019857	movq	%rax, %r14
000000000001985a	testq	%r14, %r14
000000000001985d	jne	0x19800
000000000001985f	movq	0x1aa52(%rip), %rsi     ## Objc selector ref: setTranslatesAutoresizingMaskIntoConstraints:
0000000000019866	xorl	%edx, %edx
0000000000019868	movq	-0x120(%rbp), %r13
000000000001986f	movq	%r13, %rdi
0000000000019872	movq	0xfb87(%rip), %rbx      ## Objc message: -[%rdi setTranslatesAutoresizingMaskIntoConstraints:]
0000000000019879	movq	%rbx, %r15
000000000001987c	callq	*%r15
000000000001987f	movq	0x1bda2(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_NSPrefPaneUtils
0000000000019886	movq	0x1b99b(%rip), %rsi     ## Objc selector ref: showAllScrollViewWidth
000000000001988d	callq	*%r15
0000000000019890	cvtsi2sdq	%rax, %xmm0
0000000000019895	movsd	%xmm0, -0x108(%rbp)
000000000001989d	movq	_OBJC_IVAR_$_UniversalAccessPref._sidebarLeading(%rip), %rax
00000000000198a4	movq	-0x110(%rbp), %r12
00000000000198ab	movq	(%r12,%rax), %rdi
00000000000198af	movq	0x1b97a(%rip), %rsi     ## Objc selector ref: constant
00000000000198b6	callq	*%r15
00000000000198b9	movsd	-0x108(%rbp), %xmm1
00000000000198c1	subsd	%xmm0, %xmm1
00000000000198c5	movsd	%xmm1, -0x108(%rbp)
00000000000198cd	movq	_OBJC_IVAR_$_UniversalAccessPref._sidebarWidth(%rip), %rax
00000000000198d4	movq	(%r12,%rax), %rdi
00000000000198d8	movq	0x1b951(%rip), %rsi     ## Objc selector ref: constant
00000000000198df	callq	*%r15
00000000000198e2	movsd	-0x108(%rbp), %xmm1
00000000000198ea	subsd	%xmm0, %xmm1
00000000000198ee	movsd	%xmm1, -0x108(%rbp)
00000000000198f6	movq	_OBJC_IVAR_$_UniversalAccessPref._sidebarOptionsViewHolderSpacing(%rip), %rax
00000000000198fd	movq	(%r12,%rax), %rdi
0000000000019901	movq	0x1b928(%rip), %rsi     ## Objc selector ref: constant
0000000000019908	callq	*%r15
000000000001990b	movsd	-0x108(%rbp), %xmm1
0000000000019913	subsd	%xmm0, %xmm1
0000000000019917	movsd	%xmm1, -0x108(%rbp)
000000000001991f	movq	_OBJC_IVAR_$_UniversalAccessPref._optionsViewHolderTrailing(%rip), %rax
0000000000019926	movq	(%r12,%rax), %rdi
000000000001992a	movq	0x1b8ff(%rip), %rsi     ## Objc selector ref: constant
0000000000019931	callq	*%r15
0000000000019934	movsd	-0x108(%rbp), %xmm1
000000000001993c	subsd	%xmm0, %xmm1
0000000000019940	cvttsd2si	%xmm1, %rax
0000000000019945	movq	_OBJC_IVAR_$_UniversalAccessPref._optionsViewHolderWidth(%rip), %rcx
000000000001994c	movq	(%r12,%rcx), %rdi
0000000000019950	cvtsi2sdq	%rax, %xmm0
0000000000019955	movq	0x1b8dc(%rip), %rsi     ## Objc selector ref: setConstant:
000000000001995c	callq	*%r15
000000000001995f	movq	_OBJC_IVAR_$_UniversalAccessPref._optionsViewHolder(%rip), %rbx
0000000000019966	movq	(%r12,%rbx), %rdi
000000000001996a	movq	0x1b8cf(%rip), %rsi     ## Objc selector ref: addSubview:
0000000000019971	movq	%r13, %rdx
0000000000019974	callq	*%r15
0000000000019977	movq	(%r12,%rbx), %r14
000000000001997b	movq	0x1bbbe(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_NSLayoutConstraint
0000000000019982	movq	0x1a93f(%rip), %rsi     ## Objc selector ref: constraintWithItem:attribute:relatedBy:toItem:attribute:multiplier:constant:
0000000000019989	movq	$0x5, (%rsp)
0000000000019991	movsd	0xe957(%rip), %xmm0
0000000000019999	movl	$0x5, %ecx
000000000001999e	xorl	%r8d, %r8d
00000000000199a1	xorps	%xmm1, %xmm1
00000000000199a4	movq	%r14, %rdx
00000000000199a7	movq	%r13, %r9
00000000000199aa	callq	*%r15
00000000000199ad	movq	0x1a91c(%rip), %rsi     ## Objc selector ref: addConstraint:
00000000000199b4	movq	%r14, %rdi
00000000000199b7	movq	%rax, %rdx
00000000000199ba	callq	*%r15
00000000000199bd	movq	(%r12,%rbx), %r14
00000000000199c1	movq	0x1bb78(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_NSLayoutConstraint
00000000000199c8	movq	0x1a8f9(%rip), %rsi     ## Objc selector ref: constraintWithItem:attribute:relatedBy:toItem:attribute:multiplier:constant:
00000000000199cf	movq	$0x6, (%rsp)
00000000000199d7	movl	$0x6, %ecx
00000000000199dc	xorl	%r8d, %r8d
00000000000199df	xorps	%xmm1, %xmm1
00000000000199e2	movq	%r14, %rdx
00000000000199e5	movq	%r13, %r9
00000000000199e8	movsd	0xe900(%rip), %xmm0
00000000000199f0	callq	*%r15
00000000000199f3	movq	0x1a8d6(%rip), %rsi     ## Objc selector ref: addConstraint:
00000000000199fa	movq	%r14, %rdi
00000000000199fd	movq	%rax, %rdx
0000000000019a00	callq	*%r15
0000000000019a03	movq	(%r12,%rbx), %r14
0000000000019a07	movq	0x1bb32(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_NSLayoutConstraint
0000000000019a0e	movq	0x1a8b3(%rip), %rsi     ## Objc selector ref: constraintWithItem:attribute:relatedBy:toItem:attribute:multiplier:constant:
0000000000019a15	movq	$0x3, (%rsp)
0000000000019a1d	movl	$0x3, %ecx
0000000000019a22	xorl	%r8d, %r8d
0000000000019a25	xorps	%xmm1, %xmm1
0000000000019a28	movq	%r14, %rdx
0000000000019a2b	movq	%r13, %r9
0000000000019a2e	movsd	0xe8ba(%rip), %xmm0
0000000000019a36	callq	*%r15
0000000000019a39	movq	0x1a890(%rip), %rsi     ## Objc selector ref: addConstraint:
0000000000019a40	movq	%r14, %rdi
0000000000019a43	movq	%rax, %rdx
0000000000019a46	callq	*%r15
0000000000019a49	movq	(%r12,%rbx), %r14
0000000000019a4d	movq	0x1baec(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_NSLayoutConstraint
0000000000019a54	movq	0x1a86d(%rip), %rsi     ## Objc selector ref: constraintWithItem:attribute:relatedBy:toItem:attribute:multiplier:constant:
0000000000019a5b	movq	$0x4, (%rsp)
0000000000019a63	movl	$0x4, %ecx
0000000000019a68	xorl	%r8d, %r8d
0000000000019a6b	xorps	%xmm1, %xmm1
0000000000019a6e	movq	%r14, %rdx
0000000000019a71	movq	%r13, %r9
0000000000019a74	movsd	0xe874(%rip), %xmm0
0000000000019a7c	callq	*%r15
0000000000019a7f	movq	0x1a84a(%rip), %rsi     ## Objc selector ref: addConstraint:
0000000000019a86	movq	%r14, %rdi
0000000000019a89	movq	%rax, %rdx
0000000000019a8c	callq	*%r15
0000000000019a8f	movq	_OBJC_IVAR_$_UniversalAccessPref._currentController(%rip), %rax
0000000000019a96	movq	(%r12,%rax), %rdi
0000000000019a9a	movq	0x1a6af(%rip), %rsi     ## Objc selector ref: release
0000000000019aa1	callq	*%r15
0000000000019aa4	movq	0x1a7bd(%rip), %rsi     ## Objc selector ref: retain
0000000000019aab	movq	-0x118(%rbp), %rdi
0000000000019ab2	callq	*%r15
0000000000019ab5	movq	_OBJC_IVAR_$_UniversalAccessPref._currentController(%rip), %rdx
0000000000019abc	movq	%rax, %rdi
0000000000019abf	movq	%r12, %rsi
0000000000019ac2	callq	0x1e868                 ## symbol stub for: _objc_assign_ivar
0000000000019ac7	movq	0xf88a(%rip), %r14      ## literal pool symbol address: ___stack_chk_guard
0000000000019ace	movq	_OBJC_IVAR_$_UniversalAccessPref._featureTable(%rip), %r13
0000000000019ad5	movq	(%r12,%r13), %rdi
0000000000019ad9	movq	0x1a8e8(%rip), %rsi     ## Objc selector ref: window
0000000000019ae0	callq	*%r15
0000000000019ae3	movq	0x1b75e(%rip), %rsi     ## Objc selector ref: recalculateKeyViewLoop
0000000000019aea	movq	%rax, %rdi
0000000000019aed	callq	*%r15
0000000000019af0	movq	%r12, -0x100(%rbp)
0000000000019af7	movq	0x1bc8a(%rip), %rax     ## Objc class ref: UniversalAccessPref
0000000000019afe	movq	%rax, -0xf8(%rbp)
0000000000019b05	movq	0x1b6ec(%rip), %rsi     ## Objc selector ref: applyMacManagerSettings
0000000000019b0c	leaq	-0x100(%rbp), %rdi
0000000000019b13	callq	0x1e88c                 ## Objc message: -[[%rdi super] applyMacManagerSettings]
0000000000019b18	movq	(%r14), %rax
0000000000019b1b	cmpq	-0x30(%rbp), %rax
0000000000019b1f	jne	0x19b33
0000000000019b21	addq	$0x108, %rsp            ## imm = 0x108
0000000000019b28	popq	%rbx
0000000000019b29	popq	%r12
0000000000019b2b	popq	%r13
0000000000019b2d	popq	%r14
0000000000019b2f	popq	%r15
0000000000019b31	popq	%rbp
0000000000019b32	retq
0000000000019b33	callq	0x1e8b6                 ## symbol stub for: ___stack_chk_fail
0000000000019b38	pushq	%rbp
0000000000019b39	movq	%rsp, %rbp
0000000000019b3c	pushq	%r15
0000000000019b3e	pushq	%r14
0000000000019b40	pushq	%r12
0000000000019b42	pushq	%rbx
0000000000019b43	subq	$0x30, %rsp
0000000000019b47	movq	%rcx, %r14
0000000000019b4a	movq	%rdi, %r15
0000000000019b4d	movq	0x1bb64(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_NSMutableIndexSet
0000000000019b54	movq	0x1a60d(%rip), %rsi     ## Objc selector ref: alloc
0000000000019b5b	movq	0xf89e(%rip), %r12      ## Objc message: +[NSMutableIndexSet alloc]
0000000000019b62	callq	*%r12
0000000000019b65	movq	0x1a704(%rip), %rsi     ## Objc selector ref: init
0000000000019b6c	movq	%rax, %rdi
0000000000019b6f	callq	*%r12
0000000000019b72	movq	%rax, %rbx
0000000000019b75	movq	0xf7cc(%rip), %rax      ## literal pool symbol address: __NSConcreteStackBlock
0000000000019b7c	movq	%rax, -0x50(%rbp)
0000000000019b80	movl	$0x42000000, -0x48(%rbp) ## imm = 0x42000000
0000000000019b87	movl	$0x0, -0x44(%rbp)
0000000000019b8e	leaq	0x48(%rip), %rax
0000000000019b95	movq	%rax, -0x40(%rbp)
0000000000019b99	leaq	0x103c0(%rip), %rax
0000000000019ba0	movq	%rax, -0x38(%rbp)
0000000000019ba4	leaq	-0x30(%rbp), %rsi
0000000000019ba8	movq	%r15, %rdi
0000000000019bab	callq	0x1e86e                 ## symbol stub for: _objc_assign_strongCast
0000000000019bb0	leaq	-0x28(%rbp), %rsi
0000000000019bb4	movq	%rbx, %rdi
0000000000019bb7	callq	0x1e86e                 ## symbol stub for: _objc_assign_strongCast
0000000000019bbc	movq	0x1b695(%rip), %rsi     ## Objc selector ref: enumerateIndexesUsingBlock:
0000000000019bc3	leaq	-0x50(%rbp), %rdx
0000000000019bc7	movq	%r14, %rdi
0000000000019bca	callq	*%r12
0000000000019bcd	movq	%rbx, %rax
0000000000019bd0	addq	$0x30, %rsp
0000000000019bd4	popq	%rbx
0000000000019bd5	popq	%r12
0000000000019bd7	popq	%r14
0000000000019bd9	popq	%r15
0000000000019bdb	popq	%rbp
0000000000019bdc	retq
0000000000019bdd	pushq	%rbp
0000000000019bde	movq	%rsp, %rbp
0000000000019be1	pushq	%r15
0000000000019be3	pushq	%r14
0000000000019be5	pushq	%r12
0000000000019be7	pushq	%rbx
0000000000019be8	movq	%rsi, %r14
0000000000019beb	movq	%rdi, %r15
0000000000019bee	movq	0x20(%r15), %rax
0000000000019bf2	movq	_OBJC_IVAR_$_UniversalAccessPref._featureTableContents(%rip), %rcx
0000000000019bf9	movq	(%rax,%rcx), %rdi
0000000000019bfd	movq	0x1a76c(%rip), %rsi     ## Objc selector ref: objectAtIndex:
0000000000019c04	movq	0xf7f5(%rip), %r12      ## Objc message: -[%rdi objectAtIndex:]
0000000000019c0b	movq	%r14, %rdx
0000000000019c0e	callq	*%r12
0000000000019c11	movq	%rax, %rbx
0000000000019c14	movq	0x1b915(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_NSDictionary
0000000000019c1b	movq	0x1a49e(%rip), %rsi     ## Objc selector ref: class
0000000000019c22	callq	*%r12
0000000000019c25	movq	0x1a4cc(%rip), %rsi     ## Objc selector ref: isKindOfClass:
0000000000019c2c	movq	%rbx, %rdi
0000000000019c2f	movq	%rax, %rdx
0000000000019c32	callq	*%r12
0000000000019c35	testb	%al, %al
0000000000019c37	je	0x19c55
0000000000019c39	movq	0x28(%r15), %rdi
0000000000019c3d	movq	0x1b60c(%rip), %rsi     ## Objc selector ref: addIndex:
0000000000019c44	movq	%r14, %rdx
0000000000019c47	popq	%rbx
0000000000019c48	popq	%r12
0000000000019c4a	popq	%r14
0000000000019c4c	popq	%r15
0000000000019c4e	popq	%rbp
0000000000019c4f	jmpq	*0xf7ab(%rip)           ## Objc message: +[NSDictionary addIndex:]
0000000000019c55	popq	%rbx
0000000000019c56	popq	%r12
0000000000019c58	popq	%r14
0000000000019c5a	popq	%r15
0000000000019c5c	popq	%rbp
0000000000019c5d	retq
0000000000019c5e	nop
0000000000019c60	pushq	%rbp
0000000000019c61	movq	%rsp, %rbp
0000000000019c64	pushq	%r14
0000000000019c66	pushq	%rbx
0000000000019c67	movq	%rsi, %r14
0000000000019c6a	movq	%rdi, %rbx
0000000000019c6d	leaq	0x20(%rbx), %rdi
0000000000019c71	movq	0x20(%r14), %rsi
0000000000019c75	movl	$0x3, %edx
0000000000019c7a	callq	0x1e8a4                 ## symbol stub for: __Block_object_assign
0000000000019c7f	addq	$0x28, %rbx
0000000000019c83	movq	0x28(%r14), %rsi
0000000000019c87	movl	$0x3, %edx
0000000000019c8c	movq	%rbx, %rdi
0000000000019c8f	popq	%rbx
0000000000019c90	popq	%r14
0000000000019c92	popq	%rbp
0000000000019c93	jmp	0x1e8a4                 ## symbol stub for: __Block_object_assign
0000000000019c98	nopl	(%rax,%rax)
0000000000019ca0	pushq	%rbp
0000000000019ca1	movq	%rsp, %rbp
0000000000019ca4	pushq	%rbx
0000000000019ca5	pushq	%rax
0000000000019ca6	movq	%rdi, %rbx
0000000000019ca9	movq	0x20(%rbx), %rdi
0000000000019cad	movl	$0x3, %esi
0000000000019cb2	callq	0x1e8aa                 ## symbol stub for: __Block_object_dispose
0000000000019cb7	movq	0x28(%rbx), %rdi
0000000000019cbb	movl	$0x3, %esi
0000000000019cc0	addq	$0x8, %rsp
0000000000019cc4	popq	%rbx
0000000000019cc5	popq	%rbp
0000000000019cc6	jmp	0x1e8aa                 ## symbol stub for: __Block_object_dispose
0000000000019ccb	pushq	%rbp
0000000000019ccc	movq	%rsp, %rbp
0000000000019ccf	movq	_OBJC_IVAR_$_UniversalAccessPref._featureTableContents(%rip), %rax
0000000000019cd6	movq	(%rdi,%rax), %rdi
0000000000019cda	movq	0x1a687(%rip), %rsi     ## Objc selector ref: count
0000000000019ce1	popq	%rbp
0000000000019ce2	jmpq	*0xf718(%rip)           ## Objc message: -[%rdi count]
0000000000019ce8	pushq	%rbp
0000000000019ce9	movq	%rsp, %rbp
0000000000019cec	pushq	%r14
0000000000019cee	pushq	%rbx
0000000000019cef	movq	_OBJC_IVAR_$_UniversalAccessPref._featureTableContents(%rip), %rax
0000000000019cf6	movq	(%rdi,%rax), %rdi
0000000000019cfa	movq	0x1a66f(%rip), %rsi     ## Objc selector ref: objectAtIndex:
0000000000019d01	movq	0xf6f8(%rip), %r14      ## Objc message: -[%rdi objectAtIndex:]
0000000000019d08	movq	%rcx, %rdx
0000000000019d0b	callq	*%r14
0000000000019d0e	movq	%rax, %rbx
0000000000019d11	movq	0x1b800(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_NSString
0000000000019d18	movq	0x1a3a1(%rip), %rsi     ## Objc selector ref: class
0000000000019d1f	callq	*%r14
0000000000019d22	movq	0x1a3cf(%rip), %rsi     ## Objc selector ref: isKindOfClass:
0000000000019d29	movq	%rbx, %rdi
0000000000019d2c	movq	%rax, %rdx
0000000000019d2f	movq	%r14, %rax
0000000000019d32	popq	%rbx
0000000000019d33	popq	%r14
0000000000019d35	popq	%rbp
0000000000019d36	jmpq	*%rax
0000000000019d38	pushq	%rbp
0000000000019d39	movq	%rsp, %rbp
0000000000019d3c	pushq	%r15
0000000000019d3e	pushq	%r14
0000000000019d40	pushq	%r13
0000000000019d42	pushq	%r12
0000000000019d44	pushq	%rbx
0000000000019d45	subq	$0x1c8, %rsp            ## imm = 0x1C8
0000000000019d4c	movq	%rdx, %r14
0000000000019d4f	movq	0xf602(%rip), %rax      ## literal pool symbol address: ___stack_chk_guard
0000000000019d56	movq	(%rax), %rax
0000000000019d59	movq	%rax, -0x30(%rbp)
0000000000019d5d	movq	_OBJC_IVAR_$_UniversalAccessPref._featureTableContents(%rip), %rax
0000000000019d64	movq	(%rdi,%rax), %rdi
0000000000019d68	movq	0x1a601(%rip), %rsi     ## Objc selector ref: objectAtIndex:
0000000000019d6f	movq	0xf68a(%rip), %r13      ## Objc message: +[NSString objectAtIndex:]
0000000000019d76	movq	%r8, %rdx
0000000000019d79	callq	*%r13
0000000000019d7c	movq	%rax, %rbx
0000000000019d7f	movq	0x1b792(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_NSString
0000000000019d86	movq	0x1a333(%rip), %rsi     ## Objc selector ref: class
0000000000019d8d	callq	*%r13
0000000000019d90	movq	0x1a361(%rip), %rsi     ## Objc selector ref: isKindOfClass:
0000000000019d97	movq	%rbx, %rdi
0000000000019d9a	movq	%rax, %rdx
0000000000019d9d	callq	*%r13
0000000000019da0	testb	%al, %al
0000000000019da2	je	0x19ed9
0000000000019da8	movq	%rbx, -0x1b8(%rbp)
0000000000019daf	movq	0x1a652(%rip), %rsi     ## Objc selector ref: makeViewWithIdentifier:owner:
0000000000019db6	leaq	0x11af3(%rip), %rdx     ## Objc cfstring ref: @"HEADER_CELL"
0000000000019dbd	xorl	%ecx, %ecx
0000000000019dbf	movq	%r14, %rdi
0000000000019dc2	callq	*%r13
0000000000019dc5	movq	%rax, -0x1e0(%rbp)
0000000000019dcc	xorps	%xmm0, %xmm0
0000000000019dcf	movaps	%xmm0, -0x140(%rbp)
0000000000019dd6	movaps	%xmm0, -0x150(%rbp)
0000000000019ddd	movaps	%xmm0, -0x160(%rbp)
0000000000019de4	movaps	%xmm0, -0x170(%rbp)
0000000000019deb	movq	0x1b066(%rip), %rsi     ## Objc selector ref: subviews
0000000000019df2	movq	%rax, %rdi
0000000000019df5	callq	*%r13
0000000000019df8	movq	%rax, -0x1c0(%rbp)
0000000000019dff	movq	0x1a30a(%rip), %rsi     ## Objc selector ref: countByEnumeratingWithState:objects:count:
0000000000019e06	leaq	-0x170(%rbp), %rdx
0000000000019e0d	leaq	-0xb0(%rbp), %rcx
0000000000019e14	movl	$0x10, %r8d
0000000000019e1a	movq	%rax, %rdi
0000000000019e1d	callq	*%r13
0000000000019e20	movq	%rax, %rbx
0000000000019e23	testq	%rbx, %rbx
0000000000019e26	je	0x1a0f2
0000000000019e2c	movq	-0x160(%rbp), %rax
0000000000019e33	movq	(%rax), %r15
0000000000019e36	xorl	%r12d, %r12d
0000000000019e39	movq	-0x160(%rbp), %rax
0000000000019e40	cmpq	%r15, (%rax)
0000000000019e43	je	0x19e51
0000000000019e45	movq	-0x1c0(%rbp), %rdi
0000000000019e4c	callq	0x1e886                 ## symbol stub for: _objc_enumerationMutation
0000000000019e51	movq	-0x168(%rbp), %rax
0000000000019e58	movq	(%rax,%r12,8), %r14
0000000000019e5c	movq	0x1b7cd(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_NSTextField
0000000000019e63	movq	0x1a256(%rip), %rsi     ## Objc selector ref: class
0000000000019e6a	callq	*%r13
0000000000019e6d	movq	%r14, %rdi
0000000000019e70	movq	0x1a281(%rip), %rsi     ## Objc selector ref: isKindOfClass:
0000000000019e77	movq	%rax, %rdx
0000000000019e7a	callq	*%r13
0000000000019e7d	testb	%al, %al
0000000000019e7f	je	0x19e98
0000000000019e81	movq	%r14, %rdi
0000000000019e84	movq	0x1a58d(%rip), %rsi     ## Objc selector ref: setStringValue:
0000000000019e8b	movq	-0x1b8(%rbp), %rdx
0000000000019e92	callq	*0xf568(%rip)           ## Objc message: +[NSTextField setStringValue:]
0000000000019e98	incq	%r12
0000000000019e9b	cmpq	%rbx, %r12
0000000000019e9e	jb	0x19e39
0000000000019ea0	movl	$0x10, %r8d
0000000000019ea6	movq	-0x1c0(%rbp), %rdi
0000000000019ead	movq	0x1a25c(%rip), %rsi     ## Objc selector ref: countByEnumeratingWithState:objects:count:
0000000000019eb4	leaq	-0x170(%rbp), %rdx
0000000000019ebb	leaq	-0xb0(%rbp), %rcx
0000000000019ec2	callq	*0xf538(%rip)           ## Objc message: -[%rdi countByEnumeratingWithState:objects:count:]
0000000000019ec8	movq	%rax, %rbx
0000000000019ecb	testq	%rbx, %rbx
0000000000019ece	jne	0x19e36
0000000000019ed4	jmp	0x1a0f2
0000000000019ed9	movq	0x1b650(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_NSDictionary
0000000000019ee0	movq	0x1a1d9(%rip), %rsi     ## Objc selector ref: class
0000000000019ee7	callq	*%r13
0000000000019eea	movq	0x1a207(%rip), %rsi     ## Objc selector ref: isKindOfClass:
0000000000019ef1	movq	%rbx, %rdi
0000000000019ef4	movq	%rbx, %r15
0000000000019ef7	movq	%rax, %rdx
0000000000019efa	callq	*%r13
0000000000019efd	movq	%r13, %rbx
0000000000019f00	xorl	%ecx, %ecx
0000000000019f02	movq	%rcx, -0x1e0(%rbp)
0000000000019f09	testb	%al, %al
0000000000019f0b	je	0x1a0f2
0000000000019f11	movq	0x1a2b0(%rip), %rsi     ## Objc selector ref: objectForKey:
0000000000019f18	leaq	0x112f1(%rip), %rdx     ## Objc cfstring ref: @"featureTitle"
0000000000019f1f	movq	%r15, %rdi
0000000000019f22	callq	*%rbx
0000000000019f24	movq	%rax, -0x1c8(%rbp)
0000000000019f2b	movq	0x1a296(%rip), %rsi     ## Objc selector ref: objectForKey:
0000000000019f32	leaq	0x11317(%rip), %rdx     ## Objc cfstring ref: @"featureIcon"
0000000000019f39	movq	%r15, %rdi
0000000000019f3c	callq	*%rbx
0000000000019f3e	movq	%rax, -0x1d8(%rbp)
0000000000019f45	movq	0x1a4bc(%rip), %rsi     ## Objc selector ref: makeViewWithIdentifier:owner:
0000000000019f4c	leaq	0x1197d(%rip), %rdx     ## Objc cfstring ref: @"FEATURE_CELL"
0000000000019f53	xorl	%ecx, %ecx
0000000000019f55	movq	%r14, %rdi
0000000000019f58	callq	*%rbx
0000000000019f5a	movq	%rax, -0x1e0(%rbp)
0000000000019f61	xorps	%xmm0, %xmm0
0000000000019f64	movaps	%xmm0, -0x180(%rbp)
0000000000019f6b	movaps	%xmm0, -0x190(%rbp)
0000000000019f72	movaps	%xmm0, -0x1a0(%rbp)
0000000000019f79	movaps	%xmm0, -0x1b0(%rbp)
0000000000019f80	movq	0x1aed1(%rip), %rsi     ## Objc selector ref: subviews
0000000000019f87	movq	%rax, %rdi
0000000000019f8a	callq	*%rbx
0000000000019f8c	movq	%rax, -0x1d0(%rbp)
0000000000019f93	movq	0x1a176(%rip), %rsi     ## Objc selector ref: countByEnumeratingWithState:objects:count:
0000000000019f9a	leaq	-0x1b0(%rbp), %rdx
0000000000019fa1	leaq	-0x130(%rbp), %rcx
0000000000019fa8	movl	$0x10, %r8d
0000000000019fae	movq	%rax, %rdi
0000000000019fb1	callq	*%rbx
0000000000019fb3	movq	%rbx, %r12
0000000000019fb6	movq	%rax, -0x1b8(%rbp)
0000000000019fbd	testq	%rax, %rax
0000000000019fc0	je	0x1a0f2
0000000000019fc6	movq	-0x1a0(%rbp), %rax
0000000000019fcd	movq	(%rax), %rax
0000000000019fd0	movq	%rax, -0x1c0(%rbp)
0000000000019fd7	movq	0x1a11a(%rip), %rbx     ## Objc selector ref: isKindOfClass:
0000000000019fde	xorl	%r14d, %r14d
0000000000019fe1	movq	%rbx, %r13
0000000000019fe4	movq	-0x1a0(%rbp), %rax
0000000000019feb	movq	-0x1c0(%rbp), %rcx
0000000000019ff2	cmpq	%rcx, (%rax)
0000000000019ff5	je	0x1a003
0000000000019ff7	movq	-0x1d0(%rbp), %rdi
0000000000019ffe	callq	0x1e886                 ## symbol stub for: _objc_enumerationMutation
000000000001a003	movq	-0x1a8(%rbp), %rax
000000000001a00a	movq	(%rax,%r14,8), %r15
000000000001a00e	movq	0x1b61b(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_NSTextField
000000000001a015	movq	0x1a0a4(%rip), %rbx     ## Objc selector ref: class
000000000001a01c	movq	%rbx, %rsi
000000000001a01f	callq	*%r12
000000000001a022	movq	%r15, %rdi
000000000001a025	movq	%r13, %rsi
000000000001a028	movq	%rax, %rdx
000000000001a02b	callq	*%r12
000000000001a02e	testb	%al, %al
000000000001a030	je	0x1a04e
000000000001a032	movq	%r15, %rdi
000000000001a035	movq	0x1a3dc(%rip), %rsi     ## Objc selector ref: setStringValue:
000000000001a03c	movq	-0x1c8(%rbp), %rdx
000000000001a043	callq	*0xf3b7(%rip)           ## Objc message: +[NSTextField setStringValue:]
000000000001a049	movq	%r13, %rbx
000000000001a04c	jmp	0x1a0aa
000000000001a04e	movq	0x1b66b(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_NSImageView
000000000001a055	movq	%rbx, %rsi
000000000001a058	callq	*%r12
000000000001a05b	movq	%r15, %rdi
000000000001a05e	movq	%r13, %rsi
000000000001a061	movq	%rax, %rdx
000000000001a064	callq	*%r12
000000000001a067	testb	%al, %al
000000000001a069	movq	%r13, %rbx
000000000001a06c	je	0x1a0aa
000000000001a06e	movq	0x1b51b(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_NSImage
000000000001a075	movq	0x1a044(%rip), %rsi     ## Objc selector ref: class
000000000001a07c	callq	*%r12
000000000001a07f	movq	-0x1d8(%rbp), %rdi
000000000001a086	movq	%rbx, %rsi
000000000001a089	movq	%rax, %rdx
000000000001a08c	callq	*%r12
000000000001a08f	testb	%al, %al
000000000001a091	je	0x1a0aa
000000000001a093	movq	%r15, %rdi
000000000001a096	movq	0x1a55b(%rip), %rsi     ## Objc selector ref: setImage:
000000000001a09d	movq	-0x1d8(%rbp), %rdx
000000000001a0a4	callq	*0xf356(%rip)           ## Objc message: +[NSImage setImage:]
000000000001a0aa	incq	%r14
000000000001a0ad	cmpq	-0x1b8(%rbp), %r14
000000000001a0b4	jb	0x19fe1
000000000001a0ba	movl	$0x10, %r8d
000000000001a0c0	movq	-0x1d0(%rbp), %rdi
000000000001a0c7	movq	0x1a042(%rip), %rsi     ## Objc selector ref: countByEnumeratingWithState:objects:count:
000000000001a0ce	leaq	-0x1b0(%rbp), %rdx
000000000001a0d5	leaq	-0x130(%rbp), %rcx
000000000001a0dc	callq	*0xf31e(%rip)           ## Objc message: -[%rdi countByEnumeratingWithState:objects:count:]
000000000001a0e2	movq	%rax, -0x1b8(%rbp)
000000000001a0e9	testq	%rax, %rax
000000000001a0ec	jne	0x19fde
000000000001a0f2	movq	0xf25f(%rip), %rax      ## literal pool symbol address: ___stack_chk_guard
000000000001a0f9	movq	(%rax), %rax
000000000001a0fc	cmpq	-0x30(%rbp), %rax
000000000001a100	jne	0x1a11b
000000000001a102	movq	-0x1e0(%rbp), %rax
000000000001a109	addq	$0x1c8, %rsp            ## imm = 0x1C8
000000000001a110	popq	%rbx
000000000001a111	popq	%r12
000000000001a113	popq	%r13
000000000001a115	popq	%r14
000000000001a117	popq	%r15
000000000001a119	popq	%rbp
000000000001a11a	retq
000000000001a11b	callq	0x1e8b6                 ## symbol stub for: ___stack_chk_fail
000000000001a120	pushq	%rbp
000000000001a121	movq	%rsp, %rbp
000000000001a124	pushq	%r15
000000000001a126	pushq	%r14
000000000001a128	pushq	%rbx
000000000001a129	pushq	%rax
000000000001a12a	movq	%rcx, %r14
000000000001a12d	movq	_OBJC_IVAR_$_UniversalAccessPref._featureTableContents(%rip), %rax
000000000001a134	movq	(%rdi,%rax), %rdi
000000000001a138	movq	0x1a231(%rip), %rsi     ## Objc selector ref: objectAtIndex:
000000000001a13f	movq	0xf2ba(%rip), %r15      ## Objc message: -[%rdi objectAtIndex:]
000000000001a146	movq	%r14, %rdx
000000000001a149	callq	*%r15
000000000001a14c	movq	%rax, %rbx
000000000001a14f	movq	0x1b3c2(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_NSString
000000000001a156	movq	0x19f63(%rip), %rsi     ## Objc selector ref: class
000000000001a15d	callq	*%r15
000000000001a160	movq	0x19f91(%rip), %rsi     ## Objc selector ref: isKindOfClass:
000000000001a167	movq	%rbx, %rdi
000000000001a16a	movq	%rax, %rdx
000000000001a16d	callq	*%r15
000000000001a170	testb	%al, %al
000000000001a172	je	0x1a18b
000000000001a174	testq	%r14, %r14
000000000001a177	sete	%al
000000000001a17a	movzbl	%al, %eax
000000000001a17d	leaq	0xe3bc(%rip), %rcx
000000000001a184	movsd	(%rcx,%rax,8), %xmm0
000000000001a189	jmp	0x1a193
000000000001a18b	movsd	0xe3a5(%rip), %xmm0
000000000001a193	addq	$0x8, %rsp
000000000001a197	popq	%rbx
000000000001a198	popq	%r14
000000000001a19a	popq	%r15
000000000001a19c	popq	%rbp
000000000001a19d	retq
000000000001a19e	pushq	%rbp
000000000001a19f	movq	%rsp, %rbp
000000000001a1a2	movq	0xef77(%rip), %rax      ## literal pool symbol address: _OBJC_IVAR_$_NSPreference._prefs
000000000001a1a9	movq	(%rax), %rax
000000000001a1ac	movq	(%rdi,%rax), %rax
000000000001a1b0	popq	%rbp
000000000001a1b1	retq
000000000001a1b2	pushq	%rbp
000000000001a1b3	movq	%rsp, %rbp
000000000001a1b6	movq	_OBJC_IVAR_$_UniversalAccessPref._currentController(%rip), %rax
000000000001a1bd	movq	(%rdi,%rax), %rdi
000000000001a1c1	movq	0x1b098(%rip), %rsi     ## Objc selector ref: fieldEditorForObject:
000000000001a1c8	movq	%rcx, %rdx
000000000001a1cb	popq	%rbp
000000000001a1cc	jmpq	*0xf22e(%rip)           ## Objc message: +[NSString fieldEditorForObject:]
000000000001a1d2	pushq	%rbp
000000000001a1d3	movq	%rsp, %rbp
000000000001a1d6	pushq	%r15
000000000001a1d8	pushq	%r14
000000000001a1da	pushq	%r12
000000000001a1dc	pushq	%rbx
000000000001a1dd	movq	%rdx, %r12
000000000001a1e0	movq	%rdi, %r14
000000000001a1e3	movq	%r12, %rdi
000000000001a1e6	callq	0x1e58c                 ## symbol stub for: _AEGetDescDataSize
000000000001a1eb	movq	%rax, %rbx
000000000001a1ee	leaq	0x1(%rbx), %rdi
000000000001a1f2	callq	0x1e8da                 ## symbol stub for: _malloc
000000000001a1f7	movq	%rax, %r15
000000000001a1fa	testq	%r15, %r15
000000000001a1fd	je	0x1a263
000000000001a1ff	movq	%r12, %rdi
000000000001a202	movq	%r15, %rsi
000000000001a205	movq	%rbx, %rdx
000000000001a208	callq	0x1e586                 ## symbol stub for: _AEGetDescData
000000000001a20d	movq	0x1b304(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_NSString
000000000001a214	movq	0x1b04d(%rip), %rsi     ## Objc selector ref: stringWithUTF8String:
000000000001a21b	movq	0xf1de(%rip), %rbx      ## Objc message: +[NSString stringWithUTF8String:]
000000000001a222	movq	%r15, %rdx
000000000001a225	callq	*%rbx
000000000001a227	movq	0x19ec2(%rip), %rsi     ## Objc selector ref: isEqualToString:
000000000001a22e	leaq	0x116bb(%rip), %rdx     ## Objc cfstring ref: @"authWarnDialog"
000000000001a235	movq	%rax, %rdi
000000000001a238	callq	*%rbx
000000000001a23a	testb	%al, %al
000000000001a23c	je	0x1a253
000000000001a23e	movq	0x1af2b(%rip), %rsi     ## Objc selector ref: _selectRowForFeatureID:
000000000001a245	movl	$0x9, %edx
000000000001a24a	movq	%r14, %rdi
000000000001a24d	callq	*0xf1ad(%rip)           ## Objc message: -[%rdi _selectRowForFeatureID:]
000000000001a253	movq	%r15, %rdi
000000000001a256	popq	%rbx
000000000001a257	popq	%r12
000000000001a259	popq	%r14
000000000001a25b	popq	%r15
000000000001a25d	popq	%rbp
000000000001a25e	jmp	0x1e8d4                 ## symbol stub for: _free
000000000001a263	popq	%rbx
000000000001a264	popq	%r12
000000000001a266	popq	%r14
000000000001a268	popq	%r15
000000000001a26a	popq	%rbp
000000000001a26b	retq
000000000001a26c	pushq	%rbp
000000000001a26d	movq	%rsp, %rbp
000000000001a270	pushq	%r14
000000000001a272	pushq	%rbx
000000000001a273	movq	%rdi, %rbx
000000000001a276	movq	_OBJC_IVAR_$_UniversalAccessPref._searchTermToFeature(%rip), %rax
000000000001a27d	movq	(%rbx,%rax), %rdi
000000000001a281	movq	0x19f40(%rip), %rsi     ## Objc selector ref: objectForKey:
000000000001a288	callq	*0xf172(%rip)           ## Objc message: -[%rdi objectForKey:]
000000000001a28e	testq	%rax, %rax
000000000001a291	je	0x1a2bc
000000000001a293	movq	0x19e9e(%rip), %rsi     ## Objc selector ref: integerValue
000000000001a29a	movq	0xf15f(%rip), %r14      ## Objc message: -[%rdi integerValue]
000000000001a2a1	movq	%rax, %rdi
000000000001a2a4	callq	*%r14
000000000001a2a7	movq	0x1aec2(%rip), %rsi     ## Objc selector ref: _selectRowForFeatureID:
000000000001a2ae	movq	%rbx, %rdi
000000000001a2b1	movl	%eax, %edx
000000000001a2b3	movq	%r14, %rax
000000000001a2b6	popq	%rbx
000000000001a2b7	popq	%r14
000000000001a2b9	popq	%rbp
000000000001a2ba	jmpq	*%rax
000000000001a2bc	popq	%rbx
000000000001a2bd	popq	%r14
000000000001a2bf	popq	%rbp
000000000001a2c0	retq
000000000001a2c1	pushq	%rbp
000000000001a2c2	movq	%rsp, %rbp
000000000001a2c5	pushq	%r15
000000000001a2c7	pushq	%r14
000000000001a2c9	pushq	%r12
000000000001a2cb	pushq	%rbx
000000000001a2cc	movq	%rdi, %r12
000000000001a2cf	movq	_OBJC_IVAR_$_UniversalAccessPref._featureTable(%rip), %rax
000000000001a2d6	movq	(%r12,%rax), %rdi
000000000001a2da	movq	0x1a0d7(%rip), %rsi     ## Objc selector ref: selectedRow
000000000001a2e1	movq	0xf118(%rip), %rbx      ## Objc message: -[%rdi selectedRow]
000000000001a2e8	callq	*%rbx
000000000001a2ea	movq	_OBJC_IVAR_$_UniversalAccessPref._featureTableContents(%rip), %rcx
000000000001a2f1	movq	(%r12,%rcx), %rdi
000000000001a2f5	movq	0x1a074(%rip), %rsi     ## Objc selector ref: objectAtIndex:
000000000001a2fc	movq	%rax, %rdx
000000000001a2ff	callq	*%rbx
000000000001a301	movq	%rax, %r15
000000000001a304	movq	0x1af0d(%rip), %rsi     ## Objc selector ref: _viewControllerForEntity:
000000000001a30b	movq	%r12, %rdi
000000000001a30e	movq	%r15, %rdx
000000000001a311	callq	*%rbx
000000000001a313	movq	0x1af56(%rip), %rsi     ## Objc selector ref: helpAnchorForCurrentState
000000000001a31a	movq	%rax, %rdi
000000000001a31d	callq	*%rbx
000000000001a31f	movq	%rax, %r14
000000000001a322	movq	0x19dff(%rip), %rsi     ## Objc selector ref: length
000000000001a329	movq	%r14, %rdi
000000000001a32c	callq	*%rbx
000000000001a32e	testq	%rax, %rax
000000000001a331	jne	0x1a390
000000000001a333	movq	0x1b1f6(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_NSDictionary
000000000001a33a	movq	0x19d7f(%rip), %rsi     ## Objc selector ref: class
000000000001a341	callq	*%rbx
000000000001a343	movq	0x19dae(%rip), %rsi     ## Objc selector ref: isKindOfClass:
000000000001a34a	movq	%r15, %rdi
000000000001a34d	movq	%rax, %rdx
000000000001a350	callq	*%rbx
000000000001a352	testb	%al, %al
000000000001a354	je	0x1a390
000000000001a356	movq	0x19e6b(%rip), %rsi     ## Objc selector ref: objectForKey:
000000000001a35d	leaq	0x10e6c(%rip), %rdx     ## Objc cfstring ref: @"featureID"
000000000001a364	movq	%r15, %rdi
000000000001a367	callq	*0xf093(%rip)           ## Objc message: +[NSDictionary objectForKey:]
000000000001a36d	testq	%rax, %rax
000000000001a370	je	0x1a390
000000000001a372	movq	_OBJC_IVAR_$_UniversalAccessPref._featureToHelpAnchor(%rip), %rcx
000000000001a379	movq	(%r12,%rcx), %rdi
000000000001a37d	movq	0x19e44(%rip), %rsi     ## Objc selector ref: objectForKey:
000000000001a384	movq	%rax, %rdx
000000000001a387	callq	*0xf073(%rip)           ## Objc message: -[%rdi objectForKey:]
000000000001a38d	movq	%rax, %r14
000000000001a390	movq	0x19d91(%rip), %rsi     ## Objc selector ref: length
000000000001a397	movq	%r14, %rdi
000000000001a39a	callq	*0xf060(%rip)           ## Objc message: -[%rdi length]
000000000001a3a0	testq	%rax, %rax
000000000001a3a3	je	0x1a3d9
000000000001a3a5	movq	0x1b31c(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_NSHelpManager
000000000001a3ac	movq	0x1aec5(%rip), %rsi     ## Objc selector ref: sharedHelpManager
000000000001a3b3	callq	*%rbx
000000000001a3b5	movq	0xed4c(%rip), %rcx      ## literal pool symbol address: _NSHelpManagerSystemBook
000000000001a3bc	movq	(%rcx), %rcx
000000000001a3bf	movq	0x1aeba(%rip), %rsi     ## Objc selector ref: openHelpAnchor:inBook:
000000000001a3c6	movq	%rax, %rdi
000000000001a3c9	movq	%r14, %rdx
000000000001a3cc	movq	%rbx, %rax
000000000001a3cf	popq	%rbx
000000000001a3d0	popq	%r12
000000000001a3d2	popq	%r14
000000000001a3d4	popq	%r15
000000000001a3d6	popq	%rbp
000000000001a3d7	jmpq	*%rax
000000000001a3d9	popq	%rbx
000000000001a3da	popq	%r12
000000000001a3dc	popq	%r14
000000000001a3de	popq	%r15
000000000001a3e0	popq	%rbp
000000000001a3e1	retq
000000000001a3e2	pushq	%rbp
000000000001a3e3	movq	%rsp, %rbp
000000000001a3e6	pushq	%r15
000000000001a3e8	pushq	%r14
000000000001a3ea	pushq	%r13
000000000001a3ec	pushq	%r12
000000000001a3ee	pushq	%rbx
000000000001a3ef	subq	$0xd8, %rsp
000000000001a3f6	movq	%rdi, %rbx
000000000001a3f9	movq	%rbx, -0x100(%rbp)
000000000001a400	movq	0xef51(%rip), %rax      ## literal pool symbol address: ___stack_chk_guard
000000000001a407	movq	(%rax), %rax
000000000001a40a	movq	%rax, -0x30(%rbp)
000000000001a40e	movq	_OBJC_IVAR_$_UniversalAccessPref._featureTableContents(%rip), %rax
000000000001a415	movq	(%rbx,%rax), %rdi
000000000001a419	movq	0x19d30(%rip), %rsi     ## Objc selector ref: release
000000000001a420	movq	0xefd9(%rip), %r12      ## Objc message: +[NSHelpManager release]
000000000001a427	callq	*%r12
000000000001a42a	movq	_OBJC_IVAR_$_UniversalAccessPref._featureTableContents(%rip), %rdx
000000000001a431	xorl	%edi, %edi
000000000001a433	movq	%rbx, %rsi
000000000001a436	callq	0x1e868                 ## symbol stub for: _objc_assign_ivar
000000000001a43b	xorps	%xmm0, %xmm0
000000000001a43e	movaps	%xmm0, -0xc0(%rbp)
000000000001a445	movaps	%xmm0, -0xd0(%rbp)
000000000001a44c	movaps	%xmm0, -0xe0(%rbp)
000000000001a453	movaps	%xmm0, -0xf0(%rbp)
000000000001a45a	movq	_OBJC_IVAR_$_UniversalAccessPref._paneControllers(%rip), %rax
000000000001a461	movq	(%rbx,%rax), %rdi
000000000001a465	movq	%rdi, -0xf8(%rbp)
000000000001a46c	movq	0x19c9d(%rip), %rsi     ## Objc selector ref: countByEnumeratingWithState:objects:count:
000000000001a473	leaq	-0xf0(%rbp), %rdx
000000000001a47a	leaq	-0xb0(%rbp), %rcx
000000000001a481	movl	$0x10, %r8d
000000000001a487	callq	*%r12
000000000001a48a	movq	%rax, %rbx
000000000001a48d	testq	%rbx, %rbx
000000000001a490	je	0x1a518
000000000001a496	movq	-0xe0(%rbp), %rax
000000000001a49d	movq	(%rax), %r15
000000000001a4a0	movq	0x1ad79(%rip), %r13     ## Objc selector ref: removeFromSuperview
000000000001a4a7	xorl	%r14d, %r14d
000000000001a4aa	movq	-0xe0(%rbp), %rax
000000000001a4b1	cmpq	%r15, (%rax)
000000000001a4b4	je	0x1a4c2
000000000001a4b6	movq	-0xf8(%rbp), %rdi
000000000001a4bd	callq	0x1e886                 ## symbol stub for: _objc_enumerationMutation
000000000001a4c2	movq	-0xe8(%rbp), %rax
000000000001a4c9	movq	(%rax,%r14,8), %rdi
000000000001a4cd	movq	0x19eec(%rip), %rsi     ## Objc selector ref: view
000000000001a4d4	callq	*%r12
000000000001a4d7	movq	%rax, %rdi
000000000001a4da	movq	%r13, %rsi
000000000001a4dd	callq	*%r12
000000000001a4e0	incq	%r14
000000000001a4e3	cmpq	%rbx, %r14
000000000001a4e6	jb	0x1a4aa
000000000001a4e8	movl	$0x10, %r8d
000000000001a4ee	movq	-0xf8(%rbp), %rdi
000000000001a4f5	movq	0x19c14(%rip), %rsi     ## Objc selector ref: countByEnumeratingWithState:objects:count:
000000000001a4fc	leaq	-0xf0(%rbp), %rdx
000000000001a503	leaq	-0xb0(%rbp), %rcx
000000000001a50a	callq	*0xeef0(%rip)           ## Objc message: -[%rdi countByEnumeratingWithState:objects:count:]
000000000001a510	movq	%rax, %rbx
000000000001a513	testq	%rbx, %rbx
000000000001a516	jne	0x1a4a7
000000000001a518	movq	-0x100(%rbp), %rbx
000000000001a51f	movq	_OBJC_IVAR_$_UniversalAccessPref._paneControllers(%rip), %rax
000000000001a526	movq	(%rbx,%rax), %rdi
000000000001a52a	movq	0x19c1f(%rip), %rsi     ## Objc selector ref: release
000000000001a531	callq	*%r12
000000000001a534	movq	_OBJC_IVAR_$_UniversalAccessPref._paneControllers(%rip), %rdx
000000000001a53b	xorl	%edi, %edi
000000000001a53d	movq	%rbx, %rsi
000000000001a540	callq	0x1e868                 ## symbol stub for: _objc_assign_ivar
000000000001a545	movq	_OBJC_IVAR_$_UniversalAccessPref._currentController(%rip), %rax
000000000001a54c	movq	(%rbx,%rax), %rdi
000000000001a550	movq	0x19bf9(%rip), %rsi     ## Objc selector ref: release
000000000001a557	callq	*%r12
000000000001a55a	movq	_OBJC_IVAR_$_UniversalAccessPref._currentController(%rip), %rdx
000000000001a561	xorl	%edi, %edi
000000000001a563	movq	%rbx, %rsi
000000000001a566	callq	0x1e868                 ## symbol stub for: _objc_assign_ivar
000000000001a56b	movq	_OBJC_IVAR_$_UniversalAccessPref._searchTermToFeature(%rip), %rax
000000000001a572	movq	(%rbx,%rax), %rdi
000000000001a576	movq	0x19bd3(%rip), %rsi     ## Objc selector ref: release
000000000001a57d	callq	*%r12
000000000001a580	movq	_OBJC_IVAR_$_UniversalAccessPref._searchTermToFeature(%rip), %rdx
000000000001a587	xorl	%edi, %edi
000000000001a589	movq	%rbx, %rsi
000000000001a58c	callq	0x1e868                 ## symbol stub for: _objc_assign_ivar
000000000001a591	movq	_OBJC_IVAR_$_UniversalAccessPref._featureToHelpAnchor(%rip), %rax
000000000001a598	movq	(%rbx,%rax), %rdi
000000000001a59c	movq	0x19bad(%rip), %rsi     ## Objc selector ref: release
000000000001a5a3	callq	*%r12
000000000001a5a6	movq	_OBJC_IVAR_$_UniversalAccessPref._featureToHelpAnchor(%rip), %rdx
000000000001a5ad	xorl	%edi, %edi
000000000001a5af	movq	%rbx, %rsi
000000000001a5b2	callq	0x1e868                 ## symbol stub for: _objc_assign_ivar
000000000001a5b7	movq	0xed9a(%rip), %rax      ## literal pool symbol address: ___stack_chk_guard
000000000001a5be	movq	(%rax), %rax
000000000001a5c1	cmpq	-0x30(%rbp), %rax
000000000001a5c5	jne	0x1a5d9
000000000001a5c7	addq	$0xd8, %rsp
000000000001a5ce	popq	%rbx
000000000001a5cf	popq	%r12
000000000001a5d1	popq	%r13
000000000001a5d3	popq	%r14
000000000001a5d5	popq	%r15
000000000001a5d7	popq	%rbp
000000000001a5d8	retq
000000000001a5d9	callq	0x1e8b6                 ## symbol stub for: ___stack_chk_fail
000000000001a5de	pushq	%rbp
000000000001a5df	movq	%rsp, %rbp
000000000001a5e2	pushq	%r14
000000000001a5e4	pushq	%rbx
000000000001a5e5	movq	_OBJC_IVAR_$_UniversalAccessPref._showUAMenuExtraCheckbox(%rip), %rax
000000000001a5ec	movq	(%rdi,%rax), %rbx
000000000001a5f0	movq	0x1ac91(%rip), %rsi     ## Objc selector ref: _menuExtraActive
000000000001a5f7	movq	0xee02(%rip), %r14      ## Objc message: -[%rdi _menuExtraActive]
000000000001a5fe	callq	*%r14
000000000001a601	testb	%al, %al
000000000001a603	setne	%al
000000000001a606	movzbl	%al, %edx
000000000001a609	movq	0x19e30(%rip), %rsi     ## Objc selector ref: setState:
000000000001a610	movq	%rbx, %rdi
000000000001a613	movq	%r14, %rax
000000000001a616	popq	%rbx
000000000001a617	popq	%r14
000000000001a619	popq	%rbp
000000000001a61a	jmpq	*%rax
000000000001a61c	pushq	%rbp
000000000001a61d	movq	%rsp, %rbp
000000000001a620	subq	$0x10, %rsp
000000000001a624	movq	0x1ac65(%rip), %rsi     ## Objc selector ref: _menuExtraBundle
000000000001a62b	callq	*0xedcf(%rip)           ## Objc message: -[%rdi _menuExtraBundle]
000000000001a631	testq	%rax, %rax
000000000001a634	je	0x1a665
000000000001a636	movq	0x1ac5b(%rip), %rsi     ## Objc selector ref: bundleIdentifier
000000000001a63d	movq	%rax, %rdi
000000000001a640	callq	*0xedba(%rip)           ## Objc message: -[%rdi bundleIdentifier]
000000000001a646	leaq	-0x4(%rbp), %rsi
000000000001a64a	movq	%rax, %rdi
000000000001a64d	callq	0x1e8f8                 ## symbol stub for: _CoreMenuExtraGetMenuExtra
000000000001a652	testl	%eax, %eax
000000000001a654	sete	%al
000000000001a657	cmpl	$0x0, -0x4(%rbp)
000000000001a65b	setne	%cl
000000000001a65e	andb	%al, %cl
000000000001a660	movzbl	%cl, %eax
000000000001a663	jmp	0x1a667
000000000001a665	xorl	%eax, %eax
000000000001a667	addq	$0x10, %rsp
000000000001a66b	popq	%rbp
000000000001a66c	retq
000000000001a66d	pushq	%rbp
000000000001a66e	movq	%rsp, %rbp
000000000001a671	pushq	%r14
000000000001a673	pushq	%rbx
000000000001a674	movq	0x1ae85(%rip), %rbx     ## Objc class ref: _OBJC_CLASS_$_NSBundle
000000000001a67b	movq	0x19a3e(%rip), %rsi     ## Objc selector ref: class
000000000001a682	movq	0xed77(%rip), %r14      ## Objc message: +[NSBundle class]
000000000001a689	callq	*%r14
000000000001a68c	movq	0x19b25(%rip), %rsi     ## Objc selector ref: bundleForClass:
000000000001a693	movq	%rbx, %rdi
000000000001a696	movq	%rax, %rdx
000000000001a699	callq	*%r14
000000000001a69c	movq	0x19b1d(%rip), %rsi     ## Objc selector ref: localizedStringForKey:value:table:
000000000001a6a3	leaq	0x11266(%rip), %rdx     ## Objc cfstring ref: @"MENUEXTRAS_PATH"
000000000001a6aa	leaq	0x1127f(%rip), %rcx     ## Objc cfstring ref: @"/System/Library/CoreServices/Menu Extras/UniversalAccess.menu"
000000000001a6b1	xorl	%ebx, %ebx
000000000001a6b3	xorl	%r8d, %r8d
000000000001a6b6	movq	%rax, %rdi
000000000001a6b9	callq	*%r14
000000000001a6bc	testq	%rax, %rax
000000000001a6bf	je	0x1a6db
000000000001a6c1	movq	0x1ae38(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_NSBundle
000000000001a6c8	movq	0x1abd1(%rip), %rsi     ## Objc selector ref: bundleWithPath:
000000000001a6cf	movq	%rax, %rdx
000000000001a6d2	callq	*0xed28(%rip)           ## Objc message: +[NSBundle bundleWithPath:]
000000000001a6d8	movq	%rax, %rbx
000000000001a6db	movq	%rbx, %rax
000000000001a6de	popq	%rbx
000000000001a6df	popq	%r14
000000000001a6e1	popq	%rbp
000000000001a6e2	retq
000000000001a6e3	pushq	%rbp
000000000001a6e4	movq	%rsp, %rbp
000000000001a6e7	pushq	%r15
000000000001a6e9	pushq	%r14
000000000001a6eb	pushq	%r13
000000000001a6ed	pushq	%r12
000000000001a6ef	pushq	%rbx
000000000001a6f0	pushq	%rax
000000000001a6f1	movq	%rdi, %r12
000000000001a6f4	movq	0x1ab95(%rip), %rsi     ## Objc selector ref: _menuExtraBundle
000000000001a6fb	callq	*0xecff(%rip)           ## Objc message: -[%rdi _menuExtraBundle]
000000000001a701	movq	%rax, %rbx
000000000001a704	testq	%rbx, %rbx
000000000001a707	je	0x1a90f
000000000001a70d	movq	0x1ab84(%rip), %rsi     ## Objc selector ref: bundleIdentifier
000000000001a714	movq	%rbx, %rdi
000000000001a717	callq	*0xece3(%rip)           ## Objc message: -[%rdi bundleIdentifier]
000000000001a71d	leaq	-0x2c(%rbp), %rsi
000000000001a721	movq	%rax, %rdi
000000000001a724	callq	0x1e8f8                 ## symbol stub for: _CoreMenuExtraGetMenuExtra
000000000001a729	testl	%eax, %eax
000000000001a72b	jne	0x1a90f
000000000001a731	movq	_OBJC_IVAR_$_UniversalAccessPref._showUAMenuExtraCheckbox(%rip), %rax
000000000001a738	movq	(%r12,%rax), %rdi
000000000001a73c	movq	0x19f65(%rip), %rsi     ## Objc selector ref: state
000000000001a743	callq	*0xecb7(%rip)           ## Objc message: -[%rdi state]
000000000001a749	movl	-0x2c(%rbp), %edi
000000000001a74c	cmpq	$0x1, %rax
000000000001a750	jne	0x1a7a2
000000000001a752	testl	%edi, %edi
000000000001a754	jne	0x1a90f
000000000001a75a	movq	0x1ae8f(%rip), %r14     ## Objc class ref: _OBJC_CLASS_$_NSURL
000000000001a761	movq	0x1ab40(%rip), %rsi     ## Objc selector ref: bundlePath
000000000001a768	movq	0xec91(%rip), %r15      ## Objc message: +[NSURL bundlePath]
000000000001a76f	movq	%rbx, %rdi
000000000001a772	callq	*%r15
000000000001a775	movq	0x1a48c(%rip), %rsi     ## Objc selector ref: fileURLWithPath:
000000000001a77c	movq	%r14, %rdi
000000000001a77f	movq	%rax, %rdx
000000000001a782	callq	*%r15
000000000001a785	leaq	-0x2c(%rbp), %r9
000000000001a789	movl	$0xffffd8d8, %esi       ## imm = 0xFFFFD8D8
000000000001a78e	movl	$0x1, %edx
000000000001a793	xorl	%ecx, %ecx
000000000001a795	xorl	%r8d, %r8d
000000000001a798	movq	%rax, %rdi
000000000001a79b	callq	0x1e8f2                 ## symbol stub for: _CoreMenuExtraAddMenuExtra
000000000001a7a0	jmp	0x1a7b1
000000000001a7a2	testl	%edi, %edi
000000000001a7a4	je	0x1a90f
000000000001a7aa	xorl	%esi, %esi
000000000001a7ac	callq	0x1e8fe                 ## symbol stub for: _CoreMenuExtraRemoveMenuExtra
000000000001a7b1	testl	%eax, %eax
000000000001a7b3	je	0x1a90f
000000000001a7b9	movq	0x1add8(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_NSAlert
000000000001a7c0	movq	0x199a1(%rip), %rsi     ## Objc selector ref: alloc
000000000001a7c7	movq	0xec32(%rip), %r13      ## Objc message: +[NSAlert alloc]
000000000001a7ce	callq	*%r13
000000000001a7d1	movq	0x19a98(%rip), %rsi     ## Objc selector ref: init
000000000001a7d8	movq	%rax, %rdi
000000000001a7db	callq	*%r13
000000000001a7de	movq	0x19923(%rip), %rsi     ## Objc selector ref: autorelease
000000000001a7e5	movq	%rax, %rdi
000000000001a7e8	callq	*%r13
000000000001a7eb	movq	%rax, %r14
000000000001a7ee	movq	0x1ad0b(%rip), %rbx     ## Objc class ref: _OBJC_CLASS_$_NSBundle
000000000001a7f5	movq	0x198c4(%rip), %rsi     ## Objc selector ref: class
000000000001a7fc	movq	%r12, %rdi
000000000001a7ff	callq	*%r13
000000000001a802	movq	0x199af(%rip), %rsi     ## Objc selector ref: bundleForClass:
000000000001a809	movq	%rbx, %rdi
000000000001a80c	movq	%rax, %rdx
000000000001a80f	callq	*%r13
000000000001a812	movq	0x199a7(%rip), %rsi     ## Objc selector ref: localizedStringForKey:value:table:
000000000001a819	leaq	0x11130(%rip), %rdx     ## Objc cfstring ref: @"MENUEXTRA_ERROR_OCCURRED"
000000000001a820	leaq	0xf8e9(%rip), %r15      ## Objc cfstring ref: @""
000000000001a827	xorl	%r8d, %r8d
000000000001a82a	movq	%rax, %rdi
000000000001a82d	movq	%r15, %rcx
000000000001a830	callq	*%r13
000000000001a833	movq	0x19dfe(%rip), %rsi     ## Objc selector ref: setMessageText:
000000000001a83a	movq	%r14, %rdi
000000000001a83d	movq	%rax, %rdx
000000000001a840	callq	*%r13
000000000001a843	movq	0x1acb6(%rip), %rbx     ## Objc class ref: _OBJC_CLASS_$_NSBundle
000000000001a84a	movq	0x1986f(%rip), %rsi     ## Objc selector ref: class
000000000001a851	movq	%r12, %rdi
000000000001a854	callq	*%r13
000000000001a857	movq	0x1995a(%rip), %rsi     ## Objc selector ref: bundleForClass:
000000000001a85e	movq	%rbx, %rdi
000000000001a861	movq	%rax, %rdx
000000000001a864	callq	*%r13
000000000001a867	movq	0x19952(%rip), %rsi     ## Objc selector ref: localizedStringForKey:value:table:
000000000001a86e	leaq	0x110fb(%rip), %rdx     ## Objc cfstring ref: @"MENUEXTRA_LOAD_FAILED"
000000000001a875	xorl	%r8d, %r8d
000000000001a878	movq	%rax, %rdi
000000000001a87b	movq	%r15, %rcx
000000000001a87e	callq	*%r13
000000000001a881	movq	0x1aa28(%rip), %rsi     ## Objc selector ref: setInformativeText:
000000000001a888	movq	%r14, %rdi
000000000001a88b	movq	%rax, %rdx
000000000001a88e	callq	*%r13
000000000001a891	movq	0x1ac68(%rip), %rbx     ## Objc class ref: _OBJC_CLASS_$_NSBundle
000000000001a898	movq	0x1ac69(%rip), %rdi     ## Objc class ref: UniversalAccessPref
000000000001a89f	movq	0x1981a(%rip), %rsi     ## Objc selector ref: class
000000000001a8a6	callq	*%r13
000000000001a8a9	movq	0x19908(%rip), %rsi     ## Objc selector ref: bundleForClass:
000000000001a8b0	movq	%rbx, %rdi
000000000001a8b3	movq	%rax, %rdx
000000000001a8b6	callq	*%r13
000000000001a8b9	movq	0x19900(%rip), %rsi     ## Objc selector ref: localizedStringForKey:value:table:
000000000001a8c0	leaq	0xfd29(%rip), %rdx      ## Objc cfstring ref: @"global.button.ok"
000000000001a8c7	xorl	%r8d, %r8d
000000000001a8ca	movq	%rax, %rdi
000000000001a8cd	movq	%r15, %rcx
000000000001a8d0	callq	*%r13
000000000001a8d3	movq	0x19d66(%rip), %rsi     ## Objc selector ref: addButtonWithTitle:
000000000001a8da	movq	%r14, %rdi
000000000001a8dd	movq	%rax, %rdx
000000000001a8e0	callq	*%r13
000000000001a8e3	movq	_OBJC_IVAR_$_UniversalAccessPref._showUAMenuExtraCheckbox(%rip), %rax
000000000001a8ea	movq	(%r12,%rax), %rdi
000000000001a8ee	movq	0x19ad3(%rip), %rsi     ## Objc selector ref: window
000000000001a8f5	callq	*%r13
000000000001a8f8	movq	0x19d59(%rip), %rsi     ## Objc selector ref: beginSheetModalForWindow:completionHandler:
000000000001a8ff	leaq	0xf6aa(%rip), %rcx
000000000001a906	movq	%r14, %rdi
000000000001a909	movq	%rax, %rdx
000000000001a90c	callq	*%r13
000000000001a90f	movq	0x1a86a(%rip), %rsi     ## Objc selector ref: _menuExtraUpdateStatus
000000000001a916	movq	%r12, %rdi
000000000001a919	callq	*0xeae1(%rip)           ## Objc message: +[UniversalAccessPref _menuExtraUpdateStatus]
000000000001a91f	addq	$0x8, %rsp
000000000001a923	popq	%rbx
000000000001a924	popq	%r12
000000000001a926	popq	%r13
000000000001a928	popq	%r14
000000000001a92a	popq	%r15
000000000001a92c	popq	%rbp
000000000001a92d	retq
000000000001a92e	pushq	%rbp
000000000001a92f	movq	%rsp, %rbp
000000000001a932	popq	%rbp
000000000001a933	retq
000000000001a934	pushq	%rbp
000000000001a935	movq	%rsp, %rbp
000000000001a938	pushq	%rbx
000000000001a939	subq	$0x18, %rsp
000000000001a93d	movq	%rdi, %rbx
000000000001a940	movq	0x1a971(%rip), %rsi     ## Objc selector ref: _cleanupBeforeDeallocUniversalAccessPref
000000000001a947	callq	*0xeab3(%rip)           ## Objc message: -[%rdi _cleanupBeforeDeallocUniversalAccessPref]
000000000001a94d	movq	%rbx, -0x18(%rbp)
000000000001a951	movq	0x1ae30(%rip), %rax     ## Objc class ref: UniversalAccessPref
000000000001a958	movq	%rax, -0x10(%rbp)
000000000001a95c	movq	0x1a4ad(%rip), %rsi     ## Objc selector ref: finalize
000000000001a963	leaq	-0x18(%rbp), %rdi
000000000001a967	callq	0x1e88c                 ## Objc message: -[[%rdi super] finalize]
000000000001a96c	addq	$0x18, %rsp
000000000001a970	popq	%rbx
000000000001a971	popq	%rbp
000000000001a972	retq
000000000001a973	pushq	%rbp
000000000001a974	movq	%rsp, %rbp
000000000001a977	pushq	%rbx
000000000001a978	subq	$0x18, %rsp
000000000001a97c	movq	%rdi, %rbx
000000000001a97f	movq	0x1a932(%rip), %rsi     ## Objc selector ref: _cleanupBeforeDeallocUniversalAccessPref
000000000001a986	callq	*0xea74(%rip)           ## Objc message: -[%rdi _cleanupBeforeDeallocUniversalAccessPref]
000000000001a98c	movq	%rbx, -0x18(%rbp)
000000000001a990	movq	0x1adf1(%rip), %rax     ## Objc class ref: UniversalAccessPref
000000000001a997	movq	%rax, -0x10(%rbp)
000000000001a99b	movq	0x197b6(%rip), %rsi     ## Objc selector ref: dealloc
000000000001a9a2	leaq	-0x18(%rbp), %rdi
000000000001a9a6	callq	0x1e88c                 ## Objc message: -[[%rdi super] dealloc]
000000000001a9ab	addq	$0x18, %rsp
000000000001a9af	popq	%rbx
000000000001a9b0	popq	%rbp
000000000001a9b1	retq
000000000001a9b2	pushq	%rbp
000000000001a9b3	movq	%rsp, %rbp
000000000001a9b6	pushq	%r15
000000000001a9b8	pushq	%r14
000000000001a9ba	pushq	%rbx
000000000001a9bb	subq	$0x18, %rsp
000000000001a9bf	movq	%rdi, %r14
000000000001a9c2	movq	0x1ab37(%rip), %rbx     ## Objc class ref: _OBJC_CLASS_$_NSBundle
000000000001a9c9	movq	0x1ab38(%rip), %rdi     ## Objc class ref: UniversalAccessPref
000000000001a9d0	movq	0x196e9(%rip), %rsi     ## Objc selector ref: class
000000000001a9d7	movq	0xea22(%rip), %r15      ## Objc message: +[UniversalAccessPref class]
000000000001a9de	callq	*%r15
000000000001a9e1	movq	0x197d0(%rip), %rsi     ## Objc selector ref: bundleForClass:
000000000001a9e8	movq	%rbx, %rdi
000000000001a9eb	movq	%rax, %rdx
000000000001a9ee	callq	*%r15
000000000001a9f1	movq	%r14, -0x28(%rbp)
000000000001a9f5	movq	0x1ad94(%rip), %rcx     ## Objc class ref: UAPSpeakableItemsViewController
000000000001a9fc	movq	%rcx, -0x20(%rbp)
000000000001aa00	movq	0x19841(%rip), %rsi     ## Objc selector ref: initWithNibName:bundle:
000000000001aa07	leaq	0x10b62(%rip), %rdx     ## Objc cfstring ref: @"SpeakableItems"
000000000001aa0e	leaq	-0x28(%rbp), %rdi
000000000001aa12	movq	%rax, %rcx
000000000001aa15	callq	0x1e88c                 ## Objc message: -[[%rdi super] initWithNibName:bundle:]
000000000001aa1a	movq	%rax, %rbx
000000000001aa1d	testq	%rbx, %rbx
000000000001aa20	je	0x1aa4e
000000000001aa22	movq	0x1ac57(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_NSTimer
000000000001aa29	movq	0x1a890(%rip), %rcx     ## Objc selector ref: _finalizeRecognizerPlugInViewSetUp
000000000001aa30	movq	0x1a5c1(%rip), %rsi     ## Objc selector ref: scheduledTimerWithTimeInterval:target:selector:userInfo:repeats:
000000000001aa37	movsd	0xd8a1(%rip), %xmm0
000000000001aa3f	xorl	%r8d, %r8d
000000000001aa42	xorl	%r9d, %r9d
000000000001aa45	movq	%rbx, %rdx
000000000001aa48	callq	*0xe9b2(%rip)           ## Objc message: +[NSTimer scheduledTimerWithTimeInterval:target:selector:userInfo:repeats:]
000000000001aa4e	movq	%rbx, %rax
000000000001aa51	addq	$0x18, %rsp
000000000001aa55	popq	%rbx
000000000001aa56	popq	%r14
000000000001aa58	popq	%r15
000000000001aa5a	popq	%rbp
000000000001aa5b	retq
000000000001aa5c	pushq	%rbp
000000000001aa5d	movq	%rsp, %rbp
000000000001aa60	pushq	%rbx
000000000001aa61	subq	$0x18, %rsp
000000000001aa65	movq	%rdi, %rbx
000000000001aa68	movq	0x1a859(%rip), %rsi     ## Objc selector ref: _close
000000000001aa6f	callq	*0xe98b(%rip)           ## Objc message: -[%rdi _close]
000000000001aa75	movq	%rbx, -0x18(%rbp)
000000000001aa79	movq	0x1ad10(%rip), %rax     ## Objc class ref: UAPSpeakableItemsViewController
000000000001aa80	movq	%rax, -0x10(%rbp)
000000000001aa84	movq	0x196cd(%rip), %rsi     ## Objc selector ref: dealloc
000000000001aa8b	leaq	-0x18(%rbp), %rdi
000000000001aa8f	callq	0x1e88c                 ## Objc message: -[[%rdi super] dealloc]
000000000001aa94	addq	$0x18, %rsp
000000000001aa98	popq	%rbx
000000000001aa99	popq	%rbp
000000000001aa9a	retq
000000000001aa9b	pushq	%rbp
000000000001aa9c	movq	%rsp, %rbp
000000000001aa9f	pushq	%rbx
000000000001aaa0	subq	$0x18, %rsp
000000000001aaa4	movq	%rdi, %rbx
000000000001aaa7	movq	%rbx, -0x18(%rbp)
000000000001aaab	movq	0x1acde(%rip), %rax     ## Objc class ref: UAPSpeakableItemsViewController
000000000001aab2	movq	%rax, -0x10(%rbp)
000000000001aab6	movq	0x19cb3(%rip), %rsi     ## Objc selector ref: loadView
000000000001aabd	leaq	-0x18(%rbp), %rdi
000000000001aac1	callq	0x1e88c                 ## Objc message: -[[%rdi super] loadView]
000000000001aac6	movq	0x198f3(%rip), %rsi     ## Objc selector ref: view
000000000001aacd	movq	%rbx, %rdi
000000000001aad0	callq	*0xe92a(%rip)           ## Objc message: -[%rdi view]
000000000001aad6	addq	$0x18, %rsp
000000000001aada	popq	%rbx
000000000001aadb	popq	%rbp
000000000001aadc	retq
000000000001aadd	pushq	%rbp
000000000001aade	movq	%rsp, %rbp
000000000001aae1	pushq	%r15
000000000001aae3	pushq	%r14
000000000001aae5	pushq	%rbx
000000000001aae6	pushq	%rax
000000000001aae7	movq	%rdi, %r15
000000000001aaea	movq	0x198cf(%rip), %rsi     ## Objc selector ref: view
000000000001aaf1	movq	0xe908(%rip), %rbx      ## Objc message: -[%rdi view]
000000000001aaf8	callq	*%rbx
000000000001aafa	movq	0x1a357(%rip), %rsi     ## Objc selector ref: subviews
000000000001ab01	movq	%rax, %rdi
000000000001ab04	callq	*%rbx
000000000001ab06	movq	0x1985b(%rip), %rsi     ## Objc selector ref: count
000000000001ab0d	movq	%rax, %rdi
000000000001ab10	callq	*%rbx
000000000001ab12	testq	%rax, %rax
000000000001ab15	je	0x1ab4c
000000000001ab17	movq	0x1ab62(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_NSTimer
000000000001ab1e	movq	0x1a79b(%rip), %rcx     ## Objc selector ref: _finalizeRecognizerPlugInViewSetUp
000000000001ab25	movq	0x1a4cc(%rip), %rsi     ## Objc selector ref: scheduledTimerWithTimeInterval:target:selector:userInfo:repeats:
000000000001ab2c	movsd	0xd7ac(%rip), %xmm0
000000000001ab34	xorl	%r8d, %r8d
000000000001ab37	xorl	%r9d, %r9d
000000000001ab3a	movq	%r15, %rdx
000000000001ab3d	movq	%rbx, %rax
000000000001ab40	addq	$0x8, %rsp
000000000001ab44	popq	%rbx
000000000001ab45	popq	%r14
000000000001ab47	popq	%r15
000000000001ab49	popq	%rbp
000000000001ab4a	jmpq	*%rax
000000000001ab4c	movq	0x1ab7d(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_SOCommandPreferencesViewController
000000000001ab53	movq	0x1a776(%rip), %rsi     ## Objc selector ref: defaultViewController
000000000001ab5a	callq	*%rbx
000000000001ab5c	movq	0x1985d(%rip), %rsi     ## Objc selector ref: view
000000000001ab63	movq	%rax, %rdi
000000000001ab66	callq	*%rbx
000000000001ab68	movq	%rbx, %rcx
000000000001ab6b	movq	%rax, %r14
000000000001ab6e	testq	%r14, %r14
000000000001ab71	je	0x1abaa
000000000001ab73	movq	0x19846(%rip), %rsi     ## Objc selector ref: view
000000000001ab7a	movq	%r15, %rdi
000000000001ab7d	movq	%rcx, %rbx
000000000001ab80	callq	*%rbx
000000000001ab82	movq	0x1a6b7(%rip), %rsi     ## Objc selector ref: addSubview:
000000000001ab89	movq	%rax, %rdi
000000000001ab8c	movq	%r14, %rdx
000000000001ab8f	callq	*%rbx
000000000001ab91	movq	0x1a740(%rip), %rsi     ## Objc selector ref: _show
000000000001ab98	movq	%r15, %rdi
000000000001ab9b	movq	%rbx, %rax
000000000001ab9e	addq	$0x8, %rsp
000000000001aba2	popq	%rbx
000000000001aba3	popq	%r14
000000000001aba5	popq	%r15
000000000001aba7	popq	%rbp
000000000001aba8	jmpq	*%rax
000000000001abaa	addq	$0x8, %rsp
000000000001abae	popq	%rbx
000000000001abaf	popq	%r14
000000000001abb1	popq	%r15
000000000001abb3	popq	%rbp
000000000001abb4	retq
000000000001abb5	pushq	%rbp
000000000001abb6	movq	%rsp, %rbp
000000000001abb9	pushq	%rbx
000000000001abba	pushq	%rax
000000000001abbb	movq	0x1ab0e(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_SOCommandPreferencesViewController
000000000001abc2	movq	0x1a707(%rip), %rsi     ## Objc selector ref: defaultViewController
000000000001abc9	movq	0xe830(%rip), %rbx      ## Objc message: +[SOCommandPreferencesViewController defaultViewController]
000000000001abd0	callq	*%rbx
000000000001abd2	movq	0x1a707(%rip), %rsi     ## Objc selector ref: show
000000000001abd9	movq	%rax, %rdi
000000000001abdc	movq	%rbx, %rax
000000000001abdf	addq	$0x8, %rsp
000000000001abe3	popq	%rbx
000000000001abe4	popq	%rbp
000000000001abe5	jmpq	*%rax
000000000001abe7	pushq	%rbp
000000000001abe8	movq	%rsp, %rbp
000000000001abeb	pushq	%rbx
000000000001abec	pushq	%rax
000000000001abed	movq	0x1aadc(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_SOCommandPreferencesViewController
000000000001abf4	movq	0x1a6d5(%rip), %rsi     ## Objc selector ref: defaultViewController
000000000001abfb	movq	0xe7fe(%rip), %rbx      ## Objc message: +[SOCommandPreferencesViewController defaultViewController]
000000000001ac02	callq	*%rbx
000000000001ac04	movq	0x1a6dd(%rip), %rsi     ## Objc selector ref: hide
000000000001ac0b	movq	%rax, %rdi
000000000001ac0e	movq	%rbx, %rax
000000000001ac11	addq	$0x8, %rsp
000000000001ac15	popq	%rbx
000000000001ac16	popq	%rbp
000000000001ac17	jmpq	*%rax
000000000001ac19	pushq	%rbp
000000000001ac1a	movq	%rsp, %rbp
000000000001ac1d	movq	_OBJC_IVAR_$_UASwitchTableCellView._actionTitle(%rip), %rax
000000000001ac24	movq	(%rdi,%rax), %rax
000000000001ac28	popq	%rbp
000000000001ac29	retq
000000000001ac2a	pushq	%rbp
000000000001ac2b	movq	%rsp, %rbp
000000000001ac2e	movq	%rdi, %rax
000000000001ac31	movq	_OBJC_IVAR_$_UASwitchTableCellView._actionTitle(%rip), %rcx
000000000001ac38	movq	%rdx, %rdi
000000000001ac3b	movq	%rax, %rsi
000000000001ac3e	movq	%rcx, %rdx
000000000001ac41	popq	%rbp
000000000001ac42	jmp	0x1e868                 ## symbol stub for: _objc_assign_ivar
000000000001ac47	pushq	%rbp
000000000001ac48	movq	%rsp, %rbp
000000000001ac4b	movq	_OBJC_IVAR_$_UASwitchTableCellView._switchTitle(%rip), %rax
000000000001ac52	movq	(%rdi,%rax), %rax
000000000001ac56	popq	%rbp
000000000001ac57	retq
000000000001ac58	pushq	%rbp
000000000001ac59	movq	%rsp, %rbp
000000000001ac5c	movq	%rdi, %rax
000000000001ac5f	movq	_OBJC_IVAR_$_UASwitchTableCellView._switchTitle(%rip), %rcx
000000000001ac66	movq	%rdx, %rdi
000000000001ac69	movq	%rax, %rsi
000000000001ac6c	movq	%rcx, %rdx
000000000001ac6f	popq	%rbp
000000000001ac70	jmp	0x1e868                 ## symbol stub for: _objc_assign_ivar
000000000001ac75	pushq	%rbp
000000000001ac76	movq	%rsp, %rbp
000000000001ac79	pushq	%r15
000000000001ac7b	pushq	%r14
000000000001ac7d	pushq	%rbx
000000000001ac7e	subq	$0x18, %rsp
000000000001ac82	movq	%rcx, %r14
000000000001ac85	movq	%rdx, %r15
000000000001ac88	movq	%rdi, -0x28(%rbp)
000000000001ac8c	movq	0x1ab05(%rip), %rax     ## Objc class ref: UASwitchInputEntity
000000000001ac93	movq	%rax, -0x20(%rbp)
000000000001ac97	movq	0x195d2(%rip), %rsi     ## Objc selector ref: init
000000000001ac9e	leaq	-0x28(%rbp), %rdi
000000000001aca2	callq	0x1e88c                 ## Objc message: -[[%rdi super] init]
000000000001aca7	movq	%rax, %rbx
000000000001acaa	testq	%rbx, %rbx
000000000001acad	je	0x1acdc
000000000001acaf	movq	_OBJC_IVAR_$_UASwitchInputEntity._index(%rip), %rax
000000000001acb6	movq	%r15, (%rbx,%rax)
000000000001acba	movq	0x195a7(%rip), %rsi     ## Objc selector ref: retain
000000000001acc1	movq	%r14, %rdi
000000000001acc4	callq	*0xe736(%rip)           ## Objc message: -[%rdi retain]
000000000001acca	movq	_OBJC_IVAR_$_UASwitchInputEntity._actionKey(%rip), %rdx
000000000001acd1	movq	%rax, %rdi
000000000001acd4	movq	%rbx, %rsi
000000000001acd7	callq	0x1e868                 ## symbol stub for: _objc_assign_ivar
000000000001acdc	movq	%rbx, %rax
000000000001acdf	addq	$0x18, %rsp
000000000001ace3	popq	%rbx
000000000001ace4	popq	%r14
000000000001ace6	popq	%r15
000000000001ace8	popq	%rbp
000000000001ace9	retq
000000000001acea	pushq	%rbp
000000000001aceb	movq	%rsp, %rbp
000000000001acee	pushq	%r14
000000000001acf0	pushq	%rbx
000000000001acf1	subq	$0x10, %rsp
000000000001acf5	movq	%rdi, %rbx
000000000001acf8	movq	_OBJC_IVAR_$_UASwitchInputEntity._deviceSettings(%rip), %rax
000000000001acff	movq	(%rbx,%rax), %rdi
000000000001ad03	movq	0x19446(%rip), %rsi     ## Objc selector ref: release
000000000001ad0a	movq	0xe6ef(%rip), %r14      ## Objc message: -[%rdi release]
000000000001ad11	callq	*%r14
000000000001ad14	movq	_OBJC_IVAR_$_UASwitchInputEntity._actionKey(%rip), %rax
000000000001ad1b	movq	(%rbx,%rax), %rdi
000000000001ad1f	movq	0x1942a(%rip), %rsi     ## Objc selector ref: release
000000000001ad26	callq	*%r14
000000000001ad29	movq	%rbx, -0x20(%rbp)
000000000001ad2d	movq	0x1aa64(%rip), %rax     ## Objc class ref: UASwitchInputEntity
000000000001ad34	movq	%rax, -0x18(%rbp)
000000000001ad38	movq	0x19419(%rip), %rsi     ## Objc selector ref: dealloc
000000000001ad3f	leaq	-0x20(%rbp), %rdi
000000000001ad43	callq	0x1e88c                 ## Objc message: -[[%rdi super] dealloc]
000000000001ad48	addq	$0x10, %rsp
000000000001ad4c	popq	%rbx
000000000001ad4d	popq	%r14
000000000001ad4f	popq	%rbp
000000000001ad50	retq
000000000001ad51	pushq	%rbp
000000000001ad52	movq	%rsp, %rbp
000000000001ad55	pushq	%r15
000000000001ad57	pushq	%r14
000000000001ad59	pushq	%rbx
000000000001ad5a	pushq	%rax
000000000001ad5b	movq	%rdx, %rbx
000000000001ad5e	movq	%rdi, %r14
000000000001ad61	movq	0x19d30(%rip), %rsi     ## Objc selector ref: index
000000000001ad68	movq	%rbx, %rdi
000000000001ad6b	callq	*0xe68f(%rip)           ## Objc message: -[%rdi index]
000000000001ad71	movq	_OBJC_IVAR_$_UASwitchInputEntity._index(%rip), %rcx
000000000001ad78	cmpq	(%r14,%rcx), %rax
000000000001ad7c	jne	0x1ade2
000000000001ad7e	movq	0x19d0b(%rip), %rsi     ## Objc selector ref: actionKey
000000000001ad85	movq	0xe674(%rip), %r15      ## Objc message: -[%rdi actionKey]
000000000001ad8c	movq	%rbx, %rdi
000000000001ad8f	callq	*%r15
000000000001ad92	movq	_OBJC_IVAR_$_UASwitchInputEntity._actionKey(%rip), %rcx
000000000001ad99	movq	(%r14,%rcx), %rdx
000000000001ad9d	movq	0x1972c(%rip), %rsi     ## Objc selector ref: isEqual:
000000000001ada4	movq	%rax, %rdi
000000000001ada7	callq	*%r15
000000000001adaa	testb	%al, %al
000000000001adac	je	0x1ade2
000000000001adae	movq	0x19d83(%rip), %rsi     ## Objc selector ref: switchName
000000000001adb5	movq	%rbx, %rdi
000000000001adb8	callq	*%r15
000000000001adbb	movq	%rax, %rbx
000000000001adbe	movq	0x19d73(%rip), %rsi     ## Objc selector ref: switchName
000000000001adc5	movq	%r14, %rdi
000000000001adc8	callq	*%r15
000000000001adcb	movq	0x1931e(%rip), %rsi     ## Objc selector ref: isEqualToString:
000000000001add2	movq	%rbx, %rdi
000000000001add5	movq	%rax, %rdx
000000000001add8	callq	*%r15
000000000001addb	testb	%al, %al
000000000001addd	setne	%al
000000000001ade0	jmp	0x1ade4
000000000001ade2	xorl	%eax, %eax
000000000001ade4	movzbl	%al, %eax
000000000001ade7	addq	$0x8, %rsp
000000000001adeb	popq	%rbx
000000000001adec	popq	%r14
000000000001adee	popq	%r15
000000000001adf0	popq	%rbp
000000000001adf1	retq
000000000001adf2	pushq	%rbp
000000000001adf3	movq	%rsp, %rbp
000000000001adf6	pushq	%r15
000000000001adf8	pushq	%r14
000000000001adfa	pushq	%rbx
000000000001adfb	pushq	%rax
000000000001adfc	movq	%rdi, %rbx
000000000001adff	movq	_OBJC_IVAR_$_UASwitchInputEntity._actionKey(%rip), %r14
000000000001ae06	movq	(%rbx,%r14), %rdi
000000000001ae0a	movq	_kActionSelectKey(%rip), %rdx
000000000001ae11	movq	0x192d8(%rip), %rsi     ## Objc selector ref: isEqualToString:
000000000001ae18	callq	*0xe5e2(%rip)           ## Objc message: -[%rdi isEqualToString:]
000000000001ae1e	movb	$0x1, %r15b
000000000001ae21	testb	%al, %al
000000000001ae23	jne	0x1ae7b
000000000001ae25	movq	(%rbx,%r14), %rdi
000000000001ae29	movq	_kActionRunKey(%rip), %rdx
000000000001ae30	movq	0x192b9(%rip), %rsi     ## Objc selector ref: isEqualToString:
000000000001ae37	callq	*0xe5c3(%rip)           ## Objc message: -[%rdi isEqualToString:]
000000000001ae3d	testb	%al, %al
000000000001ae3f	jne	0x1ae7b
000000000001ae41	movq	(%rbx,%r14), %rdi
000000000001ae45	movq	_kActionStopKey(%rip), %rdx
000000000001ae4c	movq	0x1929d(%rip), %rsi     ## Objc selector ref: isEqualToString:
000000000001ae53	callq	*0xe5a7(%rip)           ## Objc message: -[%rdi isEqualToString:]
000000000001ae59	testb	%al, %al
000000000001ae5b	jne	0x1ae7b
000000000001ae5d	movq	(%rbx,%r14), %rdi
000000000001ae61	movq	_kActionStepKey(%rip), %rdx
000000000001ae68	movq	0x19281(%rip), %rsi     ## Objc selector ref: isEqualToString:
000000000001ae6f	callq	*0xe58b(%rip)           ## Objc message: -[%rdi isEqualToString:]
000000000001ae75	testb	%al, %al
000000000001ae77	setne	%r15b
000000000001ae7b	movzbl	%r15b, %eax
000000000001ae7f	addq	$0x8, %rsp
000000000001ae83	popq	%rbx
000000000001ae84	popq	%r14
000000000001ae86	popq	%r15
000000000001ae88	popq	%rbp
000000000001ae89	retq
000000000001ae8a	pushq	%rbp
000000000001ae8b	movq	%rsp, %rbp
000000000001ae8e	pushq	%r15
000000000001ae90	pushq	%r14
000000000001ae92	pushq	%rbx
000000000001ae93	pushq	%rax
000000000001ae94	movq	%rdi, %rbx
000000000001ae97	movq	_OBJC_IVAR_$_UASwitchInputEntity._isHeader(%rip), %rax
000000000001ae9e	cmpb	$0x0, (%rbx,%rax)
000000000001aea2	je	0x1aef4
000000000001aea4	movq	_OBJC_IVAR_$_UASwitchInputEntity._isRequired(%rip), %rax
000000000001aeab	movb	(%rbx,%rax), %r14b
000000000001aeaf	movq	0x1a64a(%rip), %rbx     ## Objc class ref: _OBJC_CLASS_$_NSBundle
000000000001aeb6	movq	0x1a64b(%rip), %rdi     ## Objc class ref: UniversalAccessPref
000000000001aebd	movq	0x191fc(%rip), %rsi     ## Objc selector ref: class
000000000001aec4	movq	0xe535(%rip), %r15      ## Objc message: +[UniversalAccessPref class]
000000000001aecb	callq	*%r15
000000000001aece	movq	0x192e3(%rip), %rsi     ## Objc selector ref: bundleForClass:
000000000001aed5	movq	%rbx, %rdi
000000000001aed8	movq	%rax, %rdx
000000000001aedb	callq	*%r15
000000000001aede	cmpb	$0x0, %r14b
000000000001aee2	movq	0x192d7(%rip), %rsi     ## Objc selector ref: localizedStringForKey:value:table:
000000000001aee9	je	0x1af57
000000000001aeeb	leaq	0x10b3e(%rip), %rdx     ## Objc cfstring ref: @"switch.category.required"
000000000001aef2	jmp	0x1af5e
000000000001aef4	movq	0x19ca5(%rip), %rsi     ## Objc selector ref: hasSystemDefinedAction
000000000001aefb	movq	%rbx, %rdi
000000000001aefe	callq	*0xe4fc(%rip)           ## Objc message: -[%rdi hasSystemDefinedAction]
000000000001af04	testb	%al, %al
000000000001af06	je	0x1af7b
000000000001af08	movq	_OBJC_IVAR_$_UASwitchInputEntity._actionKey(%rip), %r14
000000000001af0f	movq	(%rbx,%r14), %rdi
000000000001af13	movq	_kActionSelectKey(%rip), %rdx
000000000001af1a	movq	0x191cf(%rip), %rsi     ## Objc selector ref: isEqualToString:
000000000001af21	callq	*0xe4d9(%rip)           ## Objc message: -[%rdi isEqualToString:]
000000000001af27	testb	%al, %al
000000000001af29	je	0x1b01a
000000000001af2f	movq	0x1a62a(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_NSNumber
000000000001af36	movq	0x1922b(%rip), %rsi     ## Objc selector ref: alloc
000000000001af3d	movq	0xe4bc(%rip), %rbx      ## Objc message: +[NSNumber alloc]
000000000001af44	callq	*%rbx
000000000001af46	movq	0x1a3a3(%rip), %rsi     ## Objc selector ref: initWithUnsignedInteger:
000000000001af4d	movl	$0x2, %edx
000000000001af52	jmp	0x1b0e4
000000000001af57	leaq	0x10af2(%rip), %rdx     ## Objc cfstring ref: @"switch.category.optional"
000000000001af5e	leaq	0xf1ab(%rip), %rcx      ## Objc cfstring ref: @""
000000000001af65	xorl	%r8d, %r8d
000000000001af68	movq	%rax, %rdi
000000000001af6b	addq	$0x8, %rsp
000000000001af6f	popq	%rbx
000000000001af70	popq	%r14
000000000001af72	popq	%r15
000000000001af74	popq	%rbp
000000000001af75	jmpq	*0xe485(%rip)           ## Objc message: -[%rdi initWithUnsignedInteger:]
000000000001af7b	movq	_OBJC_IVAR_$_UASwitchInputEntity._deviceSettings(%rip), %rax
000000000001af82	movq	(%rbx,%rax), %rdi
000000000001af86	movq	0xe2a3(%rip), %rax      ## literal pool symbol address: _UASwitchActionURLKey
000000000001af8d	movq	(%rax), %rdx
000000000001af90	movq	0x19231(%rip), %rsi     ## Objc selector ref: objectForKey:
000000000001af97	movq	0xe462(%rip), %rbx      ## Objc message: -[%rdi objectForKey:]
000000000001af9e	callq	*%rbx
000000000001afa0	movq	0x19ca1(%rip), %rsi     ## Objc selector ref: lastPathComponent
000000000001afa7	movq	%rax, %rdi
000000000001afaa	callq	*%rbx
000000000001afac	movq	0x19c9d(%rip), %rsi     ## Objc selector ref: stringByDeletingPathExtension
000000000001afb3	movq	%rax, %rdi
000000000001afb6	callq	*%rbx
000000000001afb8	movq	%rbx, %rcx
000000000001afbb	movq	%rax, %rbx
000000000001afbe	testq	%rbx, %rbx
000000000001afc1	jne	0x1b147
000000000001afc7	movq	0x1a532(%rip), %r14     ## Objc class ref: _OBJC_CLASS_$_NSBundle
000000000001afce	movq	0x1a533(%rip), %rdi     ## Objc class ref: UniversalAccessPref
000000000001afd5	movq	0x190e4(%rip), %rsi     ## Objc selector ref: class
000000000001afdc	movq	%rcx, %rbx
000000000001afdf	callq	*%rbx
000000000001afe1	movq	0x191d0(%rip), %rsi     ## Objc selector ref: bundleForClass:
000000000001afe8	movq	%r14, %rdi
000000000001afeb	movq	%rax, %rdx
000000000001afee	callq	*%rbx
000000000001aff0	movq	0x191c9(%rip), %rsi     ## Objc selector ref: localizedStringForKey:value:table:
000000000001aff7	leaq	0x10a72(%rip), %rdx     ## Objc cfstring ref: @"switch.action.custom.displayName"
000000000001affe	leaq	0xf10b(%rip), %rcx      ## Objc cfstring ref: @""
000000000001b005	xorl	%r8d, %r8d
000000000001b008	movq	%rax, %rdi
000000000001b00b	movq	%rbx, %rax
000000000001b00e	addq	$0x8, %rsp
000000000001b012	popq	%rbx
000000000001b013	popq	%r14
000000000001b015	popq	%r15
000000000001b017	popq	%rbp
000000000001b018	jmpq	*%rax
000000000001b01a	movq	(%rbx,%r14), %rdi
000000000001b01e	movq	_kActionStepKey(%rip), %rdx
000000000001b025	movq	0x190c4(%rip), %rsi     ## Objc selector ref: isEqualToString:
000000000001b02c	callq	*0xe3ce(%rip)           ## Objc message: +[UniversalAccessPref isEqualToString:]
000000000001b032	testb	%al, %al
000000000001b034	je	0x1b05e
000000000001b036	movq	0x1a523(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_NSNumber
000000000001b03d	movq	0x19124(%rip), %rsi     ## Objc selector ref: alloc
000000000001b044	movq	0xe3b5(%rip), %rbx      ## Objc message: +[NSNumber alloc]
000000000001b04b	callq	*%rbx
000000000001b04d	movq	0x1a29c(%rip), %rsi     ## Objc selector ref: initWithUnsignedInteger:
000000000001b054	movl	$0x3, %edx
000000000001b059	jmp	0x1b0e4
000000000001b05e	movq	(%rbx,%r14), %rdi
000000000001b062	movq	_kActionRunKey(%rip), %rdx
000000000001b069	movq	0x19080(%rip), %rsi     ## Objc selector ref: isEqualToString:
000000000001b070	callq	*0xe38a(%rip)           ## Objc message: -[%rdi isEqualToString:]
000000000001b076	testb	%al, %al
000000000001b078	je	0x1b09f
000000000001b07a	movq	0x1a4df(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_NSNumber
000000000001b081	movq	0x190e0(%rip), %rsi     ## Objc selector ref: alloc
000000000001b088	movq	0xe371(%rip), %rbx      ## Objc message: +[NSNumber alloc]
000000000001b08f	callq	*%rbx
000000000001b091	movq	0x1a258(%rip), %rsi     ## Objc selector ref: initWithUnsignedInteger:
000000000001b098	movl	$0x1, %edx
000000000001b09d	jmp	0x1b0e4
000000000001b09f	movq	(%rbx,%r14), %rdi
000000000001b0a3	movq	_kActionStopKey(%rip), %rdx
000000000001b0aa	movq	0x1903f(%rip), %rsi     ## Objc selector ref: isEqualToString:
000000000001b0b1	callq	*0xe349(%rip)           ## Objc message: -[%rdi isEqualToString:]
000000000001b0b7	xorl	%ebx, %ebx
000000000001b0b9	testb	%al, %al
000000000001b0bb	je	0x1b147
000000000001b0c1	movq	0x1a498(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_NSNumber
000000000001b0c8	movq	0x19099(%rip), %rsi     ## Objc selector ref: alloc
000000000001b0cf	movq	0xe32a(%rip), %rbx      ## Objc message: +[NSNumber alloc]
000000000001b0d6	callq	*%rbx
000000000001b0d8	movq	0x1a211(%rip), %rsi     ## Objc selector ref: initWithUnsignedInteger:
000000000001b0df	movl	$0x4, %edx
000000000001b0e4	movq	%rax, %rdi
000000000001b0e7	callq	*%rbx
000000000001b0e9	movq	%rax, %r14
000000000001b0ec	xorl	%ebx, %ebx
000000000001b0ee	testq	%r14, %r14
000000000001b0f1	je	0x1b147
000000000001b0f3	movq	0x1a5de(%rip), %rdi     ## Objc class ref: UASwitchActionStringValueTransformer
000000000001b0fa	movq	0x18fbf(%rip), %rsi     ## Objc selector ref: class
000000000001b101	movq	0xe2f8(%rip), %r15      ## Objc message: +[UASwitchActionStringValueTransformer class]
000000000001b108	callq	*%r15
000000000001b10b	movq	%rax, %rdi
000000000001b10e	callq	0x1e856                 ## symbol stub for: _NSStringFromClass
000000000001b113	movq	0x1a4be(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_NSValueTransformer
000000000001b11a	movq	0x199ef(%rip), %rsi     ## Objc selector ref: valueTransformerForName:
000000000001b121	movq	%rax, %rdx
000000000001b124	callq	*%r15
000000000001b127	movq	0x199ea(%rip), %rsi     ## Objc selector ref: transformedValue:
000000000001b12e	movq	%rax, %rdi
000000000001b131	movq	%r14, %rdx
000000000001b134	callq	*%r15
000000000001b137	movq	%rax, %rbx
000000000001b13a	movq	0x1900f(%rip), %rsi     ## Objc selector ref: release
000000000001b141	movq	%r14, %rdi
000000000001b144	callq	*%r15
000000000001b147	movq	%rbx, %rax
000000000001b14a	addq	$0x8, %rsp
000000000001b14e	popq	%rbx
000000000001b14f	popq	%r14
000000000001b151	popq	%r15
000000000001b153	popq	%rbp
000000000001b154	retq
000000000001b155	pushq	%rbp
000000000001b156	movq	%rsp, %rbp
000000000001b159	pushq	%r15
000000000001b15b	pushq	%r14
000000000001b15d	pushq	%r12
000000000001b15f	pushq	%rbx
000000000001b160	movq	%rdi, %r14
000000000001b163	movq	_OBJC_IVAR_$_UASwitchInputEntity._deviceSettings(%rip), %r15
000000000001b16a	movq	(%r14,%r15), %rdi
000000000001b16e	movq	0xe153(%rip), %rax      ## literal pool symbol address: _UASwitchNicknameKey
000000000001b175	movq	(%rax), %rdx
000000000001b178	movq	0x19031(%rip), %rsi     ## Objc selector ref: valueForKey:
000000000001b17f	movq	0xe27a(%rip), %rbx      ## Objc message: +[NSValueTransformer valueForKey:]
000000000001b186	callq	*%rbx
000000000001b188	movq	%rax, %r12
000000000001b18b	movq	0x18f96(%rip), %rsi     ## Objc selector ref: length
000000000001b192	movq	%r12, %rdi
000000000001b195	callq	*%rbx
000000000001b197	movq	%rbx, %rcx
000000000001b19a	testq	%rax, %rax
000000000001b19d	jne	0x1b21d
000000000001b19f	movq	(%r14,%r15), %rdi
000000000001b1a3	movq	0xe116(%rip), %rax      ## literal pool symbol address: _UASwitchNameLocalizedKeyKey
000000000001b1aa	movq	(%rax), %rdx
000000000001b1ad	movq	0x18ffc(%rip), %rsi     ## Objc selector ref: valueForKey:
000000000001b1b4	movq	%rcx, %rbx
000000000001b1b7	callq	*%rbx
000000000001b1b9	movq	%rax, %r12
000000000001b1bc	movq	0x18f65(%rip), %rsi     ## Objc selector ref: length
000000000001b1c3	movq	%r12, %rdi
000000000001b1c6	callq	*%rbx
000000000001b1c8	movq	%rbx, %rcx
000000000001b1cb	testq	%rax, %rax
000000000001b1ce	je	0x1b21d
000000000001b1d0	movq	0x1a329(%rip), %r14     ## Objc class ref: _OBJC_CLASS_$_NSBundle
000000000001b1d7	movq	0x1a32a(%rip), %rdi     ## Objc class ref: UniversalAccessPref
000000000001b1de	movq	0x18edb(%rip), %rsi     ## Objc selector ref: class
000000000001b1e5	movq	%rcx, %rbx
000000000001b1e8	callq	*%rbx
000000000001b1ea	movq	0x18fc7(%rip), %rsi     ## Objc selector ref: bundleForClass:
000000000001b1f1	movq	%r14, %rdi
000000000001b1f4	movq	%rax, %rdx
000000000001b1f7	callq	*%rbx
000000000001b1f9	movq	0x18fc0(%rip), %rsi     ## Objc selector ref: localizedStringForKey:value:table:
000000000001b200	leaq	0xef09(%rip), %rcx      ## Objc cfstring ref: @""
000000000001b207	xorl	%r8d, %r8d
000000000001b20a	movq	%rax, %rdi
000000000001b20d	movq	%r12, %rdx
000000000001b210	movq	%rbx, %rax
000000000001b213	popq	%rbx
000000000001b214	popq	%r12
000000000001b216	popq	%r14
000000000001b218	popq	%r15
000000000001b21a	popq	%rbp
000000000001b21b	jmpq	*%rax
000000000001b21d	movq	%r12, %rax
000000000001b220	popq	%rbx
000000000001b221	popq	%r12
000000000001b223	popq	%r14
000000000001b225	popq	%r15
000000000001b227	popq	%rbp
000000000001b228	retq
000000000001b229	pushq	%rbp
000000000001b22a	movq	%rsp, %rbp
000000000001b22d	pushq	%r15
000000000001b22f	pushq	%r14
000000000001b231	pushq	%rbx
000000000001b232	pushq	%rax
000000000001b233	movq	%rdx, %rbx
000000000001b236	movq	%rdi, %r14
000000000001b239	movq	0x19858(%rip), %rsi     ## Objc selector ref: index
000000000001b240	movq	0xe1b9(%rip), %r15      ## Objc message: +[UniversalAccessPref index]
000000000001b247	movq	%rbx, %rdi
000000000001b24a	callq	*%r15
000000000001b24d	movq	0x1a0a4(%rip), %rsi     ## Objc selector ref: setIndex:
000000000001b254	movq	%r14, %rdi
000000000001b257	movq	%rax, %rdx
000000000001b25a	callq	*%r15
000000000001b25d	movq	0x1982c(%rip), %rsi     ## Objc selector ref: actionKey
000000000001b264	movq	%rbx, %rdi
000000000001b267	callq	*%r15
000000000001b26a	movq	0x197af(%rip), %rsi     ## Objc selector ref: setActionKey:
000000000001b271	movq	%r14, %rdi
000000000001b274	movq	%rax, %rdx
000000000001b277	callq	*%r15
000000000001b27a	movq	0x19757(%rip), %rsi     ## Objc selector ref: isHeader
000000000001b281	movq	%rbx, %rdi
000000000001b284	callq	*%r15
000000000001b287	movq	0x196ba(%rip), %rsi     ## Objc selector ref: setIsHeader:
000000000001b28e	movsbl	%al, %edx
000000000001b291	movq	%r14, %rdi
000000000001b294	callq	*%r15
000000000001b297	movq	0x19882(%rip), %rsi     ## Objc selector ref: isRequired
000000000001b29e	movq	%rbx, %rdi
000000000001b2a1	callq	*%r15
000000000001b2a4	movq	0x196a5(%rip), %rsi     ## Objc selector ref: setIsRequired:
000000000001b2ab	movsbl	%al, %edx
000000000001b2ae	movq	%r14, %rdi
000000000001b2b1	callq	*%r15
000000000001b2b4	movq	0x1973d(%rip), %rsi     ## Objc selector ref: deviceSettings
000000000001b2bb	movq	%rbx, %rdi
000000000001b2be	callq	*%r15
000000000001b2c1	movq	0x19090(%rip), %rsi     ## Objc selector ref: mutableCopy
000000000001b2c8	movq	%rax, %rdi
000000000001b2cb	callq	*%r15
000000000001b2ce	movq	%rax, %rbx
000000000001b2d1	movq	0x19688(%rip), %rsi     ## Objc selector ref: setDeviceSettings:
000000000001b2d8	movq	%r14, %rdi
000000000001b2db	movq	%rbx, %rdx
000000000001b2de	callq	*%r15
000000000001b2e1	movq	0x18e68(%rip), %rsi     ## Objc selector ref: release
000000000001b2e8	movq	%rbx, %rdi
000000000001b2eb	movq	%r15, %rax
000000000001b2ee	addq	$0x8, %rsp
000000000001b2f2	popq	%rbx
000000000001b2f3	popq	%r14
000000000001b2f5	popq	%r15
000000000001b2f7	popq	%rbp
000000000001b2f8	jmpq	*%rax
000000000001b2fa	pushq	%rbp
000000000001b2fb	movq	%rsp, %rbp
000000000001b2fe	pushq	%r14
000000000001b300	pushq	%rbx
000000000001b301	movq	%rdi, %rbx
000000000001b304	movq	_OBJC_IVAR_$_UASwitchInputEntity._deviceSettings(%rip), %rax
000000000001b30b	movq	(%rbx,%rax), %rax
000000000001b30f	testq	%rax, %rax
000000000001b312	jne	0x1b356
000000000001b314	movq	0x1a21d(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_NSMutableDictionary
000000000001b31b	movq	0x18e46(%rip), %rsi     ## Objc selector ref: alloc
000000000001b322	movq	0xe0d7(%rip), %r14      ## Objc message: +[NSMutableDictionary alloc]
000000000001b329	callq	*%r14
000000000001b32c	movq	0x18f3d(%rip), %rsi     ## Objc selector ref: init
000000000001b333	movq	%rax, %rdi
000000000001b336	callq	*%r14
000000000001b339	movq	_OBJC_IVAR_$_UASwitchInputEntity._deviceSettings(%rip), %rdx
000000000001b340	movq	%rax, %rdi
000000000001b343	movq	%rbx, %rsi
000000000001b346	callq	0x1e868                 ## symbol stub for: _objc_assign_ivar
000000000001b34b	movq	_OBJC_IVAR_$_UASwitchInputEntity._deviceSettings(%rip), %rax
000000000001b352	movq	(%rbx,%rax), %rax
000000000001b356	popq	%rbx
000000000001b357	popq	%r14
000000000001b359	popq	%rbp
000000000001b35a	retq
000000000001b35b	pushq	%rbp
000000000001b35c	movq	%rsp, %rbp
000000000001b35f	pushq	%r14
000000000001b361	pushq	%rbx
000000000001b362	movq	%rdi, %rbx
000000000001b365	movq	_OBJC_IVAR_$_UASwitchInputEntity._isRequired(%rip), %rax
000000000001b36c	movb	$0x0, (%rbx,%rax)
000000000001b370	movq	_OBJC_IVAR_$_UASwitchInputEntity._isHeader(%rip), %rax
000000000001b377	movb	$0x0, (%rbx,%rax)
000000000001b37b	movq	_OBJC_IVAR_$_UASwitchInputEntity._actionKey(%rip), %rax
000000000001b382	movq	(%rbx,%rax), %rdi
000000000001b386	movq	0x18dc3(%rip), %rsi     ## Objc selector ref: release
000000000001b38d	movq	0xe06c(%rip), %r14      ## Objc message: -[%rdi release]
000000000001b394	callq	*%r14
000000000001b397	movq	_OBJC_IVAR_$_UASwitchInputEntity._actionKey(%rip), %rdx
000000000001b39e	xorl	%edi, %edi
000000000001b3a0	movq	%rbx, %rsi
000000000001b3a3	callq	0x1e868                 ## symbol stub for: _objc_assign_ivar
000000000001b3a8	movq	_OBJC_IVAR_$_UASwitchInputEntity._index(%rip), %rax
000000000001b3af	movq	$-0x1, (%rbx,%rax)
000000000001b3b7	movq	0x195a2(%rip), %rsi     ## Objc selector ref: setDeviceSettings:
000000000001b3be	xorl	%edx, %edx
000000000001b3c0	movq	%rbx, %rdi
000000000001b3c3	movq	%r14, %rax
000000000001b3c6	popq	%rbx
000000000001b3c7	popq	%r14
000000000001b3c9	popq	%rbp
000000000001b3ca	jmpq	*%rax
000000000001b3cc	pushq	%rbp
000000000001b3cd	movq	%rsp, %rbp
000000000001b3d0	pushq	%r15
000000000001b3d2	pushq	%r14
000000000001b3d4	pushq	%r13
000000000001b3d6	pushq	%r12
000000000001b3d8	pushq	%rbx
000000000001b3d9	subq	$0x48, %rsp
000000000001b3dd	movq	%rdi, %rbx
000000000001b3e0	movq	_OBJC_IVAR_$_UASwitchInputEntity._isHeader(%rip), %rax
000000000001b3e7	cmpb	$0x0, (%rbx,%rax)
000000000001b3eb	je	0x1b441
000000000001b3ed	movq	%rbx, -0x38(%rbp)
000000000001b3f1	movq	0x1a3a0(%rip), %rax     ## Objc class ref: UASwitchInputEntity
000000000001b3f8	movq	%rax, -0x30(%rbp)
000000000001b3fc	movq	0x19efd(%rip), %rsi     ## Objc selector ref: description
000000000001b403	leaq	-0x38(%rbp), %rdi
000000000001b407	callq	0x1e88c                 ## Objc message: -[[%rdi super] description]
000000000001b40c	movq	%rax, %r14
000000000001b40f	movq	0x190b2(%rip), %rsi     ## Objc selector ref: title
000000000001b416	movq	0xdfe3(%rip), %r15      ## Objc message: -[%rdi title]
000000000001b41d	movq	%rbx, %rdi
000000000001b420	callq	*%r15
000000000001b423	movq	%rax, %rcx
000000000001b426	movq	0x19edb(%rip), %rsi     ## Objc selector ref: stringByAppendingFormat:
000000000001b42d	leaq	0x1065c(%rip), %rdx     ## Objc cfstring ref: @"Header %@"
000000000001b434	xorl	%eax, %eax
000000000001b436	movq	%r14, %rdi
000000000001b439	callq	*%r15
000000000001b43c	jmp	0x1b4f4
000000000001b441	movq	%rbx, -0x48(%rbp)
000000000001b445	movq	0x1a34c(%rip), %rax     ## Objc class ref: UASwitchInputEntity
000000000001b44c	movq	%rax, -0x40(%rbp)
000000000001b450	movq	0x19ea9(%rip), %rsi     ## Objc selector ref: description
000000000001b457	leaq	-0x48(%rbp), %rdi
000000000001b45b	callq	0x1e88c                 ## Objc message: -[[%rdi super] description]
000000000001b460	movq	%rax, -0x50(%rbp)
000000000001b464	movq	_OBJC_IVAR_$_UASwitchInputEntity._index(%rip), %rax
000000000001b46b	movq	(%rbx,%rax), %r15
000000000001b46f	movq	0x19052(%rip), %rsi     ## Objc selector ref: title
000000000001b476	movq	0xdf83(%rip), %r14      ## Objc message: -[%rdi title]
000000000001b47d	movq	%rbx, %rdi
000000000001b480	callq	*%r14
000000000001b483	movq	%rax, %r12
000000000001b486	movq	_OBJC_IVAR_$_UASwitchInputEntity._actionKey(%rip), %rax
000000000001b48d	movq	(%rbx,%rax), %r13
000000000001b491	movq	0x196a0(%rip), %rsi     ## Objc selector ref: switchName
000000000001b498	movq	%rbx, %rdi
000000000001b49b	callq	*%r14
000000000001b49e	movq	_OBJC_IVAR_$_UASwitchInputEntity._isRequired(%rip), %rcx
000000000001b4a5	cmpb	$0x0, (%rbx,%rcx)
000000000001b4a9	leaq	0x10620(%rip), %rcx     ## Objc cfstring ref: @"Required"
000000000001b4b0	leaq	0x10639(%rip), %rdx     ## Objc cfstring ref: @"Optional"
000000000001b4b7	cmovneq	%rcx, %rdx
000000000001b4bb	movq	_OBJC_IVAR_$_UASwitchInputEntity._deviceSettings(%rip), %rcx
000000000001b4c2	movq	(%rbx,%rcx), %rcx
000000000001b4c6	movq	0x19e3b(%rip), %rsi     ## Objc selector ref: stringByAppendingFormat:
000000000001b4cd	movq	%rcx, 0x10(%rsp)
000000000001b4d2	movq	%rdx, 0x8(%rsp)
000000000001b4d7	movq	%rax, (%rsp)
000000000001b4db	leaq	0x105ce(%rip), %rdx     ## Objc cfstring ref: @" Index:%ld, Title:%@, ActionKey:%@, SwitchName:%@, %@, Settings:%@"
000000000001b4e2	xorl	%eax, %eax
000000000001b4e4	movq	%r15, %rcx
000000000001b4e7	movq	-0x50(%rbp), %rdi
000000000001b4eb	movq	%r12, %r8
000000000001b4ee	movq	%r13, %r9
000000000001b4f1	callq	*%r14
000000000001b4f4	addq	$0x48, %rsp
000000000001b4f8	popq	%rbx
000000000001b4f9	popq	%r12
000000000001b4fb	popq	%r13
000000000001b4fd	popq	%r14
000000000001b4ff	popq	%r15
000000000001b501	popq	%rbp
000000000001b502	retq
000000000001b503	pushq	%rbp
000000000001b504	movq	%rsp, %rbp
000000000001b507	movq	_OBJC_IVAR_$_UASwitchInputEntity._index(%rip), %rax
000000000001b50e	movq	(%rdi,%rax), %rax
000000000001b512	popq	%rbp
000000000001b513	retq
000000000001b514	pushq	%rbp
000000000001b515	movq	%rsp, %rbp
000000000001b518	movq	_OBJC_IVAR_$_UASwitchInputEntity._index(%rip), %rax
000000000001b51f	movq	%rdx, (%rdi,%rax)
000000000001b523	popq	%rbp
000000000001b524	retq
000000000001b525	pushq	%rbp
000000000001b526	movq	%rsp, %rbp
000000000001b529	movq	_OBJC_IVAR_$_UASwitchInputEntity._isHeader(%rip), %rax
000000000001b530	movb	(%rdi,%rax), %al
000000000001b533	movsbl	%al, %eax
000000000001b536	popq	%rbp
000000000001b537	retq
000000000001b538	pushq	%rbp
000000000001b539	movq	%rsp, %rbp
000000000001b53c	movq	_OBJC_IVAR_$_UASwitchInputEntity._isHeader(%rip), %rax
000000000001b543	movb	%dl, (%rdi,%rax)
000000000001b546	popq	%rbp
000000000001b547	retq
000000000001b548	pushq	%rbp
000000000001b549	movq	%rsp, %rbp
000000000001b54c	movq	_OBJC_IVAR_$_UASwitchInputEntity._isRequired(%rip), %rax
000000000001b553	movb	(%rdi,%rax), %al
000000000001b556	movsbl	%al, %eax
000000000001b559	popq	%rbp
000000000001b55a	retq
000000000001b55b	pushq	%rbp
000000000001b55c	movq	%rsp, %rbp
000000000001b55f	movq	_OBJC_IVAR_$_UASwitchInputEntity._isRequired(%rip), %rax
000000000001b566	movb	%dl, (%rdi,%rax)
000000000001b569	popq	%rbp
000000000001b56a	retq
000000000001b56b	pushq	%rbp
000000000001b56c	movq	%rsp, %rbp
000000000001b56f	movq	_OBJC_IVAR_$_UASwitchInputEntity._actionKey(%rip), %rax
000000000001b576	movq	(%rdi,%rax), %rax
000000000001b57a	popq	%rbp
000000000001b57b	retq
000000000001b57c	pushq	%rbp
000000000001b57d	movq	%rsp, %rbp
000000000001b580	movq	%rdx, %rax
000000000001b583	movq	_OBJC_IVAR_$_UASwitchInputEntity._actionKey(%rip), %rdx
000000000001b58a	xorl	%r8d, %r8d
000000000001b58d	xorl	%r9d, %r9d
000000000001b590	movq	%rax, %rcx
000000000001b593	popq	%rbp
000000000001b594	jmp	0x1e89e                 ## symbol stub for: _objc_setProperty
000000000001b599	pushq	%rbp
000000000001b59a	movq	%rsp, %rbp
000000000001b59d	movq	%rdx, %rax
000000000001b5a0	movq	_OBJC_IVAR_$_UASwitchInputEntity._deviceSettings(%rip), %rdx
000000000001b5a7	xorl	%r8d, %r8d
000000000001b5aa	xorl	%r9d, %r9d
000000000001b5ad	movq	%rax, %rcx
000000000001b5b0	popq	%rbp
000000000001b5b1	jmp	0x1e89e                 ## symbol stub for: _objc_setProperty
000000000001b5b6	nop
000000000001b5b7	nop
000000000001b5b8	nop
000000000001b5b9	nop
000000000001b5ba	nop
000000000001b5bb	nop
000000000001b5bc	nop
000000000001b5bd	nop
000000000001b5be	nop
000000000001b5bf	nop
000000000001b5c0	pushq	%rbp
000000000001b5c1	movq	%rsp, %rbp
000000000001b5c4	pushq	%r14
000000000001b5c6	pushq	%rbx
000000000001b5c7	movl	%edx, %ebx
000000000001b5c9	movq	%rdi, %r14
000000000001b5cc	movq	_OBJC_IVAR_$_UADeviceAssignmentWindow._isCaptureEnabled(%rip), %rax
000000000001b5d3	movzbl	(%r14,%rax), %ecx
000000000001b5d8	movzbl	%bl, %edx
000000000001b5db	cmpl	%edx, %ecx
000000000001b5dd	jne	0x1b5e4
000000000001b5df	popq	%rbx
000000000001b5e0	popq	%r14
000000000001b5e2	popq	%rbp
000000000001b5e3	retq
000000000001b5e4	movb	%bl, (%r14,%rax)
000000000001b5e8	movq	0x1a0f1(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_ACSHHIDDeviceManager
000000000001b5ef	movq	0x19d1a(%rip), %rsi     ## Objc selector ref: sharedManager
000000000001b5f6	callq	*0xde04(%rip)           ## Objc message: +[ACSHHIDDeviceManager sharedManager]
000000000001b5fc	testb	%bl, %bl
000000000001b5fe	movq	0x19613(%rip), %rsi     ## Objc selector ref: setDelegate:
000000000001b605	movq	0xddf4(%rip), %rbx      ## Objc message: -[%rdi setDelegate:]
000000000001b60c	je	0x1b65c
000000000001b60e	movq	%rax, %rdi
000000000001b611	movq	%r14, %rdx
000000000001b614	callq	*%rbx
000000000001b616	movq	0x1a0c3(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_ACSHHIDDeviceManager
000000000001b61d	movq	0x19cec(%rip), %rsi     ## Objc selector ref: sharedManager
000000000001b624	callq	*%rbx
000000000001b626	movq	0x19ceb(%rip), %rsi     ## Objc selector ref: setDetectDevices:
000000000001b62d	movl	$0x1, %edx
000000000001b632	movq	%rax, %rdi
000000000001b635	callq	*%rbx
000000000001b637	xorl	%eax, %eax
000000000001b639	callq	0x1e406                 ## symbol stub for: _initializeEventTap
000000000001b63e	movl	$0x2, %esi
000000000001b643	movq	%r14, %rdi
000000000001b646	callq	0x1e40c                 ## symbol stub for: _setEventTapEventHandler
000000000001b64b	movl	$0x1, %esi
000000000001b650	movq	%r14, %rdi
000000000001b653	popq	%rbx
000000000001b654	popq	%r14
000000000001b656	popq	%rbp
000000000001b657	jmp	0x1e40c                 ## symbol stub for: _setEventTapEventHandler
000000000001b65c	xorl	%edx, %edx
000000000001b65e	movq	%rax, %rdi
000000000001b661	callq	*%rbx
000000000001b663	movq	0x1a076(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_ACSHHIDDeviceManager
000000000001b66a	movq	0x19c9f(%rip), %rsi     ## Objc selector ref: sharedManager
000000000001b671	callq	*%rbx
000000000001b673	movq	0x19c9e(%rip), %rsi     ## Objc selector ref: setDetectDevices:
000000000001b67a	xorl	%edx, %edx
000000000001b67c	movq	%rax, %rdi
000000000001b67f	callq	*%rbx
000000000001b681	xorl	%eax, %eax
000000000001b683	popq	%rbx
000000000001b684	popq	%r14
000000000001b686	popq	%rbp
000000000001b687	jmp	0x1e412                 ## symbol stub for: _teardownEventTap
000000000001b68c	pushq	%rbp
000000000001b68d	movq	%rsp, %rbp
000000000001b690	pushq	%r15
000000000001b692	pushq	%r14
000000000001b694	pushq	%r12
000000000001b696	pushq	%rbx
000000000001b697	movq	%rdx, %r12
000000000001b69a	movq	%rdi, %r15
000000000001b69d	callq	0x1e880                 ## symbol stub for: _objc_autoreleasePoolPush
000000000001b6a2	movq	%rax, %r14
000000000001b6a5	movq	%r12, %rdi
000000000001b6a8	callq	0x1e958                 ## symbol stub for: _CGEventGetType
000000000001b6ad	movl	%eax, %ecx
000000000001b6af	xorl	%eax, %eax
000000000001b6b1	cmpl	$0x18, %ecx
000000000001b6b4	jg	0x1b6ce
000000000001b6b6	cmpl	$0x1, %ecx
000000000001b6b9	je	0x1b6d3
000000000001b6bb	cmpl	$0x3, %ecx
000000000001b6be	je	0x1b6d3
000000000001b6c0	cmpl	$0xa, %ecx
000000000001b6c3	jne	0x1b6e6
000000000001b6c5	movq	0x19c54(%rip), %rsi     ## Objc selector ref: _handleKeyEvent:
000000000001b6cc	jmp	0x1b6da
000000000001b6ce	cmpl	$0x19, %ecx
000000000001b6d1	jne	0x1b6e6
000000000001b6d3	movq	0x19c4e(%rip), %rsi     ## Objc selector ref: _handleMouseEvent:
000000000001b6da	movq	%r15, %rdi
000000000001b6dd	movq	%r12, %rdx
000000000001b6e0	callq	*0xdd1a(%rip)           ## Objc message: +[ACSHHIDDeviceManager _handleMouseEvent:]
000000000001b6e6	xorl	%ebx, %ebx
000000000001b6e8	testb	%al, %al
000000000001b6ea	cmoveq	%r12, %rbx
000000000001b6ee	movq	%r14, %rdi
000000000001b6f1	callq	0x1e87a                 ## symbol stub for: _objc_autoreleasePoolPop
000000000001b6f6	movq	%rbx, %rax
000000000001b6f9	popq	%rbx
000000000001b6fa	popq	%r12
000000000001b6fc	popq	%r14
000000000001b6fe	popq	%r15
000000000001b700	popq	%rbp
000000000001b701	retq
000000000001b702	pushq	%rbp
000000000001b703	movq	%rsp, %rbp
000000000001b706	pushq	%r15
000000000001b708	pushq	%r14
000000000001b70a	pushq	%r13
000000000001b70c	pushq	%r12
000000000001b70e	pushq	%rbx
000000000001b70f	subq	$0x78, %rsp
000000000001b713	movq	%rdx, %r13
000000000001b716	movq	%rdi, %r14
000000000001b719	movq	0xdc38(%rip), %rbx      ## literal pool symbol address: ___stack_chk_guard
000000000001b720	movq	(%rbx), %rax
000000000001b723	movq	%rax, -0x30(%rbp)
000000000001b727	movq	%r13, %rdi
000000000001b72a	callq	0x1e958                 ## symbol stub for: _CGEventGetType
000000000001b72f	movq	_OBJC_IVAR_$_UADeviceAssignmentWindow._isCapturingEvents(%rip), %rdx
000000000001b736	xorl	%ecx, %ecx
000000000001b738	cmpb	$0x0, (%r14,%rdx)
000000000001b73d	je	0x1bb98
000000000001b743	cmpl	$0xa, %eax
000000000001b746	jne	0x1bb98
000000000001b74c	movq	%r14, -0x90(%rbp)
000000000001b753	movq	%r13, %rdi
000000000001b756	callq	0x1e94c                 ## symbol stub for: _CGEventGetFlags
000000000001b75b	movq	%rax, %rbx
000000000001b75e	movl	$0x9, %esi
000000000001b763	movq	%r13, %rdi
000000000001b766	callq	0x1e952                 ## symbol stub for: _CGEventGetIntegerValueField
000000000001b76b	movq	%rax, %r14
000000000001b76e	andq	$0x1e0000, %rbx         ## imm = 0x1E0000
000000000001b775	movq	0x19de4(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_NSNumber
000000000001b77c	movq	0x18f85(%rip), %rsi     ## Objc selector ref: numberWithUnsignedInteger:
000000000001b783	je	0x1b82d
000000000001b789	movq	0xdc70(%rip), %r15      ## Objc message: +[NSNumber numberWithUnsignedInteger:]
000000000001b790	movl	$0x2, %edx
000000000001b795	callq	*%r15
000000000001b798	movq	%rax, -0x98(%rbp)
000000000001b79f	movq	0x19dba(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_NSNumber
000000000001b7a6	movq	0x18f5b(%rip), %rsi     ## Objc selector ref: numberWithUnsignedInteger:
000000000001b7ad	movq	%rbx, %rdx
000000000001b7b0	callq	*%r15
000000000001b7b3	movq	%rax, %rbx
000000000001b7b6	movq	0xdb33(%rip), %rax      ## literal pool symbol address: _UASwitchValueKeyCodeKey
000000000001b7bd	movq	(%rax), %rdi
000000000001b7c0	leaq	-0x50(%rbp), %rsi
000000000001b7c4	movq	%rsi, %r12
000000000001b7c7	callq	0x1e86e                 ## symbol stub for: _objc_assign_strongCast
000000000001b7cc	movq	0x19d8d(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_NSNumber
000000000001b7d3	movq	0x18f2e(%rip), %rsi     ## Objc selector ref: numberWithUnsignedInteger:
000000000001b7da	movq	%r14, %rdx
000000000001b7dd	callq	*%r15
000000000001b7e0	leaq	-0x40(%rbp), %r14
000000000001b7e4	movq	%rax, %rdi
000000000001b7e7	movq	%r14, %rsi
000000000001b7ea	callq	0x1e86e                 ## symbol stub for: _objc_assign_strongCast
000000000001b7ef	leaq	-0x48(%rbp), %rsi
000000000001b7f3	movq	0xdafe(%rip), %rax      ## literal pool symbol address: _UASwitchValueModifiersKey
000000000001b7fa	movq	(%rax), %rdi
000000000001b7fd	callq	0x1e86e                 ## symbol stub for: _objc_assign_strongCast
000000000001b802	leaq	-0x38(%rbp), %rsi
000000000001b806	movq	%rbx, %rdi
000000000001b809	callq	0x1e86e                 ## symbol stub for: _objc_assign_strongCast
000000000001b80e	movq	0x19d1b(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_NSDictionary
000000000001b815	movq	0x18a44(%rip), %rsi     ## Objc selector ref: dictionaryWithObjects:forKeys:count:
000000000001b81c	movl	$0x2, %r8d
000000000001b822	movq	%r14, %rdx
000000000001b825	movq	%r12, %rcx
000000000001b828	callq	*%r15
000000000001b82b	jmp	0x1b855
000000000001b82d	movq	0xdbcc(%rip), %rbx      ## Objc message: +[NSDictionary dictionaryWithObjects:forKeys:count:]
000000000001b834	movl	$0x1, %edx
000000000001b839	callq	*%rbx
000000000001b83b	movq	%rax, -0x98(%rbp)
000000000001b842	movq	0x19d17(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_NSNumber
000000000001b849	movq	0x18eb8(%rip), %rsi     ## Objc selector ref: numberWithUnsignedInteger:
000000000001b850	movq	%r14, %rdx
000000000001b853	callq	*%rbx
000000000001b855	movq	%rax, %r14
000000000001b858	movq	-0x90(%rbp), %r15
000000000001b85f	movq	%r13, %rdi
000000000001b862	callq	0x1e3fa                 ## symbol stub for: _ACSHEventTapGetDeviceInfo
000000000001b867	movq	%rax, %r12
000000000001b86a	movq	0x19abf(%rip), %rsi     ## Objc selector ref: delegate
000000000001b871	movq	0xdb88(%rip), %r13      ## Objc message: +[NSNumber delegate]
000000000001b878	movq	%r15, %rdi
000000000001b87b	callq	*%r13
000000000001b87e	movq	%rax, %rbx
000000000001b881	movq	0x19ab0(%rip), %rdx     ## Objc selector ref: updateDeviceAssignment:forWindow:
000000000001b888	movq	0x19ab1(%rip), %rsi     ## Objc selector ref: respondsToSelector:
000000000001b88f	movq	%rbx, %rdi
000000000001b892	callq	*%r13
000000000001b895	testb	%al, %al
000000000001b897	je	0x1bb8f
000000000001b89d	movq	0x19c94(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_NSMutableDictionary
000000000001b8a4	movq	0x188bd(%rip), %rsi     ## Objc selector ref: alloc
000000000001b8ab	callq	*%r13
000000000001b8ae	movq	0x189bb(%rip), %rsi     ## Objc selector ref: init
000000000001b8b5	movq	%rax, %rdi
000000000001b8b8	callq	*%r13
000000000001b8bb	movq	%rbx, -0x90(%rbp)
000000000001b8c2	movq	%rax, %rbx
000000000001b8c5	movq	0x19a7c(%rip), %rsi     ## Objc selector ref: setSwitchValue:
000000000001b8cc	movq	%rbx, %rdi
000000000001b8cf	movq	%r14, %rdx
000000000001b8d2	callq	*%r13
000000000001b8d5	movq	0x19a74(%rip), %rsi     ## Objc selector ref: setTriggerType:
000000000001b8dc	movq	%rbx, %rdi
000000000001b8df	movq	-0x98(%rbp), %rdx
000000000001b8e6	callq	*%r13
000000000001b8e9	movq	0x188d8(%rip), %rsi     ## Objc selector ref: objectForKey:
000000000001b8f0	leaq	0x10219(%rip), %rdx     ## Objc cfstring ref: @"LocationID"
000000000001b8f7	movq	%r12, %rdi
000000000001b8fa	callq	*%r13
000000000001b8fd	movq	0x19a54(%rip), %rsi     ## Objc selector ref: setLocationID:
000000000001b904	movq	%rbx, %rdi
000000000001b907	movq	%rax, %rdx
000000000001b90a	callq	*%r13
000000000001b90d	movq	0x188b4(%rip), %rsi     ## Objc selector ref: objectForKey:
000000000001b914	leaq	0x10215(%rip), %rdx     ## Objc cfstring ref: @"VendorID"
000000000001b91b	movq	%r12, %rdi
000000000001b91e	callq	*%r13
000000000001b921	movq	0x19a38(%rip), %rsi     ## Objc selector ref: setVendorID:
000000000001b928	movq	%rbx, %rdi
000000000001b92b	movq	%rax, %rdx
000000000001b92e	callq	*%r13
000000000001b931	movq	0x18890(%rip), %rsi     ## Objc selector ref: objectForKey:
000000000001b938	leaq	0x10211(%rip), %rdx     ## Objc cfstring ref: @"VendorIDSource"
000000000001b93f	movq	%r12, %rdi
000000000001b942	callq	*%r13
000000000001b945	movq	0x19a1c(%rip), %rsi     ## Objc selector ref: setVendorIDSource:
000000000001b94c	movq	%rbx, %rdi
000000000001b94f	movq	%rax, %rdx
000000000001b952	callq	*%r13
000000000001b955	movq	0x1886c(%rip), %rsi     ## Objc selector ref: objectForKey:
000000000001b95c	leaq	0x1020d(%rip), %rdx     ## Objc cfstring ref: @"ProductID"
000000000001b963	movq	%r12, %rdi
000000000001b966	callq	*%r13
000000000001b969	movq	0x19a00(%rip), %rsi     ## Objc selector ref: setProductID:
000000000001b970	movq	%rbx, %rdi
000000000001b973	movq	%rax, %rdx
000000000001b976	callq	*%r13
000000000001b979	movq	0x18848(%rip), %rsi     ## Objc selector ref: objectForKey:
000000000001b980	leaq	0x10209(%rip), %rdx     ## Objc cfstring ref: @"SerialNumber"
000000000001b987	movq	%r12, %rdi
000000000001b98a	callq	*%r13
000000000001b98d	movq	0x199e4(%rip), %rsi     ## Objc selector ref: setSerialNumber:
000000000001b994	movq	%rbx, %rdi
000000000001b997	movq	%rax, %rdx
000000000001b99a	callq	*%r13
000000000001b99d	movq	0x18824(%rip), %rsi     ## Objc selector ref: objectForKey:
000000000001b9a4	leaq	0x10205(%rip), %rdx     ## Objc cfstring ref: @"Manufacturer"
000000000001b9ab	movq	%r12, %rdi
000000000001b9ae	callq	*%r13
000000000001b9b1	movq	0x199c8(%rip), %rsi     ## Objc selector ref: setManufacturer:
000000000001b9b8	movq	%rbx, %rdi
000000000001b9bb	movq	%rax, %rdx
000000000001b9be	callq	*%r13
000000000001b9c1	movq	0x18800(%rip), %rsi     ## Objc selector ref: objectForKey:
000000000001b9c8	leaq	0x10201(%rip), %rdx     ## Objc cfstring ref: @"Product"
000000000001b9cf	movq	%r12, %rdi
000000000001b9d2	callq	*%r13
000000000001b9d5	movq	0x199ac(%rip), %rsi     ## Objc selector ref: setProductName:
000000000001b9dc	movq	%rbx, %rdi
000000000001b9df	movq	%rax, %rdx
000000000001b9e2	callq	*%r13
000000000001b9e5	movq	0x187dc(%rip), %rsi     ## Objc selector ref: objectForKey:
000000000001b9ec	leaq	0x101fd(%rip), %rdx     ## Objc cfstring ref: @"Transport"
000000000001b9f3	movq	%r12, %rdi
000000000001b9f6	callq	*%r13
000000000001b9f9	movq	0x19990(%rip), %rsi     ## Objc selector ref: setTransport:
000000000001ba00	movq	%rbx, %rdi
000000000001ba03	movq	%rax, %rdx
000000000001ba06	callq	*%r13
000000000001ba09	movq	0x187b8(%rip), %rsi     ## Objc selector ref: objectForKey:
000000000001ba10	leaq	0x101f9(%rip), %rdx     ## Objc cfstring ref: @"Built-In"
000000000001ba17	movq	%r12, %rdi
000000000001ba1a	callq	*%r13
000000000001ba1d	movq	0x19974(%rip), %rsi     ## Objc selector ref: setBuiltIn:
000000000001ba24	movq	%rbx, %rdi
000000000001ba27	movq	%rax, %rdx
000000000001ba2a	callq	*%r13
000000000001ba2d	movq	0x18794(%rip), %rsi     ## Objc selector ref: objectForKey:
000000000001ba34	leaq	0x101f5(%rip), %rdx     ## Objc cfstring ref: @"HIDKind"
000000000001ba3b	movq	%r12, %rdi
000000000001ba3e	callq	*%r13
000000000001ba41	movq	0x19958(%rip), %rsi     ## Objc selector ref: setHidKind:
000000000001ba48	movq	%rbx, %rdi
000000000001ba4b	movq	%rax, %rdx
000000000001ba4e	callq	*%r13
000000000001ba51	movq	0x18770(%rip), %rsi     ## Objc selector ref: objectForKey:
000000000001ba58	leaq	0x101f1(%rip), %rdx     ## Objc cfstring ref: @"HIDInterfaceID"
000000000001ba5f	movq	%r12, %rdi
000000000001ba62	callq	*%r13
000000000001ba65	movq	0x1993c(%rip), %rsi     ## Objc selector ref: setInterfaceID:
000000000001ba6c	movq	%rbx, %rdi
000000000001ba6f	movq	%rax, %rdx
000000000001ba72	callq	*%r13
000000000001ba75	movq	0x1874c(%rip), %rsi     ## Objc selector ref: objectForKey:
000000000001ba7c	leaq	0x101ed(%rip), %rdx     ## Objc cfstring ref: @"HIDSubinterfaceID"
000000000001ba83	movq	%r12, %rdi
000000000001ba86	callq	*%r13
000000000001ba89	movq	0x19920(%rip), %rsi     ## Objc selector ref: setSubInterfaceID:
000000000001ba90	movq	%rbx, %rdi
000000000001ba93	movq	%rax, %rdx
000000000001ba96	callq	*%r13
000000000001ba99	movq	0x18728(%rip), %rsi     ## Objc selector ref: objectForKey:
000000000001baa0	leaq	0x101e9(%rip), %rdx     ## Objc cfstring ref: @"ACSHHIDServiceID"
000000000001baa7	movq	%r12, %rdi
000000000001baaa	callq	*%r13
000000000001baad	movq	0x19904(%rip), %rsi     ## Objc selector ref: setServiceID:
000000000001bab4	movq	%rbx, %rdi
000000000001bab7	movq	%rax, %rdx
000000000001baba	callq	*%r13
000000000001babd	movq	0x18704(%rip), %rsi     ## Objc selector ref: objectForKey:
000000000001bac4	leaq	0x101e5(%rip), %rdx     ## Objc cfstring ref: @"PrimaryUsage"
000000000001bacb	movq	%r12, %rdi
000000000001bace	callq	*%r13
000000000001bad1	movq	0x198e8(%rip), %rsi     ## Objc selector ref: setPrimaryUsage:
000000000001bad8	movq	%rbx, %rdi
000000000001badb	movq	%rax, %rdx
000000000001bade	callq	*%r13
000000000001bae1	movq	0x186e0(%rip), %rsi     ## Objc selector ref: objectForKey:
000000000001bae8	leaq	0x101e1(%rip), %rdx     ## Objc cfstring ref: @"PrimaryUsagePage"
000000000001baef	movq	%r12, %rdi
000000000001baf2	callq	*%r13
000000000001baf5	movq	0x198cc(%rip), %rsi     ## Objc selector ref: setPrimaryUsagePage:
000000000001bafc	movq	%rbx, %rdi
000000000001baff	movq	%rax, %rdx
000000000001bb02	callq	*%r13
000000000001bb05	movq	0xd83c(%rip), %rax      ## literal pool symbol address: __NSConcreteStackBlock
000000000001bb0c	movq	%rax, -0x88(%rbp)
000000000001bb13	movl	$0x42000000, -0x80(%rbp) ## imm = 0x42000000
000000000001bb1a	movl	$0x0, -0x7c(%rbp)
000000000001bb21	leaq	0x90(%rip), %rax
000000000001bb28	movq	%rax, -0x78(%rbp)
000000000001bb2c	leaq	0xe49d(%rip), %rax
000000000001bb33	movq	%rax, -0x70(%rbp)
000000000001bb37	leaq	-0x68(%rbp), %rsi
000000000001bb3b	movq	-0x90(%rbp), %rdi
000000000001bb42	callq	0x1e86e                 ## symbol stub for: _objc_assign_strongCast
000000000001bb47	leaq	-0x60(%rbp), %rsi
000000000001bb4b	movq	%rbx, %rdi
000000000001bb4e	callq	0x1e86e                 ## symbol stub for: _objc_assign_strongCast
000000000001bb53	leaq	-0x58(%rbp), %rsi
000000000001bb57	movq	%r15, %rdi
000000000001bb5a	callq	0x1e86e                 ## symbol stub for: _objc_assign_strongCast
000000000001bb5f	movq	0xd7fa(%rip), %rdi      ## literal pool symbol address: __dispatch_main_q
000000000001bb66	leaq	-0x88(%rbp), %rsi
000000000001bb6d	callq	0x1e8bc                 ## symbol stub for: _dispatch_async
000000000001bb72	movq	0x185d7(%rip), %rsi     ## Objc selector ref: release
000000000001bb79	movq	%rbx, %rdi
000000000001bb7c	callq	*%r13
000000000001bb7f	movq	_OBJC_IVAR_$_UADeviceAssignmentWindow._isCapturingEvents(%rip), %rax
000000000001bb86	movb	$0x0, (%r15,%rax)
000000000001bb8b	movb	$0x1, %cl
000000000001bb8d	jmp	0x1bb91
000000000001bb8f	xorl	%ecx, %ecx
000000000001bb91	movq	0xd7c0(%rip), %rbx      ## literal pool symbol address: ___stack_chk_guard
000000000001bb98	movq	(%rbx), %rax
000000000001bb9b	cmpq	-0x30(%rbp), %rax
000000000001bb9f	jne	0x1bbb3
000000000001bba1	movzbl	%cl, %eax
000000000001bba4	addq	$0x78, %rsp
000000000001bba8	popq	%rbx
000000000001bba9	popq	%r12
000000000001bbab	popq	%r13
000000000001bbad	popq	%r14
000000000001bbaf	popq	%r15
000000000001bbb1	popq	%rbp
000000000001bbb2	retq
000000000001bbb3	callq	0x1e8b6                 ## symbol stub for: ___stack_chk_fail
000000000001bbb8	pushq	%rbp
000000000001bbb9	movq	%rsp, %rbp
000000000001bbbc	movq	0x20(%rdi), %rax
000000000001bbc0	movq	0x28(%rdi), %rdx
000000000001bbc4	movq	0x30(%rdi), %rcx
000000000001bbc8	movq	0x19769(%rip), %rsi     ## Objc selector ref: updateDeviceAssignment:forWindow:
000000000001bbcf	movq	%rax, %rdi
000000000001bbd2	popq	%rbp
000000000001bbd3	jmpq	*0xd827(%rip)           ## Objc message: +[NSMutableDictionary updateDeviceAssignment:forWindow:]
000000000001bbd9	nopl	(%rax)
000000000001bbe0	pushq	%rbp
000000000001bbe1	movq	%rsp, %rbp
000000000001bbe4	pushq	%r14
000000000001bbe6	pushq	%rbx
000000000001bbe7	movq	%rsi, %r14
000000000001bbea	movq	%rdi, %rbx
000000000001bbed	leaq	0x20(%rbx), %rdi
000000000001bbf1	movq	0x20(%r14), %rsi
000000000001bbf5	movl	$0x3, %edx
000000000001bbfa	callq	0x1e8a4                 ## symbol stub for: __Block_object_assign
000000000001bbff	leaq	0x28(%rbx), %rdi
000000000001bc03	movq	0x28(%r14), %rsi
000000000001bc07	movl	$0x3, %edx
000000000001bc0c	callq	0x1e8a4                 ## symbol stub for: __Block_object_assign
000000000001bc11	addq	$0x30, %rbx
000000000001bc15	movq	0x30(%r14), %rsi
000000000001bc19	movl	$0x3, %edx
000000000001bc1e	movq	%rbx, %rdi
000000000001bc21	popq	%rbx
000000000001bc22	popq	%r14
000000000001bc24	popq	%rbp
000000000001bc25	jmp	0x1e8a4                 ## symbol stub for: __Block_object_assign
000000000001bc2a	nopw	(%rax,%rax)
000000000001bc30	pushq	%rbp
000000000001bc31	movq	%rsp, %rbp
000000000001bc34	pushq	%rbx
000000000001bc35	pushq	%rax
000000000001bc36	movq	%rdi, %rbx
000000000001bc39	movq	0x20(%rbx), %rdi
000000000001bc3d	movl	$0x3, %esi
000000000001bc42	callq	0x1e8aa                 ## symbol stub for: __Block_object_dispose
000000000001bc47	movq	0x28(%rbx), %rdi
000000000001bc4b	movl	$0x3, %esi
000000000001bc50	callq	0x1e8aa                 ## symbol stub for: __Block_object_dispose
000000000001bc55	movq	0x30(%rbx), %rdi
000000000001bc59	movl	$0x3, %esi
000000000001bc5e	addq	$0x8, %rsp
000000000001bc62	popq	%rbx
000000000001bc63	popq	%rbp
000000000001bc64	jmp	0x1e8aa                 ## symbol stub for: __Block_object_dispose
000000000001bc69	pushq	%rbp
000000000001bc6a	movq	%rsp, %rbp
000000000001bc6d	pushq	%r15
000000000001bc6f	pushq	%r14
000000000001bc71	pushq	%r13
000000000001bc73	pushq	%r12
000000000001bc75	pushq	%rbx
000000000001bc76	subq	$0x48, %rsp
000000000001bc7a	movq	%rdx, %rbx
000000000001bc7d	movq	%rdi, %r13
000000000001bc80	movq	%rbx, %rdi
000000000001bc83	callq	0x1e958                 ## symbol stub for: _CGEventGetType
000000000001bc88	movq	_OBJC_IVAR_$_UADeviceAssignmentWindow._isCapturingEvents(%rip), %rcx
000000000001bc8f	cmpb	$0x0, (%r13,%rcx)
000000000001bc95	je	0x1c02c
000000000001bc9b	xorl	%ecx, %ecx
000000000001bc9d	cmpl	$0x19, %eax
000000000001bca0	ja	0x1c02e
000000000001bca6	movl	$0x200000a, %edx        ## imm = 0x200000A
000000000001bcab	btl	%eax, %edx
000000000001bcae	jae	0x1c02e
000000000001bcb4	movq	0x19715(%rip), %rsi     ## Objc selector ref: _hitButton:
000000000001bcbb	movq	%r13, %rdi
000000000001bcbe	movq	%rbx, %rdx
000000000001bcc1	callq	*0xd739(%rip)           ## Objc message: -[%rdi _hitButton:]
000000000001bcc7	testb	%al, %al
000000000001bcc9	jne	0x1c02c
000000000001bccf	movq	%rbx, %rdi
000000000001bcd2	callq	0x1e3fa                 ## symbol stub for: _ACSHEventTapGetDeviceInfo
000000000001bcd7	movq	%rax, %r14
000000000001bcda	movq	0x1964f(%rip), %rsi     ## Objc selector ref: delegate
000000000001bce1	movq	0xd718(%rip), %r12      ## Objc message: -[%rdi delegate]
000000000001bce8	movq	%r13, %rdi
000000000001bceb	callq	*%r12
000000000001bcee	movq	%rax, -0x68(%rbp)
000000000001bcf2	movq	0x1963f(%rip), %rdx     ## Objc selector ref: updateDeviceAssignment:forWindow:
000000000001bcf9	movq	0x19640(%rip), %rsi     ## Objc selector ref: respondsToSelector:
000000000001bd00	movq	%rax, %rdi
000000000001bd03	callq	*%r12
000000000001bd06	testb	%al, %al
000000000001bd08	je	0x1c02c
000000000001bd0e	movq	0x19823(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_NSMutableDictionary
000000000001bd15	movq	0x1844c(%rip), %rsi     ## Objc selector ref: alloc
000000000001bd1c	callq	*%r12
000000000001bd1f	movq	0x1854a(%rip), %rsi     ## Objc selector ref: init
000000000001bd26	movq	%rax, %rdi
000000000001bd29	callq	*%r12
000000000001bd2c	movq	%rax, %r15
000000000001bd2f	movl	$0x3, %esi
000000000001bd34	movq	%rbx, %rdi
000000000001bd37	callq	0x1e952                 ## symbol stub for: _CGEventGetIntegerValueField
000000000001bd3c	movq	0x1981d(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_NSNumber
000000000001bd43	movq	0x18986(%rip), %rsi     ## Objc selector ref: numberWithInteger:
000000000001bd4a	movq	%rax, %rdx
000000000001bd4d	callq	*%r12
000000000001bd50	movq	%rax, -0x70(%rbp)
000000000001bd54	movq	0x19805(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_NSNumber
000000000001bd5b	movq	0x189a6(%rip), %rsi     ## Objc selector ref: numberWithUnsignedInteger:
000000000001bd62	movl	$0x3, %edx
000000000001bd67	callq	*%r12
000000000001bd6a	movq	%rax, %rbx
000000000001bd6d	movq	0x195d4(%rip), %rsi     ## Objc selector ref: setSwitchValue:
000000000001bd74	movq	%r15, %rdi
000000000001bd77	movq	-0x70(%rbp), %rdx
000000000001bd7b	callq	*%r12
000000000001bd7e	movq	0x195cb(%rip), %rsi     ## Objc selector ref: setTriggerType:
000000000001bd85	movq	%r15, %rdi
000000000001bd88	movq	%rbx, %rdx
000000000001bd8b	callq	*%r12
000000000001bd8e	movq	0x18433(%rip), %rsi     ## Objc selector ref: objectForKey:
000000000001bd95	leaq	0xfd74(%rip), %rdx      ## Objc cfstring ref: @"LocationID"
000000000001bd9c	movq	%r14, %rdi
000000000001bd9f	callq	*%r12
000000000001bda2	movq	0x195af(%rip), %rsi     ## Objc selector ref: setLocationID:
000000000001bda9	movq	%r15, %rdi
000000000001bdac	movq	%rax, %rdx
000000000001bdaf	callq	*%r12
000000000001bdb2	movq	0x1840f(%rip), %rsi     ## Objc selector ref: objectForKey:
000000000001bdb9	leaq	0xfd70(%rip), %rdx      ## Objc cfstring ref: @"VendorID"
000000000001bdc0	movq	%r14, %rdi
000000000001bdc3	callq	*%r12
000000000001bdc6	movq	0x19593(%rip), %rsi     ## Objc selector ref: setVendorID:
000000000001bdcd	movq	%r15, %rdi
000000000001bdd0	movq	%rax, %rdx
000000000001bdd3	callq	*%r12
000000000001bdd6	movq	0x183eb(%rip), %rsi     ## Objc selector ref: objectForKey:
000000000001bddd	leaq	0xfd6c(%rip), %rdx      ## Objc cfstring ref: @"VendorIDSource"
000000000001bde4	movq	%r14, %rdi
000000000001bde7	callq	*%r12
000000000001bdea	movq	0x19577(%rip), %rsi     ## Objc selector ref: setVendorIDSource:
000000000001bdf1	movq	%r15, %rdi
000000000001bdf4	movq	%rax, %rdx
000000000001bdf7	callq	*%r12
000000000001bdfa	movq	0x183c7(%rip), %rsi     ## Objc selector ref: objectForKey:
000000000001be01	leaq	0xfd68(%rip), %rdx      ## Objc cfstring ref: @"ProductID"
000000000001be08	movq	%r14, %rdi
000000000001be0b	callq	*%r12
000000000001be0e	movq	0x1955b(%rip), %rsi     ## Objc selector ref: setProductID:
000000000001be15	movq	%r15, %rdi
000000000001be18	movq	%rax, %rdx
000000000001be1b	callq	*%r12
000000000001be1e	movq	0x183a3(%rip), %rsi     ## Objc selector ref: objectForKey:
000000000001be25	leaq	0xfd64(%rip), %rdx      ## Objc cfstring ref: @"SerialNumber"
000000000001be2c	movq	%r14, %rdi
000000000001be2f	callq	*%r12
000000000001be32	movq	0x1953f(%rip), %rsi     ## Objc selector ref: setSerialNumber:
000000000001be39	movq	%r15, %rdi
000000000001be3c	movq	%rax, %rdx
000000000001be3f	callq	*%r12
000000000001be42	movq	0x1837f(%rip), %rsi     ## Objc selector ref: objectForKey:
000000000001be49	leaq	0xfd60(%rip), %rdx      ## Objc cfstring ref: @"Manufacturer"
000000000001be50	movq	%r14, %rdi
000000000001be53	callq	*%r12
000000000001be56	movq	0x19523(%rip), %rsi     ## Objc selector ref: setManufacturer:
000000000001be5d	movq	%r15, %rdi
000000000001be60	movq	%rax, %rdx
000000000001be63	callq	*%r12
000000000001be66	movq	0x1835b(%rip), %rsi     ## Objc selector ref: objectForKey:
000000000001be6d	leaq	0xfd5c(%rip), %rdx      ## Objc cfstring ref: @"Product"
000000000001be74	movq	%r14, %rdi
000000000001be77	callq	*%r12
000000000001be7a	movq	0x19507(%rip), %rsi     ## Objc selector ref: setProductName:
000000000001be81	movq	%r15, %rdi
000000000001be84	movq	%rax, %rdx
000000000001be87	callq	*%r12
000000000001be8a	movq	0x18337(%rip), %rsi     ## Objc selector ref: objectForKey:
000000000001be91	leaq	0xfd58(%rip), %rdx      ## Objc cfstring ref: @"Transport"
000000000001be98	movq	%r14, %rdi
000000000001be9b	callq	*%r12
000000000001be9e	movq	0x194eb(%rip), %rsi     ## Objc selector ref: setTransport:
000000000001bea5	movq	%r15, %rdi
000000000001bea8	movq	%rax, %rdx
000000000001beab	callq	*%r12
000000000001beae	movq	0x18313(%rip), %rsi     ## Objc selector ref: objectForKey:
000000000001beb5	leaq	0xfd54(%rip), %rdx      ## Objc cfstring ref: @"Built-In"
000000000001bebc	movq	%r14, %rdi
000000000001bebf	callq	*%r12
000000000001bec2	movq	0x194cf(%rip), %rsi     ## Objc selector ref: setBuiltIn:
000000000001bec9	movq	%r15, %rdi
000000000001becc	movq	%rax, %rdx
000000000001becf	callq	*%r12
000000000001bed2	movq	0x182ef(%rip), %rsi     ## Objc selector ref: objectForKey:
000000000001bed9	leaq	0xfd50(%rip), %rdx      ## Objc cfstring ref: @"HIDKind"
000000000001bee0	movq	%r14, %rdi
000000000001bee3	callq	*%r12
000000000001bee6	movq	0x194b3(%rip), %rsi     ## Objc selector ref: setHidKind:
000000000001beed	movq	%r15, %rdi
000000000001bef0	movq	%rax, %rdx
000000000001bef3	callq	*%r12
000000000001bef6	movq	0x182cb(%rip), %rsi     ## Objc selector ref: objectForKey:
000000000001befd	leaq	0xfd4c(%rip), %rdx      ## Objc cfstring ref: @"HIDInterfaceID"
000000000001bf04	movq	%r14, %rdi
000000000001bf07	callq	*%r12
000000000001bf0a	movq	0x19497(%rip), %rsi     ## Objc selector ref: setInterfaceID:
000000000001bf11	movq	%r15, %rdi
000000000001bf14	movq	%rax, %rdx
000000000001bf17	callq	*%r12
000000000001bf1a	movq	0x182a7(%rip), %rsi     ## Objc selector ref: objectForKey:
000000000001bf21	leaq	0xfd48(%rip), %rdx      ## Objc cfstring ref: @"HIDSubinterfaceID"
000000000001bf28	movq	%r14, %rdi
000000000001bf2b	callq	*%r12
000000000001bf2e	movq	0x1947b(%rip), %rsi     ## Objc selector ref: setSubInterfaceID:
000000000001bf35	movq	%r15, %rdi
000000000001bf38	movq	%rax, %rdx
000000000001bf3b	callq	*%r12
000000000001bf3e	movq	0x18283(%rip), %rsi     ## Objc selector ref: objectForKey:
000000000001bf45	leaq	0xfd44(%rip), %rdx      ## Objc cfstring ref: @"ACSHHIDServiceID"
000000000001bf4c	movq	%r14, %rdi
000000000001bf4f	callq	*%r12
000000000001bf52	movq	0x1945f(%rip), %rsi     ## Objc selector ref: setServiceID:
000000000001bf59	movq	%r15, %rdi
000000000001bf5c	movq	%rax, %rdx
000000000001bf5f	callq	*%r12
000000000001bf62	movq	0x1825f(%rip), %rsi     ## Objc selector ref: objectForKey:
000000000001bf69	leaq	0xfd40(%rip), %rdx      ## Objc cfstring ref: @"PrimaryUsage"
000000000001bf70	movq	%r14, %rdi
000000000001bf73	callq	*%r12
000000000001bf76	movq	0x19443(%rip), %rsi     ## Objc selector ref: setPrimaryUsage:
000000000001bf7d	movq	%r15, %rdi
000000000001bf80	movq	%rax, %rdx
000000000001bf83	callq	*%r12
000000000001bf86	movq	0x1823b(%rip), %rsi     ## Objc selector ref: objectForKey:
000000000001bf8d	leaq	0xfd3c(%rip), %rdx      ## Objc cfstring ref: @"PrimaryUsagePage"
000000000001bf94	movq	%r14, %rdi
000000000001bf97	callq	*%r12
000000000001bf9a	movq	0x19427(%rip), %rsi     ## Objc selector ref: setPrimaryUsagePage:
000000000001bfa1	movq	%r15, %rdi
000000000001bfa4	movq	%rax, %rdx
000000000001bfa7	callq	*%r12
000000000001bfaa	movq	0xd397(%rip), %rax      ## literal pool symbol address: __NSConcreteStackBlock
000000000001bfb1	movq	%rax, -0x60(%rbp)
000000000001bfb5	movl	$0x42000000, -0x58(%rbp) ## imm = 0x42000000
000000000001bfbc	movl	$0x0, -0x54(%rbp)
000000000001bfc3	leaq	0x76(%rip), %rax
000000000001bfca	movq	%rax, -0x50(%rbp)
000000000001bfce	leaq	0xe02b(%rip), %rax
000000000001bfd5	movq	%rax, -0x48(%rbp)
000000000001bfd9	leaq	-0x40(%rbp), %rsi
000000000001bfdd	movq	-0x68(%rbp), %rdi
000000000001bfe1	callq	0x1e86e                 ## symbol stub for: _objc_assign_strongCast
000000000001bfe6	leaq	-0x38(%rbp), %rsi
000000000001bfea	movq	%r15, %rdi
000000000001bfed	callq	0x1e86e                 ## symbol stub for: _objc_assign_strongCast
000000000001bff2	leaq	-0x30(%rbp), %rsi
000000000001bff6	movq	%r13, %rdi
000000000001bff9	callq	0x1e86e                 ## symbol stub for: _objc_assign_strongCast
000000000001bffe	movq	0xd35b(%rip), %rdi      ## literal pool symbol address: __dispatch_main_q
000000000001c005	leaq	-0x60(%rbp), %rsi
000000000001c009	callq	0x1e8bc                 ## symbol stub for: _dispatch_async
000000000001c00e	movq	0x1813b(%rip), %rsi     ## Objc selector ref: release
000000000001c015	movq	%r15, %rdi
000000000001c018	callq	*%r12
000000000001c01b	movq	_OBJC_IVAR_$_UADeviceAssignmentWindow._isCapturingEvents(%rip), %rax
000000000001c022	movb	$0x0, (%r13,%rax)
000000000001c028	movb	$0x1, %cl
000000000001c02a	jmp	0x1c02e
000000000001c02c	xorl	%ecx, %ecx
000000000001c02e	movzbl	%cl, %eax
000000000001c031	addq	$0x48, %rsp
000000000001c035	popq	%rbx
000000000001c036	popq	%r12
000000000001c038	popq	%r13
000000000001c03a	popq	%r14
000000000001c03c	popq	%r15
000000000001c03e	popq	%rbp
000000000001c03f	retq
000000000001c040	pushq	%rbp
000000000001c041	movq	%rsp, %rbp
000000000001c044	movq	0x20(%rdi), %rax
000000000001c048	movq	0x28(%rdi), %rdx
000000000001c04c	movq	0x30(%rdi), %rcx
000000000001c050	movq	0x192e1(%rip), %rsi     ## Objc selector ref: updateDeviceAssignment:forWindow:
000000000001c057	movq	%rax, %rdi
000000000001c05a	popq	%rbp
000000000001c05b	jmpq	*0xd39f(%rip)           ## Objc message: +[NSNumber updateDeviceAssignment:forWindow:]
000000000001c061	nopw	%cs:(%rax,%rax)
000000000001c070	pushq	%rbp
000000000001c071	movq	%rsp, %rbp
000000000001c074	pushq	%r14
000000000001c076	pushq	%rbx
000000000001c077	movq	%rsi, %r14
000000000001c07a	movq	%rdi, %rbx
000000000001c07d	leaq	0x20(%rbx), %rdi
000000000001c081	movq	0x20(%r14), %rsi
000000000001c085	movl	$0x3, %edx
000000000001c08a	callq	0x1e8a4                 ## symbol stub for: __Block_object_assign
000000000001c08f	leaq	0x28(%rbx), %rdi
000000000001c093	movq	0x28(%r14), %rsi
000000000001c097	movl	$0x3, %edx
000000000001c09c	callq	0x1e8a4                 ## symbol stub for: __Block_object_assign
000000000001c0a1	addq	$0x30, %rbx
000000000001c0a5	movq	0x30(%r14), %rsi
000000000001c0a9	movl	$0x3, %edx
000000000001c0ae	movq	%rbx, %rdi
000000000001c0b1	popq	%rbx
000000000001c0b2	popq	%r14
000000000001c0b4	popq	%rbp
000000000001c0b5	jmp	0x1e8a4                 ## symbol stub for: __Block_object_assign
000000000001c0ba	nopw	(%rax,%rax)
000000000001c0c0	pushq	%rbp
000000000001c0c1	movq	%rsp, %rbp
000000000001c0c4	pushq	%rbx
000000000001c0c5	pushq	%rax
000000000001c0c6	movq	%rdi, %rbx
000000000001c0c9	movq	0x20(%rbx), %rdi
000000000001c0cd	movl	$0x3, %esi
000000000001c0d2	callq	0x1e8aa                 ## symbol stub for: __Block_object_dispose
000000000001c0d7	movq	0x28(%rbx), %rdi
000000000001c0db	movl	$0x3, %esi
000000000001c0e0	callq	0x1e8aa                 ## symbol stub for: __Block_object_dispose
000000000001c0e5	movq	0x30(%rbx), %rdi
000000000001c0e9	movl	$0x3, %esi
000000000001c0ee	addq	$0x8, %rsp
000000000001c0f2	popq	%rbx
000000000001c0f3	popq	%rbp
000000000001c0f4	jmp	0x1e8aa                 ## symbol stub for: __Block_object_dispose
000000000001c0f9	pushq	%rbp
000000000001c0fa	movq	%rsp, %rbp
000000000001c0fd	pushq	%r15
000000000001c0ff	pushq	%r14
000000000001c101	pushq	%r13
000000000001c103	pushq	%r12
000000000001c105	pushq	%rbx
000000000001c106	subq	$0xf8, %rsp
000000000001c10d	movq	%rdx, %rbx
000000000001c110	movq	%rdi, -0x110(%rbp)
000000000001c117	movq	0xd23a(%rip), %rax      ## literal pool symbol address: ___stack_chk_guard
000000000001c11e	movq	(%rax), %rax
000000000001c121	movq	%rax, -0x30(%rbp)
000000000001c125	movq	0x1942c(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_NSMutableArray
000000000001c12c	movq	0x18035(%rip), %rsi     ## Objc selector ref: alloc
000000000001c133	movq	0xd2c6(%rip), %r13      ## Objc message: +[NSMutableArray alloc]
000000000001c13a	callq	*%r13
000000000001c13d	movq	0x1812c(%rip), %rsi     ## Objc selector ref: init
000000000001c144	movq	%rax, %rdi
000000000001c147	callq	*%r13
000000000001c14a	movq	0x17fb7(%rip), %rsi     ## Objc selector ref: autorelease
000000000001c151	movq	%rax, %rdi
000000000001c154	callq	*%r13
000000000001c157	movq	%rax, -0x108(%rbp)
000000000001c15e	xorps	%xmm0, %xmm0
000000000001c161	movaps	%xmm0, -0xc0(%rbp)
000000000001c168	movaps	%xmm0, -0xd0(%rbp)
000000000001c16f	movaps	%xmm0, -0xe0(%rbp)
000000000001c176	movaps	%xmm0, -0xf0(%rbp)
000000000001c17d	movq	0x18cd4(%rip), %rsi     ## Objc selector ref: subviews
000000000001c184	movq	%rbx, %rdi
000000000001c187	callq	*%r13
000000000001c18a	movq	%rax, -0x118(%rbp)
000000000001c191	movq	0x17f78(%rip), %rsi     ## Objc selector ref: countByEnumeratingWithState:objects:count:
000000000001c198	leaq	-0xf0(%rbp), %rdx
000000000001c19f	leaq	-0xb0(%rbp), %rcx
000000000001c1a6	movl	$0x10, %r8d
000000000001c1ac	movq	%rax, %rdi
000000000001c1af	callq	*%r13
000000000001c1b2	movq	%rax, -0xf8(%rbp)
000000000001c1b9	testq	%rax, %rax
000000000001c1bc	je	0x1c2c0
000000000001c1c2	movq	-0xe0(%rbp), %rax
000000000001c1c9	movq	(%rax), %rax
000000000001c1cc	movq	%rax, -0x100(%rbp)
000000000001c1d3	movq	0x1818e(%rip), %r12     ## Objc selector ref: count
000000000001c1da	xorl	%r14d, %r14d
000000000001c1dd	movq	-0xe0(%rbp), %rax
000000000001c1e4	movq	-0x100(%rbp), %rcx
000000000001c1eb	cmpq	%rcx, (%rax)
000000000001c1ee	je	0x1c1fc
000000000001c1f0	movq	-0x118(%rbp), %rdi
000000000001c1f7	callq	0x1e886                 ## symbol stub for: _objc_enumerationMutation
000000000001c1fc	movq	-0xe8(%rbp), %rax
000000000001c203	movq	(%rax,%r14,8), %r15
000000000001c207	movq	%r15, %rdi
000000000001c20a	movq	0x18c47(%rip), %rsi     ## Objc selector ref: subviews
000000000001c211	callq	*%r13
000000000001c214	movq	%rax, %rdi
000000000001c217	movq	%r12, %rsi
000000000001c21a	callq	*%r13
000000000001c21d	testq	%rax, %rax
000000000001c220	movq	%r13, %rbx
000000000001c223	movq	%r12, %r13
000000000001c226	je	0x1c25b
000000000001c228	movq	-0x110(%rbp), %rdi
000000000001c22f	movq	0x191a2(%rip), %rsi     ## Objc selector ref: _uiViewsForView:
000000000001c236	movq	%r15, %rdx
000000000001c239	callq	*%rbx
000000000001c23b	movq	%rax, %r15
000000000001c23e	movq	%r15, %rdi
000000000001c241	movq	%r13, %rsi
000000000001c244	callq	*%rbx
000000000001c246	testq	%rax, %rax
000000000001c249	je	0x1c272
000000000001c24b	movq	-0x108(%rbp), %rdi
000000000001c252	movq	0x18137(%rip), %rsi     ## Objc selector ref: addObjectsFromArray:
000000000001c259	jmp	0x1c269
000000000001c25b	movq	-0x108(%rbp), %rdi
000000000001c262	movq	0x18117(%rip), %rsi     ## Objc selector ref: addObject:
000000000001c269	movq	%r15, %rdx
000000000001c26c	callq	*0xd18e(%rip)           ## Objc message: -[%rdi addObject:]
000000000001c272	incq	%r14
000000000001c275	cmpq	-0xf8(%rbp), %r14
000000000001c27c	movq	%r13, %r12
000000000001c27f	movq	%rbx, %r13
000000000001c282	jb	0x1c1dd
000000000001c288	movl	$0x10, %r8d
000000000001c28e	movq	-0x118(%rbp), %rdi
000000000001c295	movq	0x17e74(%rip), %rsi     ## Objc selector ref: countByEnumeratingWithState:objects:count:
000000000001c29c	leaq	-0xf0(%rbp), %rdx
000000000001c2a3	leaq	-0xb0(%rbp), %rcx
000000000001c2aa	callq	*0xd150(%rip)           ## Objc message: -[%rdi countByEnumeratingWithState:objects:count:]
000000000001c2b0	movq	%rax, -0xf8(%rbp)
000000000001c2b7	testq	%rax, %rax
000000000001c2ba	jne	0x1c1da
000000000001c2c0	movq	0xd091(%rip), %rax      ## literal pool symbol address: ___stack_chk_guard
000000000001c2c7	movq	(%rax), %rax
000000000001c2ca	cmpq	-0x30(%rbp), %rax
000000000001c2ce	jne	0x1c2e9
000000000001c2d0	movq	-0x108(%rbp), %rax
000000000001c2d7	addq	$0xf8, %rsp
000000000001c2de	popq	%rbx
000000000001c2df	popq	%r12
000000000001c2e1	popq	%r13
000000000001c2e3	popq	%r14
000000000001c2e5	popq	%r15
000000000001c2e7	popq	%rbp
000000000001c2e8	retq
000000000001c2e9	callq	0x1e8b6                 ## symbol stub for: ___stack_chk_fail
000000000001c2ee	pushq	%rbp
000000000001c2ef	movq	%rsp, %rbp
000000000001c2f2	pushq	%r15
000000000001c2f4	pushq	%r14
000000000001c2f6	pushq	%r13
000000000001c2f8	pushq	%r12
000000000001c2fa	pushq	%rbx
000000000001c2fb	subq	$0x178, %rsp            ## imm = 0x178
000000000001c302	movq	%rdi, %r14
000000000001c305	movq	0xd04c(%rip), %rax      ## literal pool symbol address: ___stack_chk_guard
000000000001c30c	movq	(%rax), %rax
000000000001c30f	movq	%rax, -0x30(%rbp)
000000000001c313	movq	%rdx, %rdi
000000000001c316	callq	0x1e95e                 ## symbol stub for: _CGEventGetUnflippedLocation
000000000001c31b	movsd	%xmm0, -0x160(%rbp)
000000000001c323	movsd	%xmm1, -0x168(%rbp)
000000000001c32b	movq	0x17f8e(%rip), %rsi     ## Objc selector ref: contentView
000000000001c332	movq	0xd0c7(%rip), %r12      ## Objc message: -[%rdi contentView]
000000000001c339	movq	%r14, %rdi
000000000001c33c	callq	*%r12
000000000001c33f	movq	%rax, %rbx
000000000001c342	movq	0x1908f(%rip), %rsi     ## Objc selector ref: _uiViewsForView:
000000000001c349	movq	%r14, %rdi
000000000001c34c	movq	%rbx, %rdx
000000000001c34f	callq	*%r12
000000000001c352	movq	%rax, -0x178(%rbp)
000000000001c359	xorps	%xmm0, %xmm0
000000000001c35c	movaps	%xmm0, -0xc0(%rbp)
000000000001c363	movaps	%xmm0, -0xd0(%rbp)
000000000001c36a	movaps	%xmm0, -0xe0(%rbp)
000000000001c371	movaps	%xmm0, -0xf0(%rbp)
000000000001c378	movq	0x17d91(%rip), %rsi     ## Objc selector ref: countByEnumeratingWithState:objects:count:
000000000001c37f	leaq	-0xf0(%rbp), %rdx
000000000001c386	leaq	-0xb0(%rbp), %rcx
000000000001c38d	movl	$0x10, %r8d
000000000001c393	movq	%rax, %rdi
000000000001c396	callq	*%r12
000000000001c399	movq	%rax, -0x158(%rbp)
000000000001c3a0	testq	%rax, %rax
000000000001c3a3	je	0x1c5b0
000000000001c3a9	movq	-0xe0(%rbp), %rax
000000000001c3b0	movq	(%rax), %rax
000000000001c3b3	movq	%rax, -0x170(%rbp)
000000000001c3ba	xorl	%r15d, %r15d
000000000001c3bd	movq	-0xe0(%rbp), %rax
000000000001c3c4	movq	-0x170(%rbp), %rcx
000000000001c3cb	cmpq	%rcx, (%rax)
000000000001c3ce	je	0x1c3dc
000000000001c3d0	movq	-0x178(%rbp), %rdi
000000000001c3d7	callq	0x1e886                 ## symbol stub for: _objc_enumerationMutation
000000000001c3dc	movq	-0xe8(%rbp), %rax
000000000001c3e3	movq	(%rax,%r15,8), %r13
000000000001c3e7	testq	%r13, %r13
000000000001c3ea	je	0x1c404
000000000001c3ec	leaq	-0x130(%rbp), %rdi
000000000001c3f3	movq	%r13, %rsi
000000000001c3f6	movq	0x18753(%rip), %rdx     ## Objc selector ref: frame
000000000001c3fd	callq	0x1e892                 ## symbol stub for: _objc_msgSend_stret
000000000001c402	jmp	0x1c415
000000000001c404	xorps	%xmm0, %xmm0
000000000001c407	movaps	%xmm0, -0x120(%rbp)
000000000001c40e	movaps	%xmm0, -0x130(%rbp)
000000000001c415	testq	%rbx, %rbx
000000000001c418	je	0x1c463
000000000001c41a	movq	-0x118(%rbp), %rax
000000000001c421	movq	%rax, 0x18(%rsp)
000000000001c426	movq	-0x120(%rbp), %rax
000000000001c42d	movq	%rax, 0x10(%rsp)
000000000001c432	movq	-0x130(%rbp), %rax
000000000001c439	movq	-0x128(%rbp), %rcx
000000000001c440	movq	%rcx, 0x8(%rsp)
000000000001c445	movq	%rax, (%rsp)
000000000001c449	xorl	%ecx, %ecx
000000000001c44b	leaq	-0x110(%rbp), %rdi
000000000001c452	movq	%rbx, %rsi
000000000001c455	movq	0x18f84(%rip), %rdx     ## Objc selector ref: convertRect:toView:
000000000001c45c	callq	0x1e892                 ## symbol stub for: _objc_msgSend_stret
000000000001c461	jmp	0x1c474
000000000001c463	xorps	%xmm0, %xmm0
000000000001c466	movaps	%xmm0, -0x100(%rbp)
000000000001c46d	movaps	%xmm0, -0x110(%rbp)
000000000001c474	testq	%r14, %r14
000000000001c477	je	0x1c4c0
000000000001c479	movq	-0xf8(%rbp), %rax
000000000001c480	movq	%rax, 0x18(%rsp)
000000000001c485	movq	-0x100(%rbp), %rax
000000000001c48c	movq	%rax, 0x10(%rsp)
000000000001c491	movq	-0x110(%rbp), %rax
000000000001c498	movq	-0x108(%rbp), %rcx
000000000001c49f	movq	%rcx, 0x8(%rsp)
000000000001c4a4	movq	%rax, (%rsp)
000000000001c4a8	leaq	-0x150(%rbp), %rdi
000000000001c4af	movq	%r14, %rsi
000000000001c4b2	movq	0x18f2f(%rip), %rdx     ## Objc selector ref: convertRectToScreen:
000000000001c4b9	callq	0x1e892                 ## symbol stub for: _objc_msgSend_stret
000000000001c4be	jmp	0x1c4d1
000000000001c4c0	xorps	%xmm0, %xmm0
000000000001c4c3	movaps	%xmm0, -0x140(%rbp)
000000000001c4ca	movaps	%xmm0, -0x150(%rbp)
000000000001c4d1	movq	-0x138(%rbp), %rax
000000000001c4d8	movq	%rax, 0x18(%rsp)
000000000001c4dd	movq	-0x140(%rbp), %rax
000000000001c4e4	movq	%rax, 0x10(%rsp)
000000000001c4e9	movq	-0x150(%rbp), %rax
000000000001c4f0	movq	-0x148(%rbp), %rcx
000000000001c4f7	movq	%rcx, 0x8(%rsp)
000000000001c4fc	movq	%rax, (%rsp)
000000000001c500	movsd	-0x160(%rbp), %xmm0
000000000001c508	movsd	-0x168(%rbp), %xmm1
000000000001c510	callq	0x1e84a                 ## symbol stub for: _NSPointInRect
000000000001c515	testb	%al, %al
000000000001c517	je	0x1c568
000000000001c519	movq	0x19088(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_NSButton
000000000001c520	movq	0x17b99(%rip), %rsi     ## Objc selector ref: class
000000000001c527	callq	*%r12
000000000001c52a	movq	%r13, %rdi
000000000001c52d	movq	0x17bc4(%rip), %rsi     ## Objc selector ref: isKindOfClass:
000000000001c534	movq	%rax, %rdx
000000000001c537	callq	*%r12
000000000001c53a	testb	%al, %al
000000000001c53c	je	0x1c568
000000000001c53e	movq	%r13, %rdi
000000000001c541	movq	0x184d0(%rip), %rsi     ## Objc selector ref: isHidden
000000000001c548	callq	*0xceb2(%rip)           ## Objc message: +[NSButton isHidden]
000000000001c54e	testb	%al, %al
000000000001c550	jne	0x1c568
000000000001c552	movq	%r13, %rdi
000000000001c555	movq	0x18e94(%rip), %rsi     ## Objc selector ref: isEnabled
000000000001c55c	callq	*0xce9e(%rip)           ## Objc message: -[%rdi isEnabled]
000000000001c562	movb	$0x1, %cl
000000000001c564	testb	%al, %al
000000000001c566	jne	0x1c5b2
000000000001c568	incq	%r15
000000000001c56b	cmpq	-0x158(%rbp), %r15
000000000001c572	jb	0x1c3bd
000000000001c578	movl	$0x10, %r8d
000000000001c57e	movq	-0x178(%rbp), %rdi
000000000001c585	movq	0x17b84(%rip), %rsi     ## Objc selector ref: countByEnumeratingWithState:objects:count:
000000000001c58c	leaq	-0xf0(%rbp), %rdx
000000000001c593	leaq	-0xb0(%rbp), %rcx
000000000001c59a	callq	*0xce60(%rip)           ## Objc message: -[%rdi countByEnumeratingWithState:objects:count:]
000000000001c5a0	movq	%rax, -0x158(%rbp)
000000000001c5a7	testq	%rax, %rax
000000000001c5aa	jne	0x1c3ba
000000000001c5b0	xorl	%ecx, %ecx
000000000001c5b2	movq	0xcd9f(%rip), %rax      ## literal pool symbol address: ___stack_chk_guard
000000000001c5b9	movq	(%rax), %rax
000000000001c5bc	cmpq	-0x30(%rbp), %rax
000000000001c5c0	jne	0x1c5d7
000000000001c5c2	movzbl	%cl, %eax
000000000001c5c5	addq	$0x178, %rsp            ## imm = 0x178
000000000001c5cc	popq	%rbx
000000000001c5cd	popq	%r12
000000000001c5cf	popq	%r13
000000000001c5d1	popq	%r14
000000000001c5d3	popq	%r15
000000000001c5d5	popq	%rbp
000000000001c5d6	retq
000000000001c5d7	callq	0x1e8b6                 ## symbol stub for: ___stack_chk_fail
000000000001c5dc	pushq	%rbp
000000000001c5dd	movq	%rsp, %rbp
000000000001c5e0	movl	$0x1, %eax
000000000001c5e5	popq	%rbp
000000000001c5e6	retq
000000000001c5e7	pushq	%rbp
000000000001c5e8	movq	%rsp, %rbp
000000000001c5eb	xorl	%eax, %eax
000000000001c5ed	popq	%rbp
000000000001c5ee	retq
000000000001c5ef	pushq	%rbp
000000000001c5f0	movq	%rsp, %rbp
000000000001c5f3	pushq	%r15
000000000001c5f5	pushq	%r14
000000000001c5f7	pushq	%r13
000000000001c5f9	pushq	%r12
000000000001c5fb	pushq	%rbx
000000000001c5fc	subq	$0x28, %rsp
000000000001c600	movq	%rcx, %r13
000000000001c603	movq	%rdx, %r14
000000000001c606	movq	%rdi, %rbx
000000000001c609	movq	_OBJC_IVAR_$_UADeviceAssignmentWindow._isCapturingEvents(%rip), %rax
000000000001c610	cmpb	$0x0, (%rbx,%rax)
000000000001c614	je	0x1c97d
000000000001c61a	movq	0x18d0f(%rip), %rsi     ## Objc selector ref: delegate
000000000001c621	movq	0xcdd8(%rip), %r15      ## Objc message: -[%rdi delegate]
000000000001c628	movq	%rbx, %rdi
000000000001c62b	callq	*%r15
000000000001c62e	movq	%rax, %r12
000000000001c631	movq	0x18d00(%rip), %rdx     ## Objc selector ref: updateDeviceAssignment:forWindow:
000000000001c638	movq	0x18d01(%rip), %rsi     ## Objc selector ref: respondsToSelector:
000000000001c63f	movq	%r12, %rdi
000000000001c642	callq	*%r15
000000000001c645	movq	%r15, %rcx
000000000001c648	testb	%al, %al
000000000001c64a	je	0x1c97d
000000000001c650	movq	0x18ee1(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_NSMutableDictionary
000000000001c657	movq	0x17b0a(%rip), %rsi     ## Objc selector ref: alloc
000000000001c65e	movq	%r13, -0x48(%rbp)
000000000001c662	movq	%rcx, %r13
000000000001c665	callq	*%r13
000000000001c668	movq	0x17c01(%rip), %rsi     ## Objc selector ref: init
000000000001c66f	movq	%rax, %rdi
000000000001c672	callq	*%r13
000000000001c675	movq	%r12, -0x30(%rbp)
000000000001c679	movq	%rax, %r12
000000000001c67c	movq	0x18eb5(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_NSMutableDictionary
000000000001c683	movq	0x18d6e(%rip), %rsi     ## Objc selector ref: dictionary
000000000001c68a	callq	*%r13
000000000001c68d	movq	%rbx, -0x38(%rbp)
000000000001c691	movq	%r14, -0x40(%rbp)
000000000001c695	movq	%rax, %r14
000000000001c698	movq	0x18ec1(%rip), %r15     ## Objc class ref: _OBJC_CLASS_$_NSNumber
000000000001c69f	movq	0x18d5a(%rip), %rsi     ## Objc selector ref: buttonNumber
000000000001c6a6	movq	-0x48(%rbp), %rdi
000000000001c6aa	callq	*%r13
000000000001c6ad	movq	0x1801c(%rip), %rsi     ## Objc selector ref: numberWithInteger:
000000000001c6b4	movq	%r15, %rdi
000000000001c6b7	movq	%rax, %rdx
000000000001c6ba	callq	*%r13
000000000001c6bd	movq	0xcc1c(%rip), %rcx      ## literal pool symbol address: _UASwitchValueHIDButtonNumberKey
000000000001c6c4	movq	(%rcx), %rcx
000000000001c6c7	movq	0x17b52(%rip), %rsi     ## Objc selector ref: setObject:forKey:
000000000001c6ce	movq	%r14, %rdi
000000000001c6d1	movq	%rax, %rdx
000000000001c6d4	callq	*%r13
000000000001c6d7	movq	0x18e82(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_NSNumber
000000000001c6de	movq	0x18023(%rip), %rsi     ## Objc selector ref: numberWithUnsignedInteger:
000000000001c6e5	movl	$0x4, %edx
000000000001c6ea	callq	*%r13
000000000001c6ed	movq	%rax, %rbx
000000000001c6f0	movq	0x18c51(%rip), %rsi     ## Objc selector ref: setSwitchValue:
000000000001c6f7	movq	%r12, %rdi
000000000001c6fa	movq	%r14, %rdx
000000000001c6fd	callq	*%r13
000000000001c700	movq	0x18c49(%rip), %rsi     ## Objc selector ref: setTriggerType:
000000000001c707	movq	%r12, %rdi
000000000001c70a	movq	%rbx, %rdx
000000000001c70d	callq	*%r13
000000000001c710	movq	0x18cf1(%rip), %rsi     ## Objc selector ref: deviceInfo
000000000001c717	movq	-0x40(%rbp), %rdi
000000000001c71b	callq	*%r13
000000000001c71e	movq	%rax, %rbx
000000000001c721	movq	0x17aa0(%rip), %rsi     ## Objc selector ref: objectForKey:
000000000001c728	leaq	0xf3e1(%rip), %rdx      ## Objc cfstring ref: @"LocationID"
000000000001c72f	movq	%rbx, %rdi
000000000001c732	callq	*%r13
000000000001c735	movq	0x18c1c(%rip), %rsi     ## Objc selector ref: setLocationID:
000000000001c73c	movq	%r12, %rdi
000000000001c73f	movq	%rax, %rdx
000000000001c742	callq	*%r13
000000000001c745	movq	0x17a7c(%rip), %rsi     ## Objc selector ref: objectForKey:
000000000001c74c	leaq	0xf3dd(%rip), %rdx      ## Objc cfstring ref: @"VendorID"
000000000001c753	movq	%rbx, %rdi
000000000001c756	callq	*%r13
000000000001c759	movq	0x18c00(%rip), %rsi     ## Objc selector ref: setVendorID:
000000000001c760	movq	%r12, %rdi
000000000001c763	movq	%rax, %rdx
000000000001c766	callq	*%r13
000000000001c769	movq	0x17a58(%rip), %rsi     ## Objc selector ref: objectForKey:
000000000001c770	leaq	0xf3d9(%rip), %rdx      ## Objc cfstring ref: @"VendorIDSource"
000000000001c777	movq	%rbx, %rdi
000000000001c77a	callq	*%r13
000000000001c77d	movq	0x18be4(%rip), %rsi     ## Objc selector ref: setVendorIDSource:
000000000001c784	movq	%r12, %rdi
000000000001c787	movq	%rax, %rdx
000000000001c78a	callq	*%r13
000000000001c78d	movq	0x17a34(%rip), %rsi     ## Objc selector ref: objectForKey:
000000000001c794	leaq	0xf3d5(%rip), %rdx      ## Objc cfstring ref: @"ProductID"
000000000001c79b	movq	%rbx, %rdi
000000000001c79e	callq	*%r13
000000000001c7a1	movq	0x18bc8(%rip), %rsi     ## Objc selector ref: setProductID:
000000000001c7a8	movq	%r12, %rdi
000000000001c7ab	movq	%rax, %rdx
000000000001c7ae	callq	*%r13
000000000001c7b1	movq	0x17a10(%rip), %rsi     ## Objc selector ref: objectForKey:
000000000001c7b8	leaq	0xf3d1(%rip), %rdx      ## Objc cfstring ref: @"SerialNumber"
000000000001c7bf	movq	%rbx, %rdi
000000000001c7c2	callq	*%r13
000000000001c7c5	movq	0x18bac(%rip), %rsi     ## Objc selector ref: setSerialNumber:
000000000001c7cc	movq	%r12, %rdi
000000000001c7cf	movq	%rax, %rdx
000000000001c7d2	callq	*%r13
000000000001c7d5	movq	0x179ec(%rip), %rsi     ## Objc selector ref: objectForKey:
000000000001c7dc	leaq	0xf3cd(%rip), %rdx      ## Objc cfstring ref: @"Manufacturer"
000000000001c7e3	movq	%rbx, %rdi
000000000001c7e6	callq	*%r13
000000000001c7e9	movq	0x18b90(%rip), %rsi     ## Objc selector ref: setManufacturer:
000000000001c7f0	movq	%r12, %rdi
000000000001c7f3	movq	%rax, %rdx
000000000001c7f6	callq	*%r13
000000000001c7f9	movq	0x179c8(%rip), %rsi     ## Objc selector ref: objectForKey:
000000000001c800	leaq	0xf3c9(%rip), %rdx      ## Objc cfstring ref: @"Product"
000000000001c807	movq	%rbx, %rdi
000000000001c80a	callq	*%r13
000000000001c80d	movq	0x18b74(%rip), %rsi     ## Objc selector ref: setProductName:
000000000001c814	movq	%r12, %rdi
000000000001c817	movq	%rax, %rdx
000000000001c81a	callq	*%r13
000000000001c81d	movq	0x179a4(%rip), %rsi     ## Objc selector ref: objectForKey:
000000000001c824	leaq	0xf3c5(%rip), %rdx      ## Objc cfstring ref: @"Transport"
000000000001c82b	movq	%rbx, %rdi
000000000001c82e	callq	*%r13
000000000001c831	movq	0x18b58(%rip), %rsi     ## Objc selector ref: setTransport:
000000000001c838	movq	%r12, %rdi
000000000001c83b	movq	%rax, %rdx
000000000001c83e	callq	*%r13
000000000001c841	movq	0x17980(%rip), %rsi     ## Objc selector ref: objectForKey:
000000000001c848	leaq	0xf3c1(%rip), %rdx      ## Objc cfstring ref: @"Built-In"
000000000001c84f	movq	%rbx, %rdi
000000000001c852	callq	*%r13
000000000001c855	movq	0x18b3c(%rip), %rsi     ## Objc selector ref: setBuiltIn:
000000000001c85c	movq	%r12, %rdi
000000000001c85f	movq	%rax, %rdx
000000000001c862	callq	*%r13
000000000001c865	movq	0x1795c(%rip), %rsi     ## Objc selector ref: objectForKey:
000000000001c86c	leaq	0xf3bd(%rip), %rdx      ## Objc cfstring ref: @"HIDKind"
000000000001c873	movq	%rbx, %rdi
000000000001c876	callq	*%r13
000000000001c879	movq	0x18b20(%rip), %rsi     ## Objc selector ref: setHidKind:
000000000001c880	movq	%r12, %rdi
000000000001c883	movq	%rax, %rdx
000000000001c886	callq	*%r13
000000000001c889	movq	0x17938(%rip), %rsi     ## Objc selector ref: objectForKey:
000000000001c890	leaq	0xf3b9(%rip), %rdx      ## Objc cfstring ref: @"HIDInterfaceID"
000000000001c897	movq	%rbx, %rdi
000000000001c89a	callq	*%r13
000000000001c89d	movq	0x18b04(%rip), %rsi     ## Objc selector ref: setInterfaceID:
000000000001c8a4	movq	%r12, %rdi
000000000001c8a7	movq	%rax, %rdx
000000000001c8aa	callq	*%r13
000000000001c8ad	movq	0x17914(%rip), %rsi     ## Objc selector ref: objectForKey:
000000000001c8b4	leaq	0xf3b5(%rip), %rdx      ## Objc cfstring ref: @"HIDSubinterfaceID"
000000000001c8bb	movq	%rbx, %rdi
000000000001c8be	callq	*%r13
000000000001c8c1	movq	0x18ae8(%rip), %rsi     ## Objc selector ref: setSubInterfaceID:
000000000001c8c8	movq	%r12, %rdi
000000000001c8cb	movq	%rax, %rdx
000000000001c8ce	callq	*%r13
000000000001c8d1	movq	0x178f0(%rip), %rsi     ## Objc selector ref: objectForKey:
000000000001c8d8	leaq	0xf3b1(%rip), %rdx      ## Objc cfstring ref: @"ACSHHIDServiceID"
000000000001c8df	movq	%rbx, %rdi
000000000001c8e2	callq	*%r13
000000000001c8e5	movq	0x18acc(%rip), %rsi     ## Objc selector ref: setServiceID:
000000000001c8ec	movq	%r12, %rdi
000000000001c8ef	movq	%rax, %rdx
000000000001c8f2	callq	*%r13
000000000001c8f5	movq	0x178cc(%rip), %rsi     ## Objc selector ref: objectForKey:
000000000001c8fc	leaq	0xf3ad(%rip), %rdx      ## Objc cfstring ref: @"PrimaryUsage"
000000000001c903	movq	%rbx, %rdi
000000000001c906	callq	*%r13
000000000001c909	movq	0x18ab0(%rip), %rsi     ## Objc selector ref: setPrimaryUsage:
000000000001c910	movq	%r12, %rdi
000000000001c913	movq	%rax, %rdx
000000000001c916	callq	*%r13
000000000001c919	movq	0x178a8(%rip), %rsi     ## Objc selector ref: objectForKey:
000000000001c920	leaq	0xf3a9(%rip), %rdx      ## Objc cfstring ref: @"PrimaryUsagePage"
000000000001c927	movq	%rbx, %rdi
000000000001c92a	callq	*%r13
000000000001c92d	movq	0x18a94(%rip), %rsi     ## Objc selector ref: setPrimaryUsagePage:
000000000001c934	movq	%r12, %rdi
000000000001c937	movq	%rax, %rdx
000000000001c93a	callq	*%r13
000000000001c93d	movq	0x189f4(%rip), %rsi     ## Objc selector ref: updateDeviceAssignment:forWindow:
000000000001c944	movq	-0x30(%rbp), %rdi
000000000001c948	movq	%r12, %rdx
000000000001c94b	movq	-0x38(%rbp), %rbx
000000000001c94f	movq	%rbx, %rcx
000000000001c952	callq	*%r13
000000000001c955	movq	_OBJC_IVAR_$_UADeviceAssignmentWindow._isCapturingEvents(%rip), %rax
000000000001c95c	movb	$0x0, (%rbx,%rax)
000000000001c960	movq	0x177e9(%rip), %rsi     ## Objc selector ref: release
000000000001c967	movq	%r12, %rdi
000000000001c96a	movq	%r13, %rax
000000000001c96d	addq	$0x28, %rsp
000000000001c971	popq	%rbx
000000000001c972	popq	%r12
000000000001c974	popq	%r13
000000000001c976	popq	%r14
000000000001c978	popq	%r15
000000000001c97a	popq	%rbp
000000000001c97b	jmpq	*%rax
000000000001c97d	addq	$0x28, %rsp
000000000001c981	popq	%rbx
000000000001c982	popq	%r12
000000000001c984	popq	%r13
000000000001c986	popq	%r14
000000000001c988	popq	%r15
000000000001c98a	popq	%rbp
000000000001c98b	retq
000000000001c98c	pushq	%rbp
000000000001c98d	movq	%rsp, %rbp
000000000001c990	movq	_OBJC_IVAR_$_UADeviceAssignmentWindow._isCapturingEvents(%rip), %rax
000000000001c997	movb	(%rdi,%rax), %al
000000000001c99a	movsbl	%al, %eax
000000000001c99d	popq	%rbp
000000000001c99e	retq
000000000001c99f	pushq	%rbp
000000000001c9a0	movq	%rsp, %rbp
000000000001c9a3	movq	_OBJC_IVAR_$_UADeviceAssignmentWindow._isCapturingEvents(%rip), %rax
000000000001c9aa	movb	%dl, (%rdi,%rax)
000000000001c9ad	popq	%rbp
000000000001c9ae	retq
000000000001c9af	pushq	%rbp
000000000001c9b0	movq	%rsp, %rbp
000000000001c9b3	pushq	%rbx
000000000001c9b4	subq	$0x38, %rsp
000000000001c9b8	movq	%rdi, -0x18(%rbp)
000000000001c9bc	movq	0x18ddd(%rip), %rax     ## Objc class ref: UAPCaptioningPreviewBackgroundView
000000000001c9c3	movq	%rax, -0x10(%rbp)
000000000001c9c7	movq	0x17772(%rip), %rsi     ## Objc selector ref: initWithFrame:
000000000001c9ce	movq	0x28(%rbp), %rax
000000000001c9d2	movq	%rax, 0x18(%rsp)
000000000001c9d7	movq	0x20(%rbp), %rax
000000000001c9db	movq	%rax, 0x10(%rsp)
000000000001c9e0	movq	0x10(%rbp), %rax
000000000001c9e4	movq	0x18(%rbp), %rcx
000000000001c9e8	movq	%rcx, 0x8(%rsp)
000000000001c9ed	movq	%rax, (%rsp)
000000000001c9f1	leaq	-0x18(%rbp), %rdi
000000000001c9f5	callq	0x1e88c                 ## Objc message: -[[%rdi super] initWithFrame:]
000000000001c9fa	movq	%rax, %rbx
000000000001c9fd	testq	%rbx, %rbx
000000000001ca00	je	0x1ca12
000000000001ca02	movq	0x1773f(%rip), %rsi     ## Objc selector ref: setup
000000000001ca09	movq	%rbx, %rdi
000000000001ca0c	callq	*0xc9ee(%rip)           ## Objc message: -[%rdi setup]
000000000001ca12	movq	%rbx, %rax
000000000001ca15	addq	$0x38, %rsp
000000000001ca19	popq	%rbx
000000000001ca1a	popq	%rbp
000000000001ca1b	retq
000000000001ca1c	pushq	%rbp
000000000001ca1d	movq	%rsp, %rbp
000000000001ca20	pushq	%rbx
000000000001ca21	subq	$0x18, %rsp
000000000001ca25	movq	%rdi, -0x18(%rbp)
000000000001ca29	movq	0x18d70(%rip), %rax     ## Objc class ref: UAPCaptioningPreviewBackgroundView
000000000001ca30	movq	%rax, -0x10(%rbp)
000000000001ca34	movq	0x189d5(%rip), %rsi     ## Objc selector ref: initWithCoder:
000000000001ca3b	leaq	-0x18(%rbp), %rdi
000000000001ca3f	callq	0x1e88c                 ## Objc message: -[[%rdi super] initWithCoder:]
000000000001ca44	movq	%rax, %rbx
000000000001ca47	testq	%rbx, %rbx
000000000001ca4a	je	0x1ca5c
000000000001ca4c	movq	0x176f5(%rip), %rsi     ## Objc selector ref: setup
000000000001ca53	movq	%rbx, %rdi
000000000001ca56	callq	*0xc9a4(%rip)           ## Objc message: -[%rdi setup]
000000000001ca5c	movq	%rbx, %rax
000000000001ca5f	addq	$0x18, %rsp
000000000001ca63	popq	%rbx
000000000001ca64	popq	%rbp
000000000001ca65	retq
000000000001ca66	pushq	%rbp
000000000001ca67	movq	%rsp, %rbp
000000000001ca6a	pushq	%r15
000000000001ca6c	pushq	%r14
000000000001ca6e	pushq	%r12
000000000001ca70	pushq	%rbx
000000000001ca71	subq	$0x20, %rsp
000000000001ca75	movq	%rdi, %r15
000000000001ca78	movq	0x18c69(%rip), %rdi     ## Objc class ref: UAPCaptioningPreviewCloudView
000000000001ca7f	movq	0x176e2(%rip), %rsi     ## Objc selector ref: alloc
000000000001ca86	movq	0xc973(%rip), %r12      ## Objc message: +[UAPCaptioningPreviewCloudView alloc]
000000000001ca8d	callq	*%r12
000000000001ca90	movq	0x177d9(%rip), %rsi     ## Objc selector ref: init
000000000001ca97	movq	%rax, %rdi
000000000001ca9a	callq	*%r12
000000000001ca9d	movq	_OBJC_IVAR_$_UAPCaptioningPreviewBackgroundView._cloudView(%rip), %r14
000000000001caa4	movq	%rax, %rdi
000000000001caa7	movq	%r15, %rsi
000000000001caaa	movq	%r14, %rdx
000000000001caad	callq	0x1e868                 ## symbol stub for: _objc_assign_ivar
000000000001cab2	movq	(%r15,%r14), %rdx
000000000001cab6	movq	0x18783(%rip), %rsi     ## Objc selector ref: addSubview:
000000000001cabd	movq	%r15, %rdi
000000000001cac0	callq	*%r12
000000000001cac3	movq	(%r15,%r14), %rdx
000000000001cac7	movq	0x1894a(%rip), %rsi     ## Objc selector ref: centerView:
000000000001cace	movq	%r15, %rdi
000000000001cad1	callq	*%r12
000000000001cad4	movq	(%r15,%r14), %rdi
000000000001cad8	movq	0x17671(%rip), %rsi     ## Objc selector ref: release
000000000001cadf	callq	*%r12
000000000001cae2	movq	0x18c07(%rip), %rdi     ## Objc class ref: UAPCaptioningPreviewBottomBorderView
000000000001cae9	movq	0x17678(%rip), %rsi     ## Objc selector ref: alloc
000000000001caf0	callq	*%r12
000000000001caf3	movq	0x17646(%rip), %rsi     ## Objc selector ref: initWithFrame:
000000000001cafa	movq	0xc60f(%rip), %rcx      ## literal pool symbol address: _NSZeroRect
000000000001cb01	movq	0x18(%rcx), %rdx
000000000001cb05	movq	%rdx, 0x18(%rsp)
000000000001cb0a	movq	0x10(%rcx), %rdx
000000000001cb0e	movq	%rdx, 0x10(%rsp)
000000000001cb13	movq	(%rcx), %rdx
000000000001cb16	movq	0x8(%rcx), %rcx
000000000001cb1a	movq	%rcx, 0x8(%rsp)
000000000001cb1f	movq	%rdx, (%rsp)
000000000001cb23	movq	%rax, %rdi
000000000001cb26	callq	*%r12
000000000001cb29	movq	%rax, %rbx
000000000001cb2c	movq	0x1870d(%rip), %rsi     ## Objc selector ref: addSubview:
000000000001cb33	movq	%r15, %rdi
000000000001cb36	movq	%rbx, %rdx
000000000001cb39	callq	*%r12
000000000001cb3c	movq	0x188d5(%rip), %rsi     ## Objc selector ref: centerView:
000000000001cb43	movq	%r15, %rdi
000000000001cb46	movq	%rbx, %rdx
000000000001cb49	callq	*%r12
000000000001cb4c	movq	0x175fd(%rip), %rsi     ## Objc selector ref: release
000000000001cb53	movq	%rbx, %rdi
000000000001cb56	movq	%r12, %rax
000000000001cb59	addq	$0x20, %rsp
000000000001cb5d	popq	%rbx
000000000001cb5e	popq	%r12
000000000001cb60	popq	%r14
000000000001cb62	popq	%r15
000000000001cb64	popq	%rbp
000000000001cb65	jmpq	*%rax
000000000001cb67	pushq	%rbp
000000000001cb68	movq	%rsp, %rbp
000000000001cb6b	pushq	%r15
000000000001cb6d	pushq	%r14
000000000001cb6f	pushq	%r13
000000000001cb71	pushq	%r12
000000000001cb73	pushq	%rbx
000000000001cb74	subq	$0x38, %rsp
000000000001cb78	movq	%rdx, %r14
000000000001cb7b	movq	%rdi, %rbx
000000000001cb7e	movq	0xc7d3(%rip), %rax      ## literal pool symbol address: ___stack_chk_guard
000000000001cb85	movq	(%rax), %rax
000000000001cb88	movq	%rax, -0x30(%rbp)
000000000001cb8c	movq	0x189ad(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_NSLayoutConstraint
000000000001cb93	movq	0x1772e(%rip), %rsi     ## Objc selector ref: constraintWithItem:attribute:relatedBy:toItem:attribute:multiplier:constant:
000000000001cb9a	movq	$0x5, (%rsp)
000000000001cba2	movq	0xc857(%rip), %r13      ## Objc message: +[NSLayoutConstraint constraintWithItem:attribute:relatedBy:toItem:attribute:multiplier:constant:]
000000000001cba9	movsd	0xb73f(%rip), %xmm0
000000000001cbb1	movl	$0x5, %ecx
000000000001cbb6	xorl	%r8d, %r8d
000000000001cbb9	xorps	%xmm1, %xmm1
000000000001cbbc	movq	%rbx, %rdx
000000000001cbbf	movq	%r14, %r9
000000000001cbc2	callq	*%r13
000000000001cbc5	leaq	-0x50(%rbp), %r15
000000000001cbc9	movq	%rax, %rdi
000000000001cbcc	movq	%r15, %rsi
000000000001cbcf	callq	0x1e86e                 ## symbol stub for: _objc_assign_strongCast
000000000001cbd4	leaq	-0x48(%rbp), %r12
000000000001cbd8	movq	0x18961(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_NSLayoutConstraint
000000000001cbdf	movq	0x176e2(%rip), %rsi     ## Objc selector ref: constraintWithItem:attribute:relatedBy:toItem:attribute:multiplier:constant:
000000000001cbe6	movq	$0x6, (%rsp)
000000000001cbee	movl	$0x6, %ecx
000000000001cbf3	xorl	%r8d, %r8d
000000000001cbf6	xorps	%xmm1, %xmm1
000000000001cbf9	movq	%rbx, %rdx
000000000001cbfc	movq	%r14, %r9
000000000001cbff	movsd	0xb6e9(%rip), %xmm0
000000000001cc07	callq	*%r13
000000000001cc0a	movq	%rax, %rdi
000000000001cc0d	movq	%r12, %rsi
000000000001cc10	callq	0x1e86e                 ## symbol stub for: _objc_assign_strongCast
000000000001cc15	leaq	-0x40(%rbp), %r12
000000000001cc19	movq	0x18920(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_NSLayoutConstraint
000000000001cc20	movq	0x176a1(%rip), %rsi     ## Objc selector ref: constraintWithItem:attribute:relatedBy:toItem:attribute:multiplier:constant:
000000000001cc27	movq	$0x3, (%rsp)
000000000001cc2f	movl	$0x3, %ecx
000000000001cc34	xorl	%r8d, %r8d
000000000001cc37	xorps	%xmm1, %xmm1
000000000001cc3a	movq	%rbx, %rdx
000000000001cc3d	movq	%r14, %r9
000000000001cc40	movsd	0xb6a8(%rip), %xmm0
000000000001cc48	callq	*%r13
000000000001cc4b	movq	%rax, %rdi
000000000001cc4e	movq	%r12, %rsi
000000000001cc51	callq	0x1e86e                 ## symbol stub for: _objc_assign_strongCast
000000000001cc56	leaq	-0x38(%rbp), %r12
000000000001cc5a	movq	0x188df(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_NSLayoutConstraint
000000000001cc61	movq	0x17660(%rip), %rsi     ## Objc selector ref: constraintWithItem:attribute:relatedBy:toItem:attribute:multiplier:constant:
000000000001cc68	movq	$0x4, (%rsp)
000000000001cc70	movl	$0x4, %ecx
000000000001cc75	xorl	%r8d, %r8d
000000000001cc78	xorps	%xmm1, %xmm1
000000000001cc7b	movq	%rbx, %rdx
000000000001cc7e	movq	%r14, %r9
000000000001cc81	movsd	0xb667(%rip), %xmm0
000000000001cc89	callq	*%r13
000000000001cc8c	movq	%rax, %rdi
000000000001cc8f	movq	%r12, %rsi
000000000001cc92	callq	0x1e86e                 ## symbol stub for: _objc_assign_strongCast
000000000001cc97	movq	0x1884a(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_NSArray
000000000001cc9e	movq	0x1787b(%rip), %rsi     ## Objc selector ref: arrayWithObjects:count:
000000000001cca5	movl	$0x4, %ecx
000000000001ccaa	movq	%r15, %rdx
000000000001ccad	callq	*%r13
000000000001ccb0	movq	0x18769(%rip), %rsi     ## Objc selector ref: addConstraints:
000000000001ccb7	movq	%rbx, %rdi
000000000001ccba	movq	%rax, %rdx
000000000001ccbd	callq	*%r13
000000000001ccc0	movq	0x175f1(%rip), %rsi     ## Objc selector ref: setTranslatesAutoresizingMaskIntoConstraints:
000000000001ccc7	xorl	%edx, %edx
000000000001ccc9	movq	%r14, %rdi
000000000001cccc	callq	*%r13
000000000001cccf	movq	0xc682(%rip), %rax      ## literal pool symbol address: ___stack_chk_guard
000000000001ccd6	movq	(%rax), %rax
000000000001ccd9	cmpq	-0x30(%rbp), %rax
000000000001ccdd	jne	0x1ccee
000000000001ccdf	addq	$0x38, %rsp
000000000001cce3	popq	%rbx
000000000001cce4	popq	%r12
000000000001cce6	popq	%r13
000000000001cce8	popq	%r14
000000000001ccea	popq	%r15
000000000001ccec	popq	%rbp
000000000001cced	retq
000000000001ccee	callq	0x1e8b6                 ## symbol stub for: ___stack_chk_fail
000000000001ccf3	pushq	%rbp
000000000001ccf4	movq	%rsp, %rbp
000000000001ccf7	movq	_OBJC_IVAR_$_UAPCaptioningPreviewBackgroundView._cloudView(%rip), %rax
000000000001ccfe	movq	(%rdi,%rax), %rdi
000000000001cd02	movq	0x1871f(%rip), %rsi     ## Objc selector ref: startAnimation
000000000001cd09	popq	%rbp
000000000001cd0a	jmpq	*0xc6f0(%rip)           ## Objc message: +[NSArray startAnimation]
000000000001cd10	pushq	%rbp
000000000001cd11	movq	%rsp, %rbp
000000000001cd14	movl	$0x1, %eax
000000000001cd19	popq	%rbp
000000000001cd1a	retq
000000000001cd1b	pushq	%rbp
000000000001cd1c	movq	%rsp, %rbp
000000000001cd1f	pushq	%rbx
000000000001cd20	pushq	%rax
000000000001cd21	movq	0x187c8(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_NSColor
000000000001cd28	movq	0x17431(%rip), %rsi     ## Objc selector ref: colorWithCalibratedRed:green:blue:alpha:
000000000001cd2f	movq	0xc6ca(%rip), %rbx      ## Objc message: +[NSColor colorWithCalibratedRed:green:blue:alpha:]
000000000001cd36	movsd	0xb812(%rip), %xmm0
000000000001cd3e	movsd	0xb812(%rip), %xmm1
000000000001cd46	movsd	0xb5a2(%rip), %xmm3
000000000001cd4e	movaps	%xmm1, %xmm2
000000000001cd51	callq	*%rbx
000000000001cd53	movq	0x186d6(%rip), %rsi     ## Objc selector ref: setFill
000000000001cd5a	movq	%rax, %rdi
000000000001cd5d	callq	*%rbx
000000000001cd5f	addq	$0x8, %rsp
000000000001cd63	popq	%rbx
000000000001cd64	popq	%rbp
000000000001cd65	jmp	0x1e8ec                 ## symbol stub for: _NSRectFill
000000000001cd6a	pushq	%rbp
000000000001cd6b	movq	%rsp, %rbp
000000000001cd6e	pushq	%rbx
000000000001cd6f	subq	$0x38, %rsp
000000000001cd73	movq	%rdi, -0x18(%rbp)
000000000001cd77	movq	0x18a2a(%rip), %rax     ## Objc class ref: UAPCaptioningPreviewTextView
000000000001cd7e	movq	%rax, -0x10(%rbp)
000000000001cd82	movq	0x173b7(%rip), %rsi     ## Objc selector ref: initWithFrame:
000000000001cd89	movq	0x28(%rbp), %rax
000000000001cd8d	movq	%rax, 0x18(%rsp)
000000000001cd92	movq	0x20(%rbp), %rax
000000000001cd96	movq	%rax, 0x10(%rsp)
000000000001cd9b	movq	0x10(%rbp), %rax
000000000001cd9f	movq	0x18(%rbp), %rcx
000000000001cda3	movq	%rcx, 0x8(%rsp)
000000000001cda8	movq	%rax, (%rsp)
000000000001cdac	leaq	-0x18(%rbp), %rdi
000000000001cdb0	callq	0x1e88c                 ## Objc message: -[[%rdi super] initWithFrame:]
000000000001cdb5	movq	%rax, %rbx
000000000001cdb8	testq	%rbx, %rbx
000000000001cdbb	je	0x1cdcd
000000000001cdbd	movq	0x17384(%rip), %rsi     ## Objc selector ref: setup
000000000001cdc4	movq	%rbx, %rdi
000000000001cdc7	callq	*0xc633(%rip)           ## Objc message: -[%rdi setup]
000000000001cdcd	movq	%rbx, %rax
000000000001cdd0	addq	$0x38, %rsp
000000000001cdd4	popq	%rbx
000000000001cdd5	popq	%rbp
000000000001cdd6	retq
000000000001cdd7	pushq	%rbp
000000000001cdd8	movq	%rsp, %rbp
000000000001cddb	pushq	%rbx
000000000001cddc	subq	$0x18, %rsp
000000000001cde0	movq	%rdi, -0x18(%rbp)
000000000001cde4	movq	0x189bd(%rip), %rax     ## Objc class ref: UAPCaptioningPreviewTextView
000000000001cdeb	movq	%rax, -0x10(%rbp)
000000000001cdef	movq	0x1861a(%rip), %rsi     ## Objc selector ref: initWithCoder:
000000000001cdf6	leaq	-0x18(%rbp), %rdi
000000000001cdfa	callq	0x1e88c                 ## Objc message: -[[%rdi super] initWithCoder:]
000000000001cdff	movq	%rax, %rbx
000000000001ce02	testq	%rbx, %rbx
000000000001ce05	je	0x1ce17
000000000001ce07	movq	0x1733a(%rip), %rsi     ## Objc selector ref: setup
000000000001ce0e	movq	%rbx, %rdi
000000000001ce11	callq	*0xc5e9(%rip)           ## Objc message: -[%rdi setup]
000000000001ce17	movq	%rbx, %rax
000000000001ce1a	addq	$0x18, %rsp
000000000001ce1e	popq	%rbx
000000000001ce1f	popq	%rbp
000000000001ce20	retq
000000000001ce21	pushq	%rbp
000000000001ce22	movq	%rsp, %rbp
000000000001ce25	pushq	%r15
000000000001ce27	pushq	%r14
000000000001ce29	pushq	%rbx
000000000001ce2a	subq	$0x18, %rsp
000000000001ce2e	movq	%rdi, %rbx
000000000001ce31	movq	_OBJC_IVAR_$_UAPCaptioningPreviewTextView._subtitleRenderer(%rip), %r14
000000000001ce38	cmpq	$0x0, (%rbx,%r14)
000000000001ce3d	je	0x1ce7d
000000000001ce3f	movq	0x18702(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_NSNotificationCenter
000000000001ce46	movq	0x174e3(%rip), %rsi     ## Objc selector ref: defaultCenter
000000000001ce4d	movq	0xc5ac(%rip), %r15      ## Objc message: +[NSNotificationCenter defaultCenter]
000000000001ce54	callq	*%r15
000000000001ce57	movq	0xc59a(%rip), %rcx      ## literal pool symbol address: _kMACaptionAppearanceSettingsChangedNotification
000000000001ce5e	movq	(%rcx), %rcx
000000000001ce61	movq	0x17fb0(%rip), %rsi     ## Objc selector ref: removeObserver:name:object:
000000000001ce68	xorl	%r8d, %r8d
000000000001ce6b	movq	%rax, %rdi
000000000001ce6e	movq	%rbx, %rdx
000000000001ce71	callq	*%r15
000000000001ce74	movq	(%rbx,%r14), %rdi
000000000001ce78	callq	0x1e562                 ## symbol stub for: _CFRelease
000000000001ce7d	movq	%rbx, -0x28(%rbp)
000000000001ce81	movq	0x18920(%rip), %rax     ## Objc class ref: UAPCaptioningPreviewTextView
000000000001ce88	movq	%rax, -0x20(%rbp)
000000000001ce8c	movq	0x172c5(%rip), %rsi     ## Objc selector ref: dealloc
000000000001ce93	leaq	-0x28(%rbp), %rdi
000000000001ce97	callq	0x1e88c                 ## Objc message: -[[%rdi super] dealloc]
000000000001ce9c	addq	$0x18, %rsp
000000000001cea0	popq	%rbx
000000000001cea1	popq	%r14
000000000001cea3	popq	%r15
000000000001cea5	popq	%rbp
000000000001cea6	retq
000000000001cea7	pushq	%rbp
000000000001cea8	movq	%rsp, %rbp
000000000001ceab	pushq	%r15
000000000001cead	pushq	%r14
000000000001ceaf	pushq	%r12
000000000001ceb1	pushq	%rbx
000000000001ceb2	subq	$0x40, %rsp
000000000001ceb6	movq	%rdi, %rbx
000000000001ceb9	movq	0x17418(%rip), %rsi     ## Objc selector ref: setWantsLayer:
000000000001cec0	movq	0xc539(%rip), %r12      ## Objc message: -[%rdi setWantsLayer:]
000000000001cec7	movl	$0x1, %edx
000000000001cecc	callq	*%r12
000000000001cecf	movq	0x1804a(%rip), %rsi     ## Objc selector ref: setLayerContentsRedrawPolicy:
000000000001ced6	movl	$0x1, %edx
000000000001cedb	movq	%rbx, %rdi
000000000001cede	callq	*%r12
000000000001cee1	movq	0x18040(%rip), %rsi     ## Objc selector ref: layer
000000000001cee8	movq	%rbx, %rdi
000000000001ceeb	callq	*%r12
000000000001ceee	movq	%rax, %r15
000000000001cef1	movq	0x18760(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_CALayer
000000000001cef8	movq	0x17269(%rip), %rsi     ## Objc selector ref: alloc
000000000001ceff	callq	*%r12
000000000001cf02	movq	0x17367(%rip), %rsi     ## Objc selector ref: init
000000000001cf09	movq	%rax, %rdi
000000000001cf0c	callq	*%r12
000000000001cf0f	movq	_OBJC_IVAR_$_UAPCaptioningPreviewTextView._imageLayer(%rip), %r14
000000000001cf16	movq	%rax, %rdi
000000000001cf19	movq	%rbx, %rsi
000000000001cf1c	movq	%r14, %rdx
000000000001cf1f	callq	0x1e868                 ## symbol stub for: _objc_assign_ivar
000000000001cf24	movq	(%rbx,%r14), %rdx
000000000001cf28	movq	0x18011(%rip), %rsi     ## Objc selector ref: addSublayer:
000000000001cf2f	movq	%r15, %rdi
000000000001cf32	callq	*%r12
000000000001cf35	movq	(%rbx,%r14), %rdi
000000000001cf39	movq	0x17210(%rip), %rsi     ## Objc selector ref: release
000000000001cf40	callq	*%r12
000000000001cf43	movq	(%rbx,%r14), %rdi
000000000001cf47	movq	0x17fea(%rip), %rsi     ## Objc selector ref: setAutoresizingMask:
000000000001cf4e	movl	$0x12, %edx
000000000001cf53	callq	*%r12
000000000001cf56	movq	(%rbx,%r14), %rdi
000000000001cf5a	movaps	0xb5ff(%rip), %xmm0
000000000001cf61	movaps	%xmm0, -0x40(%rbp)
000000000001cf65	movaps	0xb604(%rip), %xmm0
000000000001cf6c	movaps	%xmm0, -0x30(%rbp)
000000000001cf70	movq	0x17fd9(%rip), %rsi     ## Objc selector ref: setContentsCenter:
000000000001cf77	movq	-0x28(%rbp), %rax
000000000001cf7b	movq	%rax, 0x18(%rsp)
000000000001cf80	movq	-0x30(%rbp), %rax
000000000001cf84	movq	%rax, 0x10(%rsp)
000000000001cf89	movq	-0x40(%rbp), %rax
000000000001cf8d	movq	-0x38(%rbp), %rcx
000000000001cf91	movq	%rcx, 0x8(%rsp)
000000000001cf96	movq	%rax, (%rsp)
000000000001cf9a	callq	*%r12
000000000001cf9d	movl	$0x1, %edi
000000000001cfa2	callq	0x1e43c                 ## symbol stub for: _MACaptionAppearanceGetShowCaptions
000000000001cfa7	movq	0xc3e2(%rip), %rax      ## literal pool symbol address: _kCFAllocatorDefault
000000000001cfae	movq	(%rax), %rdi
000000000001cfb1	movq	_OBJC_IVAR_$_UAPCaptioningPreviewTextView._subtitleRenderer(%rip), %rsi
000000000001cfb8	addq	%rbx, %rsi
000000000001cfbb	callq	0x1e418                 ## symbol stub for: _FigCoreTextSubtitleRendererCreate
000000000001cfc0	movq	0x18581(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_NSNotificationCenter
000000000001cfc7	movq	0x17362(%rip), %rsi     ## Objc selector ref: defaultCenter
000000000001cfce	callq	*%r12
000000000001cfd1	movq	0x18460(%rip), %rcx     ## Objc selector ref: _mediaAccessibilityDidChange:
000000000001cfd8	movq	0xc419(%rip), %rdx      ## literal pool symbol address: _kMACaptionAppearanceSettingsChangedNotification
000000000001cfdf	movq	(%rdx), %r8
000000000001cfe2	movq	0x1777f(%rip), %rsi     ## Objc selector ref: addObserver:selector:name:object:
000000000001cfe9	xorl	%r9d, %r9d
000000000001cfec	movq	%rax, %rdi
000000000001cfef	movq	%rbx, %rdx
000000000001cff2	callq	*%r12
000000000001cff5	movq	0x1854c(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_NSNotificationCenter
000000000001cffc	movq	0x1732d(%rip), %rsi     ## Objc selector ref: defaultCenter
000000000001d003	callq	*%r12
000000000001d006	movq	0x18433(%rip), %rcx     ## Objc selector ref: _figSubtitleRendererNeedsLayout:
000000000001d00d	movq	0xc3d4(%rip), %rdx      ## literal pool symbol address: _kFigSubtitleRendererNotification_NeedsLayout
000000000001d014	movq	(%rdx), %r8
000000000001d017	movq	0x1774a(%rip), %rsi     ## Objc selector ref: addObserver:selector:name:object:
000000000001d01e	xorl	%r9d, %r9d
000000000001d021	movq	%rax, %rdi
000000000001d024	movq	%rbx, %rdx
000000000001d027	callq	*%r12
000000000001d02a	addq	$0x40, %rsp
000000000001d02e	popq	%rbx
000000000001d02f	popq	%r12
000000000001d031	popq	%r14
000000000001d033	popq	%r15
000000000001d035	popq	%rbp
000000000001d036	retq
000000000001d037	pushq	%rbp
000000000001d038	movq	%rsp, %rbp
000000000001d03b	movq	0x18406(%rip), %rsi     ## Objc selector ref: _previewNeedsUpdate
000000000001d042	popq	%rbp
000000000001d043	jmpq	*0xc3b7(%rip)           ## Objc message: +[NSNotificationCenter _previewNeedsUpdate]
000000000001d049	pushq	%rbp
000000000001d04a	movq	%rsp, %rbp
000000000001d04d	movq	0x183f4(%rip), %rsi     ## Objc selector ref: _previewNeedsUpdate
000000000001d054	popq	%rbp
000000000001d055	jmpq	*0xc3a5(%rip)           ## Objc message: -[%rdi _previewNeedsUpdate]
000000000001d05b	pushq	%rbp
000000000001d05c	movq	%rsp, %rbp
000000000001d05f	movq	0x183ea(%rip), %rdx     ## Objc selector ref: _previewNeedsUpdateOnMainThread
000000000001d066	movq	0x183eb(%rip), %rsi     ## Objc selector ref: performSelectorOnMainThread:withObject:waitUntilDone:
000000000001d06d	xorl	%ecx, %ecx
000000000001d06f	xorl	%r8d, %r8d
000000000001d072	popq	%rbp
000000000001d073	jmpq	*0xc387(%rip)           ## Objc message: -[%rdi performSelectorOnMainThread:withObject:waitUntilDone:]
000000000001d079	pushq	%rbp
000000000001d07a	movq	%rsp, %rbp
000000000001d07d	pushq	%r14
000000000001d07f	pushq	%rbx
000000000001d080	movq	%rdi, %rbx
000000000001d083	movq	0x1853e(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_NSObject
000000000001d08a	movq	0x183cf(%rip), %rcx     ## Objc selector ref: updateImageLayer
000000000001d091	movq	0x178e8(%rip), %rsi     ## Objc selector ref: cancelPreviousPerformRequestsWithTarget:selector:object:
000000000001d098	movq	0xc361(%rip), %r14      ## Objc message: +[NSObject cancelPreviousPerformRequestsWithTarget:selector:object:]
000000000001d09f	xorl	%r8d, %r8d
000000000001d0a2	movq	%rbx, %rdx
000000000001d0a5	callq	*%r14
000000000001d0a8	movq	0x183b1(%rip), %rdx     ## Objc selector ref: updateImageLayer
000000000001d0af	movq	0x1775a(%rip), %rsi     ## Objc selector ref: performSelector:withObject:afterDelay:
000000000001d0b6	movsd	0xb222(%rip), %xmm0
000000000001d0be	xorl	%ecx, %ecx
000000000001d0c0	movq	%rbx, %rdi
000000000001d0c3	movq	%r14, %rax
000000000001d0c6	popq	%rbx
000000000001d0c7	popq	%r14
000000000001d0c9	popq	%rbp
000000000001d0ca	jmpq	*%rax
000000000001d0cc	pushq	%rbp
000000000001d0cd	movq	%rsp, %rbp
000000000001d0d0	pushq	%r14
000000000001d0d2	pushq	%rbx
000000000001d0d3	movq	%rdi, %rbx
000000000001d0d6	movq	0x1838b(%rip), %rsi     ## Objc selector ref: _subtitleImage
000000000001d0dd	movq	0xc31c(%rip), %r14      ## Objc message: -[%rdi _subtitleImage]
000000000001d0e4	callq	*%r14
000000000001d0e7	movq	_OBJC_IVAR_$_UAPCaptioningPreviewTextView._imageLayer(%rip), %rcx
000000000001d0ee	movq	(%rbx,%rcx), %rdi
000000000001d0f2	movq	0x17e5f(%rip), %rsi     ## Objc selector ref: setContents:
000000000001d0f9	movq	%rax, %rdx
000000000001d0fc	movq	%r14, %rax
000000000001d0ff	popq	%rbx
000000000001d100	popq	%r14
000000000001d102	popq	%rbp
000000000001d103	jmpq	*%rax
000000000001d105	pushq	%rbp
000000000001d106	movq	%rsp, %rbp
000000000001d109	pushq	%r15
000000000001d10b	pushq	%r14
000000000001d10d	pushq	%r13
000000000001d10f	pushq	%r12
000000000001d111	pushq	%rbx
000000000001d112	subq	$0xc8, %rsp
000000000001d119	movq	%rdi, %r12
000000000001d11c	movq	0xc235(%rip), %rcx      ## literal pool symbol address: ___stack_chk_guard
000000000001d123	movq	(%rcx), %rax
000000000001d126	movq	%rax, -0x30(%rbp)
000000000001d12a	movq	_OBJC_IVAR_$_UAPCaptioningPreviewTextView._subtitleRenderer(%rip), %rdx
000000000001d131	xorl	%eax, %eax
000000000001d133	cmpq	$0x0, (%r12,%rdx)
000000000001d138	je	0x1d43e
000000000001d13e	movq	0x183bb(%rip), %rbx     ## Objc class ref: _OBJC_CLASS_$_NSBundle
000000000001d145	movq	0x183bc(%rip), %rdi     ## Objc class ref: UniversalAccessPref
000000000001d14c	movq	0x16f6d(%rip), %rsi     ## Objc selector ref: class
000000000001d153	movq	0xc2a6(%rip), %r14      ## Objc message: +[UniversalAccessPref class]
000000000001d15a	callq	*%r14
000000000001d15d	movq	0x17054(%rip), %rsi     ## Objc selector ref: bundleForClass:
000000000001d164	movq	%rbx, %rdi
000000000001d167	movq	%rax, %rdx
000000000001d16a	callq	*%r14
000000000001d16d	movq	0x1704c(%rip), %rsi     ## Objc selector ref: localizedStringForKey:value:table:
000000000001d174	leaq	0xeb75(%rip), %rdx      ## Objc cfstring ref: @"caption.preview.text"
000000000001d17b	leaq	0xcf8e(%rip), %rcx      ## Objc cfstring ref: @""
000000000001d182	xorl	%r8d, %r8d
000000000001d185	movq	%rax, %rdi
000000000001d188	callq	*%r14
000000000001d18b	movq	%rax, -0xb8(%rbp)
000000000001d192	movq	0x16f8f(%rip), %rsi     ## Objc selector ref: length
000000000001d199	movq	%rax, %rdi
000000000001d19c	callq	*%r14
000000000001d19f	movq	%rax, -0xc0(%rbp)
000000000001d1a6	movq	0x1713b(%rip), %rdx     ## Objc selector ref: bounds
000000000001d1ad	leaq	-0x70(%rbp), %rdi
000000000001d1b1	movq	%r12, %rsi
000000000001d1b4	callq	0x1e892                 ## symbol stub for: _objc_msgSend_stret
000000000001d1b9	movsd	-0x60(%rbp), %xmm0
000000000001d1be	movsd	%xmm0, -0x98(%rbp)
000000000001d1c6	movsd	-0x58(%rbp), %xmm0
000000000001d1cb	movsd	%xmm0, -0xa0(%rbp)
000000000001d1d3	movq	0x183b6(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_NSImage
000000000001d1da	movq	0x16f87(%rip), %rsi     ## Objc selector ref: alloc
000000000001d1e1	callq	*%r14
000000000001d1e4	movq	0x173dd(%rip), %rsi     ## Objc selector ref: initWithSize:
000000000001d1eb	movq	%rax, %rdi
000000000001d1ee	movsd	-0x98(%rbp), %xmm0
000000000001d1f6	movsd	-0xa0(%rbp), %xmm1
000000000001d1fe	callq	*%r14
000000000001d201	movq	%rax, %r15
000000000001d204	movq	0xc185(%rip), %rax      ## literal pool symbol address: _kCFAllocatorDefault
000000000001d20b	movq	(%rax), %r13
000000000001d20e	leaq	_kCaptionPreviewHorizontalTextCenterPositionPercent(%rip), %rdx
000000000001d215	movl	$0x10, %esi
000000000001d21a	movq	%r13, %rdi
000000000001d21d	callq	0x1e532                 ## symbol stub for: _CFNumberCreate
000000000001d222	movq	%rax, %rbx
000000000001d225	movq	%rbx, -0xa8(%rbp)
000000000001d22c	leaq	_kCaptionPreviewVerticalTextCenterPositionPercent(%rip), %rdx
000000000001d233	movl	$0x10, %esi
000000000001d238	movq	%r13, %rdi
000000000001d23b	callq	0x1e532                 ## symbol stub for: _CFNumberCreate
000000000001d240	movq	%rax, -0xb0(%rbp)
000000000001d247	movq	0xc192(%rip), %rcx      ## literal pool symbol address: _kCMTextMarkupAttribute_TextPositionPercentageRelativeToWritingDirection
000000000001d24e	movq	(%rcx), %rcx
000000000001d251	movq	%rcx, -0x40(%rbp)
000000000001d255	movq	0xc17c(%rip), %rcx      ## literal pool symbol address: _kCMTextMarkupAttribute_OrthogonalLinePositionPercentageRelativeToWritingDirection
000000000001d25c	movq	(%rcx), %rcx
000000000001d25f	movq	%rcx, -0x38(%rbp)
000000000001d263	movq	%rbx, -0x50(%rbp)
000000000001d267	movq	%rax, -0x48(%rbp)
000000000001d26b	movq	0xc156(%rip), %r8       ## literal pool symbol address: _kCFTypeDictionaryKeyCallBacks
000000000001d272	movq	0xc157(%rip), %r9       ## literal pool symbol address: _kCFTypeDictionaryValueCallBacks
000000000001d279	leaq	-0x40(%rbp), %rsi
000000000001d27d	leaq	-0x50(%rbp), %rdx
000000000001d281	movl	$0x2, %ecx
000000000001d286	movq	%r13, %rdi
000000000001d289	callq	0x1e50e                 ## symbol stub for: _CFDictionaryCreate
000000000001d28e	movq	%rax, %rbx
000000000001d291	movq	0x17338(%rip), %rsi     ## Objc selector ref: lockFocus
000000000001d298	movq	%r15, %rdi
000000000001d29b	callq	*%r14
000000000001d29e	movq	0x18453(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_NSGraphicsContext
000000000001d2a5	movq	0x181c4(%rip), %rsi     ## Objc selector ref: currentContext
000000000001d2ac	callq	*%r14
000000000001d2af	movq	0x181c2(%rip), %rsi     ## Objc selector ref: graphicsPort
000000000001d2b6	movq	%rax, %rdi
000000000001d2b9	callq	*%r14
000000000001d2bc	movq	%rax, %r13
000000000001d2bf	testq	%r13, %r13
000000000001d2c2	je	0x1d3fd
000000000001d2c8	movsd	0xb2d0(%rip), %xmm3
000000000001d2d0	movsd	-0xa0(%rbp), %xmm1
000000000001d2d8	mulsd	%xmm1, %xmm3
000000000001d2dc	movsd	%xmm3, -0xc8(%rbp)
000000000001d2e4	movsd	0xb2bc(%rip), %xmm4
000000000001d2ec	mulsd	%xmm3, %xmm4
000000000001d2f0	movsd	-0x98(%rbp), %xmm2
000000000001d2f8	subsd	%xmm4, %xmm2
000000000001d2fc	movsd	0xb0d4(%rip), %xmm0
000000000001d304	mulsd	%xmm0, %xmm2
000000000001d308	subsd	%xmm3, %xmm1
000000000001d30c	mulsd	%xmm0, %xmm1
000000000001d310	movsd	%xmm1, -0xa0(%rbp)
000000000001d318	addsd	0xb290(%rip), %xmm4
000000000001d320	movsd	%xmm4, -0xd0(%rbp)
000000000001d328	addsd	0xb288(%rip), %xmm2
000000000001d330	movsd	%xmm2, -0x98(%rbp)
000000000001d338	movl	$0x1, %edi
000000000001d33d	xorl	%esi, %esi
000000000001d33f	callq	0x1e436                 ## symbol stub for: _MACaptionAppearanceGetRelativeCharacterSize
000000000001d344	xorps	%xmm1, %xmm1
000000000001d347	ucomisd	%xmm1, %xmm0
000000000001d34b	jbe	0x1d36a
000000000001d34d	mulsd	0xb013(%rip), %xmm0
000000000001d355	movsd	-0xa0(%rbp), %xmm1
000000000001d35d	addsd	%xmm0, %xmm1
000000000001d361	movq	_OBJC_IVAR_$_UAPCaptioningPreviewTextView._subtitleRenderer(%rip), %rax
000000000001d368	jmp	0x1d379
000000000001d36a	movq	_OBJC_IVAR_$_UAPCaptioningPreviewTextView._subtitleRenderer(%rip), %rax
000000000001d371	movsd	-0xa0(%rbp), %xmm1
000000000001d379	movq	%rbx, %rcx
000000000001d37c	cmpq	$0x0, -0xc0(%rbp)
000000000001d384	movq	(%r12,%rax), %rdi
000000000001d388	leaq	0xe981(%rip), %rax      ## Objc cfstring ref: @"Preview"
000000000001d38f	movq	-0xb8(%rbp), %rdx
000000000001d396	cmoveq	%rax, %rdx
000000000001d39a	movsd	-0x98(%rbp), %xmm0
000000000001d3a2	movsd	%xmm0, -0x90(%rbp)
000000000001d3aa	movsd	%xmm1, -0x88(%rbp)
000000000001d3b2	movsd	-0xd0(%rbp), %xmm0
000000000001d3ba	movsd	%xmm0, -0x80(%rbp)
000000000001d3bf	movsd	-0xc8(%rbp), %xmm0
000000000001d3c7	movsd	%xmm0, -0x78(%rbp)
000000000001d3cc	movq	-0x78(%rbp), %rax
000000000001d3d0	movq	%rax, 0x18(%rsp)
000000000001d3d5	movq	-0x80(%rbp), %rax
000000000001d3d9	movq	%rax, 0x10(%rsp)
000000000001d3de	movq	-0x90(%rbp), %rax
000000000001d3e5	movq	-0x88(%rbp), %rsi
000000000001d3ec	movq	%rsi, 0x8(%rsp)
000000000001d3f1	movq	%rax, (%rsp)
000000000001d3f5	movq	%r13, %rsi
000000000001d3f8	callq	0x1e41e                 ## symbol stub for: _FigSubtitleRendererDrawSubtitleTextDirect
000000000001d3fd	movq	0x171ec(%rip), %rsi     ## Objc selector ref: unlockFocus
000000000001d404	movq	%r15, %rdi
000000000001d407	callq	*%r14
000000000001d40a	movq	-0xa8(%rbp), %rdi
000000000001d411	callq	0x1e562                 ## symbol stub for: _CFRelease
000000000001d416	movq	-0xb0(%rbp), %rdi
000000000001d41d	callq	0x1e562                 ## symbol stub for: _CFRelease
000000000001d422	movq	%rbx, %rdi
000000000001d425	callq	0x1e562                 ## symbol stub for: _CFRelease
000000000001d42a	movq	0x16cd7(%rip), %rsi     ## Objc selector ref: autorelease
000000000001d431	movq	%r15, %rdi
000000000001d434	callq	*%r14
000000000001d437	movq	0xbf1a(%rip), %rcx      ## literal pool symbol address: ___stack_chk_guard
000000000001d43e	movq	(%rcx), %rcx
000000000001d441	cmpq	-0x30(%rbp), %rcx
000000000001d445	jne	0x1d459
000000000001d447	addq	$0xc8, %rsp
000000000001d44e	popq	%rbx
000000000001d44f	popq	%r12
000000000001d451	popq	%r13
000000000001d453	popq	%r14
000000000001d455	popq	%r15
000000000001d457	popq	%rbp
000000000001d458	retq
000000000001d459	callq	0x1e8b6                 ## symbol stub for: ___stack_chk_fail
000000000001d45e	pushq	%rbp
000000000001d45f	movq	%rsp, %rbp
000000000001d462	pushq	%rbx
000000000001d463	subq	$0x18, %rsp
000000000001d467	movq	%rdi, -0x18(%rbp)
000000000001d46b	movq	0x1833e(%rip), %rax     ## Objc class ref: UAPCaptioningPreviewView
000000000001d472	movq	%rax, -0x10(%rbp)
000000000001d476	movq	0x17f93(%rip), %rsi     ## Objc selector ref: initWithCoder:
000000000001d47d	leaq	-0x18(%rbp), %rdi
000000000001d481	callq	0x1e88c                 ## Objc message: -[[%rdi super] initWithCoder:]
000000000001d486	movq	%rax, %rbx
000000000001d489	movq	0x16cb8(%rip), %rsi     ## Objc selector ref: setup
000000000001d490	movq	%rbx, %rdi
000000000001d493	callq	*0xbf67(%rip)           ## Objc message: -[%rdi setup]
000000000001d499	movq	%rbx, %rax
000000000001d49c	addq	$0x18, %rsp
000000000001d4a0	popq	%rbx
000000000001d4a1	popq	%rbp
000000000001d4a2	retq
000000000001d4a3	pushq	%rbp
000000000001d4a4	movq	%rsp, %rbp
000000000001d4a7	pushq	%rbx
000000000001d4a8	subq	$0x38, %rsp
000000000001d4ac	movq	%rdi, -0x18(%rbp)
000000000001d4b0	movq	0x182f9(%rip), %rax     ## Objc class ref: UAPCaptioningPreviewView
000000000001d4b7	movq	%rax, -0x10(%rbp)
000000000001d4bb	movq	0x16c7e(%rip), %rsi     ## Objc selector ref: initWithFrame:
000000000001d4c2	movq	0x28(%rbp), %rax
000000000001d4c6	movq	%rax, 0x18(%rsp)
000000000001d4cb	movq	0x20(%rbp), %rax
000000000001d4cf	movq	%rax, 0x10(%rsp)
000000000001d4d4	movq	0x10(%rbp), %rax
000000000001d4d8	movq	0x18(%rbp), %rcx
000000000001d4dc	movq	%rcx, 0x8(%rsp)
000000000001d4e1	movq	%rax, (%rsp)
000000000001d4e5	leaq	-0x18(%rbp), %rdi
000000000001d4e9	callq	0x1e88c                 ## Objc message: -[[%rdi super] initWithFrame:]
000000000001d4ee	movq	%rax, %rbx
000000000001d4f1	movq	0x16c50(%rip), %rsi     ## Objc selector ref: setup
000000000001d4f8	movq	%rbx, %rdi
000000000001d4fb	callq	*0xbeff(%rip)           ## Objc message: -[%rdi setup]
000000000001d501	movq	%rbx, %rax
000000000001d504	addq	$0x38, %rsp
000000000001d508	popq	%rbx
000000000001d509	popq	%rbp
000000000001d50a	retq
000000000001d50b	pushq	%rbp
000000000001d50c	movq	%rsp, %rbp
000000000001d50f	pushq	%r15
000000000001d511	pushq	%r14
000000000001d513	pushq	%r12
000000000001d515	pushq	%rbx
000000000001d516	subq	$0x20, %rsp
000000000001d51a	movq	%rdi, %rbx
000000000001d51d	movq	0x16d94(%rip), %rsi     ## Objc selector ref: setTranslatesAutoresizingMaskIntoConstraints:
000000000001d524	movq	0xbed5(%rip), %r12      ## Objc message: -[%rdi setTranslatesAutoresizingMaskIntoConstraints:]
000000000001d52b	xorl	%edx, %edx
000000000001d52d	callq	*%r12
000000000001d530	movq	0x181c9(%rip), %rdi     ## Objc class ref: UAPCaptioningPreviewBackgroundView
000000000001d537	movq	0x16c2a(%rip), %rsi     ## Objc selector ref: alloc
000000000001d53e	callq	*%r12
000000000001d541	movq	0x16bf8(%rip), %rsi     ## Objc selector ref: initWithFrame:
000000000001d548	movq	0xbbc1(%rip), %r15      ## literal pool symbol address: _NSZeroRect
000000000001d54f	movq	0x18(%r15), %rcx
000000000001d553	movq	%rcx, 0x18(%rsp)
000000000001d558	movq	0x10(%r15), %rcx
000000000001d55c	movq	%rcx, 0x10(%rsp)
000000000001d561	movq	(%r15), %rcx
000000000001d564	movq	0x8(%r15), %rdx
000000000001d568	movq	%rdx, 0x8(%rsp)
000000000001d56d	movq	%rcx, (%rsp)
000000000001d571	movq	%rax, %rdi
000000000001d574	callq	*%r12
000000000001d577	movq	_OBJC_IVAR_$_UAPCaptioningPreviewView._background(%rip), %r14
000000000001d57e	movq	%rax, %rdi
000000000001d581	movq	%rbx, %rsi
000000000001d584	movq	%r14, %rdx
000000000001d587	callq	0x1e868                 ## symbol stub for: _objc_assign_ivar
000000000001d58c	movq	(%rbx,%r14), %rdx
000000000001d590	movq	0x17ca9(%rip), %rsi     ## Objc selector ref: addSubview:
000000000001d597	movq	%rbx, %rdi
000000000001d59a	callq	*%r12
000000000001d59d	movq	(%rbx,%r14), %rdx
000000000001d5a1	movq	0x17e70(%rip), %rsi     ## Objc selector ref: centerView:
000000000001d5a8	movq	%rbx, %rdi
000000000001d5ab	callq	*%r12
000000000001d5ae	movq	(%rbx,%r14), %rdi
000000000001d5b2	movq	0x16b97(%rip), %rsi     ## Objc selector ref: release
000000000001d5b9	callq	*%r12
000000000001d5bc	movq	0x18145(%rip), %rdi     ## Objc class ref: UAPCaptioningPreviewTextView
000000000001d5c3	movq	0x16b9e(%rip), %rsi     ## Objc selector ref: alloc
000000000001d5ca	callq	*%r12
000000000001d5cd	movq	0x16b6c(%rip), %rsi     ## Objc selector ref: initWithFrame:
000000000001d5d4	movq	0x18(%r15), %rcx
000000000001d5d8	movq	%rcx, 0x18(%rsp)
000000000001d5dd	movq	0x10(%r15), %rcx
000000000001d5e1	movq	%rcx, 0x10(%rsp)
000000000001d5e6	movq	(%r15), %rcx
000000000001d5e9	movq	0x8(%r15), %rdx
000000000001d5ed	movq	%rdx, 0x8(%rsp)
000000000001d5f2	movq	%rcx, (%rsp)
000000000001d5f6	movq	%rax, %rdi
000000000001d5f9	callq	*%r12
000000000001d5fc	movq	_OBJC_IVAR_$_UAPCaptioningPreviewView._text(%rip), %r14
000000000001d603	movq	%rax, %rdi
000000000001d606	movq	%rbx, %rsi
000000000001d609	movq	%r14, %rdx
000000000001d60c	callq	0x1e868                 ## symbol stub for: _objc_assign_ivar
000000000001d611	movq	(%rbx,%r14), %rdx
000000000001d615	movq	0x17c24(%rip), %rsi     ## Objc selector ref: addSubview:
000000000001d61c	movq	%rbx, %rdi
000000000001d61f	callq	*%r12
000000000001d622	movq	(%rbx,%r14), %rdx
000000000001d626	movq	0x17deb(%rip), %rsi     ## Objc selector ref: centerView:
000000000001d62d	movq	%rbx, %rdi
000000000001d630	callq	*%r12
000000000001d633	movq	(%rbx,%r14), %rdi
000000000001d637	movq	0x16b12(%rip), %rsi     ## Objc selector ref: release
000000000001d63e	callq	*%r12
000000000001d641	movq	0x17888(%rip), %rsi     ## Objc selector ref: setNeedsDisplay:
000000000001d648	movl	$0x1, %edx
000000000001d64d	movq	%rbx, %rdi
000000000001d650	callq	*%r12
000000000001d653	movq	0x17e26(%rip), %rsi     ## Objc selector ref: displayIfNeeded
000000000001d65a	movq	%rbx, %rdi
000000000001d65d	movq	%r12, %rax
000000000001d660	addq	$0x20, %rsp
000000000001d664	popq	%rbx
000000000001d665	popq	%r12
000000000001d667	popq	%r14
000000000001d669	popq	%r15
000000000001d66b	popq	%rbp
000000000001d66c	jmpq	*%rax
000000000001d66e	pushq	%rbp
000000000001d66f	movq	%rsp, %rbp
000000000001d672	pushq	%r15
000000000001d674	pushq	%r14
000000000001d676	pushq	%r13
000000000001d678	pushq	%r12
000000000001d67a	pushq	%rbx
000000000001d67b	subq	$0x38, %rsp
000000000001d67f	movq	%rdx, %r14
000000000001d682	movq	%rdi, %rbx
000000000001d685	movq	0xbccc(%rip), %rax      ## literal pool symbol address: ___stack_chk_guard
000000000001d68c	movq	(%rax), %rax
000000000001d68f	movq	%rax, -0x30(%rbp)
000000000001d693	movq	0x17ea6(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_NSLayoutConstraint
000000000001d69a	movq	0x16c27(%rip), %rsi     ## Objc selector ref: constraintWithItem:attribute:relatedBy:toItem:attribute:multiplier:constant:
000000000001d6a1	movq	$0x5, (%rsp)
000000000001d6a9	movq	0xbd50(%rip), %r13      ## Objc message: +[NSLayoutConstraint constraintWithItem:attribute:relatedBy:toItem:attribute:multiplier:constant:]
000000000001d6b0	movsd	0xac38(%rip), %xmm0
000000000001d6b8	movl	$0x5, %ecx
000000000001d6bd	xorl	%r8d, %r8d
000000000001d6c0	xorps	%xmm1, %xmm1
000000000001d6c3	movq	%rbx, %rdx
000000000001d6c6	movq	%r14, %r9
000000000001d6c9	callq	*%r13
000000000001d6cc	leaq	-0x50(%rbp), %r15
000000000001d6d0	movq	%rax, %rdi
000000000001d6d3	movq	%r15, %rsi
000000000001d6d6	callq	0x1e86e                 ## symbol stub for: _objc_assign_strongCast
000000000001d6db	leaq	-0x48(%rbp), %r12
000000000001d6df	movq	0x17e5a(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_NSLayoutConstraint
000000000001d6e6	movq	0x16bdb(%rip), %rsi     ## Objc selector ref: constraintWithItem:attribute:relatedBy:toItem:attribute:multiplier:constant:
000000000001d6ed	movq	$0x6, (%rsp)
000000000001d6f5	movl	$0x6, %ecx
000000000001d6fa	xorl	%r8d, %r8d
000000000001d6fd	xorps	%xmm1, %xmm1
000000000001d700	movq	%rbx, %rdx
000000000001d703	movq	%r14, %r9
000000000001d706	movsd	0xabe2(%rip), %xmm0
000000000001d70e	callq	*%r13
000000000001d711	movq	%rax, %rdi
000000000001d714	movq	%r12, %rsi
000000000001d717	callq	0x1e86e                 ## symbol stub for: _objc_assign_strongCast
000000000001d71c	leaq	-0x40(%rbp), %r12
000000000001d720	movq	0x17e19(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_NSLayoutConstraint
000000000001d727	movq	0x16b9a(%rip), %rsi     ## Objc selector ref: constraintWithItem:attribute:relatedBy:toItem:attribute:multiplier:constant:
000000000001d72e	movq	$0x3, (%rsp)
000000000001d736	movl	$0x3, %ecx
000000000001d73b	xorl	%r8d, %r8d
000000000001d73e	xorps	%xmm1, %xmm1
000000000001d741	movq	%rbx, %rdx
000000000001d744	movq	%r14, %r9
000000000001d747	movsd	0xaba1(%rip), %xmm0
000000000001d74f	callq	*%r13
000000000001d752	movq	%rax, %rdi
000000000001d755	movq	%r12, %rsi
000000000001d758	callq	0x1e86e                 ## symbol stub for: _objc_assign_strongCast
000000000001d75d	leaq	-0x38(%rbp), %r12
000000000001d761	movq	0x17dd8(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_NSLayoutConstraint
000000000001d768	movq	0x16b59(%rip), %rsi     ## Objc selector ref: constraintWithItem:attribute:relatedBy:toItem:attribute:multiplier:constant:
000000000001d76f	movq	$0x4, (%rsp)
000000000001d777	movl	$0x4, %ecx
000000000001d77c	xorl	%r8d, %r8d
000000000001d77f	xorps	%xmm1, %xmm1
000000000001d782	movq	%rbx, %rdx
000000000001d785	movq	%r14, %r9
000000000001d788	movsd	0xab60(%rip), %xmm0
000000000001d790	callq	*%r13
000000000001d793	movq	%rax, %rdi
000000000001d796	movq	%r12, %rsi
000000000001d799	callq	0x1e86e                 ## symbol stub for: _objc_assign_strongCast
000000000001d79e	movq	0x17d43(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_NSArray
000000000001d7a5	movq	0x16d74(%rip), %rsi     ## Objc selector ref: arrayWithObjects:count:
000000000001d7ac	movl	$0x4, %ecx
000000000001d7b1	movq	%r15, %rdx
000000000001d7b4	callq	*%r13
000000000001d7b7	movq	0x17c62(%rip), %rsi     ## Objc selector ref: addConstraints:
000000000001d7be	movq	%rbx, %rdi
000000000001d7c1	movq	%rax, %rdx
000000000001d7c4	callq	*%r13
000000000001d7c7	movq	0x16aea(%rip), %rsi     ## Objc selector ref: setTranslatesAutoresizingMaskIntoConstraints:
000000000001d7ce	xorl	%edx, %edx
000000000001d7d0	movq	%r14, %rdi
000000000001d7d3	callq	*%r13
000000000001d7d6	movq	0xbb7b(%rip), %rax      ## literal pool symbol address: ___stack_chk_guard
000000000001d7dd	movq	(%rax), %rax
000000000001d7e0	cmpq	-0x30(%rbp), %rax
000000000001d7e4	jne	0x1d7f5
000000000001d7e6	addq	$0x38, %rsp
000000000001d7ea	popq	%rbx
000000000001d7eb	popq	%r12
000000000001d7ed	popq	%r13
000000000001d7ef	popq	%r14
000000000001d7f1	popq	%r15
000000000001d7f3	popq	%rbp
000000000001d7f4	retq
000000000001d7f5	callq	0x1e8b6                 ## symbol stub for: ___stack_chk_fail
000000000001d7fa	pushq	%rbp
000000000001d7fb	movq	%rsp, %rbp
000000000001d7fe	pushq	%r14
000000000001d800	pushq	%rbx
000000000001d801	movq	%rdi, %rbx
000000000001d804	movq	_OBJC_IVAR_$_UAPCaptioningPreviewView._background(%rip), %rax
000000000001d80b	movq	(%rbx,%rax), %rdi
000000000001d80f	movq	0x17c12(%rip), %rsi     ## Objc selector ref: startAnimation
000000000001d816	movq	0xbbe3(%rip), %r14      ## Objc message: +[NSArray startAnimation]
000000000001d81d	callq	*%r14
000000000001d820	movq	_OBJC_IVAR_$_UAPCaptioningPreviewView._text(%rip), %rax
000000000001d827	movq	(%rbx,%rax), %rdi
000000000001d82b	movq	0x17c56(%rip), %rsi     ## Objc selector ref: updateLayer
000000000001d832	movq	%r14, %rax
000000000001d835	popq	%rbx
000000000001d836	popq	%r14
000000000001d838	popq	%rbp
000000000001d839	jmpq	*%rax
000000000001d83b	pushq	%rbp
000000000001d83c	movq	%rsp, %rbp
000000000001d83f	pushq	%r15
000000000001d841	pushq	%r14
000000000001d843	pushq	%rbx
000000000001d844	pushq	%rax
000000000001d845	movq	%rdi, %rbx
000000000001d848	movq	0x17cb1(%rip), %r14     ## Objc class ref: _OBJC_CLASS_$_NSBundle
000000000001d84f	movq	0x1686a(%rip), %rsi     ## Objc selector ref: class
000000000001d856	movq	0xbba3(%rip), %r15      ## Objc message: +[NSBundle class]
000000000001d85d	callq	*%r15
000000000001d860	movq	0x16951(%rip), %rsi     ## Objc selector ref: bundleForClass:
000000000001d867	movq	%r14, %rdi
000000000001d86a	movq	%rax, %rdx
000000000001d86d	callq	*%r15
000000000001d870	movq	0x176d1(%rip), %rsi     ## Objc selector ref: imageForResource:
000000000001d877	leaq	0xe4b2(%rip), %rdx      ## Objc cfstring ref: @"BoxContentMask"
000000000001d87e	movq	%rax, %rdi
000000000001d881	callq	*%r15
000000000001d884	movq	_OBJC_IVAR_$_UAPBoxBackgroundView._maskLayer(%rip), %r14
000000000001d88b	movq	(%rbx,%r14), %rdi
000000000001d88f	movq	0x176c2(%rip), %rsi     ## Objc selector ref: setContents:
000000000001d896	movq	%rax, %rdx
000000000001d899	callq	*%r15
000000000001d89c	movq	(%rbx,%r14), %r14
000000000001d8a0	movq	0x16b21(%rip), %rsi     ## Objc selector ref: window
000000000001d8a7	movq	%rbx, %rdi
000000000001d8aa	callq	*%r15
000000000001d8ad	movq	0x1774c(%rip), %rsi     ## Objc selector ref: backingScaleFactor
000000000001d8b4	movq	%rax, %rdi
000000000001d8b7	callq	*%r15
000000000001d8ba	movq	0x17747(%rip), %rsi     ## Objc selector ref: setContentsScale:
000000000001d8c1	movq	%r14, %rdi
000000000001d8c4	movq	%r15, %rax
000000000001d8c7	addq	$0x8, %rsp
000000000001d8cb	popq	%rbx
000000000001d8cc	popq	%r14
000000000001d8ce	popq	%r15
000000000001d8d0	popq	%rbp
000000000001d8d1	jmpq	*%rax
000000000001d8d3	pushq	%rbp
000000000001d8d4	movq	%rsp, %rbp
000000000001d8d7	pushq	%r15
000000000001d8d9	pushq	%r14
000000000001d8db	pushq	%r12
000000000001d8dd	pushq	%rbx
000000000001d8de	subq	$0x60, %rsp
000000000001d8e2	movq	%rdi, %rbx
000000000001d8e5	movq	_OBJC_IVAR_$_UAPBoxBackgroundView._maskLayer(%rip), %rax
000000000001d8ec	cmpq	$0x0, (%rbx,%rax)
000000000001d8f1	jne	0x1dad0
000000000001d8f7	movq	0x17d5a(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_CALayer
000000000001d8fe	movq	0x17b8b(%rip), %rsi     ## Objc selector ref: new
000000000001d905	movq	0xbaf4(%rip), %r12      ## Objc message: +[CALayer new]
000000000001d90c	callq	*%r12
000000000001d90f	movq	_OBJC_IVAR_$_UAPBoxBackgroundView._imageLayer(%rip), %r14
000000000001d916	movq	%rax, %rdi
000000000001d919	movq	%rbx, %rsi
000000000001d91c	movq	%r14, %rdx
000000000001d91f	callq	0x1e868                 ## symbol stub for: _objc_assign_ivar
000000000001d924	movq	0x169bd(%rip), %rdx     ## Objc selector ref: bounds
000000000001d92b	leaq	-0x40(%rbp), %rdi
000000000001d92f	movq	%rbx, %rsi
000000000001d932	callq	0x1e892                 ## symbol stub for: _objc_msgSend_stret
000000000001d937	movq	(%rbx,%r14), %rdi
000000000001d93b	movq	0x1765e(%rip), %rsi     ## Objc selector ref: setFrame:
000000000001d942	movq	-0x28(%rbp), %rax
000000000001d946	movq	%rax, 0x18(%rsp)
000000000001d94b	movq	-0x30(%rbp), %rax
000000000001d94f	movq	%rax, 0x10(%rsp)
000000000001d954	movq	-0x40(%rbp), %rax
000000000001d958	movq	-0x38(%rbp), %rcx
000000000001d95c	movq	%rcx, 0x8(%rsp)
000000000001d961	movq	%rax, (%rsp)
000000000001d965	callq	*%r12
000000000001d968	movq	0x16969(%rip), %rsi     ## Objc selector ref: setWantsLayer:
000000000001d96f	movl	$0x1, %edx
000000000001d974	movq	%rbx, %rdi
000000000001d977	callq	*%r12
000000000001d97a	movq	0x175a7(%rip), %rsi     ## Objc selector ref: layer
000000000001d981	movq	%rbx, %rdi
000000000001d984	callq	*%r12
000000000001d987	movq	(%rbx,%r14), %rdx
000000000001d98b	movq	0x175ae(%rip), %rsi     ## Objc selector ref: addSublayer:
000000000001d992	movq	%rax, %rdi
000000000001d995	callq	*%r12
000000000001d998	movq	0x17581(%rip), %rsi     ## Objc selector ref: setLayerContentsRedrawPolicy:
000000000001d99f	movl	$0x1, %edx
000000000001d9a4	movq	%rbx, %rdi
000000000001d9a7	callq	*%r12
000000000001d9aa	movq	(%rbx,%r14), %rdi
000000000001d9ae	movq	0x17583(%rip), %rsi     ## Objc selector ref: setAutoresizingMask:
000000000001d9b5	movl	$0x12, %edx
000000000001d9ba	callq	*%r12
000000000001d9bd	movq	(%rbx,%r14), %r15
000000000001d9c1	movq	0x17b28(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_NSColor
000000000001d9c8	movq	0x16791(%rip), %rsi     ## Objc selector ref: colorWithCalibratedRed:green:blue:alpha:
000000000001d9cf	movsd	0xabe9(%rip), %xmm3
000000000001d9d7	xorps	%xmm0, %xmm0
000000000001d9da	xorps	%xmm1, %xmm1
000000000001d9dd	xorps	%xmm2, %xmm2
000000000001d9e0	callq	*%r12
000000000001d9e3	movq	0x17aae(%rip), %rsi     ## Objc selector ref: CGColor
000000000001d9ea	movq	%rax, %rdi
000000000001d9ed	callq	*%r12
000000000001d9f0	movq	0x17aa9(%rip), %rsi     ## Objc selector ref: setBackgroundColor:
000000000001d9f7	movq	%r15, %rdi
000000000001d9fa	movq	%rax, %rdx
000000000001d9fd	callq	*%r12
000000000001da00	movq	0x17c51(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_CALayer
000000000001da07	movq	0x17a82(%rip), %rsi     ## Objc selector ref: new
000000000001da0e	callq	*%r12
000000000001da11	movq	_OBJC_IVAR_$_UAPBoxBackgroundView._maskLayer(%rip), %r15
000000000001da18	movq	%rax, %rdi
000000000001da1b	movq	%rbx, %rsi
000000000001da1e	movq	%r15, %rdx
000000000001da21	callq	0x1e868                 ## symbol stub for: _objc_assign_ivar
000000000001da26	movq	(%rbx,%r15), %rdi
000000000001da2a	movq	0x1756f(%rip), %rsi     ## Objc selector ref: setFrame:
000000000001da31	movq	-0x28(%rbp), %rax
000000000001da35	movq	%rax, 0x18(%rsp)
000000000001da3a	movq	-0x30(%rbp), %rax
000000000001da3e	movq	%rax, 0x10(%rsp)
000000000001da43	movq	-0x40(%rbp), %rax
000000000001da47	movq	-0x38(%rbp), %rcx
000000000001da4b	movq	%rcx, 0x8(%rsp)
000000000001da50	movq	%rax, (%rsp)
000000000001da54	callq	*%r12
000000000001da57	movq	(%rbx,%r15), %rdi
000000000001da5b	movq	0x174d6(%rip), %rsi     ## Objc selector ref: setAutoresizingMask:
000000000001da62	movl	$0x12, %edx
000000000001da67	callq	*%r12
000000000001da6a	movq	(%rbx,%r15), %rdi
000000000001da6e	movaps	0xab5b(%rip), %xmm0
000000000001da75	movaps	%xmm0, -0x60(%rbp)
000000000001da79	movaps	0xab60(%rip), %xmm0
000000000001da80	movaps	%xmm0, -0x50(%rbp)
000000000001da84	movq	0x174c5(%rip), %rsi     ## Objc selector ref: setContentsCenter:
000000000001da8b	movq	-0x48(%rbp), %rax
000000000001da8f	movq	%rax, 0x18(%rsp)
000000000001da94	movq	-0x50(%rbp), %rax
000000000001da98	movq	%rax, 0x10(%rsp)
000000000001da9d	movq	-0x60(%rbp), %rax
000000000001daa1	movq	-0x58(%rbp), %rcx
000000000001daa5	movq	%rcx, 0x8(%rsp)
000000000001daaa	movq	%rax, (%rsp)
000000000001daae	callq	*%r12
000000000001dab1	movq	(%rbx,%r14), %rdi
000000000001dab5	movq	(%rbx,%r15), %rdx
000000000001dab9	movq	0x174a8(%rip), %rsi     ## Objc selector ref: setMask:
000000000001dac0	callq	*%r12
000000000001dac3	movq	0x179be(%rip), %rsi     ## Objc selector ref: updateLayer
000000000001daca	movq	%rbx, %rdi
000000000001dacd	callq	*%r12
000000000001dad0	addq	$0x60, %rsp
000000000001dad4	popq	%rbx
000000000001dad5	popq	%r12
000000000001dad7	popq	%r14
000000000001dad9	popq	%r15
000000000001dadb	popq	%rbp
000000000001dadc	retq
000000000001dadd	pushq	%rbp
000000000001dade	movq	%rsp, %rbp
000000000001dae1	pushq	%rbx
000000000001dae2	subq	$0x38, %rsp
000000000001dae6	movq	%rdi, -0x18(%rbp)
000000000001daea	movq	0x17cc7(%rip), %rax     ## Objc class ref: UAPBoxBackgroundView
000000000001daf1	movq	%rax, -0x10(%rbp)
000000000001daf5	movq	0x16644(%rip), %rsi     ## Objc selector ref: initWithFrame:
000000000001dafc	movq	0x28(%rbp), %rax
000000000001db00	movq	%rax, 0x18(%rsp)
000000000001db05	movq	0x20(%rbp), %rax
000000000001db09	movq	%rax, 0x10(%rsp)
000000000001db0e	movq	0x10(%rbp), %rax
000000000001db12	movq	0x18(%rbp), %rcx
000000000001db16	movq	%rcx, 0x8(%rsp)
000000000001db1b	movq	%rax, (%rsp)
000000000001db1f	leaq	-0x18(%rbp), %rdi
000000000001db23	callq	0x1e88c                 ## Objc message: -[[%rdi super] initWithFrame:]
000000000001db28	movq	%rax, %rbx
000000000001db2b	movq	0x17976(%rip), %rsi     ## Objc selector ref: _setup
000000000001db32	movq	%rbx, %rdi
000000000001db35	callq	*0xb8c5(%rip)           ## Objc message: -[%rdi _setup]
000000000001db3b	movq	%rbx, %rax
000000000001db3e	addq	$0x38, %rsp
000000000001db42	popq	%rbx
000000000001db43	popq	%rbp
000000000001db44	retq
000000000001db45	pushq	%rbp
000000000001db46	movq	%rsp, %rbp
000000000001db49	pushq	%rbx
000000000001db4a	subq	$0x18, %rsp
000000000001db4e	movq	%rdi, -0x18(%rbp)
000000000001db52	movq	0x17c5f(%rip), %rax     ## Objc class ref: UAPBoxBackgroundView
000000000001db59	movq	%rax, -0x10(%rbp)
000000000001db5d	movq	0x178ac(%rip), %rsi     ## Objc selector ref: initWithCoder:
000000000001db64	leaq	-0x18(%rbp), %rdi
000000000001db68	callq	0x1e88c                 ## Objc message: -[[%rdi super] initWithCoder:]
000000000001db6d	movq	%rax, %rbx
000000000001db70	movq	0x17931(%rip), %rsi     ## Objc selector ref: _setup
000000000001db77	movq	%rbx, %rdi
000000000001db7a	callq	*0xb880(%rip)           ## Objc message: -[%rdi _setup]
000000000001db80	movq	%rbx, %rax
000000000001db83	addq	$0x18, %rsp
000000000001db87	popq	%rbx
000000000001db88	popq	%rbp
000000000001db89	retq
000000000001db8a	pushq	%rbp
000000000001db8b	movq	%rsp, %rbp
000000000001db8e	xorl	%eax, %eax
000000000001db90	popq	%rbp
000000000001db91	retq
000000000001db92	pushq	%rbp
000000000001db93	movq	%rsp, %rbp
000000000001db96	pushq	%r14
000000000001db98	pushq	%rbx
000000000001db99	subq	$0x10, %rsp
000000000001db9d	movq	%rdi, %rbx
000000000001dba0	movq	%rbx, -0x20(%rbp)
000000000001dba4	movq	0x17c0d(%rip), %rax     ## Objc class ref: UAPBoxBackgroundView
000000000001dbab	movq	%rax, -0x18(%rbp)
000000000001dbaf	movq	0x165a2(%rip), %rsi     ## Objc selector ref: dealloc
000000000001dbb6	leaq	-0x20(%rbp), %rdi
000000000001dbba	callq	0x1e88c                 ## Objc message: -[[%rdi super] dealloc]
000000000001dbbf	movq	_OBJC_IVAR_$_UAPBoxBackgroundView._imageLayer(%rip), %rax
000000000001dbc6	movq	(%rbx,%rax), %rdi
000000000001dbca	movq	0x1657f(%rip), %rsi     ## Objc selector ref: release
000000000001dbd1	movq	0xb828(%rip), %r14      ## Objc message: -[%rdi release]
000000000001dbd8	callq	*%r14
000000000001dbdb	movq	_OBJC_IVAR_$_UAPBoxBackgroundView._maskLayer(%rip), %rax
000000000001dbe2	movq	(%rbx,%rax), %rdi
000000000001dbe6	movq	0x16563(%rip), %rsi     ## Objc selector ref: release
000000000001dbed	callq	*%r14
000000000001dbf0	addq	$0x10, %rsp
000000000001dbf4	popq	%rbx
000000000001dbf5	popq	%r14
000000000001dbf7	popq	%rbp
000000000001dbf8	retq
000000000001dbf9	pushq	%rbp
000000000001dbfa	movq	%rsp, %rbp
000000000001dbfd	movq	_OBJC_IVAR_$_UAPCaptioningProfileTableView._didAwakeFromNib(%rip), %rax
000000000001dc04	cmpb	$0x0, (%rdi,%rax)
000000000001dc08	jne	0x1dc0e
000000000001dc0a	movb	$0x1, (%rdi,%rax)
000000000001dc0e	popq	%rbp
000000000001dc0f	retq
000000000001dc10	pushq	%rbp
000000000001dc11	movq	%rsp, %rbp
000000000001dc14	movq	_OBJC_IVAR_$_UAPCaptioningProfileTableView._editButton(%rip), %rax
000000000001dc1b	movq	(%rdi,%rax), %rax
000000000001dc1f	popq	%rbp
000000000001dc20	retq
000000000001dc21	pushq	%rbp
000000000001dc22	movq	%rsp, %rbp
000000000001dc25	pushq	%r15
000000000001dc27	pushq	%r14
000000000001dc29	pushq	%r12
000000000001dc2b	pushq	%rbx
000000000001dc2c	movq	%rdi, %rbx
000000000001dc2f	movq	0x178ca(%rip), %r14     ## Objc class ref: _OBJC_CLASS_$_NSBundle
000000000001dc36	movq	0x16483(%rip), %rsi     ## Objc selector ref: class
000000000001dc3d	movq	0xb7bc(%rip), %r12      ## Objc message: +[NSBundle class]
000000000001dc44	callq	*%r12
000000000001dc47	movq	0x1656a(%rip), %rsi     ## Objc selector ref: bundleForClass:
000000000001dc4e	movq	%r14, %rdi
000000000001dc51	movq	%rax, %rdx
000000000001dc54	callq	*%r12
000000000001dc57	movq	%rax, %r14
000000000001dc5a	xorl	%eax, %eax
000000000001dc5c	callq	0x1e90a                 ## symbol stub for: __AXInterfaceGetIncreaseContrastEnabled
000000000001dc61	testb	%al, %al
000000000001dc63	leaq	0xe0e6(%rip), %rax      ## Objc cfstring ref: @"BoxBorderHighContrast"
000000000001dc6a	leaq	0xe0ff(%rip), %rdx      ## Objc cfstring ref: @"BoxBorder"
000000000001dc71	cmovneq	%rax, %rdx
000000000001dc75	movq	0x172cc(%rip), %rsi     ## Objc selector ref: imageForResource:
000000000001dc7c	movq	%r14, %rdi
000000000001dc7f	callq	*%r12
000000000001dc82	movq	_OBJC_IVAR_$_UAPBoxMask._imageLayer(%rip), %r15
000000000001dc89	movq	(%rbx,%r15), %rdi
000000000001dc8d	movq	0x172c4(%rip), %rsi     ## Objc selector ref: setContents:
000000000001dc94	movq	%rax, %rdx
000000000001dc97	callq	*%r12
000000000001dc9a	movq	(%rbx,%r15), %r15
000000000001dc9e	movq	0x16723(%rip), %rsi     ## Objc selector ref: window
000000000001dca5	movq	%rbx, %rdi
000000000001dca8	callq	*%r12
000000000001dcab	movq	0x1734e(%rip), %rsi     ## Objc selector ref: backingScaleFactor
000000000001dcb2	movq	%rax, %rdi
000000000001dcb5	callq	*%r12
000000000001dcb8	movq	0x17349(%rip), %rsi     ## Objc selector ref: setContentsScale:
000000000001dcbf	movq	%r15, %rdi
000000000001dcc2	callq	*%r12
000000000001dcc5	movq	0x1727c(%rip), %rsi     ## Objc selector ref: imageForResource:
000000000001dccc	leaq	0xe05d(%rip), %rdx      ## Objc cfstring ref: @"BoxContentMask"
000000000001dcd3	movq	%r14, %rdi
000000000001dcd6	callq	*%r12
000000000001dcd9	movq	_OBJC_IVAR_$_UAPBoxMask._maskLayer(%rip), %r14
000000000001dce0	movq	(%rbx,%r14), %rdi
000000000001dce4	movq	0x1726d(%rip), %rsi     ## Objc selector ref: setContents:
000000000001dceb	movq	%rax, %rdx
000000000001dcee	callq	*%r12
000000000001dcf1	movq	(%rbx,%r14), %r14
000000000001dcf5	movq	0x166cc(%rip), %rsi     ## Objc selector ref: window
000000000001dcfc	movq	%rbx, %rdi
000000000001dcff	callq	*%r12
000000000001dd02	movq	0x172f7(%rip), %rsi     ## Objc selector ref: backingScaleFactor
000000000001dd09	movq	%rax, %rdi
000000000001dd0c	callq	*%r12
000000000001dd0f	movq	0x172f2(%rip), %rsi     ## Objc selector ref: setContentsScale:
000000000001dd16	movq	%r14, %rdi
000000000001dd19	movq	%r12, %rax
000000000001dd1c	popq	%rbx
000000000001dd1d	popq	%r12
000000000001dd1f	popq	%r14
000000000001dd21	popq	%r15
000000000001dd23	popq	%rbp
000000000001dd24	jmpq	*%rax
000000000001dd26	pushq	%rbp
000000000001dd27	movq	%rsp, %rbp
000000000001dd2a	movl	$0x1, %eax
000000000001dd2f	popq	%rbp
000000000001dd30	retq
000000000001dd31	pushq	%rbp
000000000001dd32	movq	%rsp, %rbp
000000000001dd35	pushq	%r15
000000000001dd37	pushq	%r14
000000000001dd39	pushq	%r13
000000000001dd3b	pushq	%r12
000000000001dd3d	pushq	%rbx
000000000001dd3e	subq	$0x88, %rsp
000000000001dd45	movq	%rdi, %rbx
000000000001dd48	movq	0x17909(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_CALayer
000000000001dd4f	movq	0x1773a(%rip), %rsi     ## Objc selector ref: new
000000000001dd56	callq	*0xb6a4(%rip)           ## Objc message: +[CALayer new]
000000000001dd5c	movq	_OBJC_IVAR_$_UAPBoxMask._imageLayer(%rip), %r14
000000000001dd63	movq	%rax, %rdi
000000000001dd66	movq	%rbx, %rsi
000000000001dd69	movq	%r14, %rdx
000000000001dd6c	callq	0x1e868                 ## symbol stub for: _objc_assign_ivar
000000000001dd71	testq	%rbx, %rbx
000000000001dd74	je	0x1dd8e
000000000001dd76	movq	0x1656b(%rip), %rdx     ## Objc selector ref: bounds
000000000001dd7d	leaq	-0x50(%rbp), %r15
000000000001dd81	movq	%r15, %rdi
000000000001dd84	movq	%rbx, %rsi
000000000001dd87	callq	0x1e892                 ## symbol stub for: _objc_msgSend_stret
000000000001dd8c	jmp	0x1dd9d
000000000001dd8e	leaq	-0x50(%rbp), %r15
000000000001dd92	xorps	%xmm0, %xmm0
000000000001dd95	movaps	%xmm0, -0x40(%rbp)
000000000001dd99	movaps	%xmm0, -0x50(%rbp)
000000000001dd9d	movq	(%rbx,%r14), %rdi
000000000001dda1	movq	0x171f8(%rip), %rsi     ## Objc selector ref: setFrame:
000000000001dda8	movq	0x18(%r15), %rax
000000000001ddac	movq	%rax, 0x18(%rsp)
000000000001ddb1	movq	0x10(%r15), %rax
000000000001ddb5	movq	%rax, 0x10(%rsp)
000000000001ddba	movq	(%r15), %rax
000000000001ddbd	movq	0x8(%r15), %rcx
000000000001ddc1	movq	%rcx, 0x8(%rsp)
000000000001ddc6	movq	%rax, (%rsp)
000000000001ddca	movq	0xb62f(%rip), %r13      ## Objc message: -[%rdi setFrame:]
000000000001ddd1	callq	*%r13
000000000001ddd4	movq	0x164fd(%rip), %rsi     ## Objc selector ref: setWantsLayer:
000000000001dddb	movl	$0x1, %edx
000000000001dde0	movq	%rbx, %rdi
000000000001dde3	callq	*%r13
000000000001dde6	movq	0x1713b(%rip), %rsi     ## Objc selector ref: layer
000000000001dded	movq	%rbx, %rdi
000000000001ddf0	callq	*%r13
000000000001ddf3	movq	(%rbx,%r14), %rdx
000000000001ddf7	movq	0x17142(%rip), %rsi     ## Objc selector ref: addSublayer:
000000000001ddfe	movq	%rax, %rdi
000000000001de01	callq	*%r13
000000000001de04	movq	0x17115(%rip), %rsi     ## Objc selector ref: setLayerContentsRedrawPolicy:
000000000001de0b	movl	$0x1, %edx
000000000001de10	movq	%rbx, %rdi
000000000001de13	callq	*%r13
000000000001de16	movq	(%rbx,%r14), %rdi
000000000001de1a	movq	0x17117(%rip), %rsi     ## Objc selector ref: setAutoresizingMask:
000000000001de21	movl	$0x12, %edx
000000000001de26	callq	*%r13
000000000001de29	movq	(%rbx,%r14), %rdi
000000000001de2d	movaps	0xa7bc(%rip), %xmm0
000000000001de34	movaps	%xmm0, -0x70(%rbp)
000000000001de38	movaps	0xa7c1(%rip), %xmm0
000000000001de3f	movaps	%xmm0, -0x60(%rbp)
000000000001de43	movq	0x17106(%rip), %rsi     ## Objc selector ref: setContentsCenter:
000000000001de4a	movq	-0x58(%rbp), %rax
000000000001de4e	movq	%rax, 0x18(%rsp)
000000000001de53	movq	-0x60(%rbp), %rax
000000000001de57	movq	%rax, 0x10(%rsp)
000000000001de5c	movq	-0x70(%rbp), %rax
000000000001de60	movq	-0x68(%rbp), %rcx
000000000001de64	movq	%rcx, 0x8(%rsp)
000000000001de69	movq	%rax, (%rsp)
000000000001de6d	callq	*%r13
000000000001de70	movq	0x177e1(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_CALayer
000000000001de77	movq	0x17612(%rip), %rsi     ## Objc selector ref: new
000000000001de7e	callq	*%r13
000000000001de81	movq	_OBJC_IVAR_$_UAPBoxMask._maskLayer(%rip), %r12
000000000001de88	movq	%rax, %rdi
000000000001de8b	movq	%rbx, %rsi
000000000001de8e	movq	%r12, %rdx
000000000001de91	callq	0x1e868                 ## symbol stub for: _objc_assign_ivar
000000000001de96	movq	(%rbx,%r12), %rdi
000000000001de9a	movq	0x170ff(%rip), %rsi     ## Objc selector ref: setFrame:
000000000001dea1	movq	0x18(%r15), %rax
000000000001dea5	movq	%rax, 0x18(%rsp)
000000000001deaa	movq	0x10(%r15), %rax
000000000001deae	movq	%rax, 0x10(%rsp)
000000000001deb3	movq	(%r15), %rax
000000000001deb6	movq	0x8(%r15), %rcx
000000000001deba	movq	%rcx, 0x8(%rsp)
000000000001debf	movq	%rax, (%rsp)
000000000001dec3	callq	*%r13
000000000001dec6	movq	(%rbx,%r12), %rdi
000000000001deca	movq	0x17067(%rip), %rsi     ## Objc selector ref: setAutoresizingMask:
000000000001ded1	movl	$0x12, %edx
000000000001ded6	callq	*%r13
000000000001ded9	movq	(%rbx,%r12), %rdi
000000000001dedd	movaps	0xa70c(%rip), %xmm0
000000000001dee4	movaps	%xmm0, -0x90(%rbp)
000000000001deeb	movaps	0xa70e(%rip), %xmm0
000000000001def2	movaps	%xmm0, -0x80(%rbp)
000000000001def6	movq	0x17053(%rip), %rsi     ## Objc selector ref: setContentsCenter:
000000000001defd	movq	-0x78(%rbp), %rax
000000000001df01	movq	%rax, 0x18(%rsp)
000000000001df06	movq	-0x80(%rbp), %rax
000000000001df0a	movq	%rax, 0x10(%rsp)
000000000001df0f	movq	-0x90(%rbp), %rax
000000000001df16	movq	-0x88(%rbp), %rcx
000000000001df1d	movq	%rcx, 0x8(%rsp)
000000000001df22	movq	%rax, (%rsp)
000000000001df26	callq	*%r13
000000000001df29	movq	(%rbx,%r14), %rdi
000000000001df2d	movq	(%rbx,%r12), %rdx
000000000001df31	movq	0x17030(%rip), %rsi     ## Objc selector ref: setMask:
000000000001df38	callq	*%r13
000000000001df3b	movq	0x1766e(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_NSDistributedNotificationCenter
000000000001df42	movq	0x163e7(%rip), %rsi     ## Objc selector ref: defaultCenter
000000000001df49	callq	*%r13
000000000001df4c	movq	0x1755d(%rip), %rcx     ## Objc selector ref: _handleHighContrastChangedNotification:
000000000001df53	movq	0xb41e(%rip), %rdx      ## literal pool symbol address: _kAXInterfaceIncreaseContrastStatusDidChangeNotification
000000000001df5a	movq	(%rdx), %r8
000000000001df5d	movq	0x167f4(%rip), %rsi     ## Objc selector ref: addObserver:selector:name:object:suspensionBehavior:
000000000001df64	movq	$0x4, (%rsp)
000000000001df6c	xorl	%r9d, %r9d
000000000001df6f	movq	%rax, %rdi
000000000001df72	movq	%rbx, %rdx
000000000001df75	callq	*%r13
000000000001df78	movq	0x17509(%rip), %rsi     ## Objc selector ref: updateLayer
000000000001df7f	movq	%rbx, %rdi
000000000001df82	callq	*%r13
000000000001df85	addq	$0x88, %rsp
000000000001df8c	popq	%rbx
000000000001df8d	popq	%r12
000000000001df8f	popq	%r13
000000000001df91	popq	%r14
000000000001df93	popq	%r15
000000000001df95	popq	%rbp
000000000001df96	retq
000000000001df97	pushq	%rbp
000000000001df98	movq	%rsp, %rbp
000000000001df9b	movq	0x174e6(%rip), %rsi     ## Objc selector ref: updateLayer
000000000001dfa2	popq	%rbp
000000000001dfa3	jmpq	*0xb457(%rip)           ## Objc message: +[NSDistributedNotificationCenter updateLayer]
000000000001dfa9	pushq	%rbp
000000000001dfaa	movq	%rsp, %rbp
000000000001dfad	xorl	%eax, %eax
000000000001dfaf	popq	%rbp
000000000001dfb0	retq
000000000001dfb1	pushq	%rbp
000000000001dfb2	movq	%rsp, %rbp
000000000001dfb5	pushq	%rbx
000000000001dfb6	subq	$0x38, %rsp
000000000001dfba	movq	%rdi, -0x18(%rbp)
000000000001dfbe	movq	0x177fb(%rip), %rax     ## Objc class ref: UAPBoxMask
000000000001dfc5	movq	%rax, -0x10(%rbp)
000000000001dfc9	movq	0x16170(%rip), %rsi     ## Objc selector ref: initWithFrame:
000000000001dfd0	movq	0x28(%rbp), %rax
000000000001dfd4	movq	%rax, 0x18(%rsp)
000000000001dfd9	movq	0x20(%rbp), %rax
000000000001dfdd	movq	%rax, 0x10(%rsp)
000000000001dfe2	movq	0x10(%rbp), %rax
000000000001dfe6	movq	0x18(%rbp), %rcx
000000000001dfea	movq	%rcx, 0x8(%rsp)
000000000001dfef	movq	%rax, (%rsp)
000000000001dff3	leaq	-0x18(%rbp), %rdi
000000000001dff7	callq	0x1e88c                 ## Objc message: -[[%rdi super] initWithFrame:]
000000000001dffc	movq	%rax, %rbx
000000000001dfff	movq	0x174a2(%rip), %rsi     ## Objc selector ref: _setup
000000000001e006	movq	%rbx, %rdi
000000000001e009	callq	*0xb3f1(%rip)           ## Objc message: -[%rdi _setup]
000000000001e00f	movq	%rbx, %rax
000000000001e012	addq	$0x38, %rsp
000000000001e016	popq	%rbx
000000000001e017	popq	%rbp
000000000001e018	retq
000000000001e019	pushq	%rbp
000000000001e01a	movq	%rsp, %rbp
000000000001e01d	pushq	%rbx
000000000001e01e	subq	$0x18, %rsp
000000000001e022	movq	%rdi, -0x18(%rbp)
000000000001e026	movq	0x17793(%rip), %rax     ## Objc class ref: UAPBoxMask
000000000001e02d	movq	%rax, -0x10(%rbp)
000000000001e031	movq	0x173d8(%rip), %rsi     ## Objc selector ref: initWithCoder:
000000000001e038	leaq	-0x18(%rbp), %rdi
000000000001e03c	callq	0x1e88c                 ## Objc message: -[[%rdi super] initWithCoder:]
000000000001e041	movq	%rax, %rbx
000000000001e044	movq	0x1745d(%rip), %rsi     ## Objc selector ref: _setup
000000000001e04b	movq	%rbx, %rdi
000000000001e04e	callq	*0xb3ac(%rip)           ## Objc message: -[%rdi _setup]
000000000001e054	movq	%rbx, %rax
000000000001e057	addq	$0x18, %rsp
000000000001e05b	popq	%rbx
000000000001e05c	popq	%rbp
000000000001e05d	retq
000000000001e05e	pushq	%rbp
000000000001e05f	movq	%rsp, %rbp
000000000001e062	pushq	%r14
000000000001e064	pushq	%rbx
000000000001e065	subq	$0x10, %rsp
000000000001e069	movq	%rdi, %rbx
000000000001e06c	movq	_OBJC_IVAR_$_UAPBoxMask._maskLayer(%rip), %rax
000000000001e073	movq	(%rbx,%rax), %rdi
000000000001e077	movq	0x160d2(%rip), %rsi     ## Objc selector ref: release
000000000001e07e	movq	0xb37b(%rip), %r14      ## Objc message: -[%rdi release]
000000000001e085	callq	*%r14
000000000001e088	movq	_OBJC_IVAR_$_UAPBoxMask._imageLayer(%rip), %rax
000000000001e08f	movq	(%rbx,%rax), %rdi
000000000001e093	movq	0x160b6(%rip), %rsi     ## Objc selector ref: release
000000000001e09a	callq	*%r14
000000000001e09d	movq	0x1750c(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_NSDistributedNotificationCenter
000000000001e0a4	movq	0x16285(%rip), %rsi     ## Objc selector ref: defaultCenter
000000000001e0ab	callq	*%r14
000000000001e0ae	movq	0xb2c3(%rip), %rcx      ## literal pool symbol address: _kAXInterfaceIncreaseContrastStatusDidChangeNotification
000000000001e0b5	movq	(%rcx), %rcx
000000000001e0b8	movq	0x16d59(%rip), %rsi     ## Objc selector ref: removeObserver:name:object:
000000000001e0bf	xorl	%r8d, %r8d
000000000001e0c2	movq	%rax, %rdi
000000000001e0c5	movq	%rbx, %rdx
000000000001e0c8	callq	*%r14
000000000001e0cb	movq	%rbx, -0x20(%rbp)
000000000001e0cf	movq	0x176ea(%rip), %rax     ## Objc class ref: UAPBoxMask
000000000001e0d6	movq	%rax, -0x18(%rbp)
000000000001e0da	movq	0x16077(%rip), %rsi     ## Objc selector ref: dealloc
000000000001e0e1	leaq	-0x20(%rbp), %rdi
000000000001e0e5	callq	0x1e88c                 ## Objc message: -[[%rdi super] dealloc]
000000000001e0ea	addq	$0x10, %rsp
000000000001e0ee	popq	%rbx
000000000001e0ef	popq	%r14
000000000001e0f1	popq	%rbp
000000000001e0f2	retq
_UAPNextContiguousStringInArray:
000000000001e0f3	pushq	%rbp
000000000001e0f4	movq	%rsp, %rbp
000000000001e0f7	pushq	%r15
000000000001e0f9	pushq	%r14
000000000001e0fb	pushq	%r13
000000000001e0fd	pushq	%r12
000000000001e0ff	pushq	%rbx
000000000001e100	pushq	%rax
000000000001e101	movq	%rdx, %r15
000000000001e104	movq	%rsi, %rbx
000000000001e107	movq	%rdi, %r14
000000000001e10a	movq	0x173a7(%rip), %rsi     ## Objc selector ref: rangeOfString:
000000000001e111	leaq	0xdc78(%rip), %rdx      ## Objc cfstring ref: @"%@"
000000000001e118	movq	%r15, %rdi
000000000001e11b	callq	*0xb2df(%rip)           ## Objc message: -[%rdi rangeOfString:]
000000000001e121	xorl	%r13d, %r13d
000000000001e124	movabsq	$0x7fffffffffffffff, %rcx ## imm = 0x7FFFFFFFFFFFFFFF
000000000001e12e	cmpq	%rcx, %rax
000000000001e131	je	0x1e1c8
000000000001e137	movq	0x15fe2(%rip), %rsi     ## Objc selector ref: containsObject:
000000000001e13e	movq	%r14, %rdi
000000000001e141	movq	%rbx, %rdx
000000000001e144	callq	*0xb2b6(%rip)           ## Objc message: -[%rdi containsObject:]
000000000001e14a	testb	%al, %al
000000000001e14c	movq	%rbx, %r13
000000000001e14f	je	0x1e1c8
000000000001e151	movl	$0x2, %r12d
000000000001e157	movq	%r15, -0x30(%rbp)
000000000001e15b	movq	%r14, %r15
000000000001e15e	movq	0xb29b(%rip), %r14      ## Objc message: -[%rdi containsObject:]
000000000001e165	movq	0x17454(%rip), %rbx     ## Objc class ref: _OBJC_CLASS_$_NSNumberFormatter
000000000001e16c	movq	0x173ed(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_NSNumber
000000000001e173	movq	%r12, %rdx
000000000001e176	leaq	0x1(%r12), %r12
000000000001e17b	movq	0x16586(%rip), %rsi     ## Objc selector ref: numberWithUnsignedInteger:
000000000001e182	callq	*%r14
000000000001e185	xorl	%ecx, %ecx
000000000001e187	movq	%rbx, %rdi
000000000001e18a	movq	0x1732f(%rip), %rsi     ## Objc selector ref: localizedStringFromNumber:numberStyle:
000000000001e191	movq	%rax, %rdx
000000000001e194	callq	*%r14
000000000001e197	movq	%rax, %rcx
000000000001e19a	movq	0x17377(%rip), %rdi     ## Objc class ref: _OBJC_CLASS_$_NSString
000000000001e1a1	xorl	%eax, %eax
000000000001e1a3	movq	0x16056(%rip), %rsi     ## Objc selector ref: stringWithFormat:
000000000001e1aa	movq	-0x30(%rbp), %rdx
000000000001e1ae	callq	*%r14
000000000001e1b1	movq	%rax, %r13
000000000001e1b4	movq	%r15, %rdi
000000000001e1b7	movq	0x15f62(%rip), %rsi     ## Objc selector ref: containsObject:
000000000001e1be	movq	%r13, %rdx
000000000001e1c1	callq	*%r14
000000000001e1c4	testb	%al, %al
000000000001e1c6	jne	0x1e165
000000000001e1c8	movq	%r13, %rax
000000000001e1cb	addq	$0x8, %rsp
000000000001e1cf	popq	%rbx
000000000001e1d0	popq	%r12
000000000001e1d2	popq	%r13
000000000001e1d4	popq	%r14
000000000001e1d6	popq	%r15
000000000001e1d8	popq	%rbp
000000000001e1d9	retq
_UAPNextNewSwitchName:
000000000001e1da	pushq	%rbp
000000000001e1db	movq	%rsp, %rbp
000000000001e1de	pushq	%r15
000000000001e1e0	pushq	%r14
000000000001e1e2	pushq	%r13
000000000001e1e4	pushq	%r12
000000000001e1e6	pushq	%rbx
000000000001e1e7	pushq	%rax
000000000001e1e8	movq	%rdi, %r14
000000000001e1eb	movq	0x1730e(%rip), %rbx     ## Objc class ref: _OBJC_CLASS_$_NSBundle
000000000001e1f2	movq	0x1730f(%rip), %rdi     ## Objc class ref: UniversalAccessPref
000000000001e1f9	movq	0x15ec0(%rip), %rsi     ## Objc selector ref: class
000000000001e200	movq	0xb1f9(%rip), %r13      ## Objc message: +[UniversalAccessPref class]
000000000001e207	callq	*%r13
000000000001e20a	movq	0x15fa7(%rip), %rsi     ## Objc selector ref: bundleForClass:
000000000001e211	movq	%rbx, %rdi
000000000001e214	movq	%rax, %rdx
000000000001e217	callq	*%r13
000000000001e21a	movq	0x15f9f(%rip), %rsi     ## Objc selector ref: localizedStringForKey:value:table:
000000000001e221	leaq	0xc948(%rip), %rdx      ## Objc cfstring ref: @"switch.generic_title"
000000000001e228	leaq	0xbee1(%rip), %r15      ## Objc cfstring ref: @""
000000000001e22f	xorl	%r8d, %r8d
000000000001e232	movq	%rax, %rdi
000000000001e235	movq	%r15, %rcx
000000000001e238	callq	*%r13
000000000001e23b	movq	%rax, %r12
000000000001e23e	movq	0x172bb(%rip), %rbx     ## Objc class ref: _OBJC_CLASS_$_NSBundle
000000000001e245	movq	0x172bc(%rip), %rdi     ## Objc class ref: UniversalAccessPref
000000000001e24c	movq	0x15e6d(%rip), %rsi     ## Objc selector ref: class
000000000001e253	callq	*%r13
000000000001e256	movq	0x15f5b(%rip), %rsi     ## Objc selector ref: bundleForClass:
000000000001e25d	movq	%rbx, %rdi
000000000001e260	movq	%rax, %rdx
000000000001e263	callq	*%r13
000000000001e266	movq	0x15f53(%rip), %rsi     ## Objc selector ref: localizedStringForKey:value:table:
000000000001e26d	leaq	0xdb3c(%rip), %rdx      ## Objc cfstring ref: @"switch.generic_title.formatter"
000000000001e274	xorl	%r8d, %r8d
000000000001e277	movq	%rax, %rdi
000000000001e27a	movq	%r15, %rcx
000000000001e27d	callq	*%r13
000000000001e280	movq	%r14, %rdi
000000000001e283	movq	%r12, %rsi
000000000001e286	movq	%rax, %rdx
000000000001e289	addq	$0x8, %rsp
000000000001e28d	popq	%rbx
000000000001e28e	popq	%r12
000000000001e290	popq	%r13
000000000001e292	popq	%r14
000000000001e294	popq	%r15
000000000001e296	popq	%rbp
000000000001e297	jmp	_UAPNextContiguousStringInArray
_UAPCapitalizeFirstWordOfString:
000000000001e29c	pushq	%rbp
000000000001e29d	movq	%rsp, %rbp
000000000001e2a0	pushq	%r15
000000000001e2a2	pushq	%r14
000000000001e2a4	pushq	%r13
000000000001e2a6	pushq	%r12
000000000001e2a8	pushq	%rbx
000000000001e2a9	subq	$0x18, %rsp
000000000001e2ad	movq	%rdi, %rbx
000000000001e2b0	xorl	%eax, %eax
000000000001e2b2	testq	%rbx, %rbx
000000000001e2b5	je	0x1e3b0
000000000001e2bb	movq	0x15e66(%rip), %rsi     ## Objc selector ref: length
000000000001e2c2	movq	%rbx, %rdi
000000000001e2c5	callq	*0xb135(%rip)           ## Objc message: +[UniversalAccessPref length]
000000000001e2cb	movq	%rax, %r15
000000000001e2ce	callq	0x1e52c                 ## symbol stub for: _CFLocaleCopyCurrent
000000000001e2d3	movq	%rax, %r14
000000000001e2d6	testq	%r14, %r14
000000000001e2d9	je	0x1e3ad
000000000001e2df	xorl	%edi, %edi
000000000001e2e1	xorl	%edx, %edx
000000000001e2e3	xorl	%r8d, %r8d
000000000001e2e6	movq	%rbx, %rsi
000000000001e2e9	movq	%r15, %rcx
000000000001e2ec	movq	%r14, %r9
000000000001e2ef	callq	0x1e57a                 ## symbol stub for: _CFStringTokenizerCreate
000000000001e2f4	movq	%rax, %r15
000000000001e2f7	testq	%r15, %r15
000000000001e2fa	je	0x1e3a5
000000000001e300	movq	%r15, %rdi
000000000001e303	callq	0x1e574                 ## symbol stub for: _CFStringTokenizerAdvanceToNextToken
000000000001e308	testq	%rax, %rax
000000000001e30b	je	0x1e39d
000000000001e311	movq	%r15, %rdi
000000000001e314	callq	0x1e580                 ## symbol stub for: _CFStringTokenizerGetCurrentTokenRange
000000000001e319	movq	%rdx, %r12
000000000001e31c	testq	%r12, %r12
000000000001e31f	jle	0x1e39d
000000000001e321	movq	0x171a0(%rip), %rsi     ## Objc selector ref: substringWithRange:
000000000001e328	movq	0xb0d1(%rip), %r13      ## Objc message: -[%rdi substringWithRange:]
000000000001e32f	movq	%rbx, %rdi
000000000001e332	movq	%rax, %rdx
000000000001e335	movq	%rax, -0x30(%rbp)
000000000001e339	movq	%r12, %rcx
000000000001e33c	callq	*%r13
000000000001e33f	movq	0x1718a(%rip), %rsi     ## Objc selector ref: capitalizedString
000000000001e346	movq	%rax, %rdi
000000000001e349	callq	*%r13
000000000001e34c	movq	%rax, -0x38(%rbp)
000000000001e350	movq	0x15dd1(%rip), %rsi     ## Objc selector ref: length
000000000001e357	movq	%rax, %rdi
000000000001e35a	callq	*%r13
000000000001e35d	movq	%r13, %rcx
000000000001e360	testq	%rax, %rax
000000000001e363	je	0x1e39d
000000000001e365	movq	0x15fec(%rip), %rsi     ## Objc selector ref: mutableCopy
000000000001e36c	movq	%rbx, %rdi
000000000001e36f	movq	%rcx, %r13
000000000001e372	callq	*%r13
000000000001e375	movq	0x15d8c(%rip), %rsi     ## Objc selector ref: autorelease
000000000001e37c	movq	%rax, %rdi
000000000001e37f	callq	*%r13
000000000001e382	movq	%rax, %rbx
000000000001e385	movq	0x1714c(%rip), %rsi     ## Objc selector ref: replaceCharactersInRange:withString:
000000000001e38c	movq	%rbx, %rdi
000000000001e38f	movq	-0x30(%rbp), %rdx
000000000001e393	movq	%r12, %rcx
000000000001e396	movq	-0x38(%rbp), %r8
000000000001e39a	callq	*%r13
000000000001e39d	movq	%r15, %rdi
000000000001e3a0	callq	0x1e562                 ## symbol stub for: _CFRelease
000000000001e3a5	movq	%r14, %rdi
000000000001e3a8	callq	0x1e562                 ## symbol stub for: _CFRelease
000000000001e3ad	movq	%rbx, %rax
000000000001e3b0	addq	$0x18, %rsp
000000000001e3b4	popq	%rbx
000000000001e3b5	popq	%r12
000000000001e3b7	popq	%r13
000000000001e3b9	popq	%r14
000000000001e3bb	popq	%r15
000000000001e3bd	popq	%rbp
000000000001e3be	retq
_UAPIsKeyAllowedInSecureInput:
000000000001e3bf	pushq	%rbp
000000000001e3c0	movq	%rsp, %rbp
000000000001e3c3	movb	$0x1, %al
000000000001e3c5	cmpq	$0x5f, %rdi
000000000001e3c9	jg	0x1e3dd
000000000001e3cb	cmpq	$0x35, %rdi
000000000001e3cf	ja	0x1e3f2
000000000001e3d1	movabsq	$0x2b001000000000, %rcx ## imm = 0x2B001000000000
000000000001e3db	jmp	0x1e3ec
000000000001e3dd	addq	$-0x60, %rdi
000000000001e3e1	cmpq	$0x1e, %rdi
000000000001e3e5	ja	0x1e3f2
000000000001e3e7	movl	$0x7d42aabf, %ecx       ## imm = 0x7D42AABF
000000000001e3ec	btq	%rdi, %rcx
000000000001e3f0	jb	0x1e3f4
000000000001e3f2	xorl	%eax, %eax
000000000001e3f4	movzbl	%al, %eax
000000000001e3f7	popq	%rbp
000000000001e3f8	retq
